{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///(webpack)/buildin/amd-options.js","webpack:///./output/Data.Unit/index.js","webpack:///./node_modules/fluture/index.js","webpack:///./node_modules/sanctuary-show/index.js","webpack:///./output/Data.Symbol/index.js","webpack:///./output/Data.Semiring/index.js","webpack:///./output/Record.Unsafe/index.js","webpack:///./output/Type.Data.RowList/index.js","webpack:///./output/Data.Ring/index.js","webpack:///./node_modules/sanctuary-type-identifiers/index.js","webpack:///./output/Data.Eq/index.js","webpack:///./output/Data.Ordering/index.js","webpack:///./output/Data.Functor/index.js","webpack:///./node_modules/sanctuary-either/index.js","webpack:///./node_modules/util/util.js","webpack:///./output/Data.Show/index.js","webpack:///./output/Control.Apply/index.js","webpack:///./output/Control.Category/index.js","webpack:///./output/Data.Function/index.js","webpack:///./output/Data.Ord/index.js","webpack:///./output/Data.HeytingAlgebra/index.js","webpack:///./output/Data.Void/index.js","webpack:///./output/Data.EuclideanRing/index.js","webpack:///./node_modules/sanctuary/index.js","webpack:///./node_modules/process/browser.js","webpack:///./output/Control.Applicative/index.js","webpack:///./output/Control.Semigroupoid/index.js","webpack:///./output/Data.Boolean/index.js","webpack:///./output/Data.Semigroup/index.js","webpack:///./output/Data.CommutativeRing/index.js","webpack:///./node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/sanctuary-type-classes/node_modules/sanctuary-type-identifiers/index.js","webpack:///./node_modules/sanctuary-def/index.js","webpack:///./node_modules/sanctuary-either/node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/sanctuary-either/node_modules/sanctuary-type-identifiers/index.js","webpack:///./node_modules/sanctuary-def/node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/sanctuary-def/node_modules/sanctuary-type-classes/node_modules/sanctuary-type-identifiers/index.js","webpack:///./node_modules/sanctuary-maybe/index.js","webpack:///./node_modules/sanctuary-maybe/node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/sanctuary-maybe/node_modules/sanctuary-type-identifiers/index.js","webpack:///./node_modules/sanctuary-pair/index.js","webpack:///./node_modules/sanctuary-pair/node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/sanctuary-pair/node_modules/sanctuary-type-identifiers/index.js","webpack:///./node_modules/sanctuary/node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/sanctuary/node_modules/sanctuary-type-classes/node_modules/sanctuary-type-identifiers/index.js","webpack:///./src/app/io/types/Worker-Types.ts","webpack:///./output/Type.Data.Row/index.js","webpack:///./output/Control.Bind/index.js","webpack:///./output/Data.BooleanAlgebra/index.js","webpack:///./output/Data.DivisionRing/index.js","webpack:///./src/app/Worker.ts","webpack:///./node_modules/denque/index.js","webpack:///./node_modules/concurrify/index.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/util/support/isBufferBrowser.js","webpack:///./node_modules/inherits/inherits_browser.js","webpack:///./src/app/io/utils/Utils.ts","webpack:///./src/app/io/utils/flags/Flags.ts","webpack:///./src/app/io/utils/worker/Worker-Loader.ts","webpack:///./src/app/io/utils/datatypes/Maybe.ts","webpack:///./output/Main/index.js","webpack:///./output/Data.Semiring/foreign.js","webpack:///./output/Data.Symbol/foreign.js","webpack:///./output/Data.Unit/foreign.js","webpack:///./output/Data.Show/foreign.js","webpack:///./output/Record.Unsafe/foreign.js","webpack:///./output/Prelude/index.js","webpack:///./output/Control.Apply/foreign.js","webpack:///./output/Data.Ord/foreign.js","webpack:///./output/Data.Eq/foreign.js","webpack:///./output/Data.HeytingAlgebra/foreign.js","webpack:///./output/Data.Ord.Unsafe/index.js","webpack:///./output/Data.Ord.Unsafe/foreign.js","webpack:///./output/Data.Semigroup/foreign.js","webpack:///./output/Data.Ring/foreign.js","webpack:///./output/Data.Functor/foreign.js","webpack:///./output/Control.Bind/foreign.js","webpack:///./output/Control.Monad/index.js","webpack:///./output/Data.Bounded/index.js","webpack:///./output/Data.Bounded/foreign.js","webpack:///./output/Data.EuclideanRing/foreign.js","webpack:///./output/Data.Field/index.js","webpack:///./output/Data.Monoid/index.js","webpack:///./output/Data.NaturalTransformation/index.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/common.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat4.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec4.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/quat.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec2.js","webpack:///./node_modules/pure3d/dist/lib.esm.js","webpack:///./node_modules/fluture-loaders/dist/lib.esm.js","webpack:///./node_modules/infestines/dist/infestines.es.js","webpack:///./node_modules/partial.lenses/dist/partial.lenses.es.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","__webpack_amd_options__","$foreign","showUnit","Show","v","unit","show","type","Denque","Z","concurrify","noop","moop","this","showf","f","sf","replace","partial1","a","b","arguments","length","partial2","partial3","raise","x","indent","FL","ordinal","namespace","version","$$type","error","message","Error","typeError","TypeError","invalidArgument","it","at","expected","actual","invalidFuture","id","parse","info","throwInvalidArgument","throwInvalidContext","throwInvalidFuture","isFunction","isThenable","Promise","Boolean","then","isUnsigned","Infinity","isObject","nil","head","cons","tail","interpretSequence","seq","rec","rej","res","future","action","settled","queue","cancel","stack","async","pushStack","popStack","settle","_spawn","_actions","unshift","shift","_interpret","exception","rejected","resolved","warmupActions","early","terminator","clear","Sequence$cancel","e","pop","run","Future$value$rej","Future$onCrash","name$$1","_","split","map","join","Future","computation","Computation","isFuture","toString","other","_ap","mapper","_map","lmapper","rmapper","_bimap","_chain","ap","bimap","chain","mapRej","_mapRej","chainRej","_chainRej","race","_race","both","_both","and","_and","or","_or","swap","_swap","fold","_fold","finally","_finally","lastly","fork","forkCatch","done","callback","promise","_this","isRejected","isResolved","isSettled","extractLeft","extractRight","Core","_computation","Rejected","_value","reject","Resolved","of","Never","_isNever","Sequence","_parallelAp","open","cont","left","right","never","isNever","Crashed","error$$1","_error","Eager","crashed","Action","ApAction","MapAction","BimapAction","ChainAction","MapRejAction","ChainRejAction","SwapAction","FoldAction","FinallyAction","AndAction","OrAction","ParallelApAction","RaceAction","BothAction","ParallelApActionState","RaceActionState","BothActionState","spawn","actions","Next","Done","isIteration","y","_transform","str","Undetermined","Synchronous","Asynchronous","ChainRec","step","init","_step","_init","ap$mval","mval","mfunc","Apply","test","alt$left","Alt","alt","map$mapper","Functor","bimap$lmapper$rmapper","Bifunctor","bimap$lmapper","chain$chainer","chainer","Chain","mapRej$mapper","chainRej$chainer","lastly$right","and$left","both$left","or$left","race$right","fold$f$g","g","fold$f","done$callback","fork$f$g","fork$f","value$cont","After$race","_time","After","time","RejectAfter","after$time","rejectAfter$time","reason","Attempt","fn","_fn","attempt","timing","state","drain","setTimeout","clearTimeout","Cold","Cached","Pending","Crashed$1","Rejected$1","Resolved$1","pure","_pure","reset","Encase","_a","Encase2","_b","Encase3","_c","EncaseN","EncaseN2","EncaseN3","EncaseP","EncaseP2","EncaseP3","invalidIteration","invalidState","Go","generator","_generator","go","Hook","acquire","dispose","consume","_acquire","_dispose","_consume","hook$acquire$cleanup","cleanup","hook$acquire","Node","Parallel","max","futures","_futures","_length","_max","Math","min","_state","_addToQueue","_queue","push","_queued","_drainQueue","crash","resolve","_cancel","err","val","iterator","next","resource","cancelConsume","Hook$done","Hook$reject","Hook$consumptionException","rec_","Hook$dispose","disposal","Hook$cancelDisposal","Hook$cancelConsumption","Hook$consumptionRejected","Hook$consumptionResolved","cancelAcquire","consumption","cancels","Array","out","cursor","running","blocked","Parallel$cancel","Parallel$run","idx","Parallel$drain","emptyArray","validateNthFuture","parallel$max","xs","isArray","TryP","chainRec","Par","isParallel","zero","Fluture","freeze","par","sequential","after","rejectAfter","try","cache","encase","encase2","encase3","z","encaseN","encaseN2","encaseN3","encaseP","encaseP2","encaseP3","do","hook","node","parallel","tryP","h","assign","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","apply","self","sanctuaryShow","$$show","seen","entry","k","indexOf","valueOf","JSON","stringify","isNaN","NaN","toISOString","concat","keys","sort","filter","constructor","String","SProxy","IsSymbol","reflectSymbol","dict","reifySymbol","unsafeCoerce","dictIsSymbol","Data_Symbol","Data_Unit","Record_Unsafe","Type_Data_Row","Type_Data_RowList","Semiring","add","mul","one","SemiringRecord","addRecord","mulRecord","oneRecord","zeroRecord","semiringUnit","v1","semiringRecordNil","v2","semiringNumber","numAdd","numMul","semiringInt","intAdd","intMul","semiringFn","dictSemiring","semiringRecord","dictRowToList","dictSemiringRecord","RLProxy","RProxy","semiringRecordCons","dictCons","ra","rb","insert","unsafeSet","unsafeGet","unsafeHas","unsafeDelete","Data_Semiring","Ring","Semiring0","sub","RingRecord","SemiringRecord0","subRecord","ringUnit","ringRecordNil","ringNumber","numSub","ringInt","intSub","negate","dictRing","ringFn","ringRecord","dictRingRecord","ringRecordCons","sanctuaryTypeIdentifiers","pattern","RegExp","slice","groups","exec","Number","Eq","eq","Eq1","eq1","EqRecord","eqRecord","eqVoid","eqUnit","eqString","refEq","eqRowNil","eqNumber","eqInt","eqChar","eqBoolean","eqArray","dictEq","eqArrayImpl","eq1Array","notEq","notEq1","dictEq1","eqRec","dictEqRecord","eqRowCons","Data_Eq","Data_Semigroup","Data_Show","LT","GT","EQ","showOrdering","semigroupOrdering","Semigroup","eqOrdering","invert","Control_Semigroupoid","Data_Function","functorFn","compose","semigroupoidFn","functorArray","arrayMap","mapFlipped","dictFunctor","fa","void","const","voidRight","voidLeft","flap","ff","sanctuaryEither","sanctuaryTypeClasses","__doctest","$","require","S","EitherType","BinaryType","Either","isLeft","env","TypeClass","Unknown","checkTypes","Left$prototype","isRight","@@show","Left$prototype$show","fantasy-land/map","fantasy-land/bimap","Left","fantasy-land/ap","fantasy-land/chain","fantasy-land/alt","fantasy-land/reduce","fantasy-land/traverse","typeRep","fantasy-land/extend","Right$prototype","Right$prototype$show","Right","util","inspect","custom","Setoid","Left$prototype$equals","Ord","Left$prototype$lte","Left$prototype$concat","Right$prototype$equals","Right$prototype$lte","Right$prototype$concat","tag","equals","lte","either","global","process","formatRegExp","format","isString","objects","args","len","isNull","deprecate","msg","isUndefined","noDeprecation","warned","throwDeprecation","traceDeprecation","console","trace","debugEnviron","debugs","obj","opts","ctx","stylize","stylizeNoColor","depth","colors","isBoolean","showHidden","_extend","customInspect","stylizeWithColor","formatValue","styleType","style","styles","recurseTimes","ret","primitive","simple","isNumber","visibleKeys","array","hash","forEach","getOwnPropertyNames","isError","formatError","isRegExp","isDate","Date","output","base","braces","toUTCString","formatProperty","match","reduce","prev","cur","desc","getOwnPropertyDescriptor","set","line","substr","ar","arg","re","objectToString","pad","debuglog","NODE_ENV","BROADCAST","BUILD_VERSION","NODE_DEBUG","toUpperCase","pid","bold","italic","underline","inverse","white","grey","black","blue","cyan","green","magenta","red","yellow","special","number","boolean","undefined","null","string","date","regexp","isNullOrUndefined","isSymbol","isPrimitive","isBuffer","months","prop","log","getHours","getMinutes","getSeconds","getDate","getMonth","inherits","origin","ShowRecordFields","showRecordFields","showString","showStringImpl","showRecordFieldsNil","showNumber","showNumberImpl","showInt","showIntImpl","showChar","showCharImpl","showBoolean","showArray","dictShow","showArrayImpl","showRecord","dictShowRecordFields","record","showRecordFieldsCons","focus","Control_Category","Data_Functor","Functor0","applyFn","applyArray","arrayApply","applyFirst","dictApply","applySecond","identity","categoryFn","lift2","lift3","lift4","lift5","Category","Semigroupoid0","Data_Boolean","flip","applyFlipped","applyN","$copy_n","$copy_acc","$tco_result","$tco_var_n","$tco_done","$tco_loop","acc","otherwise","on","Data_Ord_Unsafe","Data_Ordering","Data_Ring","Eq0","compare","Ord1","Eq10","compare1","ordVoid","ordUnit","ordString","unsafeCompare","ordOrdering","ordNumber","ordInt","ordChar","ordBoolean","greaterThan","dictOrd","a1","a2","greaterThanOrEq","lessThan","ordArray","toDelta","ys","ordArrayImpl","ord1Array","lessThanOrEq","comparing","clamp","low","hi","between","abs","signum","HeytingAlgebra","conj","disj","implies","not","tt","HeytingAlgebraRecord","conjRecord","disjRecord","ffRecord","impliesRecord","notRecord","ttRecord","heytingAlgebraUnit","heytingAlgebraRecordNil","heytingAlgebraBoolean","boolConj","boolDisj","boolNot","heytingAlgebraFunction","dictHeytingAlgebra","heytingAlgebraRecord","dictHeytingAlgebraRecord","heytingAlgebraRecordCons","row","absurd","$copy_v","showVoid","Data_CommutativeRing","EuclideanRing","CommutativeRing0","degree","div","mod","gcd","$copy_dictEq","$copy_dictEuclideanRing","$copy_a","$copy_b","$tco_var_dictEq","$tco_var_dictEuclideanRing","$tco_var_a","dictEuclideanRing","Ring0","euclideanRingNumber","commutativeRingNumber","numDiv","euclideanRingInt","commutativeRingInt","intDegree","intDiv","intMod","lcm","sanctuary","sanctuaryDef","sanctuaryMaybe","sanctuaryPair","Maybe","Pair","Descending","Sum","Nil","Cons","DescendingType","UnaryType","typeEq","B","extract","Type","Nothing","Just","C","Fn","Function","get_","toObject","invoke0","target","invoke1","typeIdent","TypeVariable","UnaryTypeVariable","w","BinaryTypeVariable","$Either","K","$Maybe","maybe","$Pair","pair","fst","snd","TypeRep","AnyFunction","_test","Options","RecordType","Any","def","is","MaybeType","PairType","consts","types","impl","unchecked","pred","filterable","functor","initial","foldable","I","T","curry2","curry3","curry4","isJust","toMaybe","maybe_","thunk","justs","maybes","eitherToMaybe","encaseEither","encaseEither2","encaseEither3","ifElse","unfoldr","result","zipWith","singleton","strMap","mult","requiredNonCapturingGroup","NonNegativeInteger","lt","gt","gte","empty","Monoid","Group","Filterable","Predicate","takeWhile","dropWhile","mapLeft","promap","Profunctor","Plus","Foldable","traverse","Applicative","Traversable","sequence","apFirst","apSecond","extend","Extend","duplicate","Comonad","contramap","Contravariant","curry5","Semigroupoid","pipe","fs","pipeK","isNothing","fromMaybe","fromMaybe_","Thunk","maybeToNullable","Nullable","mapMaybe","maybeToEither","fromEither","toEither","lefts","rights","tagBy","complement","when","unless","allPass","preds","anyPass","Integer","start","end","fromIdx","toIdx","last","take","takeLast","drop","dropLast","size","append","prepend","joinWith","elem","find","foldMap","range","from","to","groupBy","x0","active","reverse","sortBy","zip","props","path","gets","StrMap","remove","values","pairs","fromPairs","ValidNumber","FiniteNumber","sum","product","NonZeroFiniteNumber","pow","exp","mean","total","count","even","odd","parseDate","ValidDate","validFloatRepr","parseFloat","Radix","NullaryType","parseInt","radix","charset","parseJson","Match","toMatch","ss","withRegex","lastIndex","regex","RegexFlags","flags","source","regexEscape","NonGlobalRegExp","matchAll","GlobalRegExp","toUpper","toLower","trim","stripPrefix","prefix","stripSuffix","suffix","words","unwords","lines","unlines","splitOn","splitOnRegex","index","Array2","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","marker","Item","nextTick","title","browser","argv","versions","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","Control_Apply","Apply0","applicativeFn","applicativeArray","liftA1","dictApplicative","composeFlipped","dictSemigroupoid","Data_Void","SemigroupRecord","appendRecord","semigroupVoid","semigroupUnit","semigroupString","concatString","semigroupRecordNil","semigroupArray","concatArray","semigroupFn","dictSemigroup","semigroupRecord","dictSemigroupRecord","semigroupRecordCons","CommutativeRing","CommutativeRingRecord","RingRecord0","commutativeRingUnit","commutativeRingRecordNil","commutativeRingFn","dictCommutativeRing","commutativeRingRecord","dictCommutativeRingRecord","commutativeRingRecordCons","List","concat_","constant","forEachKey","has","sameType","iterationNext","iterationDone","url","dependencies","every","Constructor","Value","_funcPath","allowInheritedProps","_x","funcPath","implPath","implementations","functionName","_name","requirements","getBoundMethod","typeClass","methods","Monad","Alternative","Array$of","Array$prototype$equals","Array$prototype$lte","Array$prototype$concat","Object$prototype$concat","Null","fantasy-land/equals","fantasy-land/lte","Undefined","ignoreCase","multiline","sticky","unicode","fantasy-land/empty","fantasy-land/concat","fantasy-land/of","fantasy-land/chainRec","todo","more","steps","fantasy-land/zero","fantasy-land/filter","idx2","floor","Arguments","theseKeys","otherKeys","applicative","fantasy-land/id","fantasy-land/compose","semigroupoid","fantasy-land/promap","profunctor","fantasy-land/contramap","contravariant","$pairs","some","bifunctor","applyF","applyX","chain_","rs","fx","lte_","F","traversable","extend_","group","monoid","comonad","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","always2","isEmpty","isPrefix","candidate","separator","memberOf","strRepeat","times","sortedKeys","stripOutermostParens","toMarkdownList","trimTrailingSpaces","bool","wrap","parenthesize","q","stripNamespace","_Type","validate","propPath","extractor","BINARY","FUNCTION","INCONSISTENT","NO_ARGUMENTS","NULLARY","RECORD","UNARY","UNKNOWN","VARIABLE","Inconsistent","NoArguments","typeofEq","typeof_","functionUrl","NullaryTypeWithUrl","UnaryTypeWithUrl","_1","Array_","Array0","Array1","_2","array2","Boolean_","Date_","Error_","isFinite","augmentThunk","Function_","_types","$keys","$types","outer","inner","RegExp_","HtmlElement","NegativeFiniteNumber","NegativeInteger","NegativeNumber","Number_","NonEmpty","NonZeroInteger","NonZeroValidNumber","nullable","Object_","PositiveFiniteNumber","PositiveInteger","PositiveNumber","members","EnumType","String_","Symbol_","Unchecked","_create","numbers","numArgs","expandUnknown","_determineActualTypes","seen$","fromUnaryType","$1","xprod","$2","isConsistent","determineActualTypesLoose","updateTypeVarMap","typeVarMap","typeVar","$typeVarMap","typeVarName","$entry","valuesByPath","isNullaryTypeVar","isValid","expandUnknownStrict","satisfactoryTypes","typeInfo","expType","recur","invalidValue","constraints","typeClasses","typeClassConstraintViolation","typeVarMap$","okTypes","typeVarConstraintViolation","offset","$1s","$2s","CheckedNullaryType","CheckedUnaryType","CheckedBinaryType","specialize","CheckedEnumType","fields","reprs","missing","CheckedRecordType","CheckedTypeVariable","CheckedUnaryTypeVariable","CheckedBinaryTypeVariable","invalidArgumentsCount","numArgsExpected","index_","constraintsRepr","$reprs","typeVarNames","showTypeWith","names","code","charCodeAt","fromCharCode","showTypeQuoted","showValuesAndTypes","pos","showType","typeSignature","arity","_underline","formatType3","underlineConstraint","formatType5","st","formatType4","label","delta","ceil","counter","carets","repr","parenthesized","resolvePropPath","formatType6","indexedPropPath","propPath_","indexedPropPath_","see","tvn","tc","values_","underlinedTypeVars","paths","$valuesByPath","assertRight","withTypeChecking","wrapFunctionCond","_typeVarMap","checkValue","wrapped","wrapNext","_values","expTypes","fromUncheckedUnaryType","typeConstructor","Nothing$prototype","Nothing$prototype$show","Just$prototype","Just$prototype$show","just","Just$prototype$equals","Just$prototype$lte","Just$prototype$concat","Pair$prototype$show","fantasy-land/extract","Pair$prototype$equals","Pair$prototype$lte","Pair$prototype$concat","Pair$prototype$ap","Pair$prototype$chain","MESSAGE","WorkerLoaderCommand","INIT","READY","WorkerCommand","SCENE_PING","SCENE_PONG","TICK","RENDER","Bind","Discard","discard","bindFn","bindArray","arrayBind","bindFlipped","dictBind","discardUnit","composeKleisli","composeKleisliFlipped","ifM","cond","cond$prime","Data_HeytingAlgebra","BooleanAlgebra","HeytingAlgebra0","BooleanAlgebraRecord","HeytingAlgebraRecord0","booleanAlgebraUnit","booleanAlgebraRecordNil","booleanAlgebraBoolean","booleanAlgebraFn","dictBooleanAlgebra","booleanAlgebraRecord","dictBooleanAlgebraRecord","booleanAlgebraRecordCons","DivisionRing","recip","divisionringNumber","leftDiv","dictDivisionRing","rightDiv","pure3d_1","Utils_1","Worker_Types_1","index_1","L","initWorker","worker","lastTs","scene","updateSceneForRenderer","lightLens","direction","addEventListener","data","cmd","gltf_updateScene","gltf_createAnimator","animations","loop","nodes","findIndex","setInterval","postMessage","amt","frameTs","modify","move","_head","_tail","_capacityMask","_list","_fromArray","peekAt","peek","peekFront","peekBack","item","_growArray","_shrinkArray","removeOne","removed","del_count","toArray","splice","temp","arg_len","arguments_index","leng","_copyArray","fullCopy","newArray","list","isBinary","invalidContext","an","Repr","INNERTYPE","OUTERTYPE","identifier","INNERNAME","OUTERNAME","Concurrently","isInner","isOuter","construct","proto","mzero","eval","window","copy","fill","readUInt8","ctor","superCtor","super_","writable","configurable","TempCtor","__export","getCompileFlags","buildMode","buildVersion","isProduction","fluture_1","loadWorker","onInitial","removeEventListener","nothingFn","justFn","value0","getMaybeValue","n1","n2","j","xlen","ylen","r1","r2","b1","b2","unsafeCompareImpl","s1","s2","arr","Control_Applicative","Control_Bind","Applicative0","Bind1","monadFn","monadArray","liftM1","dictMonad","whenM","mb","unlessM","Data_Ord","Bounded","Ord0","bottom","top","boundedUnit","boundedOrdering","boundedNumber","bottomNumber","topNumber","boundedInt","bottomInt","topInt","boundedChar","bottomChar","topChar","boundedBoolean","POSITIVE_INFINITY","NEGATIVE_INFINITY","yy","Field","DivisionRing1","EuclideanRing0","field","Data_EuclideanRing","Semigroup0","mempty","MonoidRecord","SemigroupRecord0","memptyRecord","monoidUnit","monoidString","monoidRecordNil","monoidOrdering","monoidArray","power","dictMonoid","x$prime","guard","monoidFn","monoidRecord","dictMonoidRecord","monoidRecordCons","EPSILON","ARRAY_TYPE","Float32Array","RANDOM","random","clone","fromValues","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","transpose","a01","a02","a03","a12","a13","a23","a00","a10","a11","a20","a21","a22","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","det","adjoint","determinant","multiply","b0","b3","translate","mat4_scale","rotate","rad","axis","b12","b20","b21","b22","sqrt","sin","cos","rotateX","rotateY","rotateZ","fromTranslation","fromScaling","fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","x2","y2","z2","xx","xy","xz","yz","zz","wx","wy","wz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","fromQuat","yx","zx","zy","frustum","near","far","rl","tb","nf","perspective","fovy","aspect","tan","perspectiveFromFieldOfView","fov","upTan","upDegrees","PI","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","frob","subtract","multiplyScalar","multiplyScalarAndAdd","scale","exactEquals","mat4_equals","a0","a3","a4","a5","a6","a7","a8","a9","a14","a15","b4","b5","b6","b7","b8","b9","b13","b14","b15","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","normalize","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","dist","sqrDist","vec3_len","sqrLen","vec","stride","vec4_create","vec4_clone","vec4_fromValues","vec4_copy","vec4_set","vec4_add","vec4_subtract","vec4_multiply","vec4_divide","vec4_ceil","vec4_floor","vec4_min","vec4_max","vec4_round","vec4_scale","vec4_scaleAndAdd","vec4_distance","vec4_squaredDistance","vec4_length","vec4_squaredLength","vec4_negate","vec4_inverse","vec4_normalize","vec4_dot","vec4_lerp","vec4_random","v3","v4","vec4_transformMat4","vec4_transformQuat","ix","iy","iz","iw","vec4_str","vec4_exactEquals","vec4_equals","vec4_sub","vec4_mul","vec4_div","vec4_dist","vec4_sqrDist","vec4_len","vec4_sqrLen","vec4_forEach","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fRoot","fTrace","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","view","vec2_create","vec2_clone","vec2_fromValues","vec2_copy","vec2_set","vec2_add","vec2_subtract","vec2_multiply","vec2_divide","vec2_ceil","vec2_floor","vec2_min","vec2_max","vec2_round","vec2_scale","vec2_scaleAndAdd","vec2_distance","vec2_squaredDistance","vec2_length","vec2_squaredLength","vec2_negate","vec2_inverse","vec2_normalize","vec2_dot","vec2_cross","vec2_lerp","vec2_random","transformMat2","transformMat2d","vec2_transformMat3","vec2_transformMat4","vec2_rotate","p0","p1","sinC","cosC","vec2_angle","len1","len2","vec2_str","vec2_exactEquals","vec2_equals","vec2_len","vec2_sub","vec2_mul","vec2_div","vec2_dist","vec2_sqrDist","vec2_sqrLen","vec2_forEach","GltfAnimationTargetPath","GltfAnimationInterpolation","GltfMaterialAlphaMode","GltfNodeKind","GltfPrimitiveDrawKind","isNil","fetchImage","crossOrigin","fluture","img","Image","src","URL","webkitURL","location","sameOrigin","__assign","fletch","endpoint","options","method","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","status","query","requestType","encodeURIComponent","responseType","withCredentials","headers","setRequestHeader","send","abort","XhrLoader","response","_fetchOverride","_fetchUrlOverride","fetchArrayBufferUrl","fetchJsonUrl","BlobLoader","read","blob","fileReader","FileReader","onload","onerror","readAsArrayBuffer","readAsDataURL","readAsText","TRANSLATION","ROTATION","SCALE","WEIGHTS","LINEAR","STEP","CUBICSPLINE","OPAQUE","MASK","BLEND","MESH","SKIN","ELEMENTS","ARRAY","GltfIblExtensionName","GltfLightsExtensionName","GltfLights_MAX","GltfUnlitExtensionName","CameraKind","NodeKind","LightKind","WebGlConstants","PERSPECTIVE","ORTHOGRAPHIC","CAMERA","LIGHT","Directional","Point","Spot","ACTIVE_ATTRIBUTES","ACTIVE_ATTRIBUTE_MAX_LENGTH","ACTIVE_TEXTURE","ACTIVE_UNIFORMS","ACTIVE_UNIFORM_MAX_LENGTH","ALIASED_LINE_WIDTH_RANGE","ALIASED_POINT_SIZE_RANGE","ALPHA","ALPHA_BITS","ALWAYS","ARRAY_BUFFER","ARRAY_BUFFER_BINDING","ATTACHED_SHADERS","BACK","BLEND_COLOR","BLEND_DST_ALPHA","BLEND_DST_RGB","BLEND_EQUATION","BLEND_EQUATION_ALPHA","BLEND_EQUATION_RGB","BLEND_SRC_ALPHA","BLEND_SRC_RGB","BLUE_BITS","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","BROWSER_DEFAULT_WEBGL","BUFFER_SIZE","BUFFER_USAGE","BYTE","CCW","CLAMP_TO_EDGE","COLOR_ATTACHMENT0","COLOR_BUFFER_BIT","COLOR_CLEAR_VALUE","COLOR_WRITEMASK","COMPILE_STATUS","COMPRESSED_TEXTURE_FORMATS","CONSTANT_ALPHA","CONSTANT_COLOR","CONTEXT_LOST_WEBGL","CULL_FACE","CULL_FACE_MODE","CURRENT_PROGRAM","CURRENT_VERTEX_ATTRIB","CW","DECR","DECR_WRAP","DELETE_STATUS","DEPTH_ATTACHMENT","DEPTH_BITS","DEPTH_BUFFER_BIT","DEPTH_CLEAR_VALUE","DEPTH_COMPONENT","DEPTH_COMPONENT16","DEPTH_FUNC","DEPTH_RANGE","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","DEPTH_TEST","DEPTH_WRITEMASK","DITHER","DONT_CARE","DST_ALPHA","DST_COLOR","DYNAMIC_DRAW","ELEMENT_ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER_BINDING","EQUAL","FASTEST","FLOAT","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","FRAGMENT_SHADER","FRAMEBUFFER","FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","FRAMEBUFFER_BINDING","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_UNSUPPORTED","FRONT","FRONT_AND_BACK","FRONT_FACE","FUNC_ADD","FUNC_REVERSE_SUBTRACT","FUNC_SUBTRACT","GENERATE_MIPMAP_HINT","GEQUAL","GREATER","GREEN_BITS","HIGH_FLOAT","HIGH_INT","INCR","INCR_WRAP","INFO_LOG_LENGTH","INT","INT_VEC2","INT_VEC3","INT_VEC4","INVALID_ENUM","INVALID_FRAMEBUFFER_OPERATION","INVALID_OPERATION","INVALID_VALUE","INVERT","KEEP","LEQUAL","LESS","LINEAR_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINES","LINE_LOOP","LINE_STRIP","LINE_WIDTH","LINK_STATUS","LOW_FLOAT","LOW_INT","LUMINANCE","LUMINANCE_ALPHA","MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_CUBE_MAP_TEXTURE_SIZE","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_RENDERBUFFER_SIZE","MAX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_VARYING_VECTORS","MAX_VERTEX_ATTRIBS","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_VERTEX_UNIFORM_VECTORS","MAX_VIEWPORT_DIMS","MEDIUM_FLOAT","MEDIUM_INT","MIRRORED_REPEAT","NEAREST","NEAREST_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","NEVER","NICEST","NONE","NOTEQUAL","NO_ERROR","NUM_COMPRESSED_TEXTURE_FORMATS","ONE","ONE_MINUS_CONSTANT_ALPHA","ONE_MINUS_CONSTANT_COLOR","ONE_MINUS_DST_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_SRC_ALPHA","ONE_MINUS_SRC_COLOR","OUT_OF_MEMORY","PACK_ALIGNMENT","POINTS","POLYGON_OFFSET_FACTOR","POLYGON_OFFSET_FILL","POLYGON_OFFSET_UNITS","RED_BITS","RENDERBUFFER","RENDERBUFFER_ALPHA_SIZE","RENDERBUFFER_BINDING","RENDERBUFFER_BLUE_SIZE","RENDERBUFFER_DEPTH_SIZE","RENDERBUFFER_GREEN_SIZE","RENDERBUFFER_HEIGHT","RENDERBUFFER_INTERNAL_FORMAT","RENDERBUFFER_RED_SIZE","RENDERBUFFER_STENCIL_SIZE","RENDERBUFFER_WIDTH","RENDERER","REPEAT","REPLACE","RGB","RGB5_A1","RGB565","RGBA","RGBA4","SAMPLER_2D","SAMPLER_CUBE","SAMPLES","SAMPLE_ALPHA_TO_COVERAGE","SAMPLE_BUFFERS","SAMPLE_COVERAGE","SAMPLE_COVERAGE_INVERT","SAMPLE_COVERAGE_VALUE","SCISSOR_BOX","SCISSOR_TEST","SHADER_COMPILER","SHADER_SOURCE_LENGTH","SHADER_TYPE","SHADING_LANGUAGE_VERSION","SHORT","SRC_ALPHA","SRC_ALPHA_SATURATE","SRC_COLOR","STATIC_DRAW","STENCIL_ATTACHMENT","STENCIL_BACK_FAIL","STENCIL_BACK_FUNC","STENCIL_BACK_PASS_DEPTH_FAIL","STENCIL_BACK_PASS_DEPTH_PASS","STENCIL_BACK_REF","STENCIL_BACK_VALUE_MASK","STENCIL_BACK_WRITEMASK","STENCIL_BITS","STENCIL_BUFFER_BIT","STENCIL_CLEAR_VALUE","STENCIL_FAIL","STENCIL_FUNC","STENCIL_INDEX","STENCIL_INDEX8","STENCIL_PASS_DEPTH_FAIL","STENCIL_PASS_DEPTH_PASS","STENCIL_REF","STENCIL_TEST","STENCIL_VALUE_MASK","STENCIL_WRITEMASK","STREAM_DRAW","SUBPIXEL_BITS","TEXTURE","TEXTURE0","TEXTURE1","TEXTURE2","TEXTURE3","TEXTURE4","TEXTURE5","TEXTURE6","TEXTURE7","TEXTURE8","TEXTURE9","TEXTURE10","TEXTURE11","TEXTURE12","TEXTURE13","TEXTURE14","TEXTURE15","TEXTURE16","TEXTURE17","TEXTURE18","TEXTURE19","TEXTURE20","TEXTURE21","TEXTURE22","TEXTURE23","TEXTURE24","TEXTURE25","TEXTURE26","TEXTURE27","TEXTURE28","TEXTURE29","TEXTURE30","TEXTURE31","TEXTURE_2D","TEXTURE_BINDING_2D","TEXTURE_BINDING_CUBE_MAP","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Z","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TRIANGLES","TRIANGLE_FAN","TRIANGLE_STRIP","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNSIGNED_BYTE","UNSIGNED_INT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","VALIDATE_STATUS","VENDOR","VERSION","VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","VERTEX_ATTRIB_ARRAY_ENABLED","VERTEX_ATTRIB_ARRAY_NORMALIZED","VERTEX_ATTRIB_ARRAY_POINTER","VERTEX_ATTRIB_ARRAY_SIZE","VERTEX_ATTRIB_ARRAY_STRIDE","VERTEX_ATTRIB_ARRAY_TYPE","VERTEX_SHADER","VIEWPORT","ZERO","createVec2","Float64Array","createVec4","createVec3","createMat4","mat4_namespaceObject","createQuat","quat_namespaceObject","createFill","createIdentityTransform","parentModelMatrix","trs","rotation","localMatrix","getMatrixFromTrs","modelMatrix","getModelMatrix","createTransform","overrideTrs","getTrsFromMatrix","matrix","scaledMatrix","getNormalMatrix","getViewMatrices","camera","modelViewMatrix","modelViewProjectionMatrix","projection","updateTransform","transform","updateLocal","updateModel","normalMatrix","updateView","rotateVectorByMatrix","qRot","vec3_namespaceObject","getOrthographicProjection","settings","xmag","ymag","znear","zfar","getPerspectiveProjection","aspectRatio","canvas","clientWidth","clientHeight","yfov","getCameraProjection","kind","getCameraView","getCameraPosition","setCameraViewFromTransform","setCameraPositionFromTransform","position","setCameraProjectionFromSettings","getLightDirectionFromMatrix","vRes","filterNodeDeep","children","filterNodesDeep","forEachNodes","forEachNode","someNodes","someNode","countNodes","findNode","nodesOrNode","targetNode","mapNode","mapNodeWithParent","parent","mapNodesWithParent","mapNodes","updateNodeTransforms","_parent","_node","pModelMatrix","beforeModel","afterModel","updateLightDirection","lightKind","light","updateNodeListTransforms","interpolate_linear","v0","xs0","xs1","vec2_namespaceObject","vec4_namespaceObject","findKeyframeBounds","getValue","_withinBounds","pValue","nValue","_binarySearch","mid","GLTF_PARSE_ACCESSOR_TYPE_SIZE","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","GLTF_PARSE_COMPONENT_BYTE_SIZE","[object Object]","getComponentTypedData","buffer","componentType","Int8Array","Uint8Array","Int16Array","Uint16Array","Uint32Array","getTypedDataFromInfo","buffers","bufferViewIndex","ArrayBuffer","bufferLength","bufferIndex","byteOffset","GLTF_PARSE_getAccessorTypedData","gltf","sparse","typeCount","accessorType","sparseIndices","indices","sparseValues","indexOfValue","valueIndex","GLTF_PARSE_getAccessorDataInfo","accessorId","accessor","accessors","byteLength","bufferView","bufferViews","byteStride","GLTF_PARSE_animationPathToString","GLTF_PARSE_animationStringToPath","weights","GLTF_PARSE_interpolationLookup","linear","cubicspline","gltf_setAnimationTime","animation","bounds","keyframes","k0","k1","interpolation","targetPath","morphWeights","totalTimes","Map","ts","dt","nextTime","timeMax","timeMin","animationIds","GLTF_PARSE_attributeNames","HAS_PREPPED","prepWebGlRenderer","renderer","extras","aName","attributes","globalLocations","getExtension","createTextureSwitcher","gl","activeTextureMap","_switchTexture","samplerIndex","texture","cacheInfo","activeTexture","bindTexture","switchTexture","switchCubeTexture","createTextureFromTarget","targets","createTexture","bindTarget","dataSize","setParameters","mipLevel","Element","texImage2D","width","height","createCubeTextureFromTarget","mipTarget","faceTarget","textureSetterSimple","_opts","isPowerOf2","flipY","pixelStorei","useMips","generateMipmap","texParameteri","wrapS","wrapT","filterMin","filterMag","createSimpleTextureFromTarget","alpha","nextHighestPowerOfTwo","defaultSampler","getBasePath","idx1","lastIndexOf","GltfExtensions","loadAssets","coreData","config","extensionsUsed","extensions","jsonData","basePath","imageUrls","brdf","cubeMaps","cubeMapName","urls","imageFutures","ldrs","ldr","imageMap","ibl","createData","assets","colorSpace","useLod","images","faces","mipLevels","faceIndex","createScene","originalScene","createNode","originalNode","initialShaderConfig_Primitive","originalIds","shaderConfig","runtimeShaderConfig_Primitive","initialShaderConfig_Scene","runtimeShaderConfig_Scene","getShaderSource","sceneShaderconfig","primitiveShaderConfig","defines","defineString","vertex","fragment","lights","nodeConfig","originalLight","directional","point","spot","color","intensity","innerConeAngle","outerConeAngle","angleScale","angleOffset","nPointLights","nDirectionalLights","nSpotLights","sceneShaderConfig","warn","LIGHTS_VARS","LIGHTS_FUNCS","dLen","pLen","sLen","GLTF_PARSE_LoadDataAssets","glbBuffers","ext","uri","image","mimeType","arrayBufferView","Blob","urlCreator","createObjectURL","bufferViewId","bufferId","loadImages","imageElements","GLTF_PARSE_CreateData","textures","textureMap","textureId","sampler","samplers","defaultColorSpace","materials","material","emissiveTexture","normalTexture","occlusionTexture","pbrMetallicRoughness","baseColorTexture","metallicRoughnessTexture","display","check","naturalWidth","naturalHeight","document","createElement","getContext","drawImage","wTexture","GLTF_PARSE_createTextures","bufferViewInfo","accessorLookup","indicesList","meshes","mesh","primitives","isElements","strategy","normalized","rendererBufferId","bvInfo","usagePattern","vaoIdLookup","GLTF_PARSE_createAttributes","animationId","channels","channel","toLowerCase","timeAccessor","input","timings","valuesAccessor","subarray","shaders","original","initConfig","utf8ArrayToStr","charCache","charFromCodePt","fromCodePoint","codePt","byte1","buffLen","getJsonFromArrayBuffer","aBuffer","bytes","TextDecoder","decode","getChunk","dv","DataView","chunkLength","getUint32","chunkType","chunkStart","chunkEnd","chunkData","GLTF_PARSE_getOriginalFromArrayBuffer","magic","GLTF_PARSE_isBinaryFile","gltfEndOffset","bin","endOffset","_vaoIdCounter","attributeShaderNameLookup","POSITION","NORMAL","TANGENT","TEXCOORD_0","COLOR_0","JOINTS_0","WEIGHTS_0","GLTF_PARSE_sortPrimitiveAttributeKeys","ORDER","oa","ob","GLTF_PARSE_getPrimitiveAttributeKeys","originalPrimitive","GLTF_PARSE_createPrimitives","meshPrimitives","nodeId","primitiveIdx","vaoId","vao","elementBufferId","attributeKey","attributeName","getLocationInRenderer","morphIndex","aMorph","sym","vertexArrays","_primitive","drawKind","drawMode","elementsId","attributeKeys","arrayCount","materialId","_m","metallicRoughnessValues","baseColorFactor","metallicFactor","roughnessFactor","baseColorSamplerIndex","metallicRoughnessSamplerIndex","normal","strength","occlusion","emissiveSamplerIndex","emissiveFactor","alphaMode","doubleSided","alphaCutoff","meshId","primitiveId","hasAttribute","attr","nMorphWeights","nPositionMorphs","nNormalMorphs","nTangentMorphs","nSkinJoints","skin","skins","joints","hasNormalAttributes","hasTangentAttributes","hasUvAttributes","hasColorAttributes","hasBaseColorMap","hasNormalMap","hasEmissiveMap","hasMetalRoughnessMap","hasOcclusionMap","manualSRGB","fastSRGB","getCoreInitialShaderConfig_Primitive","GLTF_PARSE_getNodes","skinLookup","originalSkin","skinId","inverseBindMatrices","skeletonRootId","skinData","originalNodeId","joint","inverseBindMatrix","skeleton","GLTF_PARSE_createSkins","getGltfNode","baseNode","nodeTrsProp","originalCamera","orthographic","cameras","cameraIndex","finalNode","UNIFORM_TYPE","createUniforms","activateShader","uniformLocations","uniformValues","uniformSingleValues","uniformMatrixTranspose","getLocation","uName","program","getUniformLocation","validLocation","loc","_isEqual","_assignCacheValues","uType","Int32Array","_setSingleValue","setterFn","_setValues","_setMatrixValues","setters","uniform1f","uniform1fv","uniform1i","uniform1iv","uniform2f","uniform2fv","uniform2i","uniform2iv","uniform3f","uniform3fv","uniform3i","uniform3iv","uniform4f","uniform4fv","uniform4i","uniform4iv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","hasLocation","current","_activateShader","shaderId","useProgram","createShader","vShader","fShader","createProgram","WebGLShader","deleteShader","deleteProgram","loadShader","shaderType","sourceText","shader","shaderSource","compileShader","getShaderParameter","errorMessage","getShaderInfoLog","attachShader","bindAttribLocation","linkProgram","getProgramParameter","getProgramInfoLog","_compileShader","uniforms","baseArray","morphsArray","skinArray","lightsArray","hashBooleans32","getShaderSource$2","getCoreShaderSource","getCoreVertexShader","vs","MORPH_VARS","MORPH_FUNCS","weightIndex","createMorphs","nMorphs","aTarget","SKIN_JOINT_COUNT","_scratchVec3","_cacheLights","renderScene","shaderGroupByAlpha","renderThunksByShader","meshList","lightList","skinMatrices","getHashForScene","sceneConfig","primitiveConfig","unlit","shaderKey","shaderHash","getOrGenerateShader","shaderGroup","glToggle","diffuse","specular","assignMeshTexture","textureInfo","activate","elementsAccessor","drawElements","drawArrays","Set","glDepthFunc","glBlendFunc","render","_render","shaderGroups","gltf_updateShaderConfigs","gltf_load","bridge","_allNodes","_data","getAllNodes","getData","getOriginalScene","sceneNumber","allNodes","scenes","sceneList","GLTF_PARSE_createScene","getCameraNode","loadFile","gltf_updateNodeTransforms","updatedNodes","gltf_setJointTransforms","gltf_findNodeByOriginalId","nodeOrNodes","fullTree","jointList","getJointList","getSkeletonRootTransform","inverseRootMatrix","jMat","meshNode","jointIds","delete","animate","createAttributes","currentBuffer","currentTarget","_perShaderCache","_globalCache","activateElements","bindBuffer","getLocationInShader","getAttribLocation","activateData","vertexAttribPointer","enableVertexAttribArray","createWebGlBuffers","infoMap","bData","createBuffer","bufferData","makeFramebufferPicker","renderBuffer","createRenderbuffer","bindRenderbuffer","renderbufferStorage","frameBuffer","createFramebuffer","bindFramebuffer","framebufferTexture2D","framebufferRenderbuffer","unbind","readPixel","readout","readPixels","deleteFramebuffer","deleteRenderbuffer","deleteTexture","bits","createVertexArrays","_cache","currentSym","_bind","bindVertexArrayOES","bindVertexArray","_activate","force","createVertexArrayOES","createVertexArray","release","getVersionString","getParameter","_isNumber","chr","getMajorVersion","numberString","charAt","createWebGlRenderer","contextAttributes","_gl","lastScreenSize","flagMap","extensionMap","extName","depthFunc","_sFactor","_dFactor","textureSwitcher","resize","setAttribute","viewport","drawingBufferWidth","drawingBufferHeight","setting","flag","enable","disable","func","sFactor","dFactor","blendFunc","copyName","withName","ary1of2","ary2of2","ary1of3","curryN","ary2of3","ary3of3","ary1of1","infestines_es_C","x3","curry","arityN","infestines_es_assign","always","applyU","x2y","sndU","array0","object0","isDefined","hasU","prototypeOf","getPrototypeOf","constructorOf","identicalU","acyclicEqualsObject","bk","acyclicEqualsU","addU","multiplyU","divideBy","isInstanceOf","Class","protoless0","id$1","setName","partial_lenses_es_copyName","partial_lenses_es_toRegExpU","partial_lenses_es_chainAsync","xyP","xP","sliceIndex","cpair","unto","unto0","notPartial","singletonPartial","expect","partial_lenses_es_isArrayOrPrimitive","rev","partial_lenses_es_seemsArrayLike","mapPartialIndexU","xi2y","skip","same","mapIfArrayLike","copyToFrom","selectInArrayLike","xi2v","Select","partial_lenses_es_ConcatOf","partial_lenses_es_mumBy","ord","minX","minY","traverseU","xi2yC","toFunction","partial_lenses_es_mkTraverse","toC","consExcept","pushTo","consTo","traversePartialIndex","A","xi2yA","xsA","_i2","ConstantLog","_ref","getLogFn","lensFrom","_i","xi2yF","getProp","setProp","funProp","getIndex","setIndex","_ys","_j","_j2","funIndex","composedMiddle","composed","oi0","os","_last","_first","setU","modifyComposed","Identity","modifyU","xi2x","modifyAsyncU","IdentityAsync","makeIx","getNestedU","Constant","getU","_o","lensU","isoU","bwd","fwd","partial_lenses_es_stringIsoU","partial_lenses_es_numberIsoU","getPick","template","setPick","toObject$1","_F","branchAssemble","ks","branchOr1LevelIdentity","k2o","xO","written","_x2","_k","_x3","_y","partial_lenses_es_branchOr1Level","_k3","_k4","_k2","_y2","partial_lenses_es_replaced","inn","partitionIntoIndex","xi2b","reValue","reIndex","reLastIndex","reNext","iterCollect","keyed","es","disjointBwd","groupOf","disjointFwd","eitherU","orElseU","back","prim","isDefined$1","zeroOp","elemsI","seq2U","M","xi2yM","pickInAux","partial_lenses_es_pickIn","condOfDefault","condOfCase","wi2x","assign$1","partial_lenses_es_propsOf","modifyAsync","partial_lenses_es_set","flat","partial_lenses_es_flatten","lazy","o2o","_memo","choices","_len","_key","reduceRight","choose","xiM2o","partial_lenses_es_condOf","op","iftes","_t","orElse","xi2yO","xM","choice","_len4","_key4","optional","mapIx","ix2j","xj2yF","setIx","tieIx","ij2k","yk2zF","joinIx","skipIx","getLog","_traverseU","transformAsync","partial_lenses_es_seq","assignOp","setOp","modifyOp","removeOp","branchOr","branchOrU","branch","branches","elems","elemsTotal","entries","keys$1","partial_lenses_es_matches","m0","matchesIn","matches","matchesJoin","partial_lenses_es_values","partial_lenses_es_children","satisfying","leafs","partial_lenses_es_all","and$1","any","collectAs","results","collect","concatAs","countIf","countsAs","xi2k","counts","foldl","foldr","forEachWith","newC","ef$$1","partial_lenses_es_isEmpty","joinAs","maximumBy","maximum","meanAs","num","minimumBy","minimum","none","or$1","productAs","selectAs","partial_lenses_es_select","sumAs","lens","setter","foldTraversalLens","traversal","defaults","o2u","define","untoV","reread","rewrite","required","replace$1","yi2y","partial_lenses_es_filter","tsN","fsN","xih2b","hint","u","findWith","oo","first","maybeArray","begin","xsi2yF","seems","xsN","zs","zsN","bPzsN","pick","unzipObjIntoU","removable","_len5","ps","_key5","valueOr","o2i","getInverse","iso","mapFwd","partial_lenses_es_is","indexed","xis","xi","_i3","partial_lenses_es_singleton","disjoint","decodeURI","encodeURI","uriComponent","decodeURIComponent","partial_lenses_es_json","_ref2","reviver","replacer","space","text","dropPrefix","pfx","startsWith","dropSuffix","sfx","endsWith","replaces","partial_lenses_es_split","sep","partial_lenses_es_uncouple","kv","add$1","multiply$1","negate$1","pointer"],"mappings":"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","file":"f44f3665effb2b8298e2.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 53);\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar $foreign = require(\"./foreign.js\");\nvar Data_Show = require(\"../Data.Show/index.js\");\nvar showUnit = new Data_Show.Show(function (v) {\n    return \"unit\";\n});\nmodule.exports = {\n    showUnit: showUnit,\n    unit: $foreign.unit\n};\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('sanctuary-show'), require('sanctuary-type-identifiers'), require('denque'), require('sanctuary-type-classes'), require('concurrify')) :\n  typeof define === 'function' && define.amd ? define(['sanctuary-show', 'sanctuary-type-identifiers', 'denque', 'sanctuary-type-classes', 'concurrify'], factory) :\n  (global.Fluture = factory(global.sanctuaryShow,global.sanctuaryTypeIdentifiers,global.Denque,global.sanctuaryTypeClasses,global.concurrify));\n}(this, (function (show,type,Denque,Z,concurrify) { 'use strict';\n\n  show = show && show.hasOwnProperty('default') ? show['default'] : show;\n  type = type && type.hasOwnProperty('default') ? type['default'] : type;\n  Denque = Denque && Denque.hasOwnProperty('default') ? Denque['default'] : Denque;\n  Z = Z && Z.hasOwnProperty('default') ? Z['default'] : Z;\n  concurrify = concurrify && concurrify.hasOwnProperty('default') ? concurrify['default'] : concurrify;\n\n  function noop(){}\n  function moop(){ return this }\n  function padf(sf, s){ return s.replace(/^/gm, sf).replace(sf, '') }\n  function showf(f){ return padf('  ', show(f)) }\n\n  function partial1(f, a){\n    return function bound1(b, c, d){\n      switch(arguments.length){\n        case 1: return f(a, b);\n        case 2: return f(a, b, c);\n        default: return f(a, b, c, d);\n      }\n    };\n  }\n\n  function partial2(f, a, b){\n    return function bound2(c, d){\n      return arguments.length === 1 ? f(a, b, c) : f(a, b, c, d);\n    };\n  }\n\n  function partial3(f, a, b, c){\n    return function bound3(d){\n      return f(a, b, c, d);\n    };\n  }\n\n  function raise(x){\n    throw x;\n  }\n\n  function indent(s){\n    return '  ' + s;\n  }\n\n  var FL = {\n    map: 'fantasy-land/map',\n    bimap: 'fantasy-land/bimap',\n    chain: 'fantasy-land/chain',\n    chainRec: 'fantasy-land/chainRec',\n    ap: 'fantasy-land/ap',\n    of: 'fantasy-land/of',\n    zero: 'fantasy-land/zero'\n  };\n\n  var ordinal = ['first', 'second', 'third', 'fourth', 'fifth'];\n\n  var namespace = 'fluture';\n  var name = 'Future';\n  var version = 4;\n\n  var $$type = namespace + '/' + name + '@' + version;\n\n  function error(message){\n    return new Error(message);\n  }\n\n  function typeError(message){\n    return new TypeError(message);\n  }\n\n  function invalidArgument(it, at, expected, actual){\n    return typeError(\n      it + ' expects its ' + ordinal[at] + ' argument to ' + expected + '\\n  Actual: ' + show(actual)\n    );\n  }\n\n  function invalidContext(it, actual){\n    return typeError(\n      it + ' was invoked outside the context of a Future. You might want to use'\n    + ' a dispatcher instead\\n  Called on: ' + show(actual)\n    );\n  }\n\n  function invalidNamespace(m, x){\n    return (\n      'The Future was not created by ' + namespace + '. '\n    + 'Make sure you transform other Futures to ' + namespace + ' Futures. '\n    + 'Got ' + (x ? ('a Future from ' + x) : 'an unscoped Future') + '.'\n    + '\\n  See: https://github.com/fluture-js/Fluture#casting-futures'\n    );\n  }\n\n  function invalidVersion(m, x){\n    return (\n      'The Future was created by ' + (x < version ? 'an older' : 'a newer')\n    + ' version of ' + namespace + '. '\n    + 'This means that one of the sources which creates Futures is outdated. '\n    + 'Update this source, or transform its created Futures to be compatible.'\n    + '\\n  See: https://github.com/fluture-js/Fluture#casting-futures'\n    );\n  }\n\n  function invalidFuture(it, at, m, s){\n    var id = type.parse(type(m));\n    var info = id.name === name ? '\\n' + (\n      id.namespace !== namespace ? invalidNamespace(m, id.namespace)\n    : id.version !== version ? invalidVersion(m, id.version)\n    : 'Nothing seems wrong. Contact the Fluture maintainers.') : '';\n    return typeError(\n      it + ' expects ' + (ordinal[at] ? 'its ' + ordinal[at] + ' argument to be a valid Future' : at)\n    + '.' + info + '\\n  Actual: ' + show(m) + ' :: ' + id.name + (s || '')\n    );\n  }\n\n  function valueToError(x){\n    var name$$1, message;\n    try{\n      if(x && typeof x.name === 'string' && typeof x.message === 'string'){\n        name$$1 = x.name;\n        message = x.message;\n      }else{\n        name$$1 = 'Non-Error';\n        message = show(x);\n      }\n    }catch (_){\n      name$$1 = 'Something';\n      message = '<The value which was thrown could not be converted to string>';\n    }\n    var e = error(\n      name$$1 + ' occurred while running a computation for a Future:\\n\\n' +\n      message.split('\\n').map(indent).join('\\n')\n    );\n    return e;\n  }\n\n  function throwInvalidArgument(it, at, expected, actual){\n    throw invalidArgument(it, at, expected, actual);\n  }\n\n  function throwInvalidContext(it, actual){\n    throw invalidContext(it, actual);\n  }\n\n  function throwInvalidFuture(it, at, m, s){\n    throw invalidFuture(it, at, m, s);\n  }\n\n  function isFunction(f){\n    return typeof f === 'function';\n  }\n\n  function isThenable(m){\n    return m instanceof Promise || Boolean(m) && isFunction(m.then);\n  }\n\n  function isBoolean(f){\n    return typeof f === 'boolean';\n  }\n\n  function isNumber(f){\n    return typeof f === 'number';\n  }\n\n  function isUnsigned(n){\n    return (n === Infinity || isNumber(n) && n > 0 && n % 1 === 0);\n  }\n\n  function isObject(o){\n    return o !== null && typeof o === 'object';\n  }\n\n  function isIterator(i){\n    return isObject(i) && isFunction(i.next);\n  }\n\n  function isArray(x){\n    return Array.isArray(x);\n  }\n\n  /* eslint no-param-reassign:0 */\n\n  var nil = {head: null};\n  nil.tail = nil;\n\n  function cons(head, tail){\n    return {head: head, tail: tail};\n  }\n\n  /*eslint no-cond-assign:0, no-constant-condition:0 */\n\n  function interpretSequence(seq, rec, rej, res){\n\n    //This is the primary queue of actions. All actions in here will be \"cold\",\n    //meaning they haven't had the chance yet to run concurrent computations.\n    var queue = new Denque();\n\n    //These combined variables define our current state.\n    // future  = the future we are currently forking\n    // action  = the action to be informed when the future settles\n    // cancel  = the cancel function of the current future\n    // settled = a boolean indicating whether a new tick should start\n    // async   = a boolean indicating whether we are awaiting a result asynchronously\n    var future, action, cancel = noop, stack = nil, settled, async = true, it;\n\n    //Pushes a new action onto the stack. The stack is used to keep \"hot\"\n    //actions. The last one added is the first one to process, because actions\n    //are pushed right-to-left (see warmupActions).\n    function pushStack(x){\n      stack = cons(x, stack);\n    }\n\n    //Takes the leftmost action from the stack and returns it.\n    function popStack(){\n      var x = stack.head;\n      stack = stack.tail;\n      return x;\n    }\n\n    //This function is called with a future to use in the next tick.\n    //Here we \"flatten\" the actions of another Sequence into our own actions,\n    //this is the magic that allows for infinitely stack safe recursion because\n    //actions like ChainAction will return a new Sequence.\n    //If we settled asynchronously, we call drain() directly to run the next tick.\n    function settle(m){\n      settled = true;\n      future = m;\n\n      if(future._spawn){\n        var tail = future._actions;\n\n        while(tail !== nil){\n          queue.unshift(tail.head);\n          tail = tail.tail;\n        }\n\n        future = future._spawn;\n      }\n\n      if(async) drain();\n    }\n\n    //This function serves as a rejection handler for our current future.\n    //It will tell the current action that the future rejected, and it will\n    //settle the current tick with the action's answer to that.\n    function rejected(x){\n      settle(action.rejected(x));\n    }\n\n    //This function serves as a resolution handler for our current future.\n    //It will tell the current action that the future resolved, and it will\n    //settle the current tick with the action's answer to that.\n    function resolved(x){\n      settle(action.resolved(x));\n    }\n\n    //This function is passed into actions when they are \"warmed up\".\n    //If the action decides that it has its result, without the need to await\n    //anything else, then it can call this function to force \"early termination\".\n    //When early termination occurs, all actions which were queued prior to the\n    //terminator will be skipped. If they were already hot, they will also receive\n    //a cancel signal so they can cancel their own concurrent computations, as\n    //their results are no longer needed.\n    function early(m, terminator){\n      cancel();\n      queue.clear();\n\n      if(async && action !== terminator){\n        action.cancel();\n        while((it = popStack()) && it !== terminator) it.cancel();\n      }\n\n      settle(m);\n    }\n\n    //This will cancel the current Future, the current action, and all queued hot actions.\n    function Sequence$cancel(){\n      cancel();\n      action && action.cancel();\n      while(it = popStack()) it.cancel();\n    }\n\n    //This function is called when an exception is caught.\n    function exception(e){\n      Sequence$cancel();\n      rec(e);\n    }\n\n    //This function serves to kickstart concurrent computations.\n    //Takes all actions from the cold queue *back-to-front*, and calls run() on\n    //each of them, passing them the \"early\" function. If any of them settles (by\n    //calling early()), we abort. After warming up all actions in the cold queue,\n    //we warm up the current action as well.\n    function warmupActions(){\n      while(it = queue.pop()){\n        it = it.run(early);\n        if(settled) return;\n        pushStack(it);\n      }\n      action = action.run(early);\n    }\n\n    //This function represents our main execution loop.\n    //When we refer to a \"tick\", we mean the execution of the body inside the\n    //primary while-loop of this function.\n    //Every tick follows the following algorithm:\n    // 1. We try to take an action from the cold queue, if we fail, go to step 2.\n    //      1a. We fork the future.\n    //      1b. We warmupActions() if the we haven't settled yet.\n    // 2. We try to take an action from the hot queue, if we fail, go to step 3.\n    //      2a. We fork the Future, if settles, we continue to the next tick.\n    // 3. If we couldn't take actions from either queues, we fork the Future into\n    //    the user provided continuations. This is the end of the interpretation.\n    // 4. If we did take an action from one of queues, but none of the steps\n    //    caused a settle(), it means we are asynchronously waiting for something\n    //    to settle and start the next tick, so we return from the function.\n    function drain(){\n      async = false;\n\n      while(true){\n        settled = false;\n        if(action = queue.shift()){\n          cancel = future._interpret(exception, rejected, resolved);\n          if(!settled) warmupActions();\n        }else if(action = popStack()){\n          cancel = future._interpret(exception, rejected, resolved);\n        }else break;\n        if(settled) continue;\n        async = true;\n        return;\n      }\n\n      cancel = future._interpret(exception, rej, res);\n    }\n\n    //Start the execution loop.\n    settle(seq);\n\n    //Return the cancellation function.\n    return Sequence$cancel;\n\n  }\n\n  function Future$value$rej(x){\n    raise(error(\n      'Future#value was called on a rejected Future\\n' +\n      '  Actual: Future.reject(' + show(x) + ')'\n    ));\n  }\n\n  function Future$onCrash(x){\n    raise(valueToError(x));\n  }\n\n  function Future(computation){\n    if(!isFunction(computation)) throwInvalidArgument('Future', 0, 'be a Function', computation);\n    return new Computation(computation);\n  }\n\n  function isFuture(x){\n    return x instanceof Future || type(x) === $$type;\n  }\n\n  Future['@@type'] = $$type;\n\n  Future.prototype['@@show'] = function Future$show(){\n    return this.toString();\n  };\n\n  Future.prototype[FL.ap] = function Future$FL$ap(other){\n    return other._ap(this);\n  };\n\n  Future.prototype[FL.map] = function Future$FL$map(mapper){\n    return this._map(mapper);\n  };\n\n  Future.prototype[FL.bimap] = function Future$FL$bimap(lmapper, rmapper){\n    return this._bimap(lmapper, rmapper);\n  };\n\n  Future.prototype[FL.chain] = function Future$FL$chain(mapper){\n    return this._chain(mapper);\n  };\n\n  Future.prototype.ap = function Future$ap(other){\n    if(!isFuture(this)) throwInvalidContext('Future#ap', this);\n    if(!isFuture(other)) throwInvalidFuture('Future#ap', 0, other);\n    return this._ap(other);\n  };\n\n  Future.prototype.map = function Future$map(mapper){\n    if(!isFuture(this)) throwInvalidContext('Future#map', this);\n    if(!isFunction(mapper)) throwInvalidArgument('Future#map', 0, 'to be a Function', mapper);\n    return this._map(mapper);\n  };\n\n  Future.prototype.bimap = function Future$bimap(lmapper, rmapper){\n    if(!isFuture(this)) throwInvalidContext('Future#bimap', this);\n    if(!isFunction(lmapper)) throwInvalidArgument('Future#bimap', 0, 'to be a Function', lmapper);\n    if(!isFunction(rmapper)) throwInvalidArgument('Future#bimap', 1, 'to be a Function', rmapper);\n    return this._bimap(lmapper, rmapper);\n  };\n\n  Future.prototype.chain = function Future$chain(mapper){\n    if(!isFuture(this)) throwInvalidContext('Future#chain', this);\n    if(!isFunction(mapper)) throwInvalidArgument('Future#chain', 0, 'to be a Function', mapper);\n    return this._chain(mapper);\n  };\n\n  Future.prototype.mapRej = function Future$mapRej(mapper){\n    if(!isFuture(this)) throwInvalidContext('Future#mapRej', this);\n    if(!isFunction(mapper)) throwInvalidArgument('Future#mapRej', 0, 'to be a Function', mapper);\n    return this._mapRej(mapper);\n  };\n\n  Future.prototype.chainRej = function Future$chainRej(mapper){\n    if(!isFuture(this)) throwInvalidContext('Future#chainRej', this);\n    if(!isFunction(mapper)) throwInvalidArgument('Future#chainRej', 0, 'to be a Function', mapper);\n    return this._chainRej(mapper);\n  };\n\n  Future.prototype.race = function Future$race(other){\n    if(!isFuture(this)) throwInvalidContext('Future#race', this);\n    if(!isFuture(other)) throwInvalidFuture('Future#race', 0, other);\n    return this._race(other);\n  };\n\n  Future.prototype.both = function Future$both(other){\n    if(!isFuture(this)) throwInvalidContext('Future#both', this);\n    if(!isFuture(other)) throwInvalidFuture('Future#both', 0, other);\n    return this._both(other);\n  };\n\n  Future.prototype.and = function Future$and(other){\n    if(!isFuture(this)) throwInvalidContext('Future#and', this);\n    if(!isFuture(other)) throwInvalidFuture('Future#and', 0, other);\n    return this._and(other);\n  };\n\n  Future.prototype.or = function Future$or(other){\n    if(!isFuture(this)) throwInvalidContext('Future#or', this);\n    if(!isFuture(other)) throwInvalidFuture('Future#or', 0, other);\n    return this._or(other);\n  };\n\n  Future.prototype.swap = function Future$swap(){\n    if(!isFuture(this)) throwInvalidContext('Future#ap', this);\n    return this._swap();\n  };\n\n  Future.prototype.fold = function Future$fold(lmapper, rmapper){\n    if(!isFuture(this)) throwInvalidContext('Future#ap', this);\n    if(!isFunction(lmapper)) throwInvalidArgument('Future#fold', 0, 'to be a Function', lmapper);\n    if(!isFunction(rmapper)) throwInvalidArgument('Future#fold', 1, 'to be a Function', rmapper);\n    return this._fold(lmapper, rmapper);\n  };\n\n  Future.prototype.finally = function Future$finally(other){\n    if(!isFuture(this)) throwInvalidContext('Future#finally', this);\n    if(!isFuture(other)) throwInvalidFuture('Future#finally', 0, other);\n    return this._finally(other);\n  };\n\n  Future.prototype.lastly = function Future$lastly(other){\n    if(!isFuture(this)) throwInvalidContext('Future#lastly', this);\n    if(!isFuture(other)) throwInvalidFuture('Future#lastly', 0, other);\n    return this._finally(other);\n  };\n\n  Future.prototype.fork = function Future$fork(rej, res){\n    if(!isFuture(this)) throwInvalidContext('Future#fork', this);\n    if(!isFunction(rej)) throwInvalidArgument('Future#fork', 0, 'to be a Function', rej);\n    if(!isFunction(res)) throwInvalidArgument('Future#fork', 1, 'to be a Function', res);\n    return this._interpret(Future$onCrash, rej, res);\n  };\n\n  Future.prototype.forkCatch = function Future$fork(rec, rej, res){\n    if(!isFuture(this)) throwInvalidContext('Future#fork', this);\n    if(!isFunction(rec)) throwInvalidArgument('Future#fork', 0, 'to be a Function', rec);\n    if(!isFunction(rej)) throwInvalidArgument('Future#fork', 1, 'to be a Function', rej);\n    if(!isFunction(res)) throwInvalidArgument('Future#fork', 2, 'to be a Function', res);\n    return this._interpret(rec, rej, res);\n  };\n\n  Future.prototype.value = function Future$value(res){\n    if(!isFuture(this)) throwInvalidContext('Future#value', this);\n    if(!isFunction(res)) throwInvalidArgument('Future#value', 0, 'to be a Function', res);\n    return this._interpret(Future$onCrash, Future$value$rej, res);\n  };\n\n  Future.prototype.done = function Future$done(callback){\n    if(!isFuture(this)) throwInvalidContext('Future#done', this);\n    if(!isFunction(callback)) throwInvalidArgument('Future#done', 0, 'to be a Function', callback);\n    return this._interpret(Future$onCrash,\n                           function Future$done$rej(x){ callback(x); },\n                           function Future$done$res(x){ callback(null, x); });\n  };\n\n  Future.prototype.promise = function Future$promise(){\n    var _this = this;\n    return new Promise(function Future$promise$computation(res, rej){\n      _this._interpret(Future$onCrash, rej, res);\n    });\n  };\n\n  Future.prototype.isRejected = function Future$isRejected(){\n    return false;\n  };\n\n  Future.prototype.isResolved = function Future$isResolved(){\n    return false;\n  };\n\n  Future.prototype.isSettled = function Future$isSettled(){\n    return this.isRejected() || this.isResolved();\n  };\n\n  Future.prototype.extractLeft = function Future$extractLeft(){\n    return [];\n  };\n\n  Future.prototype.extractRight = function Future$extractRight(){\n    return [];\n  };\n\n  var Core = Object.create(Future.prototype);\n\n  Core._ap = function Core$ap(other){\n    return new Sequence(this)._ap(other);\n  };\n\n  Core._parallelAp = function Core$parallelAp(other){\n    return new Sequence(this)._parallelAp(other);\n  };\n\n  Core._map = function Core$map(mapper){\n    return new Sequence(this)._map(mapper);\n  };\n\n  Core._bimap = function Core$bimap(lmapper, rmapper){\n    return new Sequence(this)._bimap(lmapper, rmapper);\n  };\n\n  Core._chain = function Core$chain(mapper){\n    return new Sequence(this)._chain(mapper);\n  };\n\n  Core._mapRej = function Core$mapRej(mapper){\n    return new Sequence(this)._mapRej(mapper);\n  };\n\n  Core._chainRej = function Core$chainRej(mapper){\n    return new Sequence(this)._chainRej(mapper);\n  };\n\n  Core._race = function Core$race(other){\n    return new Sequence(this)._race(other);\n  };\n\n  Core._both = function Core$both(other){\n    return new Sequence(this)._both(other);\n  };\n\n  Core._and = function Core$and(other){\n    return new Sequence(this)._and(other);\n  };\n\n  Core._or = function Core$or(other){\n    return new Sequence(this)._or(other);\n  };\n\n  Core._swap = function Core$swap(){\n    return new Sequence(this)._swap();\n  };\n\n  Core._fold = function Core$fold(lmapper, rmapper){\n    return new Sequence(this)._fold(lmapper, rmapper);\n  };\n\n  Core._finally = function Core$finally(other){\n    return new Sequence(this)._finally(other);\n  };\n\n  function Computation(computation){\n    this._computation = computation;\n  }\n\n  Computation.prototype = Object.create(Core);\n\n  Computation.prototype._interpret = function Computation$interpret(rec, rej, res){\n    var open = false, cancel = noop, cont = function(){ open = true; };\n    try{\n      cancel = this._computation(function Computation$rej(x){\n        cont = function Computation$rej$cont(){\n          open = false;\n          rej(x);\n        };\n        if(open){\n          cont();\n        }\n      }, function Computation$res(x){\n        cont = function Computation$res$cont(){\n          open = false;\n          res(x);\n        };\n        if(open){\n          cont();\n        }\n      }) || noop;\n    }catch(e){\n      open = false;\n      rec(e);\n      return noop;\n    }\n    if(!(isFunction(cancel) && cancel.length === 0)){\n      rec(typeError(\n        'The computation was expected to return a nullary function or void\\n' +\n        '  Actual: ' + show(cancel)\n      ));\n    }\n    cont();\n    return function Computation$cancel(){\n      if(open){\n        open = false;\n        cancel && cancel();\n      }\n    };\n  };\n\n  Computation.prototype.toString = function Computation$toString(){\n    return 'Future(' + showf(this._computation) + ')';\n  };\n\n  function Rejected(value){\n    this._value = value;\n  }\n\n  Rejected.prototype = Object.create(Core);\n\n  Rejected.prototype._ap = moop;\n  Rejected.prototype._parallelAp = moop;\n  Rejected.prototype._map = moop;\n  Rejected.prototype._chain = moop;\n  Rejected.prototype._race = moop;\n  Rejected.prototype._both = moop;\n  Rejected.prototype._and = moop;\n\n  Rejected.prototype._or = function Rejected$or(other){\n    return other;\n  };\n\n  Rejected.prototype._finally = function Rejected$finally(other){\n    return other._and(this);\n  };\n\n  Rejected.prototype._swap = function Rejected$swap(){\n    return new Resolved(this._value);\n  };\n\n  Rejected.prototype._interpret = function Rejected$interpret(rec, rej){\n    rej(this._value);\n    return noop;\n  };\n\n  Rejected.prototype.isRejected = function Rejected$isRejected(){\n    return true;\n  };\n\n  Rejected.prototype.extractLeft = function Rejected$extractLeft(){\n    return [this._value];\n  };\n\n  Rejected.prototype.toString = function Rejected$toString(){\n    return 'Future.reject(' + show(this._value) + ')';\n  };\n\n  function reject(x){\n    return new Rejected(x);\n  }\n\n  function Resolved(value){\n    this._value = value;\n  }\n\n  Resolved.prototype = Object.create(Core);\n\n  Resolved.prototype._race = moop;\n  Resolved.prototype._mapRej = moop;\n  Resolved.prototype._or = moop;\n\n  Resolved.prototype._and = function Resolved$and(other){\n    return other;\n  };\n\n  Resolved.prototype._both = function Resolved$both(other){\n    var left = this._value;\n    return other._map(function Resolved$both$mapper(right){\n      return [left, right];\n    });\n  };\n\n  Resolved.prototype._swap = function Resolved$swap(){\n    return new Rejected(this._value);\n  };\n\n  Resolved.prototype._finally = function Resolved$finally(other){\n    var value = this._value;\n    return other._map(function Resolved$finally$mapper(){\n      return value;\n    });\n  };\n\n  Resolved.prototype._interpret = function Resolved$interpret(rec, rej, res){\n    res(this._value);\n    return noop;\n  };\n\n  Resolved.prototype.isResolved = function Resolved$isResolved(){\n    return true;\n  };\n\n  Resolved.prototype.extractRight = function Resolved$extractRight(){\n    return [this._value];\n  };\n\n  Resolved.prototype.toString = function Resolved$toString(){\n    return 'Future.of(' + show(this._value) + ')';\n  };\n\n  function of(x){\n    return new Resolved(x);\n  }\n\n  function Never(){\n    this._isNever = true;\n  }\n\n  Never.prototype = Object.create(Future.prototype);\n\n  Never.prototype._ap = moop;\n  Never.prototype._parallelAp = moop;\n  Never.prototype._map = moop;\n  Never.prototype._bimap = moop;\n  Never.prototype._chain = moop;\n  Never.prototype._mapRej = moop;\n  Never.prototype._chainRej = moop;\n  Never.prototype._both = moop;\n  Never.prototype._or = moop;\n  Never.prototype._swap = moop;\n  Never.prototype._fold = moop;\n  Never.prototype._finally = moop;\n\n  Never.prototype._race = function Never$race(other){\n    return other;\n  };\n\n  Never.prototype._interpret = function Never$interpret(){\n    return noop;\n  };\n\n  Never.prototype.toString = function Never$toString(){\n    return 'Future.never';\n  };\n\n  var never = new Never();\n\n  function isNever(x){\n    return isFuture(x) && x._isNever === true;\n  }\n\n  function Crashed(error$$1){\n    this._error = error$$1;\n  }\n\n  Crashed.prototype = Object.create(Future.prototype);\n\n  Crashed.prototype._ap = moop;\n  Crashed.prototype._parallelAp = moop;\n  Crashed.prototype._map = moop;\n  Crashed.prototype._bimap = moop;\n  Crashed.prototype._chain = moop;\n  Crashed.prototype._mapRej = moop;\n  Crashed.prototype._chainRej = moop;\n  Crashed.prototype._both = moop;\n  Crashed.prototype._or = moop;\n  Crashed.prototype._swap = moop;\n  Crashed.prototype._fold = moop;\n  Crashed.prototype._finally = moop;\n  Crashed.prototype._race = moop;\n\n  Crashed.prototype._interpret = function Crashed$interpret(rec){\n    rec(this._error);\n    return noop;\n  };\n\n  function Eager(future){\n    var _this = this;\n    _this.rec = noop;\n    _this.rej = noop;\n    _this.res = noop;\n    _this.crashed = false;\n    _this.rejected = false;\n    _this.resolved = false;\n    _this.value = null;\n    _this.cancel = future._interpret(function Eager$crash(x){\n      _this.value = x;\n      _this.crashed = true;\n      _this.cancel = noop;\n      _this.rec(x);\n    }, function Eager$reject(x){\n      _this.value = x;\n      _this.rejected = true;\n      _this.cancel = noop;\n      _this.rej(x);\n    }, function Eager$resolve(x){\n      _this.value = x;\n      _this.resolved = true;\n      _this.cancel = noop;\n      _this.res(x);\n    });\n  }\n\n  Eager.prototype = Object.create(Core);\n\n  Eager.prototype._interpret = function Eager$interpret(rec, rej, res){\n    if(this.crashed) rec(this.value);\n    else if(this.rejected) rej(this.value);\n    else if(this.resolved) res(this.value);\n    else{\n      this.rec = rec;\n      this.rej = rej;\n      this.res = res;\n    }\n    return this.cancel;\n  };\n\n  var Action = {\n    rejected: function Action$rejected(x){ this.cancel(); return new Rejected(x) },\n    resolved: function Action$resolved(x){ this.cancel(); return new Resolved(x) },\n    run: function Action$run(){ return this },\n    cancel: function Action$cancel(){}\n  };\n\n  function ApAction(other){ this.other = other; }\n  ApAction.prototype = Object.create(Action);\n\n  ApAction.prototype.resolved = function ApAction$resolved(f){\n    return isFunction(f) ?\n           this.other._map(function ApAction$resolved$mapper(x){ return f(x) }) :\n           new Crashed(typeError(\n             'Future#ap expects its first argument to be a Future of a Function'\n             + '\\n  Actual: Future.of(' + show(f) + ')'\n           ));\n  };\n\n  ApAction.prototype.toString = function ApAction$toString(){\n    return 'ap(' + this.other.toString() + ')';\n  };\n\n  function MapAction(mapper){ this.mapper = mapper; }\n  MapAction.prototype = Object.create(Action);\n\n  MapAction.prototype.resolved = function MapAction$resolved(x){\n    var m;\n    try{ m = new Resolved(this.mapper(x)); }catch(e){ m = new Crashed(e); }\n    return m;\n  };\n\n  MapAction.prototype.toString = function MapAction$toString(){\n    return 'map(' + showf(this.mapper) + ')';\n  };\n\n  function BimapAction(lmapper, rmapper){ this.lmapper = lmapper; this.rmapper = rmapper; }\n  BimapAction.prototype = Object.create(Action);\n\n  BimapAction.prototype.rejected = function BimapAction$rejected(x){\n    var m;\n    try{ m = new Rejected(this.lmapper(x)); }catch(e){ m = new Crashed(e); }\n    return m;\n  };\n\n  BimapAction.prototype.resolved = function BimapAction$resolved(x){\n    var m;\n    try{ m = new Resolved(this.rmapper(x)); }catch(e){ m = new Crashed(e); }\n    return m;\n  };\n\n  BimapAction.prototype.toString = function BimapAction$toString(){\n    return 'bimap(' + showf(this.lmapper) + ', ' + showf(this.rmapper) + ')';\n  };\n\n  function ChainAction(mapper){ this.mapper = mapper; }\n  ChainAction.prototype = Object.create(Action);\n\n  ChainAction.prototype.resolved = function ChainAction$resolved(x){\n    var m;\n    try{ m = this.mapper(x); }catch(e){ return new Crashed(e) }\n    return isFuture(m) ? m : new Crashed(invalidFuture(\n      'Future#chain',\n      'the function it\\'s given to return a Future',\n      m,\n      '\\n  From calling: ' + showf(this.mapper) + '\\n  With: ' + show(x)\n    ));\n  };\n\n  ChainAction.prototype.toString = function ChainAction$toString(){\n    return 'chain(' + showf(this.mapper) + ')';\n  };\n\n  function MapRejAction(mapper){ this.mapper = mapper; }\n  MapRejAction.prototype = Object.create(Action);\n\n  MapRejAction.prototype.rejected = function MapRejAction$rejected(x){\n    var m;\n    try{ m = new Rejected(this.mapper(x)); }catch(e){ m = new Crashed(e); }\n    return m;\n  };\n\n  MapRejAction.prototype.toString = function MapRejAction$toString(){\n    return 'mapRej(' + showf(this.mapper) + ')';\n  };\n\n  function ChainRejAction(mapper){ this.mapper = mapper; }\n  ChainRejAction.prototype = Object.create(Action);\n\n  ChainRejAction.prototype.rejected = function ChainRejAction$rejected(x){\n    var m;\n    try{ m = this.mapper(x); }catch(e){ return new Crashed(e) }\n    return isFuture(m) ? m : new Crashed(invalidFuture(\n      'Future#chainRej',\n      'the function it\\'s given to return a Future',\n      m,\n      '\\n  From calling: ' + showf(this.mapper) + '\\n  With: ' + show(x)\n    ));\n  };\n\n  ChainRejAction.prototype.toString = function ChainRejAction$toString(){\n    return 'chainRej(' + showf(this.mapper) + ')';\n  };\n\n  function SwapAction(){}\n  SwapAction.prototype = Object.create(Action);\n\n  SwapAction.prototype.rejected = function SwapAction$rejected(x){\n    return new Resolved(x);\n  };\n\n  SwapAction.prototype.resolved = function SwapAction$resolved(x){\n    return new Rejected(x);\n  };\n\n  SwapAction.prototype.toString = function SwapAction$toString(){\n    return 'swap()';\n  };\n\n  function FoldAction(lmapper, rmapper){ this.lmapper = lmapper; this.rmapper = rmapper; }\n  FoldAction.prototype = Object.create(Action);\n\n  FoldAction.prototype.rejected = function FoldAction$rejected(x){\n    var m;\n    try{ m = new Resolved(this.lmapper(x)); }catch(e){ m = new Crashed(e); }\n    return m;\n  };\n\n  FoldAction.prototype.resolved = function FoldAction$resolved(x){\n    var m;\n    try{ m = new Resolved(this.rmapper(x)); }catch(e){ m = new Crashed(e); }\n    return m;\n  };\n\n  FoldAction.prototype.toString = function FoldAction$toString(){\n    return 'fold(' + showf(this.lmapper) + ', ' + showf(this.rmapper) + ')';\n  };\n\n  function FinallyAction(other){ this.other = other; }\n  FinallyAction.prototype = Object.create(Action);\n\n  FinallyAction.prototype.rejected = function FinallyAction$rejected(x){\n    return this.other._and(new Rejected(x));\n  };\n\n  FinallyAction.prototype.resolved = function FinallyAction$resolved(x){\n    return this.other._map(function FoldAction$resolved$mapper(){ return x });\n  };\n\n  FinallyAction.prototype.cancel = function FinallyAction$cancel(){\n    this.other._interpret(noop, noop, noop)();\n  };\n\n  FinallyAction.prototype.toString = function FinallyAction$toString(){\n    return 'finally(' + this.other.toString() + ')';\n  };\n\n  function AndAction(other){ this.other = other; }\n  AndAction.prototype = Object.create(Action);\n\n  AndAction.prototype.resolved = function AndAction$resolved(){\n    return this.other;\n  };\n\n  AndAction.prototype.toString = function AndAction$toString(){\n    return 'and(' + this.other.toString() + ')';\n  };\n\n  function OrAction(other){ this.other = other; }\n  OrAction.prototype = Object.create(Action);\n\n  OrAction.prototype.rejected = function OrAction$rejected(){\n    return this.other;\n  };\n\n  OrAction.prototype.toString = function OrAction$toString(){\n    return 'or(' + this.other.toString() + ')';\n  };\n\n  function ParallelApAction(other){ this.other = other; }\n  ParallelApAction.prototype = Object.create(ApAction.prototype);\n\n  ParallelApAction.prototype.run = function ParallelApAction$run(early){\n    return new ParallelApActionState(early, this.other);\n  };\n\n  ParallelApAction.prototype.toString = function ParallelApAction$toString(){\n    return '_parallelAp(' + this.other.toString() + ')';\n  };\n\n  function RaceAction(other){ this.other = other; }\n  RaceAction.prototype = Object.create(Action);\n\n  RaceAction.prototype.run = function RaceAction$run(early){\n    return new RaceActionState(early, new Eager(this.other));\n  };\n\n  RaceAction.prototype.toString = function RaceAction$toString(){\n    return 'race(' + this.other.toString() + ')';\n  };\n\n  function BothAction(other){ this.other = other; }\n  BothAction.prototype = Object.create(Action);\n\n  BothAction.prototype.resolved = function BothAction$resolved(x){\n    return this.other._map(function BothAction$resolved$mapper(y){ return [x, y] });\n  };\n\n  BothAction.prototype.run = function BothAction$run(early){\n    return new BothActionState(early, new Eager(this.other));\n  };\n\n  BothAction.prototype.toString = function BothAction$toString(){\n    return 'both(' + this.other.toString() + ')';\n  };\n\n  function ParallelApActionState(early, other){\n    var _this = this;\n    _this.other = new Eager(other);\n    _this.cancel = this.other._interpret(\n      function ParallelApActionState$rec(x){ early(new Crashed(x), _this); },\n      function ParallelApActionState$rej(x){ early(new Rejected(x), _this); },\n      noop\n    );\n  }\n\n  ParallelApActionState.prototype = Object.create(ParallelApAction.prototype);\n\n  function RaceActionState(early, other){\n    var _this = this;\n    _this.other = other;\n    _this.cancel = other._interpret(\n      function RaceActionState$rec(x){ early(new Crashed(x), _this); },\n      function RaceActionState$rej(x){ early(new Rejected(x), _this); },\n      function RaceActionState$res(x){ early(new Resolved(x), _this); }\n    );\n  }\n\n  RaceActionState.prototype = Object.create(RaceAction.prototype);\n\n  function BothActionState(early, other){\n    var _this = this;\n    _this.other = other;\n    _this.cancel = other._interpret(\n      function BothActionState$rec(x){ early(new Crashed(x), _this); },\n      function BothActionState$rej(x){ early(new Rejected(x), _this); },\n      noop\n    );\n  }\n\n  BothActionState.prototype = Object.create(BothAction.prototype);\n\n  function Sequence(spawn, actions){\n    this._spawn = spawn;\n    this._actions = actions || nil;\n  }\n\n  Sequence.prototype = Object.create(Future.prototype);\n\n  Sequence.prototype._transform = function Sequence$_transform(action){\n    return new Sequence(this._spawn, cons(action, this._actions));\n  };\n\n  Sequence.prototype._ap = function Sequence$ap(other){\n    return this._transform(new ApAction(other));\n  };\n\n  Sequence.prototype._parallelAp = function Sequence$pap(other){\n    return this._transform(new ParallelApAction(other));\n  };\n\n  Sequence.prototype._map = function Sequence$map(mapper){\n    return this._transform(new MapAction(mapper));\n  };\n\n  Sequence.prototype._bimap = function Sequence$bimap(lmapper, rmapper){\n    return this._transform(new BimapAction(lmapper, rmapper));\n  };\n\n  Sequence.prototype._chain = function Sequence$chain(mapper){\n    return this._transform(new ChainAction(mapper));\n  };\n\n  Sequence.prototype._mapRej = function Sequence$mapRej(mapper){\n    return this._transform(new MapRejAction(mapper));\n  };\n\n  Sequence.prototype._chainRej = function Sequence$chainRej(mapper){\n    return this._transform(new ChainRejAction(mapper));\n  };\n\n  Sequence.prototype._race = function Sequence$race(other){\n    return isNever(other) ? this : this._transform(new RaceAction(other));\n  };\n\n  Sequence.prototype._both = function Sequence$both(other){\n    return this._transform(new BothAction(other));\n  };\n\n  Sequence.prototype._and = function Sequence$and(other){\n    return this._transform(new AndAction(other));\n  };\n\n  Sequence.prototype._or = function Sequence$or(other){\n    return this._transform(new OrAction(other));\n  };\n\n  Sequence.prototype._swap = function Sequence$swap(){\n    return this._transform(new SwapAction);\n  };\n\n  Sequence.prototype._fold = function Sequence$fold(lmapper, rmapper){\n    return this._transform(new FoldAction(lmapper, rmapper));\n  };\n\n  Sequence.prototype._finally = function Sequence$finally(other){\n    return this._transform(new FinallyAction(other));\n  };\n\n  Sequence.prototype._interpret = function Sequence$interpret(rec, rej, res){\n    return interpretSequence(this, rec, rej, res);\n  };\n\n  Sequence.prototype.toString = function Sequence$toString(){\n    var str = '', tail = this._actions;\n\n    while(tail !== nil){\n      str = '.' + tail.head.toString() + str;\n      tail = tail.tail;\n    }\n\n    return this._spawn.toString() + str;\n  };\n\n  function Next(x){\n    return {done: false, value: x};\n  }\n\n  function Done(x){\n    return {done: true, value: x};\n  }\n\n  function isIteration(x){\n    return isObject(x) && isBoolean(x.done);\n  }\n\n  var Undetermined = 0;\n  var Synchronous = 1;\n  var Asynchronous = 2;\n\n  function ChainRec(step, init){\n    this._step = step;\n    this._init = init;\n  }\n\n  ChainRec.prototype = Object.create(Core);\n\n  ChainRec.prototype._interpret = function ChainRec$interpret(rec, rej, res){\n\n    var _step = this._step;\n    var _init = this._init;\n    var timing = Undetermined, cancel = noop, state = Next(_init);\n\n    function resolved(it){\n      state = it;\n      timing = timing === Undetermined ? Synchronous : drain();\n    }\n\n    function drain(){\n      while(!state.done){\n        timing = Undetermined;\n\n        try{\n          var m = _step(Next, Done, state.value);\n        }catch(e){\n          rec(e);\n          return;\n        }\n\n        cancel = m._interpret(rec, rej, resolved);\n\n        if(timing !== Synchronous){\n          timing = Asynchronous;\n          return;\n        }\n      }\n\n      res(state.value);\n    }\n\n    drain();\n\n    return function Future$chainRec$cancel(){ cancel(); };\n\n  };\n\n  ChainRec.prototype.toString = function ChainRec$toString(){\n    return 'Future.chainRec(' + showf(this._step) + ', ' + show(this._init) + ')';\n  };\n\n  function chainRec(step, init){\n    return new ChainRec(step, init);\n  }\n\n  function ap$mval(mval, mfunc){\n    if(!Z.Apply.test(mfunc)) throwInvalidArgument('Future.ap', 1, 'be an Apply', mfunc);\n    return Z.ap(mval, mfunc);\n  }\n\n  function ap(mval, mfunc){\n    if(!Z.Apply.test(mval)) throwInvalidArgument('Future.ap', 0, 'be an Apply', mval);\n    if(arguments.length === 1) return partial1(ap$mval, mval);\n    return ap$mval(mval, mfunc);\n  }\n\n  function alt$left(left, right){\n    if(!Z.Alt.test(right)) throwInvalidArgument('alt', 1, 'be an Alt', right);\n    return Z.alt(left, right);\n  }\n\n  function alt(left, right){\n    if(!Z.Alt.test(left)) throwInvalidArgument('alt', 0, 'be an Alt', left);\n    if(arguments.length === 1) return partial1(alt$left, left);\n    return alt$left(left, right);\n  }\n\n  function map$mapper(mapper, m){\n    if(!Z.Functor.test(m)) throwInvalidArgument('Future.map', 1, 'be a Functor', m);\n    return Z.map(mapper, m);\n  }\n\n  function map(mapper, m){\n    if(!isFunction(mapper)) throwInvalidArgument('Future.map', 0, 'be a Function', mapper);\n    if(arguments.length === 1) return partial1(map$mapper, mapper);\n    return map$mapper(mapper, m);\n  }\n\n  function bimap$lmapper$rmapper(lmapper, rmapper, m){\n    if(!Z.Bifunctor.test(m)) throwInvalidArgument('Future.bimap', 2, 'be a Bifunctor', m);\n    return Z.bimap(lmapper, rmapper, m);\n  }\n\n  function bimap$lmapper(lmapper, rmapper, m){\n    if(!isFunction(rmapper)) throwInvalidArgument('Future.bimap', 1, 'be a Function', rmapper);\n    if(arguments.length === 2) return partial2(bimap$lmapper$rmapper, lmapper, rmapper);\n    return bimap$lmapper$rmapper(lmapper, rmapper, m);\n  }\n\n  function bimap(lmapper, rmapper, m){\n    if(!isFunction(lmapper)) throwInvalidArgument('Future.bimap', 0, 'be a Function', lmapper);\n    if(arguments.length === 1) return partial1(bimap$lmapper, lmapper);\n    if(arguments.length === 2) return bimap$lmapper(lmapper, rmapper);\n    return bimap$lmapper(lmapper, rmapper, m);\n  }\n\n  function chain$chainer(chainer, m){\n    if(!Z.Chain.test(m)) throwInvalidArgument('Future.chain', 1, 'be a Chain', m);\n    return Z.chain(chainer, m);\n  }\n\n  function chain(chainer, m){\n    if(!isFunction(chainer)) throwInvalidArgument('Future.chain', 0, 'be a Function', chainer);\n    if(arguments.length === 1) return partial1(chain$chainer, chainer);\n    return chain$chainer(chainer, m);\n  }\n\n  function mapRej$mapper(mapper, m){\n    if(!isFuture(m)) throwInvalidFuture('Future.mapRej', 1, m);\n    return m.mapRej(mapper);\n  }\n\n  function mapRej(mapper, m){\n    if(!isFunction(mapper)) throwInvalidArgument('Future.mapRej', 0, 'be a Function', mapper);\n    if(arguments.length === 1) return partial1(mapRej$mapper, mapper);\n    return mapRej$mapper(mapper, m);\n  }\n\n  function chainRej$chainer(chainer, m){\n    if(!isFuture(m)) throwInvalidFuture('Future.chainRej', 1, m);\n    return m.chainRej(chainer);\n  }\n\n  function chainRej(chainer, m){\n    if(!isFunction(chainer)) throwInvalidArgument('Future.chainRej', 0, 'be a Function', chainer);\n    if(arguments.length === 1) return partial1(chainRej$chainer, chainer);\n    return chainRej$chainer(chainer, m);\n  }\n\n  function lastly$right(right, left){\n    if(!isFuture(left)) throwInvalidFuture('Future.finally', 1, left);\n    return left.finally(right);\n  }\n\n  function lastly(right, left){\n    if(!isFuture(right)) throwInvalidFuture('Future.finally', 0, right);\n    if(arguments.length === 1) return partial1(lastly$right, right);\n    return lastly$right(right, left);\n  }\n\n  function and$left(left, right){\n    if(!isFuture(right)) throwInvalidFuture('Future.and', 1, right);\n    return left.and(right);\n  }\n\n  function and(left, right){\n    if(!isFuture(left)) throwInvalidFuture('Future.and', 0, left);\n    if(arguments.length === 1) return partial1(and$left, left);\n    return and$left(left, right);\n  }\n\n  function both$left(left, right){\n    if(!isFuture(right)) throwInvalidFuture('Future.both', 1, right);\n    return left.both(right);\n  }\n\n  function both(left, right){\n    if(!isFuture(left)) throwInvalidFuture('Future.both', 0, left);\n    if(arguments.length === 1) return partial1(both$left, left);\n    return both$left(left, right);\n  }\n\n  function or$left(left, right){\n    if(!isFuture(right)) throwInvalidFuture('Future.or', 1, right);\n    return left.or(right);\n  }\n\n  function or(left, right){\n    if(!isFuture(left)) throwInvalidFuture('Future.or', 0, left);\n    if(arguments.length === 1) return partial1(or$left, left);\n    return or$left(left, right);\n  }\n\n  function race$right(right, left){\n    if(!isFuture(left)) throwInvalidFuture('Future.race', 1, left);\n    return left.race(right);\n  }\n\n  function race(right, left){\n    if(!isFuture(right)) throwInvalidFuture('Future.race', 0, right);\n    if(arguments.length === 1) return partial1(race$right, right);\n    return race$right(right, left);\n  }\n\n  function swap(m){\n    if(!isFuture(m)) throwInvalidFuture('Future.swap', 0, m);\n    return m.swap();\n  }\n\n  function fold$f$g(f, g, m){\n    if(!isFuture(m)) throwInvalidFuture('Future.fold', 2, m);\n    return m.fold(f, g);\n  }\n\n  function fold$f(f, g, m){\n    if(!isFunction(g)) throwInvalidArgument('Future.fold', 1, 'be a function', g);\n    if(arguments.length === 2) return partial2(fold$f$g, f, g);\n    return fold$f$g(f, g, m);\n  }\n\n  function fold(f, g, m){\n    if(!isFunction(f)) throwInvalidArgument('Future.fold', 0, 'be a function', f);\n    if(arguments.length === 1) return partial1(fold$f, f);\n    if(arguments.length === 2) return fold$f(f, g);\n    return fold$f(f, g, m);\n  }\n\n  function done$callback(callback, m){\n    if(!isFuture(m)) throwInvalidFuture('Future.done', 1, m);\n    return m.done(callback);\n  }\n\n  function done(callback, m){\n    if(!isFunction(callback)) throwInvalidArgument('Future.done', 0, 'be a Function', callback);\n    if(arguments.length === 1) return partial1(done$callback, callback);\n    return done$callback(callback, m);\n  }\n\n  function fork$f$g(f, g, m){\n    if(!isFuture(m)) throwInvalidFuture('Future.fork', 2, m);\n    return m._interpret(raise, f, g);\n  }\n\n  function fork$f(f, g, m){\n    if(!isFunction(g)) throwInvalidArgument('Future.fork', 1, 'be a function', g);\n    if(arguments.length === 2) return partial2(fork$f$g, f, g);\n    return fork$f$g(f, g, m);\n  }\n\n  function fork(f, g, m){\n    if(!isFunction(f)) throwInvalidArgument('Future.fork', 0, 'be a function', f);\n    if(arguments.length === 1) return partial1(fork$f, f);\n    if(arguments.length === 2) return fork$f(f, g);\n    return fork$f(f, g, m);\n  }\n\n  function forkCatch(f, g, h, m){\n    if(!isFunction(f)) throwInvalidArgument('Future.forkCatch', 0, 'be a function', f);\n    if(arguments.length === 1) return partial1(forkCatch, f);\n    if(!isFunction(g)) throwInvalidArgument('Future.forkCatch', 1, 'be a function', g);\n    if(arguments.length === 2) return partial2(forkCatch, f, g);\n    if(!isFunction(h)) throwInvalidArgument('Future.forkCatch', 2, 'be a function', h);\n    if(arguments.length === 3) return partial3(forkCatch, f, g, h);\n    if(!isFuture(m)) throwInvalidFuture('Future.forkCatch', 3, m);\n    return m._interpret(f, g, h);\n  }\n\n  function promise(m){\n    if(!isFuture(m)) throwInvalidFuture('Future.promise', 0, m);\n    return m.promise();\n  }\n\n  function value$cont(cont, m){\n    if(!isFuture(m)) throwInvalidFuture('Future.value', 1, m);\n    return m.value(cont);\n  }\n\n  function value(cont, m){\n    if(!isFunction(cont)) throwInvalidArgument('Future.value', 0, 'be a Function', cont);\n    if(arguments.length === 1) return partial1(value$cont, cont);\n    return value$cont(cont, m);\n  }\n\n  function extractLeft(m){\n    if(!isFuture(m)) throwInvalidFuture('Future.extractLeft', 0, m);\n    return m.extractLeft();\n  }\n\n  function extractRight(m){\n    if(!isFuture(m)) throwInvalidFuture('Future.extractRight', 0, m);\n    return m.extractRight();\n  }\n\n  function After$race(other){\n    return other.isSettled()\n         ? other\n         : isNever(other)\n         ? this\n         : typeof other._time === 'number'\n         ? other._time < this._time ? other : this\n         : Core._race.call(this, other);\n  }\n\n  function After(time, value){\n    this._time = time;\n    this._value = value;\n  }\n\n  After.prototype = Object.create(Core);\n\n  After.prototype._race = After$race;\n\n  After.prototype._swap = function After$swap(){\n    return new RejectAfter(this._time, this._value);\n  };\n\n  After.prototype._interpret = function After$interpret(rec, rej, res){\n    var id = setTimeout(res, this._time, this._value);\n    return function After$cancel(){ clearTimeout(id); };\n  };\n\n  After.prototype.extractRight = function After$extractRight(){\n    return [this._value];\n  };\n\n  After.prototype.toString = function After$toString(){\n    return 'Future.after(' + show(this._time) + ', ' + show(this._value) + ')';\n  };\n\n  function RejectAfter(time, value){\n    this._time = time;\n    this._value = value;\n  }\n\n  RejectAfter.prototype = Object.create(Core);\n\n  RejectAfter.prototype._race = After$race;\n\n  RejectAfter.prototype._swap = function RejectAfter$swap(){\n    return new After(this._time, this._value);\n  };\n\n  RejectAfter.prototype._interpret = function RejectAfter$interpret(rec, rej){\n    var id = setTimeout(rej, this._time, this._value);\n    return function RejectAfter$cancel(){ clearTimeout(id); };\n  };\n\n  RejectAfter.prototype.extractLeft = function RejectAfter$extractLeft(){\n    return [this._value];\n  };\n\n  RejectAfter.prototype.toString = function RejectAfter$toString(){\n    return 'Future.rejectAfter(' + show(this._time) + ', ' + show(this._value) + ')';\n  };\n\n  function after$time(time, value){\n    return time === Infinity ? never : new After(time, value);\n  }\n\n  function after(time, value){\n    if(!isUnsigned(time)) throwInvalidArgument('Future.after', 0, 'be a positive integer', time);\n    if(arguments.length === 1) return partial1(after$time, time);\n    return after$time(time, value);\n  }\n\n  function rejectAfter$time(time, reason){\n    return time === Infinity ? never : new RejectAfter(time, reason);\n  }\n\n  function rejectAfter(time, reason){\n    if(!isUnsigned(time)){\n      throwInvalidArgument('Future.rejectAfter', 0, 'be a positive integer', time);\n    }\n    if(arguments.length === 1) return partial1(rejectAfter$time, time);\n    return rejectAfter$time(time, reason);\n  }\n\n  function Attempt(fn){\n    this._fn = fn;\n  }\n\n  Attempt.prototype = Object.create(Core);\n\n  Attempt.prototype._interpret = function Attempt$interpret(rec, rej, res){\n    var r;\n    try{ r = this._fn(); }catch(e){ rej(e); return noop }\n    res(r);\n    return noop;\n  };\n\n  Attempt.prototype.toString = function Attempt$toString(){\n    return 'Future.try(' + showf(this._fn) + ')';\n  };\n\n  function attempt(f){\n    if(!isFunction(f)) throwInvalidArgument('Future.try', 0, 'be a function', f);\n    return new Attempt(f);\n  }\n\n  var Cold = Cached.Cold = 0;\n  var Pending = Cached.Pending = 1;\n  var Crashed$1 = Cached.Crashed = 2;\n  var Rejected$1 = Cached.Rejected = 3;\n  var Resolved$1 = Cached.Resolved = 4;\n\n  function Queued(rec, rej, res){\n    this[Crashed$1] = rec;\n    this[Rejected$1] = rej;\n    this[Resolved$1] = res;\n  }\n\n  function Cached(pure){\n    this._pure = pure;\n    this.reset();\n  }\n\n  Cached.prototype = Object.create(Core);\n\n  Cached.prototype.isRejected = function Cached$isRejected(){\n    return this._state === Rejected$1;\n  };\n\n  Cached.prototype.isResolved = function Cached$isResolved(){\n    return this._state === Resolved$1;\n  };\n\n  Cached.prototype.extractLeft = function Cached$extractLeft(){\n    return this.isRejected() ? [this._value] : [];\n  };\n\n  Cached.prototype.extractRight = function Cached$extractRight(){\n    return this.isResolved() ? [this._value] : [];\n  };\n\n  Cached.prototype._addToQueue = function Cached$addToQueue(rec, rej, res){\n    var _this = this;\n    if(_this._state > Pending) return noop;\n    var i = _this._queue.push(new Queued(rec, rej, res)) - 1;\n    _this._queued = _this._queued + 1;\n\n    return function Cached$removeFromQueue(){\n      if(_this._state > Pending) return;\n      _this._queue[i] = undefined;\n      _this._queued = _this._queued - 1;\n      if(_this._queued === 0) _this.reset();\n    };\n  };\n\n  Cached.prototype._drainQueue = function Cached$drainQueue(){\n    if(this._state <= Pending) return;\n    if(this._queued === 0) return;\n    var queue = this._queue;\n    var length = queue.length;\n    var state = this._state;\n    var value = this._value;\n\n    for(var i = 0; i < length; i++){\n      queue[i] && queue[i][state](value);\n      queue[i] = undefined;\n    }\n\n    this._queue = undefined;\n    this._queued = 0;\n  };\n\n  Cached.prototype.crash = function Cached$crash(error){\n    if(this._state > Pending) return;\n    this._value = error;\n    this._state = Crashed$1;\n    this._drainQueue();\n  };\n\n  Cached.prototype.reject = function Cached$reject(reason){\n    if(this._state > Pending) return;\n    this._value = reason;\n    this._state = Rejected$1;\n    this._drainQueue();\n  };\n\n  Cached.prototype.resolve = function Cached$resolve(value){\n    if(this._state > Pending) return;\n    this._value = value;\n    this._state = Resolved$1;\n    this._drainQueue();\n  };\n\n  Cached.prototype.run = function Cached$run(){\n    var _this = this;\n    if(_this._state > Cold) return;\n    _this._state = Pending;\n    _this._cancel = _this._pure._interpret(\n      function Cached$fork$rec(x){ _this.crash(x); },\n      function Cached$fork$rej(x){ _this.reject(x); },\n      function Cached$fork$res(x){ _this.resolve(x); }\n    );\n  };\n\n  Cached.prototype.reset = function Cached$reset(){\n    if(this._state === Cold) return;\n    if(this._state === Pending) this._cancel();\n    this._cancel = noop;\n    this._queue = [];\n    this._queued = 0;\n    this._value = undefined;\n    this._state = Cold;\n  };\n\n  Cached.prototype._interpret = function Cached$interpret(rec, rej, res){\n    var cancel = noop;\n\n    switch(this._state){\n      case Pending: cancel = this._addToQueue(rec, rej, res); break;\n      case Crashed$1: rec(this._value); break;\n      case Rejected$1: rej(this._value); break;\n      case Resolved$1: res(this._value); break;\n      default: cancel = this._addToQueue(rec, rej, res); this.run();\n    }\n\n    return cancel;\n  };\n\n  Cached.prototype.toString = function Cached$toString(){\n    return 'Future.cache(' + this._pure.toString() + ')';\n  };\n\n  function cache(m){\n    if(!isFuture(m)) throwInvalidFuture('Future.cache', 0, m);\n    return new Cached(m);\n  }\n\n  function Encase(fn, a){\n    this._fn = fn;\n    this._a = a;\n  }\n\n  Encase.prototype = Object.create(Core);\n\n  Encase.prototype._interpret = function Encase$interpret(rec, rej, res){\n    var r;\n    try{ r = this._fn(this._a); }catch(e){ rej(e); return noop }\n    res(r);\n    return noop;\n  };\n\n  Encase.prototype.toString = function Encase$toString(){\n    return 'Future.encase(' + showf(this._fn) + ', ' + show(this._a) + ')';\n  };\n\n  function encase(f, x){\n    if(!isFunction(f)) throwInvalidArgument('Future.encase', 0, 'be a function', f);\n    if(arguments.length === 1) return partial1(encase, f);\n    return new Encase(f, x);\n  }\n\n  function Encase2(fn, a, b){\n    this._fn = fn;\n    this._a = a;\n    this._b = b;\n  }\n\n  Encase2.prototype = Object.create(Core);\n\n  Encase2.prototype._interpret = function Encase2$interpret(rec, rej, res){\n    var r;\n    try{ r = this._fn(this._a, this._b); }catch(e){ rej(e); return noop }\n    res(r);\n    return noop;\n  };\n\n  Encase2.prototype.toString = function Encase2$toString(){\n    return 'Future.encase2(' + showf(this._fn) + ', ' + show(this._a) + ', ' + show(this._b) + ')';\n  };\n\n  function encase2(f, x, y){\n    if(!isFunction(f)) throwInvalidArgument('Future.encase2', 0, 'be a function', f);\n\n    switch(arguments.length){\n      case 1: return partial1(encase2, f);\n      case 2: return partial2(encase2, f, x);\n      default: return new Encase2(f, x, y);\n    }\n  }\n\n  function Encase3(fn, a, b, c){\n    this._fn = fn;\n    this._a = a;\n    this._b = b;\n    this._c = c;\n  }\n\n  Encase3.prototype = Object.create(Core);\n\n  Encase3.prototype._interpret = function Encase3$interpret(rec, rej, res){\n    var r;\n    try{ r = this._fn(this._a, this._b, this._c); }catch(e){ rej(e); return noop }\n    res(r);\n    return noop;\n  };\n\n  Encase3.prototype.toString = function Encase3$toString(){\n    return 'Future.encase3('\n         + showf(this._fn)\n         + ', '\n         + show(this._a)\n         + ', '\n         + show(this._b)\n         + ', '\n         + show(this._c)\n         + ')';\n  };\n\n  function encase3(f, x, y, z){\n    if(!isFunction(f)) throwInvalidArgument('Future.encase3', 0, 'be a function', f);\n\n    switch(arguments.length){\n      case 1: return partial1(encase3, f);\n      case 2: return partial2(encase3, f, x);\n      case 3: return partial3(encase3, f, x, y);\n      default: return new Encase3(f, x, y, z);\n    }\n  }\n\n  function EncaseN(fn, a){\n    this._fn = fn;\n    this._a = a;\n  }\n\n  EncaseN.prototype = Object.create(Core);\n\n  EncaseN.prototype._interpret = function EncaseN$interpret(rec, rej, res){\n    var open = false, cont = function(){ open = true; };\n    try{\n      this._fn(this._a, function EncaseN$done(err, val){\n        cont = err ? function EncaseN3$rej(){\n          open = false;\n          rej(err);\n        } : function EncaseN3$res(){\n          open = false;\n          res(val);\n        };\n        if(open){\n          cont();\n        }\n      });\n    }catch(e){\n      rec(e);\n      open = false;\n      return noop;\n    }\n    cont();\n    return function EncaseN$cancel(){ open = false; };\n  };\n\n  EncaseN.prototype.toString = function EncaseN$toString(){\n    return 'Future.encaseN(' + showf(this._fn) + ', ' + show(this._a) + ')';\n  };\n\n  function encaseN(f, x){\n    if(!isFunction(f)) throwInvalidArgument('Future.encaseN', 0, 'be a function', f);\n    if(arguments.length === 1) return partial1(encaseN, f);\n    return new EncaseN(f, x);\n  }\n\n  function EncaseN2(fn, a, b){\n    this._fn = fn;\n    this._a = a;\n    this._b = b;\n  }\n\n  EncaseN2.prototype = Object.create(Core);\n\n  EncaseN2.prototype._interpret = function EncaseN2$interpret(rec, rej, res){\n    var open = false, cont = function(){ open = true; };\n    try{\n      this._fn(this._a, this._b, function EncaseN2$done(err, val){\n        cont = err ? function EncaseN2$rej(){\n          open = false;\n          rej(err);\n        } : function EncaseN2$res(){\n          open = false;\n          res(val);\n        };\n        if(open){\n          cont();\n        }\n      });\n    }catch(e){\n      rec(e);\n      open = false;\n      return noop;\n    }\n    cont();\n    return function EncaseN2$cancel(){ open = false; };\n  };\n\n  EncaseN2.prototype.toString = function EncaseN2$toString(){\n    return 'Future.encaseN2(' + showf(this._fn) + ', ' + show(this._a) + ', ' + show(this._b) + ')';\n  };\n\n  function encaseN2(f, x, y){\n    if(!isFunction(f)) throwInvalidArgument('Future.encaseN2', 0, 'be a function', f);\n\n    switch(arguments.length){\n      case 1: return partial1(encaseN2, f);\n      case 2: return partial2(encaseN2, f, x);\n      default: return new EncaseN2(f, x, y);\n    }\n  }\n\n  function EncaseN3(fn, a, b, c){\n    this._fn = fn;\n    this._a = a;\n    this._b = b;\n    this._c = c;\n  }\n\n  EncaseN3.prototype = Object.create(Core);\n\n  EncaseN3.prototype._interpret = function EncaseN3$interpret(rec, rej, res){\n    var open = false, cont = function(){ open = true; };\n    try{\n      this._fn(this._a, this._b, this._c, function EncaseN3$done(err, val){\n        cont = err ? function EncaseN3$rej(){\n          open = false;\n          rej(err);\n        } : function EncaseN3$res(){\n          open = false;\n          res(val);\n        };\n        if(open){\n          cont();\n        }\n      });\n    }catch(e){\n      rec(e);\n      open = false;\n      return noop;\n    }\n    cont();\n    return function EncaseN3$cancel(){ open = false; };\n  };\n\n  EncaseN3.prototype.toString = function EncaseN3$toString(){\n    return 'Future.encaseN3('\n         + showf(this._fn)\n         + ', '\n         + show(this._a)\n         + ', '\n         + show(this._b)\n         + ', '\n         + show(this._c)\n         + ')';\n  };\n\n  function encaseN3(f, x, y, z){\n    if(!isFunction(f)) throwInvalidArgument('Future.encaseN3', 0, 'be a function', f);\n\n    switch(arguments.length){\n      case 1: return partial1(encaseN3, f);\n      case 2: return partial2(encaseN3, f, x);\n      case 3: return partial3(encaseN3, f, x, y);\n      default: return new EncaseN3(f, x, y, z);\n    }\n  }\n\n  function invalidPromise(p, f, a){\n    return typeError(\n      'Future.encaseP expects the function it\\'s given to return a Promise/Thenable'\n      + '\\n  Actual: ' + (show(p)) + '\\n  From calling: ' + (showf(f))\n      + '\\n  With: ' + (show(a))\n    );\n  }\n\n  function EncaseP(fn, a){\n    this._fn = fn;\n    this._a = a;\n  }\n\n  EncaseP.prototype = Object.create(Core);\n\n  EncaseP.prototype._interpret = function EncaseP$interpret(rec, rej, res){\n    var open = true, fn = this._fn, a = this._a, p;\n    try{\n      p = fn(a);\n    }catch(e){\n      rec(e);\n      return noop;\n    }\n    if(!isThenable(p)){\n      rec(invalidPromise(p, fn, a));\n      return noop;\n    }\n    p.then(function EncaseP$res(x){\n      if(open){\n        open = false;\n        res(x);\n      }\n    }, function EncaseP$rej(x){\n      if(open){\n        open = false;\n        rej(x);\n      }\n    });\n    return function EncaseP$cancel(){ open = false; };\n  };\n\n  EncaseP.prototype.toString = function EncaseP$toString(){\n    return 'Future.encaseP(' + showf(this._fn) + ', ' + show(this._a) + ')';\n  };\n\n  function encaseP(f, x){\n    if(!isFunction(f)) throwInvalidArgument('Future.encaseP', 0, 'be a function', f);\n    if(arguments.length === 1) return partial1(encaseP, f);\n    return new EncaseP(f, x);\n  }\n\n  function invalidPromise$1(p, f, a, b){\n    return typeError(\n      'Future.encaseP2 expects the function it\\'s given to return a Promise/Thenable'\n      + '\\n  Actual: ' + (show(p)) + '\\n  From calling: ' + (showf(f))\n      + '\\n  With 1: ' + (show(a))\n      + '\\n  With 2: ' + (show(b))\n    );\n  }\n\n  function EncaseP2(fn, a, b){\n    this._fn = fn;\n    this._a = a;\n    this._b = b;\n  }\n\n  EncaseP2.prototype = Object.create(Core);\n\n  EncaseP2.prototype._interpret = function EncaseP2$interpret(rec, rej, res){\n    var open = true, fn = this._fn, a = this._a, b = this._b, p;\n    try{\n      p = fn(a, b);\n    }catch(e){\n      rec(e);\n      return noop;\n    }\n    if(!isThenable(p)){\n      rec(invalidPromise$1(p, fn, a, b));\n      return noop;\n    }\n    p.then(function EncaseP2$res(x){\n      if(open){\n        open = false;\n        res(x);\n      }\n    }, function EncaseP2$rej(x){\n      if(open){\n        open = false;\n        rej(x);\n      }\n    });\n    return function EncaseP2$cancel(){ open = false; };\n  };\n\n  EncaseP2.prototype.toString = function EncaseP2$toString(){\n    return 'Future.encaseP2(' + showf(this._fn) + ', ' + show(this._a) + ', ' + show(this._b) + ')';\n  };\n\n  function encaseP2(f, x, y){\n    if(!isFunction(f)) throwInvalidArgument('Future.encaseP2', 0, 'be a function', f);\n\n    switch(arguments.length){\n      case 1: return partial1(encaseP2, f);\n      case 2: return partial2(encaseP2, f, x);\n      default: return new EncaseP2(f, x, y);\n    }\n  }\n\n  function invalidPromise$2(p, f, a, b, c){\n    return typeError(\n      'Future.encaseP3 expects the function it\\'s given to return a Promise/Thenable'\n      + '\\n  Actual: ' + (show(p)) + '\\n  From calling: ' + (showf(f))\n      + '\\n  With 1: ' + (show(a))\n      + '\\n  With 2: ' + (show(b))\n      + '\\n  With 3: ' + (show(c))\n    );\n  }\n\n  function EncaseP3(fn, a, b, c){\n    this._fn = fn;\n    this._a = a;\n    this._b = b;\n    this._c = c;\n  }\n\n  EncaseP3.prototype = Object.create(Core);\n\n  EncaseP3.prototype._interpret = function EncaseP3$interpret(rec, rej, res){\n    var open = true, fn = this._fn, a = this._a, b = this._b, c = this._c, p;\n    try{\n      p = fn(a, b, c);\n    }catch(e){\n      rec(e);\n      return noop;\n    }\n    if(!isThenable(p)){\n      rec(invalidPromise$2(p, fn, a, b, c));\n      return noop;\n    }\n    p.then(function EncaseP3$res(x){\n      if(open){\n        open = false;\n        res(x);\n      }\n    }, function EncaseP3$rej(x){\n      if(open){\n        open = false;\n        rej(x);\n      }\n    });\n    return function EncaseP3$cancel(){ open = false; };\n  };\n\n  EncaseP3.prototype.toString = function EncaseP3$toString(){\n    return 'Future.encaseP3('\n         + showf(this._fn)\n         + ', '\n         + show(this._a)\n         + ', '\n         + show(this._b)\n         + ', '\n         + show(this._c)\n         + ')';\n  };\n\n  function encaseP3(f, x, y, z){\n    if(!isFunction(f)) throwInvalidArgument('Future.encaseP3', 0, 'be a function', f);\n\n    switch(arguments.length){\n      case 1: return partial1(encaseP3, f);\n      case 2: return partial2(encaseP3, f, x);\n      case 3: return partial3(encaseP3, f, x, y);\n      default: return new EncaseP3(f, x, y, z);\n    }\n  }\n\n  /*eslint consistent-return: 0, no-cond-assign: 0*/\n\n  function invalidIteration(o){\n    return typeError(\n      'The iterator did not return a valid iteration from iterator.next()\\n' +\n      '  Actual: ' + show(o)\n    );\n  }\n\n  function invalidState(x){\n    return invalidFuture(\n      'Future.do',\n      'the iterator to produce only valid Futures',\n      x,\n      '\\n  Tip: If you\\'re using a generator, make sure you always yield a Future'\n    );\n  }\n\n  function Go(generator){\n    this._generator = generator;\n  }\n\n  Go.prototype = Object.create(Core);\n\n  Go.prototype._interpret = function Go$interpret(rec, rej, res){\n\n    var timing = Undetermined, cancel = noop, state, value, iterator;\n\n    try{\n      iterator = this._generator();\n    }catch(e){\n      rec(e);\n      return noop;\n    }\n\n    if(!isIterator(iterator)){\n      rec(invalidArgument('Future.do', 0, 'return an iterator, maybe you forgot the \"*\"', iterator));\n      return noop;\n    }\n\n    function resolved(x){\n      value = x;\n      if(timing === Asynchronous) return drain();\n      timing = Synchronous;\n    }\n\n    function drain(){\n      //eslint-disable-next-line no-constant-condition\n      while(true){\n        try{\n          state = iterator.next(value);\n        }catch(e){\n          return rec(e);\n        }\n        if(!isIteration(state)) return rec(invalidIteration(state));\n        if(state.done) break;\n        if(!isFuture(state.value)) return rec(invalidState(state.value));\n        timing = Undetermined;\n        cancel = state.value._interpret(rec, rej, resolved);\n        if(timing === Undetermined) return timing = Asynchronous;\n      }\n      res(state.value);\n    }\n\n    drain();\n\n    return function Go$cancel(){ cancel(); };\n\n  };\n\n  Go.prototype.toString = function Go$toString(){\n    return 'Future.do(' + showf(this._generator) + ')';\n  };\n\n  function go(generator){\n    if(!isFunction(generator)) throwInvalidArgument('Future.do', 0, 'be a Function', generator);\n    return new Go(generator);\n  }\n\n  /* eslint no-param-reassign:0 */\n\n  function invalidDisposal(m, f, x){\n    return invalidFuture(\n      'Future.hook',\n      'the first function it\\'s given to return a Future',\n      m,\n      '\\n  From calling: ' + showf(f) + '\\n  With: ' + show(x)\n    );\n  }\n\n  function invalidConsumption(m, f, x){\n    return invalidFuture(\n      'Future.hook',\n      'the second function it\\'s given to return a Future',\n      m,\n      '\\n  From calling: ' + showf(f) + '\\n  With: ' + show(x)\n    );\n  }\n\n  function Hook(acquire, dispose, consume){\n    this._acquire = acquire;\n    this._dispose = dispose;\n    this._consume = consume;\n  }\n\n  Hook.prototype = Object.create(Core);\n\n  Hook.prototype._interpret = function Hook$interpret(rec, rej, res){\n\n    var _acquire = this._acquire, _dispose = this._dispose, _consume = this._consume;\n    var cancel, cancelConsume = noop, resource, value, cont = noop;\n\n    function Hook$done(){\n      cont(value);\n    }\n\n    function Hook$reject(x){\n      rej(x);\n    }\n\n    function Hook$consumptionException(e){\n      var rec_ = rec;\n      cont = noop;\n      rej = noop;\n      rec = noop;\n      Hook$dispose();\n      rec_(e);\n    }\n\n    function Hook$dispose(){\n      var disposal;\n      try{\n        disposal = _dispose(resource);\n      }catch(e){\n        return rec(e);\n      }\n      if(!isFuture(disposal)){\n        return rec(invalidDisposal(disposal, _dispose, resource));\n      }\n      disposal._interpret(rec, Hook$reject, Hook$done);\n      cancel = Hook$cancelDisposal;\n    }\n\n    function Hook$cancelConsumption(){\n      cancelConsume();\n      Hook$dispose();\n      Hook$cancelDisposal();\n    }\n\n    function Hook$cancelDisposal(){\n      cont = noop;\n      rec = noop;\n      rej = noop;\n    }\n\n    function Hook$consumptionRejected(x){\n      cont = rej;\n      value = x;\n      Hook$dispose();\n    }\n\n    function Hook$consumptionResolved(x){\n      cont = res;\n      value = x;\n      Hook$dispose();\n    }\n\n    function Hook$consume(x){\n      resource = x;\n      var consumption;\n      try{\n        consumption = _consume(resource);\n      }catch(e){\n        return Hook$consumptionException(e);\n      }\n      if(!isFuture(consumption)){\n        return Hook$consumptionException(invalidConsumption(consumption, _consume, resource));\n      }\n      cancel = Hook$cancelConsumption;\n      cancelConsume = consumption._interpret(\n        Hook$consumptionException,\n        Hook$consumptionRejected,\n        Hook$consumptionResolved\n      );\n    }\n\n    var cancelAcquire = _acquire._interpret(rec, Hook$reject, Hook$consume);\n    cancel = cancel || cancelAcquire;\n\n    return function Hook$fork$cancel(){ cancel(); };\n\n  };\n\n  Hook.prototype.toString = function Hook$toString(){\n    return 'Future.hook('\n         + this._acquire.toString()\n         + ', '\n         + showf(this._dispose)\n         + ', '\n         + showf(this._consume)\n         + ')';\n  };\n\n  function hook$acquire$cleanup(acquire, cleanup, consume){\n    if(!isFunction(consume)) throwInvalidArgument('Future.hook', 2, 'be a Future', consume);\n    return new Hook(acquire, cleanup, consume);\n  }\n\n  function hook$acquire(acquire, cleanup, consume){\n    if(!isFunction(cleanup)) throwInvalidArgument('Future.hook', 1, 'be a function', cleanup);\n    if(arguments.length === 2) return partial2(hook$acquire$cleanup, acquire, cleanup);\n    return hook$acquire$cleanup(acquire, cleanup, consume);\n  }\n\n  function hook(acquire, cleanup, consume){\n    if(!isFuture(acquire)) throwInvalidFuture('Future.hook', 0, acquire);\n    if(arguments.length === 1) return partial1(hook$acquire, acquire);\n    if(arguments.length === 2) return hook$acquire(acquire, cleanup);\n    return hook$acquire(acquire, cleanup, consume);\n  }\n\n  function Node(fn){\n    this._fn = fn;\n  }\n\n  Node.prototype = Object.create(Core);\n\n  Node.prototype._interpret = function Node$interpret(rec, rej, res){\n    var open = false, cont = function(){ open = true; };\n    try{\n      this._fn(function Node$done(err, val){\n        cont = err ? function Node$rej(){\n          open = false;\n          rej(err);\n        } : function Node$res(){\n          open = false;\n          res(val);\n        };\n        if(open){\n          cont();\n        }\n      });\n    }catch(e){\n      rec(e);\n      open = false;\n      return noop;\n    }\n    cont();\n    return function Node$cancel(){ open = false; };\n  };\n\n  Node.prototype.toString = function Node$toString(){\n    return 'Future.node(' + showf(this._fn) + ')';\n  };\n\n  function node(f){\n    if(!isFunction(f)) throwInvalidArgument('Future.node', 0, 'be a function', f);\n    return new Node(f);\n  }\n\n  function Parallel(max, futures){\n    this._futures = futures;\n    this._length = futures.length;\n    this._max = Math.min(this._length, max);\n  }\n\n  Parallel.prototype = Object.create(Core);\n\n  Parallel.prototype._interpret = function Parallel$interpret(rec, rej, res){\n\n    var _futures = this._futures, _length = this._length, _max = this._max;\n    var cancels = new Array(_length), out = new Array(_length);\n    var cursor = 0, running = 0, blocked = false;\n\n    function Parallel$cancel(){\n      cursor = _length;\n      for(var n = 0; n < _length; n++) cancels[n] && cancels[n]();\n    }\n\n    function Parallel$run(idx){\n      running++;\n      cancels[idx] = _futures[idx]._interpret(function Parallel$rec(e){\n        cancels[idx] = noop;\n        Parallel$cancel();\n        rec(e);\n      }, function Parallel$rej(reason){\n        cancels[idx] = noop;\n        Parallel$cancel();\n        rej(reason);\n      }, function Parallel$res(value){\n        cancels[idx] = noop;\n        out[idx] = value;\n        running--;\n        if(cursor === _length && running === 0) res(out);\n        else if(blocked) Parallel$drain();\n      });\n    }\n\n    function Parallel$drain(){\n      blocked = false;\n      while(cursor < _length && running < _max) Parallel$run(cursor++);\n      blocked = true;\n    }\n\n    Parallel$drain();\n\n    return Parallel$cancel;\n\n  };\n\n  Parallel.prototype.toString = function Parallel$toString(){\n    return 'Future.parallel(' + this._max + ', ' + show(this._futures) + ')';\n  };\n\n  var emptyArray = new Resolved([]);\n\n  function validateNthFuture(m, i){\n    if(!isFuture(m)) throwInvalidFuture(\n      'Future.parallel',\n      'its second argument to be an array of valid Futures. ' +\n      'The value at position ' + i + ' in the array is not a Future',\n      m\n    );\n  }\n\n  function parallel$max(max, xs){\n    if(!isArray(xs)) throwInvalidArgument('Future.parallel', 1, 'be an array', xs);\n    for(var idx = 0; idx < xs.length; idx++) validateNthFuture(xs[idx], idx);\n    return xs.length === 0 ? emptyArray : new Parallel(max, xs);\n  }\n\n  function parallel(max, xs){\n    if(!isUnsigned(max)) throwInvalidArgument('Future.parallel', 0, 'be a positive integer', max);\n    if(arguments.length === 1) return partial1(parallel$max, max);\n    return parallel$max(max, xs);\n  }\n\n  function invalidPromise$3(p, f){\n    return typeError(\n      'Future.tryP expects the function it\\'s given to return a Promise/Thenable'\n      + '\\n  Actual: ' + show(p) + '\\n  From calling: ' + showf(f)\n    );\n  }\n\n  function TryP(fn){\n    this._fn = fn;\n  }\n\n  TryP.prototype = Object.create(Core);\n\n  TryP.prototype._interpret = function TryP$interpret(rec, rej, res){\n    var open = true, fn = this._fn, p;\n    try{\n      p = fn();\n    }catch(e){\n      rec(e);\n      return noop;\n    }\n    if(!isThenable(p)){\n      rec(invalidPromise$3(p, fn));\n      return noop;\n    }\n    p.then(function TryP$res(x){\n      if(open){\n        open = false;\n        res(x);\n      }\n    }, function TryP$rej(x){\n      if(open){\n        open = false;\n        rej(x);\n      }\n    });\n    return function TryP$cancel(){ open = false; };\n  };\n\n  TryP.prototype.toString = function TryP$toString(){\n    return 'Future.tryP(' + show(this._fn) + ')';\n  };\n\n  function tryP(f){\n    if(!isFunction(f)) throwInvalidArgument('Future.tryP', 0, 'be a function', f);\n    return new TryP(f);\n  }\n\n  Future.of = Future[FL.of] = of;\n  Future.chainRec = Future[FL.chainRec] = chainRec;\n  Future.reject = reject;\n  Future.ap = ap;\n  Future.map = map;\n  Future.bimap = bimap;\n  Future.chain = chain;\n\n  var Par = concurrify(Future, never, race, function parallelAp(a, b){ return b._parallelAp(a) });\n  Par.of = Par[FL.of];\n  Par.zero = Par[FL.zero];\n  Par.map = map;\n  Par.ap = ap;\n  Par.alt = alt;\n\n  function isParallel(x){\n    return x instanceof Par || type(x) === Par['@@type'];\n  }\n\n  function seq(par){\n    if(!isParallel(par)) throwInvalidArgument('Future.seq', 0, 'to be a Par', par);\n    return par.sequential;\n  }\n\n  var Fluture = /*#__PURE__*/Object.freeze({\n    Future: Future,\n    default: Future,\n    Par: Par,\n    isParallel: isParallel,\n    seq: seq,\n    isFuture: isFuture,\n    reject: reject,\n    of: of,\n    never: never,\n    isNever: isNever,\n    after: after,\n    rejectAfter: rejectAfter,\n    attempt: attempt,\n    try: attempt,\n    cache: cache,\n    encase: encase,\n    encase2: encase2,\n    encase3: encase3,\n    encaseN: encaseN,\n    encaseN2: encaseN2,\n    encaseN3: encaseN3,\n    encaseP: encaseP,\n    encaseP2: encaseP2,\n    encaseP3: encaseP3,\n    go: go,\n    do: go,\n    hook: hook,\n    node: node,\n    parallel: parallel,\n    tryP: tryP,\n    ap: ap,\n    alt: alt,\n    map: map,\n    bimap: bimap,\n    chain: chain,\n    mapRej: mapRej,\n    chainRej: chainRej,\n    lastly: lastly,\n    finally: lastly,\n    and: and,\n    both: both,\n    or: or,\n    race: race,\n    swap: swap,\n    fold: fold,\n    done: done,\n    fork: fork,\n    forkCatch: forkCatch,\n    promise: promise,\n    value: value,\n    extractLeft: extractLeft,\n    extractRight: extractRight\n  });\n\n  var index_cjs = Object.assign(Future, Fluture);\n\n  return index_cjs;\n\n})));\n","//. # sanctuary-show\n//.\n//. Haskell has a `show` function which can be applied to a compatible value to\n//. produce a descriptive string representation of that value. The idea is that\n//. the string representation should, if possible, be an expression which would\n//. produce the original value if evaluated.\n//.\n//. This library provides a similar [`show`](#show) function.\n//.\n//. In general, this property should hold: `eval (show (x)) = x`. In some cases\n//. parens are necessary to ensure correct interpretation (`{}`, for example,\n//. is an empty block rather than an empty object in some contexts). Thus the\n//. property is more accurately stated `eval ('(' + show (x) + ')') = x`.\n//.\n//. One can make values of a custom type compatible with [`show`](#show) by\n//. defining a `@@show` method. For example:\n//.\n//. ```javascript\n//. //# Maybe#@@show :: Maybe a ~> () -> String\n//. //.\n//. //. ```javascript\n//. //. > show (Nothing)\n//. //. 'Nothing'\n//. //.\n//. //. > show (Just (['foo', 'bar', 'baz']))\n//. //. 'Just ([\"foo\", \"bar\", \"baz\"])'\n//. //. ```\n//. Maybe.prototype['@@show'] = function() {\n//.   return this.isNothing ? 'Nothing' : 'Just (' + show (this.value) + ')';\n//. };\n//. ```\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryShow = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$show :: String\n  var $$show = '@@show';\n\n  //  seen :: Array Any\n  var seen = [];\n\n  //  entry :: Object -> String -> String\n  function entry(o) {\n    return function(k) {\n      return show(k) + ': ' + show(o[k]);\n    };\n  }\n\n  //# show :: Showable a => a -> String\n  //.\n  //. Returns a useful string representation of the given value.\n  //.\n  //. Dispatches to the value's `@@show` method if present.\n  //.\n  //. Where practical, `show (eval ('(' + show (x) + ')')) = show (x)`.\n  //.\n  //. ```javascript\n  //. > show (null)\n  //. 'null'\n  //.\n  //. > show (undefined)\n  //. 'undefined'\n  //.\n  //. > show (true)\n  //. 'true'\n  //.\n  //. > show (new Boolean (false))\n  //. 'new Boolean (false)'\n  //.\n  //. > show (-0)\n  //. '-0'\n  //.\n  //. > show (NaN)\n  //. 'NaN'\n  //.\n  //. > show (new Number (Infinity))\n  //. 'new Number (Infinity)'\n  //.\n  //. > show ('foo\\n\"bar\"\\nbaz\\n')\n  //. '\"foo\\\\n\\\\\"bar\\\\\"\\\\nbaz\\\\n\"'\n  //.\n  //. > show (new String (''))\n  //. 'new String (\"\")'\n  //.\n  //. > show (['foo', 'bar', 'baz'])\n  //. '[\"foo\", \"bar\", \"baz\"]'\n  //.\n  //. > show ([[[[[0]]]]])\n  //. '[[[[[0]]]]]'\n  //.\n  //. > show ({x: [1, 2], y: [3, 4], z: [5, 6]})\n  //. '{\"x\": [1, 2], \"y\": [3, 4], \"z\": [5, 6]}'\n  //. ```\n  function show(x) {\n    if (seen.indexOf(x) >= 0) return '<Circular>';\n\n    switch (Object.prototype.toString.call(x)) {\n\n      case '[object Boolean]':\n        return typeof x === 'object' ?\n          'new Boolean (' + show(x.valueOf()) + ')' :\n          x.toString();\n\n      case '[object Number]':\n        return typeof x === 'object' ?\n          'new Number (' + show(x.valueOf()) + ')' :\n          1 / x === -Infinity ? '-0' : x.toString(10);\n\n      case '[object String]':\n        return typeof x === 'object' ?\n          'new String (' + show(x.valueOf()) + ')' :\n          JSON.stringify(x);\n\n      case '[object Date]':\n        return 'new Date (' +\n               show(isNaN(x.valueOf()) ? NaN : x.toISOString()) +\n               ')';\n\n      case '[object Error]':\n        return 'new ' + x.name + ' (' + show(x.message) + ')';\n\n      case '[object Arguments]':\n        return 'function () { return arguments; } (' +\n               Array.prototype.map.call(x, show).join(', ') +\n               ')';\n\n      case '[object Array]':\n        seen.push(x);\n        try {\n          return '[' + x.map(show).concat(\n            Object.keys(x)\n            .sort()\n            .filter(function(k) { return !/^\\d+$/.test(k); })\n            .map(entry(x))\n          ).join(', ') + ']';\n        } finally {\n          seen.pop();\n        }\n\n      case '[object Object]':\n        seen.push(x);\n        try {\n          return (\n            $$show in x &&\n            (x.constructor == null || x.constructor.prototype !== x) ?\n              x[$$show]() :\n              '{' + Object.keys(x).sort().map(entry(x)).join(', ') + '}'\n          );\n        } finally {\n          seen.pop();\n        }\n\n      default:\n        return String(x);\n\n    }\n  }\n\n  return show;\n\n}));\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar $foreign = require(\"./foreign.js\");\nvar SProxy = (function () {\n    function SProxy() {\n\n    };\n    SProxy.value = new SProxy();\n    return SProxy;\n})();\nvar IsSymbol = function (reflectSymbol) {\n    this.reflectSymbol = reflectSymbol;\n};\nvar reifySymbol = function (s) {\n    return function (f) {\n        return $foreign.unsafeCoerce(function (dictIsSymbol) {\n            return f(dictIsSymbol);\n        })({\n            reflectSymbol: function (v) {\n                return s;\n            }\n        })(SProxy.value);\n    };\n};\nvar reflectSymbol = function (dict) {\n    return dict.reflectSymbol;\n};\nmodule.exports = {\n    IsSymbol: IsSymbol,\n    reflectSymbol: reflectSymbol,\n    reifySymbol: reifySymbol,\n    SProxy: SProxy\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar $foreign = require(\"./foreign.js\");\nvar Data_Symbol = require(\"../Data.Symbol/index.js\");\nvar Data_Unit = require(\"../Data.Unit/index.js\");\nvar Record_Unsafe = require(\"../Record.Unsafe/index.js\");\nvar Type_Data_Row = require(\"../Type.Data.Row/index.js\");\nvar Type_Data_RowList = require(\"../Type.Data.RowList/index.js\");\nvar Semiring = function (add, mul, one, zero) {\n    this.add = add;\n    this.mul = mul;\n    this.one = one;\n    this.zero = zero;\n};\nvar SemiringRecord = function (addRecord, mulRecord, oneRecord, zeroRecord) {\n    this.addRecord = addRecord;\n    this.mulRecord = mulRecord;\n    this.oneRecord = oneRecord;\n    this.zeroRecord = zeroRecord;\n};\nvar zeroRecord = function (dict) {\n    return dict.zeroRecord;\n};\nvar zero = function (dict) {\n    return dict.zero;\n};\nvar semiringUnit = new Semiring(function (v) {\n    return function (v1) {\n        return Data_Unit.unit;\n    };\n}, function (v) {\n    return function (v1) {\n        return Data_Unit.unit;\n    };\n}, Data_Unit.unit, Data_Unit.unit);\nvar semiringRecordNil = new SemiringRecord(function (v) {\n    return function (v1) {\n        return function (v2) {\n            return {};\n        };\n    };\n}, function (v) {\n    return function (v1) {\n        return function (v2) {\n            return {};\n        };\n    };\n}, function (v) {\n    return function (v1) {\n        return {};\n    };\n}, function (v) {\n    return function (v1) {\n        return {};\n    };\n});\nvar semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);\nvar semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);\nvar oneRecord = function (dict) {\n    return dict.oneRecord;\n};\nvar one = function (dict) {\n    return dict.one;\n};\nvar mulRecord = function (dict) {\n    return dict.mulRecord;\n};\nvar mul = function (dict) {\n    return dict.mul;\n};\nvar addRecord = function (dict) {\n    return dict.addRecord;\n};\nvar semiringRecord = function (dictRowToList) {\n    return function (dictSemiringRecord) {\n        return new Semiring(addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value), oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));\n    };\n};\nvar add = function (dict) {\n    return dict.add;\n};\nvar semiringFn = function (dictSemiring) {\n    return new Semiring(function (f) {\n        return function (g) {\n            return function (x) {\n                return add(dictSemiring)(f(x))(g(x));\n            };\n        };\n    }, function (f) {\n        return function (g) {\n            return function (x) {\n                return mul(dictSemiring)(f(x))(g(x));\n            };\n        };\n    }, function (v) {\n        return one(dictSemiring);\n    }, function (v) {\n        return zero(dictSemiring);\n    });\n};\nvar semiringRecordCons = function (dictIsSymbol) {\n    return function (dictCons) {\n        return function (dictSemiringRecord) {\n            return function (dictSemiring) {\n                return new SemiringRecord(function (v) {\n                    return function (ra) {\n                        return function (rb) {\n                            var tail = addRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);\n                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);\n                            var insert = Record_Unsafe.unsafeSet(key);\n                            var get = Record_Unsafe.unsafeGet(key);\n                            return insert(add(dictSemiring)(get(ra))(get(rb)))(tail);\n                        };\n                    };\n                }, function (v) {\n                    return function (ra) {\n                        return function (rb) {\n                            var tail = mulRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);\n                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);\n                            var insert = Record_Unsafe.unsafeSet(key);\n                            var get = Record_Unsafe.unsafeGet(key);\n                            return insert(mul(dictSemiring)(get(ra))(get(rb)))(tail);\n                        };\n                    };\n                }, function (v) {\n                    return function (v1) {\n                        var tail = oneRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);\n                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);\n                        var insert = Record_Unsafe.unsafeSet(key);\n                        return insert(one(dictSemiring))(tail);\n                    };\n                }, function (v) {\n                    return function (v1) {\n                        var tail = zeroRecord(dictSemiringRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value);\n                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);\n                        var insert = Record_Unsafe.unsafeSet(key);\n                        return insert(zero(dictSemiring))(tail);\n                    };\n                });\n            };\n        };\n    };\n};\nmodule.exports = {\n    Semiring: Semiring,\n    add: add,\n    zero: zero,\n    mul: mul,\n    one: one,\n    SemiringRecord: SemiringRecord,\n    addRecord: addRecord,\n    mulRecord: mulRecord,\n    oneRecord: oneRecord,\n    zeroRecord: zeroRecord,\n    semiringInt: semiringInt,\n    semiringNumber: semiringNumber,\n    semiringFn: semiringFn,\n    semiringUnit: semiringUnit,\n    semiringRecord: semiringRecord,\n    semiringRecordNil: semiringRecordNil,\n    semiringRecordCons: semiringRecordCons\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar $foreign = require(\"./foreign.js\");\nmodule.exports = {\n    unsafeHas: $foreign.unsafeHas,\n    unsafeGet: $foreign.unsafeGet,\n    unsafeSet: $foreign.unsafeSet,\n    unsafeDelete: $foreign.unsafeDelete\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar RLProxy = (function () {\n    function RLProxy() {\n\n    };\n    RLProxy.value = new RLProxy();\n    return RLProxy;\n})();\nmodule.exports = {\n    RLProxy: RLProxy\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar $foreign = require(\"./foreign.js\");\nvar Data_Semiring = require(\"../Data.Semiring/index.js\");\nvar Data_Symbol = require(\"../Data.Symbol/index.js\");\nvar Data_Unit = require(\"../Data.Unit/index.js\");\nvar Record_Unsafe = require(\"../Record.Unsafe/index.js\");\nvar Type_Data_RowList = require(\"../Type.Data.RowList/index.js\");\nvar Ring = function (Semiring0, sub) {\n    this.Semiring0 = Semiring0;\n    this.sub = sub;\n};\nvar RingRecord = function (SemiringRecord0, subRecord) {\n    this.SemiringRecord0 = SemiringRecord0;\n    this.subRecord = subRecord;\n};\nvar subRecord = function (dict) {\n    return dict.subRecord;\n};\nvar sub = function (dict) {\n    return dict.sub;\n};\nvar ringUnit = new Ring(function () {\n    return Data_Semiring.semiringUnit;\n}, function (v) {\n    return function (v1) {\n        return Data_Unit.unit;\n    };\n});\nvar ringRecordNil = new RingRecord(function () {\n    return Data_Semiring.semiringRecordNil;\n}, function (v) {\n    return function (v1) {\n        return function (v2) {\n            return {};\n        };\n    };\n});\nvar ringRecordCons = function (dictIsSymbol) {\n    return function (dictCons) {\n        return function (dictRingRecord) {\n            return function (dictRing) {\n                return new RingRecord(function () {\n                    return Data_Semiring.semiringRecordCons(dictIsSymbol)(dictCons)(dictRingRecord.SemiringRecord0())(dictRing.Semiring0());\n                }, function (v) {\n                    return function (ra) {\n                        return function (rb) {\n                            var tail = subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);\n                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);\n                            var insert = Record_Unsafe.unsafeSet(key);\n                            var get = Record_Unsafe.unsafeGet(key);\n                            return insert(sub(dictRing)(get(ra))(get(rb)))(tail);\n                        };\n                    };\n                });\n            };\n        };\n    };\n};\nvar ringRecord = function (dictRowToList) {\n    return function (dictRingRecord) {\n        return new Ring(function () {\n            return Data_Semiring.semiringRecord(dictRowToList)(dictRingRecord.SemiringRecord0());\n        }, subRecord(dictRingRecord)(Type_Data_RowList.RLProxy.value));\n    };\n};\nvar ringNumber = new Ring(function () {\n    return Data_Semiring.semiringNumber;\n}, $foreign.numSub);\nvar ringInt = new Ring(function () {\n    return Data_Semiring.semiringInt;\n}, $foreign.intSub);\nvar ringFn = function (dictRing) {\n    return new Ring(function () {\n        return Data_Semiring.semiringFn(dictRing.Semiring0());\n    }, function (f) {\n        return function (g) {\n            return function (x) {\n                return sub(dictRing)(f(x))(g(x));\n            };\n        };\n    });\n};\nvar negate = function (dictRing) {\n    return function (a) {\n        return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);\n    };\n};\nmodule.exports = {\n    Ring: Ring,\n    sub: sub,\n    negate: negate,\n    RingRecord: RingRecord,\n    subRecord: subRecord,\n    ringInt: ringInt,\n    ringNumber: ringNumber,\n    ringUnit: ringUnit,\n    ringFn: ringFn,\n    ringRecord: ringRecord,\n    ringRecordNil: ringRecordNil,\n    ringRecordCons: ringRecordCons\n};\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. sanctuary-type-identifiers comprises:\n//.\n//.   - an npm and browser -compatible package for deriving the\n//.     _type identifier_ of a JavaScript value; and\n//.   - a specification which authors may follow to specify type\n//.     identifiers for their types.\n//.\n//. ### Specification\n//.\n//. For a type to be compatible with the algorithm:\n//.\n//.   - every member of the type MUST have a `constructor` property\n//.     pointing to an object known as the _type representative_;\n//.\n//.   - the type representative MUST have a `@@type` property\n//.     (the _type identifier_); and\n//.\n//.   - the type identifier MUST be a string primitive and SHOULD have\n//.     format `'<namespace>/<name>[@<version>]'`, where:\n//.\n//.       - `<namespace>` MUST consist of one or more characters, and\n//.         SHOULD equal the name of the npm package which defines the\n//.         type (including [scope][3] where appropriate);\n//.\n//.       - `<name>` MUST consist of one or more characters, and SHOULD\n//.         be the unique name of the type; and\n//.\n//.       - `<version>` MUST consist of one or more digits, and SHOULD\n//.         represent the version of the type.\n//.\n//. If the type identifier does not conform to the format specified above,\n//. it is assumed that the entire string represents the _name_ of the type;\n//. _namespace_ will be `null` and _version_ will be `0`.\n//.\n//. If the _version_ is not given, it is assumed to be `0`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  pattern :: RegExp\n  var pattern = new RegExp(\n    '^'\n  + '([\\\\s\\\\S]+)'   //  <namespace>\n  + '/'             //  SOLIDUS (U+002F)\n  + '([\\\\s\\\\S]+?)'  //  <name>\n  + '(?:'           //  optional non-capturing group {\n  +   '@'           //    COMMERCIAL AT (U+0040)\n  +   '([0-9]+)'    //    <version>\n  + ')?'            //  }\n  + '$'\n  );\n\n  //. ### Usage\n  //.\n  //. ```javascript\n  //. const type = require('sanctuary-type-identifiers');\n  //. ```\n  //.\n  //. ```javascript\n  //. > function Identity(x) {\n  //. .   if (!(this instanceof Identity)) return new Identity(x);\n  //. .   this.value = x;\n  //. . }\n  //. . Identity['@@type'] = 'my-package/Identity@1';\n  //.\n  //. > type.parse(type(Identity(0)))\n  //. {namespace: 'my-package', name: 'Identity', version: 1}\n  //. ```\n  //.\n  //. ### API\n  //.\n  //# type :: Any -> String\n  //.\n  //. Takes any value and returns a string which identifies its type. If the\n  //. value conforms to the [specification][4], the custom type identifier is\n  //. returned.\n  //.\n  //. ```javascript\n  //. > type(null)\n  //. 'Null'\n  //.\n  //. > type(true)\n  //. 'Boolean'\n  //.\n  //. > type(Identity(0))\n  //. 'my-package/Identity@1'\n  //. ```\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  //# type.parse :: String -> { namespace :: Nullable String, name :: String, version :: Number }\n  //.\n  //. Takes any string and parses it according to the [specification][4],\n  //. returning an object with `namespace`, `name`, and `version` fields.\n  //.\n  //. ```javascript\n  //. > type.parse('my-package/List@2')\n  //. {namespace: 'my-package', name: 'List', version: 2}\n  //.\n  //. > type.parse('nonsense!')\n  //. {namespace: null, name: 'nonsense!', version: 0}\n  //.\n  //. > type.parse(Identity['@@type'])\n  //. {namespace: 'my-package', name: 'Identity', version: 1}\n  //. ```\n  type.parse = function parse(s) {\n    var groups = pattern.exec(s);\n    return {\n      namespace: groups == null || groups[1] == null ? null : groups[1],\n      name:      groups == null                      ? s    : groups[2],\n      version:   groups == null || groups[3] == null ? 0    : Number(groups[3])\n    };\n  };\n\n  return type;\n\n}));\n\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: https://docs.npmjs.com/misc/scope\n//. [4]: #specification\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar $foreign = require(\"./foreign.js\");\nvar Data_HeytingAlgebra = require(\"../Data.HeytingAlgebra/index.js\");\nvar Data_Symbol = require(\"../Data.Symbol/index.js\");\nvar Data_Unit = require(\"../Data.Unit/index.js\");\nvar Data_Void = require(\"../Data.Void/index.js\");\nvar Record_Unsafe = require(\"../Record.Unsafe/index.js\");\nvar Type_Data_RowList = require(\"../Type.Data.RowList/index.js\");\nvar Eq = function (eq) {\n    this.eq = eq;\n};\nvar Eq1 = function (eq1) {\n    this.eq1 = eq1;\n};\nvar EqRecord = function (eqRecord) {\n    this.eqRecord = eqRecord;\n};\nvar eqVoid = new Eq(function (v) {\n    return function (v1) {\n        return true;\n    };\n});\nvar eqUnit = new Eq(function (v) {\n    return function (v1) {\n        return true;\n    };\n});\nvar eqString = new Eq($foreign.refEq);\nvar eqRowNil = new EqRecord(function (v) {\n    return function (v1) {\n        return function (v2) {\n            return true;\n        };\n    };\n});\nvar eqRecord = function (dict) {\n    return dict.eqRecord;\n};\nvar eqRec = function (dictRowToList) {\n    return function (dictEqRecord) {\n        return new Eq(eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value));\n    };\n};\nvar eqNumber = new Eq($foreign.refEq);\nvar eqInt = new Eq($foreign.refEq);\nvar eqChar = new Eq($foreign.refEq);\nvar eqBoolean = new Eq($foreign.refEq);\nvar eq1 = function (dict) {\n    return dict.eq1;\n};\nvar eq = function (dict) {\n    return dict.eq;\n};\nvar eqArray = function (dictEq) {\n    return new Eq($foreign.eqArrayImpl(eq(dictEq)));\n};\nvar eq1Array = new Eq1(function (dictEq) {\n    return eq(eqArray(dictEq));\n});\nvar eqRowCons = function (dictEqRecord) {\n    return function (dictCons) {\n        return function (dictIsSymbol) {\n            return function (dictEq) {\n                return new EqRecord(function (v) {\n                    return function (ra) {\n                        return function (rb) {\n                            var tail = eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);\n                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);\n                            var get = Record_Unsafe.unsafeGet(key);\n                            return eq(dictEq)(get(ra))(get(rb)) && tail;\n                        };\n                    };\n                });\n            };\n        };\n    };\n};\nvar notEq = function (dictEq) {\n    return function (x) {\n        return function (y) {\n            return eq(eqBoolean)(eq(dictEq)(x)(y))(false);\n        };\n    };\n};\nvar notEq1 = function (dictEq1) {\n    return function (dictEq) {\n        return function (x) {\n            return function (y) {\n                return eq(eqBoolean)(eq1(dictEq1)(dictEq)(x)(y))(false);\n            };\n        };\n    };\n};\nmodule.exports = {\n    Eq: Eq,\n    eq: eq,\n    notEq: notEq,\n    Eq1: Eq1,\n    eq1: eq1,\n    notEq1: notEq1,\n    EqRecord: EqRecord,\n    eqRecord: eqRecord,\n    eqBoolean: eqBoolean,\n    eqInt: eqInt,\n    eqNumber: eqNumber,\n    eqChar: eqChar,\n    eqString: eqString,\n    eqUnit: eqUnit,\n    eqVoid: eqVoid,\n    eqArray: eqArray,\n    eqRec: eqRec,\n    eq1Array: eq1Array,\n    eqRowNil: eqRowNil,\n    eqRowCons: eqRowCons\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar Data_Eq = require(\"../Data.Eq/index.js\");\nvar Data_Semigroup = require(\"../Data.Semigroup/index.js\");\nvar Data_Show = require(\"../Data.Show/index.js\");\nvar LT = (function () {\n    function LT() {\n\n    };\n    LT.value = new LT();\n    return LT;\n})();\nvar GT = (function () {\n    function GT() {\n\n    };\n    GT.value = new GT();\n    return GT;\n})();\nvar EQ = (function () {\n    function EQ() {\n\n    };\n    EQ.value = new EQ();\n    return EQ;\n})();\nvar showOrdering = new Data_Show.Show(function (v) {\n    if (v instanceof LT) {\n        return \"LT\";\n    };\n    if (v instanceof GT) {\n        return \"GT\";\n    };\n    if (v instanceof EQ) {\n        return \"EQ\";\n    };\n    throw new Error(\"Failed pattern match at Data.Ordering line 26, column 1 - line 26, column 39: \" + [ v.constructor.name ]);\n});\nvar semigroupOrdering = new Data_Semigroup.Semigroup(function (v) {\n    return function (v1) {\n        if (v instanceof LT) {\n            return LT.value;\n        };\n        if (v instanceof GT) {\n            return GT.value;\n        };\n        if (v instanceof EQ) {\n            return v1;\n        };\n        throw new Error(\"Failed pattern match at Data.Ordering line 21, column 1 - line 21, column 49: \" + [ v.constructor.name, v1.constructor.name ]);\n    };\n});\nvar invert = function (v) {\n    if (v instanceof GT) {\n        return LT.value;\n    };\n    if (v instanceof EQ) {\n        return EQ.value;\n    };\n    if (v instanceof LT) {\n        return GT.value;\n    };\n    throw new Error(\"Failed pattern match at Data.Ordering line 33, column 1 - line 33, column 31: \" + [ v.constructor.name ]);\n};\nvar eqOrdering = new Data_Eq.Eq(function (v) {\n    return function (v1) {\n        if (v instanceof LT && v1 instanceof LT) {\n            return true;\n        };\n        if (v instanceof GT && v1 instanceof GT) {\n            return true;\n        };\n        if (v instanceof EQ && v1 instanceof EQ) {\n            return true;\n        };\n        return false;\n    };\n});\nmodule.exports = {\n    LT: LT,\n    GT: GT,\n    EQ: EQ,\n    invert: invert,\n    eqOrdering: eqOrdering,\n    semigroupOrdering: semigroupOrdering,\n    showOrdering: showOrdering\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar $foreign = require(\"./foreign.js\");\nvar Control_Semigroupoid = require(\"../Control.Semigroupoid/index.js\");\nvar Data_Function = require(\"../Data.Function/index.js\");\nvar Data_Unit = require(\"../Data.Unit/index.js\");\nvar Functor = function (map) {\n    this.map = map;\n};\nvar map = function (dict) {\n    return dict.map;\n};\nvar mapFlipped = function (dictFunctor) {\n    return function (fa) {\n        return function (f) {\n            return map(dictFunctor)(f)(fa);\n        };\n    };\n};\nvar $$void = function (dictFunctor) {\n    return map(dictFunctor)(Data_Function[\"const\"](Data_Unit.unit));\n};\nvar voidLeft = function (dictFunctor) {\n    return function (f) {\n        return function (x) {\n            return map(dictFunctor)(Data_Function[\"const\"](x))(f);\n        };\n    };\n};\nvar voidRight = function (dictFunctor) {\n    return function (x) {\n        return map(dictFunctor)(Data_Function[\"const\"](x));\n    };\n};\nvar functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));\nvar functorArray = new Functor($foreign.arrayMap);\nvar flap = function (dictFunctor) {\n    return function (ff) {\n        return function (x) {\n            return map(dictFunctor)(function (f) {\n                return f(x);\n            })(ff);\n        };\n    };\n};\nmodule.exports = {\n    Functor: Functor,\n    map: map,\n    mapFlipped: mapFlipped,\n    \"void\": $$void,\n    voidRight: voidRight,\n    voidLeft: voidLeft,\n    flap: flap,\n    functorFn: functorFn,\n    functorArray: functorArray\n};\n","/*\n         _______    ___    _________    ___   ___    _______    ______\n        /  ____/\\  /  /\\  /__   ___/\\  /  /\\ /  /\\  /  ____/\\  /  __  \\\n       /  /\\___\\/ /  / /  \\_/  /\\__\\/ /  /_//  / / /  /\\___\\/ /  /\\/  /\\\n      /  ____/\\  /  / /    /  / /    /  ___   / / /  ____/\\  /      _/ /\n     /  /\\___\\/ /  / /    /  / /    /  /\\_/  / / /  /\\___\\/ /  /|  |\\\\/\n    /______/\\  /__/ /    /__/ /    /__/ //__/ / /______/\\  /__/ |__| |\n    \\______\\/  \\__\\/     \\__\\/     \\__\\/ \\__\\/  \\______\\/  \\__\\/ \\__\\|\n                                                                            */\n\n//. <a href=\"https://github.com/fantasyland/fantasy-land\"><img alt=\"Fantasy Land\" src=\"https://raw.githubusercontent.com/fantasyland/fantasy-land/master/logo.png\" width=\"75\" height=\"75\" align=\"left\"></a>\n//.\n//. # sanctuary-either\n//.\n//. The Either type represents values with two possibilities: a value of type\n//. `Either a b` is either a Left whose value is of type `a` or a Right whose\n//. value is of type `b`.\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f (require ('sanctuary-show'),\n                        require ('sanctuary-type-classes'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define (['sanctuary-show', 'sanctuary-type-classes'], f);\n  } else {\n    self.sanctuaryEither = f (self.sanctuaryShow, self.sanctuaryTypeClasses);\n  }\n\n} (function(show, Z) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    var $ = __doctest.require ('sanctuary-def');\n    var type = __doctest.require ('sanctuary-type-identifiers');\n    var S = (function() {\n      var S = __doctest.require ('sanctuary');\n      var EitherType = $.BinaryType\n        ('sanctuary-either/Either')\n        ('')\n        (function(x) { return type (x) === Either['@@type']; })\n        (function(e) { return e.isLeft ? [e.value] : []; })\n        (function(e) { return e.isLeft ? [] : [e.value]; });\n      var env = Z.concat (S.env,\n                          [$.TypeClass, EitherType ($.Unknown) ($.Unknown)]);\n      return S.create ({checkTypes: true, env: env});\n    } ());\n  }\n\n  var Either = {};\n\n  var Left$prototype = {\n    /* eslint-disable key-spacing */\n    'constructor':            Either,\n    'isLeft':                 true,\n    'isRight':                false,\n    '@@show':                 Left$prototype$show,\n    'fantasy-land/map':       Left$prototype$map,\n    'fantasy-land/bimap':     Left$prototype$bimap,\n    'fantasy-land/ap':        Left$prototype$ap,\n    'fantasy-land/chain':     Left$prototype$chain,\n    'fantasy-land/alt':       Left$prototype$alt,\n    'fantasy-land/reduce':    Left$prototype$reduce,\n    'fantasy-land/traverse':  Left$prototype$traverse,\n    'fantasy-land/extend':    Left$prototype$extend\n    /* eslint-enable key-spacing */\n  };\n\n  var Right$prototype = {\n    /* eslint-disable key-spacing */\n    'constructor':            Either,\n    'isLeft':                 false,\n    'isRight':                true,\n    '@@show':                 Right$prototype$show,\n    'fantasy-land/map':       Right$prototype$map,\n    'fantasy-land/bimap':     Right$prototype$bimap,\n    'fantasy-land/ap':        Right$prototype$ap,\n    'fantasy-land/chain':     Right$prototype$chain,\n    'fantasy-land/alt':       Right$prototype$alt,\n    'fantasy-land/reduce':    Right$prototype$reduce,\n    'fantasy-land/traverse':  Right$prototype$traverse,\n    'fantasy-land/extend':    Right$prototype$extend\n    /* eslint-enable key-spacing */\n  };\n\n  var util =\n    typeof module === 'object' && typeof module.exports === 'object' ?\n    require ('util') :\n    /* istanbul ignore next */ {};\n  var inspect =\n    util.inspect != null && typeof util.inspect.custom === 'symbol' ?\n    /* istanbul ignore next */ util.inspect.custom :\n    /* istanbul ignore next */ 'inspect';\n  Left$prototype[inspect] = Left$prototype$show;\n  Right$prototype[inspect] = Right$prototype$show;\n\n  //. `Either a b` satisfies the following [Fantasy Land][] specifications:\n  //.\n  //. ```javascript\n  //. > const Useless = require ('sanctuary-useless')\n  //.\n  //. > S.map (k => k + ' '.repeat (16 - k.length) +\n  //. .             (Z[k].test (Right (Useless)) ? '\\u2705   ' :\n  //. .              Z[k].test (Right (['foo'])) ? '\\u2705 * ' :\n  //. .              /* otherwise */               '\\u274C   '))\n  //. .       (S.keys (Z.filter ($.test ([]) ($.TypeClass), Z)))\n  //. [ 'Setoid          ✅ * ',  // if ‘a’ and ‘b’ satisfy Setoid\n  //. . 'Ord             ✅ * ',  // if ‘a’ and ‘b’ satisfy Ord\n  //. . 'Semigroupoid    ❌   ',\n  //. . 'Category        ❌   ',\n  //. . 'Semigroup       ✅ * ',  // if ‘a’ and ‘b’ satisfy Semigroup\n  //. . 'Monoid          ❌   ',\n  //. . 'Group           ❌   ',\n  //. . 'Filterable      ❌   ',\n  //. . 'Functor         ✅   ',\n  //. . 'Bifunctor       ✅   ',\n  //. . 'Profunctor      ❌   ',\n  //. . 'Apply           ✅   ',\n  //. . 'Applicative     ✅   ',\n  //. . 'Chain           ✅   ',\n  //. . 'ChainRec        ✅   ',\n  //. . 'Monad           ✅   ',\n  //. . 'Alt             ✅   ',\n  //. . 'Plus            ❌   ',\n  //. . 'Alternative     ❌   ',\n  //. . 'Foldable        ✅   ',\n  //. . 'Traversable     ✅   ',\n  //. . 'Extend          ✅   ',\n  //. . 'Comonad         ❌   ',\n  //. . 'Contravariant   ❌   ' ]\n  //. ```\n\n  //# Either :: TypeRep Either\n  //.\n  //. Either [type representative][].\n\n  //# Either.Left :: a -> Either a b\n  //.\n  //. Constructs a value of type `Either a b` from a value of type `a`.\n  //.\n  //. ```javascript\n  //. > Left ('sqrt undefined for -1')\n  //. Left ('sqrt undefined for -1')\n  //. ```\n  var Left = Either.Left = function(value) {\n    var left = Object.create (Left$prototype);\n    if (Z.Setoid.test (value)) {\n      left['fantasy-land/equals'] = Left$prototype$equals;\n      if (Z.Ord.test (value)) {\n        left['fantasy-land/lte'] = Left$prototype$lte;\n      }\n    }\n    if (Z.Semigroup.test (value)) {\n      left['fantasy-land/concat'] = Left$prototype$concat;\n    }\n    left.value = value;\n    return left;\n  };\n\n  //# Either.Right :: b -> Either a b\n  //.\n  //. Constructs a value of type `Either a b` from a value of type `b`.\n  //.\n  //. ```javascript\n  //. > Right (42)\n  //. Right (42)\n  //. ```\n  var Right = Either.Right = function Right(value) {\n    var right = Object.create (Right$prototype);\n    if (Z.Setoid.test (value)) {\n      right['fantasy-land/equals'] = Right$prototype$equals;\n      if (Z.Ord.test (value)) {\n        right['fantasy-land/lte'] = Right$prototype$lte;\n      }\n    }\n    if (Z.Semigroup.test (value)) {\n      right['fantasy-land/concat'] = Right$prototype$concat;\n    }\n    right.value = value;\n    return right;\n  };\n\n  //# Either.@@type :: String\n  //.\n  //. Either [type identifier][].\n  //.\n  //. ```javascript\n  //. > type (Right (42))\n  //. 'sanctuary-either/Either@1'\n  //.\n  //. > type.parse (type (Right (42)))\n  //. {namespace: 'sanctuary-either', name: 'Either', version: 1}\n  //. ```\n  Either['@@type'] = 'sanctuary-either/Either@1';\n\n  //# Either.fantasy-land/of :: b -> Either a b\n  //.\n  //.   - `of (Either) (x)` is equivalent to `Right (x)`\n  //.\n  //. ```javascript\n  //. > S.of (Either) (42)\n  //. Right (42)\n  //. ```\n  Either['fantasy-land/of'] = Right;\n\n  function next(x) { return {tag: next, value: x}; }\n  function done(x) { return {tag: done, value: x}; }\n\n  //# Either.fantasy-land/chainRec :: ((a -> c, b -> c, a) -> Either d c, a) -> Either d b\n  //.\n  //. ```javascript\n  //. > Z.chainRec (\n  //. .   Either,\n  //. .   (next, done, x) =>\n  //. .     x <= 1 ? Left ('!!') : Right (x >= 1000 ? done (x) : next (x * x)),\n  //. .   1\n  //. . )\n  //. Left ('!!')\n  //.\n  //. > Z.chainRec (\n  //. .   Either,\n  //. .   (next, done, x) =>\n  //. .     x <= 1 ? Left ('!!') : Right (x >= 1000 ? done (x) : next (x * x)),\n  //. .   2\n  //. . )\n  //. Right (65536)\n  //. ```\n  Either['fantasy-land/chainRec'] = function(f, x) {\n    var r = next (x);\n    while (r.tag === next) {\n      var either = f (next, done, r.value);\n      if (either.isLeft) return either;\n      r = either.value;\n    }\n    return Right (r.value);\n  };\n\n  //# Either#@@show :: (Showable a, Showable b) => Either a b ~> () -> String\n  //.\n  //.   - `show (Left (x))` is equivalent to `'Left (' + show (x) + ')'`\n  //.   - `show (Right (x))` is equivalent to `'Right (' + show (x) + ')'`\n  //.\n  //. ```javascript\n  //. > show (Left ('sqrt undefined for -1'))\n  //. 'Left (\"sqrt undefined for -1\")'\n  //.\n  //. > show (Right ([1, 2, 3]))\n  //. 'Right ([1, 2, 3])'\n  //. ```\n  function Left$prototype$show() {\n    return 'Left (' + show (this.value) + ')';\n  }\n  function Right$prototype$show() {\n    return 'Right (' + show (this.value) + ')';\n  }\n\n  //# Either#fantasy-land/equals :: (Setoid a, Setoid b) => Either a b ~> Either a b -> Boolean\n  //.\n  //.   - `Left (x)` is equal to `Left (y)` [iff][] `x` is equal to `y`\n  //.     according to [`Z.equals`][]\n  //.   - `Right (x)` is equal to `Right (y)` [iff][] `x` is equal to `y`\n  //.     according to [`Z.equals`][]\n  //.   - `Left (x)` is never equal to `Right (y)`\n  //.\n  //. ```javascript\n  //. > S.equals (Left ([1, 2, 3])) (Left ([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals (Right ([1, 2, 3])) (Right ([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals (Left ([1, 2, 3])) (Right ([1, 2, 3]))\n  //. false\n  //. ```\n  function Left$prototype$equals(other) {\n    return other.isLeft && Z.equals (this.value, other.value);\n  }\n  function Right$prototype$equals(other) {\n    return other.isRight && Z.equals (this.value, other.value);\n  }\n\n  //# Either#fantasy-land/lte :: (Ord a, Ord b) => Either a b ~> Either a b -> Boolean\n  //.\n  //.   - `Left (x)` is less than or equal to `Left (y)` [iff][] `x` is less\n  //.     than or equal to `y` according to [`Z.lte`][]\n  //.   - `Right (x)` is less than or equal to `Right (y)` [iff][] `x` is less\n  //.     than or equal to `y` according to [`Z.lte`][]\n  //.   - `Left (x)` is always less than `Right (y)`\n  //.\n  //. ```javascript\n  //. > S.filter (S.lte (Left (1))) ([Left (0), Left (1), Left (2)])\n  //. [Left (0), Left (1)]\n  //.\n  //. > S.filter (S.lte (Right (1))) ([Right (0), Right (1), Right (2)])\n  //. [Right (0), Right (1)]\n  //.\n  //. > S.filter (S.lte (Left (1))) ([Right (0), Right (1), Right (2)])\n  //. []\n  //.\n  //. > S.filter (S.lte (Right (1))) ([Left (0), Left (1), Left (2)])\n  //. [Left (0), Left (1), Left (2)]\n  //. ```\n  function Left$prototype$lte(other) {\n    return other.isRight || Z.lte (this.value, other.value);\n  }\n  function Right$prototype$lte(other) {\n    return other.isRight && Z.lte (this.value, other.value);\n  }\n\n  //# Either#fantasy-land/concat :: (Semigroup a, Semigroup b) => Either a b ~> Either a b -> Either a b\n  //.\n  //.   - `concat (Left (x)) (Left (y))` is equivalent to\n  //.     `Left (concat (x) (y))`\n  //.   - `concat (Right (x)) (Right (y))` is equivalent to\n  //.     `Right (concat (x) (y))`\n  //.   - `concat (Left (x)) (Right (y))` is equivalent to `Right (y)`\n  //.   - `concat (Right (x)) (Left (y))` is equivalent to `Right (x)`\n  //.\n  //. ```javascript\n  //. > S.concat (Left ('abc')) (Left ('def'))\n  //. Left ('abcdef')\n  //.\n  //. > S.concat (Right ([1, 2, 3])) (Right ([4, 5, 6]))\n  //. Right ([1, 2, 3, 4, 5, 6])\n  //.\n  //. > S.concat (Left ('abc')) (Right ([1, 2, 3]))\n  //. Right ([1, 2, 3])\n  //.\n  //. > S.concat (Right ([1, 2, 3])) (Left ('abc'))\n  //. Right ([1, 2, 3])\n  //. ```\n  function Left$prototype$concat(other) {\n    return other.isLeft ? Left (Z.concat (this.value, other.value)) : other;\n  }\n  function Right$prototype$concat(other) {\n    return other.isRight ? Right (Z.concat (this.value, other.value)) : this;\n  }\n\n  //# Either#fantasy-land/map :: Either a b ~> (b -> c) -> Either a c\n  //.\n  //.   - `map (f) (Left (x))` is equivalent to `Left (x)`\n  //.   - `map (f) (Right (x))` is equivalent to `Right (f (x))`\n  //.\n  //. ```javascript\n  //. > S.map (S.add (1)) (Left ('sqrt undefined for -1'))\n  //. Left ('sqrt undefined for -1')\n  //.\n  //. > S.map (S.add (1)) (Right (99))\n  //. Right (100)\n  //. ```\n  function Left$prototype$map(f) {\n    return this;\n  }\n  function Right$prototype$map(f) {\n    return Right (f (this.value));\n  }\n\n  //# Either#fantasy-land/bimap :: Either a c ~> (a -> b, c -> d) -> Either b d\n  //.\n  //.   - `bimap (f) (g) (Left (x))` is equivalent to `Left (f (x))`\n  //.   - `bimap (f) (g) (Right (x))` is equivalent to `Right (g (x))`\n  //.\n  //. ```javascript\n  //. > S.bimap (S.toUpper) (S.add (1)) (Left ('abc'))\n  //. Left ('ABC')\n  //.\n  //. > S.bimap (S.toUpper) (S.add (1)) (Right (99))\n  //. Right (100)\n  //. ```\n  function Left$prototype$bimap(f, g) {\n    return Left (f (this.value));\n  }\n  function Right$prototype$bimap(f, g) {\n    return Right (g (this.value));\n  }\n\n  //# Either#fantasy-land/ap :: Either a b ~> Either a (b -> c) -> Either a c\n  //.\n  //.   - `ap (Left (x)) (Left (y))` is equivalent to `Left (x)`\n  //.   - `ap (Left (x)) (Right (y))` is equivalent to `Left (x)`\n  //.   - `ap (Right (f)) (Left (x))` is equivalent to `Left (x)`\n  //.   - `ap (Right (f)) (Right (x))` is equivalent to `Right (f (x))`\n  //.\n  //. ```javascript\n  //. > S.ap (Left ('div undefined for 0')) (Left ('sqrt undefined for -1'))\n  //. Left ('div undefined for 0')\n  //.\n  //. > S.ap (Left ('div undefined for 0')) (Right (99))\n  //. Left ('div undefined for 0')\n  //.\n  //. > S.ap (Right (S.add (1))) (Left ('sqrt undefined for -1'))\n  //. Left ('sqrt undefined for -1')\n  //.\n  //. > S.ap (Right (S.add (1))) (Right (99))\n  //. Right (100)\n  //. ```\n  function Left$prototype$ap(other) {\n    return other.isLeft ? other : this;\n  }\n  function Right$prototype$ap(other) {\n    return other.isLeft ? other : Right (other.value (this.value));\n  }\n\n  //# Either#fantasy-land/chain :: Either a b ~> (b -> Either a c) -> Either a c\n  //.\n  //.   - `chain (f) (Left (x))` is equivalent to `Left (x)`\n  //.   - `chain (f) (Right (x))` is equivalent to `f (x)`\n  //.\n  //. ```javascript\n  //. > const sqrt = n => n < 0 ? Left ('sqrt undefined for ' + show (n))\n  //. .                         : Right (Math.sqrt (n))\n  //.\n  //. > S.chain (sqrt) (Left ('div undefined for 0'))\n  //. Left ('div undefined for 0')\n  //.\n  //. > S.chain (sqrt) (Right (-1))\n  //. Left ('sqrt undefined for -1')\n  //.\n  //. > S.chain (sqrt) (Right (25))\n  //. Right (5)\n  //. ```\n  function Left$prototype$chain(f) {\n    return this;\n  }\n  function Right$prototype$chain(f) {\n    return f (this.value);\n  }\n\n  //# Either#fantasy-land/alt :: Either a b ~> Either a b -> Either a b\n  //.\n  //.   - `alt (Left (x)) (Left (y))` is equivalent to `Left (y)`\n  //.   - `alt (Left (x)) (Right (y))` is equivalent to `Right (y)`\n  //.   - `alt (Right (x)) (Left (y))` is equivalent to `Right (x)`\n  //.   - `alt (Right (x)) (Right (y))` is equivalent to `Right (x)`\n  //.\n  //. ```javascript\n  //. > S.alt (Left ('A')) (Left ('B'))\n  //. Left ('B')\n  //.\n  //. > S.alt (Left ('C')) (Right (1))\n  //. Right (1)\n  //.\n  //. > S.alt (Right (2)) (Left ('D'))\n  //. Right (2)\n  //.\n  //. > S.alt (Right (3)) (Right (4))\n  //. Right (3)\n  //. ```\n  function Left$prototype$alt(other) {\n    return other;\n  }\n  function Right$prototype$alt(other) {\n    return this;\n  }\n\n  //# Either#fantasy-land/reduce :: Either a b ~> ((c, b) -> c, c) -> c\n  //.\n  //.   - `reduce (f) (x) (Left (y))` is equivalent to `x`\n  //.   - `reduce (f) (x) (Right (y))` is equivalent to `f (x) (y)`\n  //.\n  //. ```javascript\n  //. > S.reduce (S.concat) ([1]) (Left ('sqrt undefined for -1'))\n  //. [1]\n  //.\n  //. > S.reduce (S.concat) ([1]) (Right ([2]))\n  //. [1, 2]\n  //. ```\n  function Left$prototype$reduce(f, x) {\n    return x;\n  }\n  function Right$prototype$reduce(f, x) {\n    return f (x, this.value);\n  }\n\n  //# Either#fantasy-land/traverse :: Applicative f => Either a b ~> (TypeRep f, b -> f c) -> f (Either a c)\n  //.\n  //.   - `traverse (A) (f) (Left (x))` is equivalent to `of (A) (Left (x))`\n  //.   - `traverse (A) (f) (Right (x))` is equivalent to `map (Right) (f (x))`\n  //.\n  //. ```javascript\n  //. > S.traverse (Array) (S.words) (Left ('sqrt undefined for -1'))\n  //. [Left ('sqrt undefined for -1')]\n  //.\n  //. > S.traverse (Array) (S.words) (Right ('foo bar baz'))\n  //. [Right ('foo'), Right ('bar'), Right ('baz')]\n  //. ```\n  function Left$prototype$traverse(typeRep, f) {\n    return Z.of (typeRep, this);\n  }\n  function Right$prototype$traverse(typeRep, f) {\n    return Z.map (Right, f (this.value));\n  }\n\n  //# Either#fantasy-land/extend :: Either a b ~> (Either a b -> c) -> Either a c\n  //.\n  //.   - `extend (f) (Left (x))` is equivalent to `Left (x)`\n  //.   - `extend (f) (Right (x))` is equivalent to `Right (f (Right (x)))`\n  //.\n  //. ```javascript\n  //. > S.extend (S.reduce (S.add) (1)) (Left ('sqrt undefined for -1'))\n  //. Left ('sqrt undefined for -1')\n  //.\n  //. > S.extend (S.reduce (S.add) (1)) (Right (99))\n  //. Right (100)\n  //. ```\n  function Left$prototype$extend(f) {\n    return this;\n  }\n  function Right$prototype$extend(f) {\n    return Right (f (this));\n  }\n\n  return Either;\n\n}));\n\n//. [Fantasy Land]:             v:fantasyland/fantasy-land\n//. [`Z.equals`]:               v:sanctuary-js/sanctuary-type-classes#equals\n//. [`Z.lte`]:                  v:sanctuary-js/sanctuary-type-classes#lte\n//. [iff]:                      https://en.wikipedia.org/wiki/If_and_only_if\n//. [type identifier]:          v:sanctuary-js/sanctuary-type-identifiers\n//. [type representative]:      v:fantasyland/fantasy-land#type-representatives\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar $foreign = require(\"./foreign.js\");\nvar Data_Symbol = require(\"../Data.Symbol/index.js\");\nvar Record_Unsafe = require(\"../Record.Unsafe/index.js\");\nvar Type_Data_RowList = require(\"../Type.Data.RowList/index.js\");\nvar Show = function (show) {\n    this.show = show;\n};\nvar ShowRecordFields = function (showRecordFields) {\n    this.showRecordFields = showRecordFields;\n};\nvar showString = new Show($foreign.showStringImpl);\nvar showRecordFieldsNil = new ShowRecordFields(function (v) {\n    return function (v1) {\n        return [  ];\n    };\n});\nvar showRecordFields = function (dict) {\n    return dict.showRecordFields;\n};\nvar showRecord = function (dictRowToList) {\n    return function (dictShowRecordFields) {\n        return new Show(function (record) {\n            var v = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);\n            if (v.length === 0) {\n                return \"{}\";\n            };\n            return $foreign.join(\" \")([ \"{\", $foreign.join(\", \")(v), \"}\" ]);\n        });\n    };\n};\nvar showNumber = new Show($foreign.showNumberImpl);\nvar showInt = new Show($foreign.showIntImpl);\nvar showChar = new Show($foreign.showCharImpl);\nvar showBoolean = new Show(function (v) {\n    if (v) {\n        return \"true\";\n    };\n    if (!v) {\n        return \"false\";\n    };\n    throw new Error(\"Failed pattern match at Data.Show line 20, column 1 - line 20, column 37: \" + [ v.constructor.name ]);\n});\nvar show = function (dict) {\n    return dict.show;\n};\nvar showArray = function (dictShow) {\n    return new Show($foreign.showArrayImpl(show(dictShow)));\n};\nvar showRecordFieldsCons = function (dictIsSymbol) {\n    return function (dictShowRecordFields) {\n        return function (dictShow) {\n            return new ShowRecordFields(function (v) {\n                return function (record) {\n                    var tail = showRecordFields(dictShowRecordFields)(Type_Data_RowList.RLProxy.value)(record);\n                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);\n                    var focus = Record_Unsafe.unsafeGet(key)(record);\n                    return $foreign.cons($foreign.join(\": \")([ key, show(dictShow)(focus) ]))(tail);\n                };\n            });\n        };\n    };\n};\nmodule.exports = {\n    Show: Show,\n    show: show,\n    ShowRecordFields: ShowRecordFields,\n    showRecordFields: showRecordFields,\n    showBoolean: showBoolean,\n    showInt: showInt,\n    showNumber: showNumber,\n    showChar: showChar,\n    showString: showString,\n    showArray: showArray,\n    showRecord: showRecord,\n    showRecordFieldsNil: showRecordFieldsNil,\n    showRecordFieldsCons: showRecordFieldsCons\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar $foreign = require(\"./foreign.js\");\nvar Control_Category = require(\"../Control.Category/index.js\");\nvar Data_Function = require(\"../Data.Function/index.js\");\nvar Data_Functor = require(\"../Data.Functor/index.js\");\nvar Apply = function (Functor0, apply) {\n    this.Functor0 = Functor0;\n    this.apply = apply;\n};\nvar applyFn = new Apply(function () {\n    return Data_Functor.functorFn;\n}, function (f) {\n    return function (g) {\n        return function (x) {\n            return f(x)(g(x));\n        };\n    };\n});\nvar applyArray = new Apply(function () {\n    return Data_Functor.functorArray;\n}, $foreign.arrayApply);\nvar apply = function (dict) {\n    return dict.apply;\n};\nvar applyFirst = function (dictApply) {\n    return function (a) {\n        return function (b) {\n            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function[\"const\"])(a))(b);\n        };\n    };\n};\nvar applySecond = function (dictApply) {\n    return function (a) {\n        return function (b) {\n            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function[\"const\"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);\n        };\n    };\n};\nvar lift2 = function (dictApply) {\n    return function (f) {\n        return function (a) {\n            return function (b) {\n                return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);\n            };\n        };\n    };\n};\nvar lift3 = function (dictApply) {\n    return function (f) {\n        return function (a) {\n            return function (b) {\n                return function (c) {\n                    return apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c);\n                };\n            };\n        };\n    };\n};\nvar lift4 = function (dictApply) {\n    return function (f) {\n        return function (a) {\n            return function (b) {\n                return function (c) {\n                    return function (d) {\n                        return apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d);\n                    };\n                };\n            };\n        };\n    };\n};\nvar lift5 = function (dictApply) {\n    return function (f) {\n        return function (a) {\n            return function (b) {\n                return function (c) {\n                    return function (d) {\n                        return function (e) {\n                            return apply(dictApply)(apply(dictApply)(apply(dictApply)(apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b))(c))(d))(e);\n                        };\n                    };\n                };\n            };\n        };\n    };\n};\nmodule.exports = {\n    Apply: Apply,\n    apply: apply,\n    applyFirst: applyFirst,\n    applySecond: applySecond,\n    lift2: lift2,\n    lift3: lift3,\n    lift4: lift4,\n    lift5: lift5,\n    applyFn: applyFn,\n    applyArray: applyArray\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar Control_Semigroupoid = require(\"../Control.Semigroupoid/index.js\");\nvar Category = function (Semigroupoid0, identity) {\n    this.Semigroupoid0 = Semigroupoid0;\n    this.identity = identity;\n};\nvar identity = function (dict) {\n    return dict.identity;\n};\nvar categoryFn = new Category(function () {\n    return Control_Semigroupoid.semigroupoidFn;\n}, function (x) {\n    return x;\n});\nmodule.exports = {\n    Category: Category,\n    identity: identity,\n    categoryFn: categoryFn\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar Control_Category = require(\"../Control.Category/index.js\");\nvar Data_Boolean = require(\"../Data.Boolean/index.js\");\nvar Data_Ord = require(\"../Data.Ord/index.js\");\nvar Data_Ring = require(\"../Data.Ring/index.js\");\nvar on = function (f) {\n    return function (g) {\n        return function (x) {\n            return function (y) {\n                return f(g(x))(g(y));\n            };\n        };\n    };\n};\nvar flip = function (f) {\n    return function (b) {\n        return function (a) {\n            return f(a)(b);\n        };\n    };\n};\nvar $$const = function (a) {\n    return function (v) {\n        return a;\n    };\n};\nvar applyN = function (f) {\n    var go = function ($copy_n) {\n        return function ($copy_acc) {\n            var $tco_var_n = $copy_n;\n            var $tco_done = false;\n            var $tco_result;\n            function $tco_loop(n, acc) {\n                if (n <= 0) {\n                    $tco_done = true;\n                    return acc;\n                };\n                if (Data_Boolean.otherwise) {\n                    $tco_var_n = n - 1 | 0;\n                    $copy_acc = f(acc);\n                    return;\n                };\n                throw new Error(\"Failed pattern match at Data.Function line 94, column 3 - line 96, column 37: \" + [ n.constructor.name, acc.constructor.name ]);\n            };\n            while (!$tco_done) {\n                $tco_result = $tco_loop($tco_var_n, $copy_acc);\n            };\n            return $tco_result;\n        };\n    };\n    return go;\n};\nvar applyFlipped = function (x) {\n    return function (f) {\n        return f(x);\n    };\n};\nvar apply = function (f) {\n    return function (x) {\n        return f(x);\n    };\n};\nmodule.exports = {\n    flip: flip,\n    \"const\": $$const,\n    apply: apply,\n    applyFlipped: applyFlipped,\n    applyN: applyN,\n    on: on\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar $foreign = require(\"./foreign.js\");\nvar Data_Eq = require(\"../Data.Eq/index.js\");\nvar Data_Ord_Unsafe = require(\"../Data.Ord.Unsafe/index.js\");\nvar Data_Ordering = require(\"../Data.Ordering/index.js\");\nvar Data_Ring = require(\"../Data.Ring/index.js\");\nvar Data_Semiring = require(\"../Data.Semiring/index.js\");\nvar Data_Unit = require(\"../Data.Unit/index.js\");\nvar Data_Void = require(\"../Data.Void/index.js\");\nvar Ord = function (Eq0, compare) {\n    this.Eq0 = Eq0;\n    this.compare = compare;\n};\nvar Ord1 = function (Eq10, compare1) {\n    this.Eq10 = Eq10;\n    this.compare1 = compare1;\n};\nvar ordVoid = new Ord(function () {\n    return Data_Eq.eqVoid;\n}, function (v) {\n    return function (v1) {\n        return Data_Ordering.EQ.value;\n    };\n});\nvar ordUnit = new Ord(function () {\n    return Data_Eq.eqUnit;\n}, function (v) {\n    return function (v1) {\n        return Data_Ordering.EQ.value;\n    };\n});\nvar ordString = new Ord(function () {\n    return Data_Eq.eqString;\n}, Data_Ord_Unsafe.unsafeCompare);\nvar ordOrdering = new Ord(function () {\n    return Data_Ordering.eqOrdering;\n}, function (v) {\n    return function (v1) {\n        if (v instanceof Data_Ordering.LT && v1 instanceof Data_Ordering.LT) {\n            return Data_Ordering.EQ.value;\n        };\n        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.EQ) {\n            return Data_Ordering.EQ.value;\n        };\n        if (v instanceof Data_Ordering.GT && v1 instanceof Data_Ordering.GT) {\n            return Data_Ordering.EQ.value;\n        };\n        if (v instanceof Data_Ordering.LT) {\n            return Data_Ordering.LT.value;\n        };\n        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.LT) {\n            return Data_Ordering.GT.value;\n        };\n        if (v instanceof Data_Ordering.EQ && v1 instanceof Data_Ordering.GT) {\n            return Data_Ordering.LT.value;\n        };\n        if (v instanceof Data_Ordering.GT) {\n            return Data_Ordering.GT.value;\n        };\n        throw new Error(\"Failed pattern match at Data.Ord line 67, column 1 - line 67, column 37: \" + [ v.constructor.name, v1.constructor.name ]);\n    };\n});\nvar ordNumber = new Ord(function () {\n    return Data_Eq.eqNumber;\n}, Data_Ord_Unsafe.unsafeCompare);\nvar ordInt = new Ord(function () {\n    return Data_Eq.eqInt;\n}, Data_Ord_Unsafe.unsafeCompare);\nvar ordChar = new Ord(function () {\n    return Data_Eq.eqChar;\n}, Data_Ord_Unsafe.unsafeCompare);\nvar ordBoolean = new Ord(function () {\n    return Data_Eq.eqBoolean;\n}, Data_Ord_Unsafe.unsafeCompare);\nvar compare1 = function (dict) {\n    return dict.compare1;\n};\nvar compare = function (dict) {\n    return dict.compare;\n};\nvar comparing = function (dictOrd) {\n    return function (f) {\n        return function (x) {\n            return function (y) {\n                return compare(dictOrd)(f(x))(f(y));\n            };\n        };\n    };\n};\nvar greaterThan = function (dictOrd) {\n    return function (a1) {\n        return function (a2) {\n            var v = compare(dictOrd)(a1)(a2);\n            if (v instanceof Data_Ordering.GT) {\n                return true;\n            };\n            return false;\n        };\n    };\n};\nvar greaterThanOrEq = function (dictOrd) {\n    return function (a1) {\n        return function (a2) {\n            var v = compare(dictOrd)(a1)(a2);\n            if (v instanceof Data_Ordering.LT) {\n                return false;\n            };\n            return true;\n        };\n    };\n};\nvar signum = function (dictOrd) {\n    return function (dictRing) {\n        return function (x) {\n            var $33 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));\n            if ($33) {\n                return Data_Semiring.one(dictRing.Semiring0());\n            };\n            return Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0()));\n        };\n    };\n};\nvar lessThan = function (dictOrd) {\n    return function (a1) {\n        return function (a2) {\n            var v = compare(dictOrd)(a1)(a2);\n            if (v instanceof Data_Ordering.LT) {\n                return true;\n            };\n            return false;\n        };\n    };\n};\nvar lessThanOrEq = function (dictOrd) {\n    return function (a1) {\n        return function (a2) {\n            var v = compare(dictOrd)(a1)(a2);\n            if (v instanceof Data_Ordering.GT) {\n                return false;\n            };\n            return true;\n        };\n    };\n};\nvar max = function (dictOrd) {\n    return function (x) {\n        return function (y) {\n            var v = compare(dictOrd)(x)(y);\n            if (v instanceof Data_Ordering.LT) {\n                return y;\n            };\n            if (v instanceof Data_Ordering.EQ) {\n                return x;\n            };\n            if (v instanceof Data_Ordering.GT) {\n                return x;\n            };\n            throw new Error(\"Failed pattern match at Data.Ord line 122, column 3 - line 125, column 12: \" + [ v.constructor.name ]);\n        };\n    };\n};\nvar min = function (dictOrd) {\n    return function (x) {\n        return function (y) {\n            var v = compare(dictOrd)(x)(y);\n            if (v instanceof Data_Ordering.LT) {\n                return x;\n            };\n            if (v instanceof Data_Ordering.EQ) {\n                return x;\n            };\n            if (v instanceof Data_Ordering.GT) {\n                return y;\n            };\n            throw new Error(\"Failed pattern match at Data.Ord line 113, column 3 - line 116, column 12: \" + [ v.constructor.name ]);\n        };\n    };\n};\nvar ordArray = function (dictOrd) {\n    return new Ord(function () {\n        return Data_Eq.eqArray(dictOrd.Eq0());\n    }, (function () {\n        var toDelta = function (x) {\n            return function (y) {\n                var v = compare(dictOrd)(x)(y);\n                if (v instanceof Data_Ordering.EQ) {\n                    return 0;\n                };\n                if (v instanceof Data_Ordering.LT) {\n                    return 1;\n                };\n                if (v instanceof Data_Ordering.GT) {\n                    return -1 | 0;\n                };\n                throw new Error(\"Failed pattern match at Data.Ord line 60, column 7 - line 65, column 1: \" + [ v.constructor.name ]);\n            };\n        };\n        return function (xs) {\n            return function (ys) {\n                return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));\n            };\n        };\n    })());\n};\nvar ord1Array = new Ord1(function () {\n    return Data_Eq.eq1Array;\n}, function (dictOrd) {\n    return compare(ordArray(dictOrd));\n});\nvar clamp = function (dictOrd) {\n    return function (low) {\n        return function (hi) {\n            return function (x) {\n                return min(dictOrd)(hi)(max(dictOrd)(low)(x));\n            };\n        };\n    };\n};\nvar between = function (dictOrd) {\n    return function (low) {\n        return function (hi) {\n            return function (x) {\n                if (lessThan(dictOrd)(x)(low)) {\n                    return false;\n                };\n                if (greaterThan(dictOrd)(x)(hi)) {\n                    return false;\n                };\n                return true;\n            };\n        };\n    };\n};\nvar abs = function (dictOrd) {\n    return function (dictRing) {\n        return function (x) {\n            var $42 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));\n            if ($42) {\n                return x;\n            };\n            return Data_Ring.negate(dictRing)(x);\n        };\n    };\n};\nmodule.exports = {\n    Ord: Ord,\n    compare: compare,\n    Ord1: Ord1,\n    compare1: compare1,\n    lessThan: lessThan,\n    lessThanOrEq: lessThanOrEq,\n    greaterThan: greaterThan,\n    greaterThanOrEq: greaterThanOrEq,\n    comparing: comparing,\n    min: min,\n    max: max,\n    clamp: clamp,\n    between: between,\n    abs: abs,\n    signum: signum,\n    ordBoolean: ordBoolean,\n    ordInt: ordInt,\n    ordNumber: ordNumber,\n    ordString: ordString,\n    ordChar: ordChar,\n    ordUnit: ordUnit,\n    ordVoid: ordVoid,\n    ordArray: ordArray,\n    ordOrdering: ordOrdering,\n    ord1Array: ord1Array\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar $foreign = require(\"./foreign.js\");\nvar Data_Symbol = require(\"../Data.Symbol/index.js\");\nvar Data_Unit = require(\"../Data.Unit/index.js\");\nvar Record_Unsafe = require(\"../Record.Unsafe/index.js\");\nvar Type_Data_Row = require(\"../Type.Data.Row/index.js\");\nvar Type_Data_RowList = require(\"../Type.Data.RowList/index.js\");\nvar HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {\n    this.conj = conj;\n    this.disj = disj;\n    this.ff = ff;\n    this.implies = implies;\n    this.not = not;\n    this.tt = tt;\n};\nvar HeytingAlgebraRecord = function (conjRecord, disjRecord, ffRecord, impliesRecord, notRecord, ttRecord) {\n    this.conjRecord = conjRecord;\n    this.disjRecord = disjRecord;\n    this.ffRecord = ffRecord;\n    this.impliesRecord = impliesRecord;\n    this.notRecord = notRecord;\n    this.ttRecord = ttRecord;\n};\nvar ttRecord = function (dict) {\n    return dict.ttRecord;\n};\nvar tt = function (dict) {\n    return dict.tt;\n};\nvar notRecord = function (dict) {\n    return dict.notRecord;\n};\nvar not = function (dict) {\n    return dict.not;\n};\nvar impliesRecord = function (dict) {\n    return dict.impliesRecord;\n};\nvar implies = function (dict) {\n    return dict.implies;\n};\nvar heytingAlgebraUnit = new HeytingAlgebra(function (v) {\n    return function (v1) {\n        return Data_Unit.unit;\n    };\n}, function (v) {\n    return function (v1) {\n        return Data_Unit.unit;\n    };\n}, Data_Unit.unit, function (v) {\n    return function (v1) {\n        return Data_Unit.unit;\n    };\n}, function (v) {\n    return Data_Unit.unit;\n}, Data_Unit.unit);\nvar heytingAlgebraRecordNil = new HeytingAlgebraRecord(function (v) {\n    return function (v1) {\n        return function (v2) {\n            return {};\n        };\n    };\n}, function (v) {\n    return function (v1) {\n        return function (v2) {\n            return {};\n        };\n    };\n}, function (v) {\n    return function (v1) {\n        return {};\n    };\n}, function (v) {\n    return function (v1) {\n        return function (v2) {\n            return {};\n        };\n    };\n}, function (v) {\n    return function (v1) {\n        return {};\n    };\n}, function (v) {\n    return function (v1) {\n        return {};\n    };\n});\nvar ffRecord = function (dict) {\n    return dict.ffRecord;\n};\nvar ff = function (dict) {\n    return dict.ff;\n};\nvar disjRecord = function (dict) {\n    return dict.disjRecord;\n};\nvar disj = function (dict) {\n    return dict.disj;\n};\nvar heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {\n    return function (b) {\n        return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);\n    };\n}, $foreign.boolNot, true);\nvar conjRecord = function (dict) {\n    return dict.conjRecord;\n};\nvar heytingAlgebraRecord = function (dictRowToList) {\n    return function (dictHeytingAlgebraRecord) {\n        return new HeytingAlgebra(conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value), impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value), ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(Type_Data_Row.RProxy.value));\n    };\n};\nvar conj = function (dict) {\n    return dict.conj;\n};\nvar heytingAlgebraFunction = function (dictHeytingAlgebra) {\n    return new HeytingAlgebra(function (f) {\n        return function (g) {\n            return function (a) {\n                return conj(dictHeytingAlgebra)(f(a))(g(a));\n            };\n        };\n    }, function (f) {\n        return function (g) {\n            return function (a) {\n                return disj(dictHeytingAlgebra)(f(a))(g(a));\n            };\n        };\n    }, function (v) {\n        return ff(dictHeytingAlgebra);\n    }, function (f) {\n        return function (g) {\n            return function (a) {\n                return implies(dictHeytingAlgebra)(f(a))(g(a));\n            };\n        };\n    }, function (f) {\n        return function (a) {\n            return not(dictHeytingAlgebra)(f(a));\n        };\n    }, function (v) {\n        return tt(dictHeytingAlgebra);\n    });\n};\nvar heytingAlgebraRecordCons = function (dictIsSymbol) {\n    return function (dictCons) {\n        return function (dictHeytingAlgebraRecord) {\n            return function (dictHeytingAlgebra) {\n                return new HeytingAlgebraRecord(function (v) {\n                    return function (ra) {\n                        return function (rb) {\n                            var tail = conjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);\n                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);\n                            var insert = Record_Unsafe.unsafeSet(key);\n                            var get = Record_Unsafe.unsafeGet(key);\n                            return insert(conj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);\n                        };\n                    };\n                }, function (v) {\n                    return function (ra) {\n                        return function (rb) {\n                            var tail = disjRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);\n                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);\n                            var insert = Record_Unsafe.unsafeSet(key);\n                            var get = Record_Unsafe.unsafeGet(key);\n                            return insert(disj(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);\n                        };\n                    };\n                }, function (v) {\n                    return function (row) {\n                        var tail = ffRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);\n                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);\n                        var insert = Record_Unsafe.unsafeSet(key);\n                        return insert(ff(dictHeytingAlgebra))(tail);\n                    };\n                }, function (v) {\n                    return function (ra) {\n                        return function (rb) {\n                            var tail = impliesRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);\n                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);\n                            var insert = Record_Unsafe.unsafeSet(key);\n                            var get = Record_Unsafe.unsafeGet(key);\n                            return insert(implies(dictHeytingAlgebra)(get(ra))(get(rb)))(tail);\n                        };\n                    };\n                }, function (v) {\n                    return function (row) {\n                        var tail = notRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);\n                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);\n                        var insert = Record_Unsafe.unsafeSet(key);\n                        var get = Record_Unsafe.unsafeGet(key);\n                        return insert(not(dictHeytingAlgebra)(get(row)))(tail);\n                    };\n                }, function (v) {\n                    return function (row) {\n                        var tail = ttRecord(dictHeytingAlgebraRecord)(Type_Data_RowList.RLProxy.value)(row);\n                        var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);\n                        var insert = Record_Unsafe.unsafeSet(key);\n                        return insert(tt(dictHeytingAlgebra))(tail);\n                    };\n                });\n            };\n        };\n    };\n};\nmodule.exports = {\n    HeytingAlgebra: HeytingAlgebra,\n    tt: tt,\n    ff: ff,\n    implies: implies,\n    conj: conj,\n    disj: disj,\n    not: not,\n    HeytingAlgebraRecord: HeytingAlgebraRecord,\n    ffRecord: ffRecord,\n    ttRecord: ttRecord,\n    impliesRecord: impliesRecord,\n    conjRecord: conjRecord,\n    disjRecord: disjRecord,\n    notRecord: notRecord,\n    heytingAlgebraBoolean: heytingAlgebraBoolean,\n    heytingAlgebraUnit: heytingAlgebraUnit,\n    heytingAlgebraFunction: heytingAlgebraFunction,\n    heytingAlgebraRecord: heytingAlgebraRecord,\n    heytingAlgebraRecordNil: heytingAlgebraRecordNil,\n    heytingAlgebraRecordCons: heytingAlgebraRecordCons\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar Data_Show = require(\"../Data.Show/index.js\");\nvar Void = function (x) {\n    return x;\n};\nvar absurd = function (a) {\n    var spin = function ($copy_v) {\n        var $tco_result;\n        function $tco_loop(v) {\n            $copy_v = v;\n            return;\n        };\n        while (!false) {\n            $tco_result = $tco_loop($copy_v);\n        };\n        return $tco_result;\n    };\n    return spin(a);\n};\nvar showVoid = new Data_Show.Show(absurd);\nmodule.exports = {\n    absurd: absurd,\n    showVoid: showVoid\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar $foreign = require(\"./foreign.js\");\nvar Data_BooleanAlgebra = require(\"../Data.BooleanAlgebra/index.js\");\nvar Data_CommutativeRing = require(\"../Data.CommutativeRing/index.js\");\nvar Data_Eq = require(\"../Data.Eq/index.js\");\nvar Data_HeytingAlgebra = require(\"../Data.HeytingAlgebra/index.js\");\nvar Data_Ring = require(\"../Data.Ring/index.js\");\nvar Data_Semiring = require(\"../Data.Semiring/index.js\");\nvar EuclideanRing = function (CommutativeRing0, degree, div, mod) {\n    this.CommutativeRing0 = CommutativeRing0;\n    this.degree = degree;\n    this.div = div;\n    this.mod = mod;\n};\nvar mod = function (dict) {\n    return dict.mod;\n};\nvar gcd = function ($copy_dictEq) {\n    return function ($copy_dictEuclideanRing) {\n        return function ($copy_a) {\n            return function ($copy_b) {\n                var $tco_var_dictEq = $copy_dictEq;\n                var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;\n                var $tco_var_a = $copy_a;\n                var $tco_done = false;\n                var $tco_result;\n                function $tco_loop(dictEq, dictEuclideanRing, a, b) {\n                    var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));\n                    if ($7) {\n                        $tco_done = true;\n                        return a;\n                    };\n                    $tco_var_dictEq = dictEq;\n                    $tco_var_dictEuclideanRing = dictEuclideanRing;\n                    $tco_var_a = b;\n                    $copy_b = mod(dictEuclideanRing)(a)(b);\n                    return;\n                };\n                while (!$tco_done) {\n                    $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);\n                };\n                return $tco_result;\n            };\n        };\n    };\n};\nvar euclideanRingNumber = new EuclideanRing(function () {\n    return Data_CommutativeRing.commutativeRingNumber;\n}, function (v) {\n    return 1;\n}, $foreign.numDiv, function (v) {\n    return function (v1) {\n        return 0.0;\n    };\n});\nvar euclideanRingInt = new EuclideanRing(function () {\n    return Data_CommutativeRing.commutativeRingInt;\n}, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);\nvar div = function (dict) {\n    return dict.div;\n};\nvar lcm = function (dictEq) {\n    return function (dictEuclideanRing) {\n        return function (a) {\n            return function (b) {\n                var $8 = Data_Eq.eq(dictEq)(a)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())) || Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));\n                if ($8) {\n                    return Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0());\n                };\n                return div(dictEuclideanRing)(Data_Semiring.mul(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0())(a)(b))(gcd(dictEq)(dictEuclideanRing)(a)(b));\n            };\n        };\n    };\n};\nvar degree = function (dict) {\n    return dict.degree;\n};\nmodule.exports = {\n    EuclideanRing: EuclideanRing,\n    degree: degree,\n    div: div,\n    mod: mod,\n    gcd: gcd,\n    lcm: lcm,\n    euclideanRingInt: euclideanRingInt,\n    euclideanRingNumber: euclideanRingNumber\n};\n","/*    #######\n   ####     ####\n ####   ###   ####\n#####   ###########   sanctuary\n########   ########   noun\n###########   #####   1 [ mass noun ] refuge from unsafe JavaScript\n ####   ###   ####\n   ####     ####\n      #######    */\n\n//. # Sanctuary\n//.\n//. [![npm](https://img.shields.io/npm/v/sanctuary.svg)](https://www.npmjs.com/package/sanctuary)\n//. [![CircleCI](https://img.shields.io/circleci/project/github/sanctuary-js/sanctuary/master.svg)](https://circleci.com/gh/sanctuary-js/sanctuary/tree/master)\n//. [![Gitter](https://img.shields.io/gitter/room/badges/shields.svg)](https://gitter.im/sanctuary-js/sanctuary)\n//.\n//. Sanctuary is a JavaScript functional programming library inspired by\n//. [Haskell][] and [PureScript][]. It's stricter than [Ramda][], and\n//. provides a similar suite of functions.\n//.\n//. Sanctuary promotes programs composed of simple, pure functions. Such\n//. programs are easier to comprehend, test, and maintain &ndash; they are\n//. also a pleasure to write.\n//.\n//. Sanctuary provides two data types, [Maybe][] and [Either][], both of\n//. which are compatible with [Fantasy Land][]. Thanks to these data types\n//. even Sanctuary functions which may fail, such as [`head`](#head), are\n//. composable.\n//.\n//. Sanctuary makes it possible to write safe code without null checks.\n//. In JavaScript it's trivial to introduce a possible run-time type error:\n//.\n//.     words[0].toUpperCase()\n//.\n//. If `words` is `[]` we'll get a familiar error at run-time:\n//.\n//.     TypeError: Cannot read property 'toUpperCase' of undefined\n//.\n//. Sanctuary gives us a fighting chance of avoiding such errors. We might\n//. write:\n//.\n//.     S.map (S.toUpper) (S.head (words))\n//.\n//. Sanctuary is designed to work in Node.js and in ES5-compatible browsers.\n//.\n//. ## Ramda\n//.\n//. [Ramda][] provides several functions which return problematic values\n//. such as `undefined`, `Infinity`, or `NaN` when applied to unsuitable\n//. inputs. These are known as [partial functions][]. Partial functions\n//. necessitate the use of guards or null checks. In order to safely use\n//. `R.head`, for example, one must ensure that the array is non-empty:\n//.\n//.     if (R.isEmpty (xs)) {\n//.       // ...\n//.     } else {\n//.       return f (R.head (xs));\n//.     }\n//.\n//. Using the Maybe type renders such guards (and null checks) unnecessary.\n//. Changing functions such as `R.head` to return Maybe values was proposed\n//. in [ramda/ramda#683][], but was considered too much of a stretch for\n//. JavaScript programmers. Sanctuary was released the following month,\n//. in January 2015, as a companion library to Ramda.\n//.\n//. In addition to broadening in scope in the years since its release,\n//. Sanctuary's philosophy has diverged from Ramda's in several respects.\n//.\n//. ### Totality\n//.\n//. Every Sanctuary function is defined for every value which is a member of\n//. the function's input type. Such functions are known as [total functions][].\n//. Ramda, on the other hand, contains a number of [partial functions][].\n//.\n//. ### Information preservation\n//.\n//. Certain Sanctuary functions preserve more information than their Ramda\n//. counterparts. Examples:\n//.\n//.     |> R.tail ([])                      |> S.tail ([])\n//.     []                                  Nothing\n//.\n//.     |> R.tail (['foo'])                 |> S.tail (['foo'])\n//.     []                                  Just ([])\n//.\n//.     |> R.replace (/^x/) ('') ('abc')    |> S.stripPrefix ('x') ('abc')\n//.     'abc'                               Nothing\n//.\n//.     |> R.replace (/^x/) ('') ('xabc')   |> S.stripPrefix ('x') ('xabc')\n//.     'abc'                               Just ('abc')\n//.\n//. ### Invariants\n//.\n//. Sanctuary performs rigorous [type checking][] of inputs and outputs, and\n//. throws a descriptive error if a type error is encountered. This allows bugs\n//. to be caught and fixed early in the development cycle.\n//.\n//. Ramda operates on the [garbage in, garbage out][GIGO] principal. Functions\n//. are documented to take arguments of particular types, but these invariants\n//. are not enforced. The problem with this approach in a language as\n//. permissive as JavaScript is that there's no guarantee that garbage input\n//. will produce garbage output ([ramda/ramda#1413][]). Ramda performs ad hoc\n//. type checking in some such cases ([ramda/ramda#1419][]).\n//.\n//. Sanctuary can be configured to operate in garbage in, garbage out mode.\n//. Ramda cannot be configured to enforce its invariants.\n//.\n//. ### Currying\n//.\n//. Sanctuary functions are curried. There is, for example, exactly one way to\n//. apply `S.reduce` to `S.add`, `0`, and `xs`:\n//.\n//.   - `S.reduce (S.add) (0) (xs)`\n//.\n//. Ramda functions are also curried, but in a complex manner. There are four\n//. ways to apply `R.reduce` to `R.add`, `0`, and `xs`:\n//.\n//.   - `R.reduce (R.add) (0) (xs)`\n//.   - `R.reduce (R.add) (0, xs)`\n//.   - `R.reduce (R.add, 0) (xs)`\n//.   - `R.reduce (R.add, 0, xs)`\n//.\n//. Ramda supports all these forms because curried functions enable partial\n//. application, one of the library's tenets, but `f(x)(y)(z)` is considered\n//. too unfamiliar and too unattractive to appeal to JavaScript programmers.\n//.\n//. Sanctuary's developers prefer a simple, unfamiliar construct to a complex,\n//. familiar one. Familiarity can be acquired; complexity is intrinsic.\n//.\n//. The lack of breathing room in `f(x)(y)(z)` impairs readability. The simple\n//. solution to this problem, proposed in [#438][], is to include a space when\n//. applying a function: `f (x) (y) (z)`.\n//.\n//. Ramda also provides a special placeholder value, [`R.__`][], which removes\n//. the restriction that a function must be applied to its arguments in order.\n//. The following expressions are equivalent:\n//.\n//.   - `R.reduce (R.__, 0, xs) (R.add)`\n//.   - `R.reduce (R.add, R.__, xs) (0)`\n//.   - `R.reduce (R.__, 0) (R.add) (xs)`\n//.   - `R.reduce (R.__, 0) (R.add, xs)`\n//.   - `R.reduce (R.__, R.__, xs) (R.add) (0)`\n//.   - `R.reduce (R.__, R.__, xs) (R.add, 0)`\n//.\n//. ### Variadic functions\n//.\n//. Ramda provides several functions which take any number of arguments. These\n//. are known as [variadic functions][]. Additionally, Ramda provides several\n//. functions which take variadic functions as arguments. Although natural in\n//. a dynamically typed language, variadic functions are at odds with the type\n//. notation Ramda and Sanctuary both use, leading to some indecipherable type\n//. signatures such as this one:\n//.\n//.     R.lift :: (*... -> *...) -> ([*]... -> [*])\n//.\n//. Sanctuary has no variadic functions, nor any functions which take variadic\n//. functions as arguments. Sanctuary provides two \"lift\" functions, each with\n//. a helpful type signature:\n//.\n//.     S.lift2 :: Apply f => (a -> b -> c) -> f a -> f b -> f c\n//.     S.lift3 :: Apply f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d\n//.\n//. ### Implicit context\n//.\n//. Ramda provides [`R.bind`][] and [`R.invoker`][] for working with methods.\n//. Additionally, many Ramda functions use `Function#call` or `Function#apply`\n//. to preserve context. Sanctuary makes no allowances for `this`.\n//.\n//. ### Transducers\n//.\n//. Several Ramda functions act as transducers. Sanctuary provides no support\n//. for transducers.\n//.\n//. ### Modularity\n//.\n//. Whereas Ramda has no dependencies, Sanctuary has a modular design:\n//. [sanctuary-def][] provides type checking, [sanctuary-type-classes][]\n//. provides Fantasy Land functions and type classes, [sanctuary-show][]\n//. provides string representations, and algebraic data types are provided\n//. by [sanctuary-either][], [sanctuary-maybe][], and [sanctuary-pair][].\n//. Not only does this approach reduce the complexity of Sanctuary itself,\n//. but it allows these components to be reused in other contexts.\n//.\n//. ## Types\n//.\n//. Sanctuary uses Haskell-like type signatures to describe the types of\n//. values, including functions. `'foo'`, for example, is a member of `String`;\n//. `[1, 2, 3]` is a member of `Array Number`. The double colon (`::`) is used\n//. to mean \"is a member of\", so one could write:\n//.\n//.     'foo' :: String\n//.     [1, 2, 3] :: Array Number\n//.\n//. An identifier may appear to the left of the double colon:\n//.\n//.     Math.PI :: Number\n//.\n//. The arrow (`->`) is used to express a function's type:\n//.\n//.     Math.abs :: Number -> Number\n//.\n//. That states that `Math.abs` is a unary function which takes an argument\n//. of type `Number` and returns a value of type `Number`.\n//.\n//. Some functions are parametrically polymorphic: their types are not fixed.\n//. Type variables are used in the representations of such functions:\n//.\n//.     S.I :: a -> a\n//.\n//. `a` is a type variable. Type variables are not capitalized, so they\n//. are differentiable from type identifiers (which are always capitalized).\n//. By convention type variables have single-character names. The signature\n//. above states that `S.I` takes a value of any type and returns a value of\n//. the same type. Some signatures feature multiple type variables:\n//.\n//.     S.K :: a -> b -> a\n//.\n//. It must be possible to replace all occurrences of `a` with a concrete type.\n//. The same applies for each other type variable. For the function above, the\n//. types with which `a` and `b` are replaced may be different, but needn't be.\n//.\n//. Since all Sanctuary functions are curried (they accept their arguments\n//. one at a time), a binary function is represented as a unary function which\n//. returns a unary function: `* -> * -> *`. This aligns neatly with Haskell,\n//. which uses curried functions exclusively. In JavaScript, though, we may\n//. wish to represent the types of functions with arities less than or greater\n//. than one. The general form is `(<input-types>) -> <output-type>`, where\n//. `<input-types>` comprises zero or more comma–space (<code>, </code>)\n//. -separated type representations:\n//.\n//.   - `() -> String`\n//.   - `(a, b) -> a`\n//.   - `(a, b, c) -> d`\n//.\n//. `Number -> Number` can thus be seen as shorthand for `(Number) -> Number`.\n//.\n//. The question mark (`?`) is used to represent types which include `null`\n//. and `undefined` as members. `String?`, for example, represents the type\n//. comprising `null`, `undefined`, and all strings.\n//.\n//. Sanctuary embraces types. JavaScript doesn't support algebraic data types,\n//. but these can be simulated by providing a group of data constructors which\n//. return values with the same set of methods. A value of the Either type, for\n//. example, is created via the Left constructor or the Right constructor.\n//.\n//. It's necessary to extend Haskell's notation to describe implicit arguments\n//. to the *methods* provided by Sanctuary's types. In `x.map(y)`, for example,\n//. the `map` method takes an implicit argument `x` in addition to the explicit\n//. argument `y`. The type of the value upon which a method is invoked appears\n//. at the beginning of the signature, separated from the arguments and return\n//. value by a squiggly arrow (`~>`). The type of the `fantasy-land/map` method\n//. of the Maybe type is written `Maybe a ~> (a -> b) -> Maybe b`. One could\n//. read this as:\n//.\n//. _When the `fantasy-land/map` method is invoked on a value of type `Maybe a`\n//. (for any type `a`) with an argument of type `a -> b` (for any type `b`),\n//. it returns a value of type `Maybe b`._\n//.\n//. The squiggly arrow is also used when representing non-function properties.\n//. `Maybe a ~> Boolean`, for example, represents a Boolean property of a value\n//. of type `Maybe a`.\n//.\n//. Sanctuary supports type classes: constraints on type variables. Whereas\n//. `a -> a` implicitly supports every type, `Functor f => (a -> b) -> f a ->\n//. f b` requires that `f` be a type which satisfies the requirements of the\n//. Functor type class. Type-class constraints appear at the beginning of a\n//. type signature, separated from the rest of the signature by a fat arrow\n//. (`=>`).\n//.\n//. ## Type checking\n//.\n//. Sanctuary functions are defined via [sanctuary-def][] to provide run-time\n//. type checking. This is tremendously useful during development: type errors\n//. are reported immediately, avoiding circuitous stack traces (at best) and\n//. silent failures due to type coercion (at worst). For example:\n//.\n//. ```javascript\n//. S.add (2) (true);\n//. // ! TypeError: Invalid value\n//. //\n//. //   add :: FiniteNumber -> FiniteNumber -> FiniteNumber\n//. //                          ^^^^^^^^^^^^\n//. //                               1\n//. //\n//. //   1)  true :: Boolean\n//. //\n//. //   The value at position 1 is not a member of ‘FiniteNumber’.\n//. //\n//. //   See v:sanctuary-js/sanctuary-def#FiniteNumber for information about the sanctuary-def/FiniteNumber type.\n//. ```\n//.\n//. Compare this to the behaviour of Ramda's unchecked equivalent:\n//.\n//. ```javascript\n//. R.add (2) (true);\n//. // => 3\n//. ```\n//.\n//. There is a performance cost to run-time type checking. Type checking is\n//. disabled by default if `process.env.NODE_ENV` is `'production'`. If this\n//. rule is unsuitable for a given program, one may use [`create`](#create)\n//. to create a Sanctuary module based on a different rule. For example:\n//.\n//. ```javascript\n//. const S = sanctuary.create ({\n//.   checkTypes: localStorage.getItem ('SANCTUARY_CHECK_TYPES') === 'true',\n//.   env: sanctuary.env,\n//. });\n//. ```\n//.\n//. Occasionally one may wish to perform an operation which is not type safe,\n//. such as mapping over an object with heterogeneous values. This is possible\n//. via selective use of [`unchecked`](#unchecked) functions.\n//.\n//. ## Installation\n//.\n//. `npm install sanctuary` will install Sanctuary for use in Node.js.\n//.\n//. Running Sanctuary in the browser is more involved. One must include a\n//. `<script>` for each dependency in addition to one for Sanctuary itself:\n//.\n//. ```html\n//. <script src=\"vendor/sanctuary-show.js\"></script>\n//. <script src=\"vendor/sanctuary-type-identifiers.js\"></script>\n//. <script src=\"vendor/sanctuary-type-classes.js\"></script>\n//. <script src=\"vendor/sanctuary-either.js\"></script>\n//. <script src=\"vendor/sanctuary-maybe.js\"></script>\n//. <script src=\"vendor/sanctuary-pair.js\"></script>\n//. <script src=\"vendor/sanctuary-def.js\"></script>\n//. <script src=\"vendor/sanctuary.js\"></script>\n//. ```\n//.\n//. To ensure compatibility one should use the dependency versions specified\n//. in __package.json__.\n//.\n//. For convenience one could define aliases for various modules:\n//.\n//. ```javascript\n//. const S = window.sanctuary;\n//. const $ = window.sanctuaryDef;\n//. // ...\n//. ```\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f (require ('sanctuary-def'),\n                        require ('sanctuary-either'),\n                        require ('sanctuary-maybe'),\n                        require ('sanctuary-pair'),\n                        require ('sanctuary-show'),\n                        require ('sanctuary-type-classes'),\n                        require ('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define (['sanctuary-def',\n             'sanctuary-either',\n             'sanctuary-maybe',\n             'sanctuary-pair',\n             'sanctuary-show',\n             'sanctuary-type-classes',\n             'sanctuary-type-identifiers'],\n            f);\n  } else {\n    self.sanctuary = f (self.sanctuaryDef,\n                        self.sanctuaryEither,\n                        self.sanctuaryMaybe,\n                        self.sanctuaryPair,\n                        self.sanctuaryShow,\n                        self.sanctuaryTypeClasses,\n                        self.sanctuaryTypeIdentifiers);\n  }\n\n} (function($, Either, Maybe, Pair, show, Z, type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* eslint-disable no-unused-vars */\n    var Descending = __doctest.require ('sanctuary-descending');\n    var Nil = (__doctest.require ('./test/internal/List')).Nil;\n    var Cons = (__doctest.require ('./test/internal/List')).Cons;\n    var Sum = __doctest.require ('./test/internal/Sum');\n    var S = (function(S) {\n      //  DescendingType :: Type -> Type\n      var DescendingType = $.UnaryType\n        ('sanctuary/Descending')\n        ('')\n        (typeEq (Descending['@@type']))\n        (B (of (Array)) (Z.extract));\n\n      var S_ = S.create ({\n        checkTypes: true,\n        env: S.env.concat ([\n          DescendingType ($.Unknown),\n          (__doctest.require ('./test/internal/List')).Type ($.Unknown),\n          Sum.Type\n        ])\n      });\n      S_.env = S.env;  // see S.env doctest\n      return S_;\n    } (require ('.')));\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  Left :: a -> Either a b\n  var Left = Either.Left;\n\n  //  Right :: b -> Either a b\n  var Right = Either.Right;\n\n  //  Nothing :: Maybe a\n  var Nothing = Maybe.Nothing;\n\n  //  Just :: a -> Maybe a\n  var Just = Maybe.Just;\n\n  //  B :: (b -> c) -> (a -> b) -> a -> c\n  function B(f) {\n    return function(g) {\n      return function(x) {\n        return f (g (x));\n      };\n    };\n  }\n\n  //  C :: (a -> b -> c) -> b -> a -> c\n  function C(f) {\n    return function(y) {\n      return function(x) {\n        return f (x) (y);\n      };\n    };\n  }\n\n  //  Fn :: Type -> Type -> Type\n  function Fn(x) {\n    return function(y) {\n      return $.Function ([x, y]);\n    };\n  }\n\n  //  get_ :: String -> a -> Maybe b\n  function get_(key) {\n    return B (function(obj) { return key in obj ? Just (obj[key]) : Nothing; })\n             (toObject);\n  }\n\n  //  invoke0 :: String -> a -> b\n  function invoke0(name) {\n    return function(target) {\n      return target[name] ();\n    };\n  }\n\n  //  invoke1 :: String -> a -> b -> c\n  function invoke1(name) {\n    return function(x) {\n      return function(target) {\n        return target[name] (x);\n      };\n    };\n  }\n\n  //  toObject :: a -> Object\n  function toObject(x) {\n    return x == null ? Object.create (null) : Object (x);\n  }\n\n  //  typeEq :: String -> a -> Boolean\n  function typeEq(typeIdent) {\n    return function(x) {\n      return type (x) === typeIdent;\n    };\n  }\n\n  //  value :: { value :: a } -> a\n  function value(r) {\n    return r.value;\n  }\n\n  //  :: Type\n  var a = $.TypeVariable ('a');\n  var b = $.TypeVariable ('b');\n  var c = $.TypeVariable ('c');\n  var d = $.TypeVariable ('d');\n  var e = $.TypeVariable ('e');\n  var g = $.TypeVariable ('g');\n  var l = $.TypeVariable ('l');\n  var r = $.TypeVariable ('r');\n\n  //  :: Type -> Type\n  var f = $.UnaryTypeVariable ('f');\n  var m = $.UnaryTypeVariable ('m');\n  var t = $.UnaryTypeVariable ('t');\n  var w = $.UnaryTypeVariable ('w');\n\n  //  :: Type -> Type -> Type\n  var p = $.BinaryTypeVariable ('p');\n  var s = $.BinaryTypeVariable ('s');\n\n  //  $Either :: Type -> Type -> Type\n  var $Either = $.BinaryType\n    ('sanctuary/Either')\n    ('https://github.com/sanctuary-js/sanctuary-either')\n    (typeEq ('sanctuary-either/Either@1'))\n    (either (of (Array)) (K ([])))\n    (either (K ([])) (of (Array)));\n\n  //  $Maybe :: Type -> Type\n  var $Maybe = $.UnaryType\n    ('sanctuary/Maybe')\n    ('https://github.com/sanctuary-js/sanctuary-maybe')\n    (typeEq ('sanctuary-maybe/Maybe@1'))\n    (maybe ([]) (of (Array)));\n\n  //  $Pair :: Type -> Type -> Type\n  var $Pair = $.BinaryType\n    ('sanctuary/Pair')\n    ('https://github.com/sanctuary-js/sanctuary-pair')\n    (typeEq ('sanctuary-pair/Pair@1'))\n    (function(pair) { return [pair.fst]; })\n    (function(pair) { return [pair.snd]; });\n\n  //  TypeRep :: Type -> Type\n  var TypeRep = $.UnaryType\n    ('sanctuary/TypeRep')\n    ('https://github.com/fantasyland/fantasy-land#type-representatives')\n    (function(x) {\n       return $.AnyFunction._test (x) ||\n              x != null && $.String._test (x['@@type']);\n     })\n    (K ([]));\n\n  //  Options :: Type\n  var Options = $.RecordType ({checkTypes: $.Boolean, env: $.Array ($.Any)});\n\n  var _ = {};\n\n  //. ### Configure\n\n  //# create :: { checkTypes :: Boolean, env :: Array Type } -> Module\n  //.\n  //. Takes an options record and returns a Sanctuary module. `checkTypes`\n  //. specifies whether to enable type checking. The module's polymorphic\n  //. functions (such as [`I`](#I)) require each value associated with a\n  //. type variable to be a member of at least one type in the environment.\n  //.\n  //. A well-typed application of a Sanctuary function will produce the same\n  //. result regardless of whether type checking is enabled. If type checking\n  //. is enabled, a badly typed application will produce an exception with a\n  //. descriptive error message.\n  //.\n  //. The following snippet demonstrates defining a custom type and using\n  //. `create` to produce a Sanctuary module which is aware of that type:\n  //.\n  //. ```javascript\n  //. const {create, env} = require ('sanctuary');\n  //. const $ = require ('sanctuary-def');\n  //. const type = require ('sanctuary-type-identifiers');\n  //.\n  //. //    Identity :: a -> Identity a\n  //. const Identity = x => {\n  //.   const identity = Object.create (Identity$prototype);\n  //.   identity.value = x;\n  //.   return identity;\n  //. };\n  //.\n  //. Identity['@@type'] = 'my-package/Identity@1';\n  //.\n  //. const Identity$prototype = {\n  //.   'constructor': Identity,\n  //.   '@@show': function() { return `Identity (${S.show (this.value)})`; },\n  //.   'fantasy-land/map': function(f) { return Identity (f (this.value)); },\n  //. };\n  //.\n  //. //    IdentityType :: Type -> Type\n  //. const IdentityType = $.UnaryType\n  //.   (Identity['@@type'])\n  //.   ('http://example.com/my-package#Identity')\n  //.   (x => type (x) === Identity['@@type'])\n  //.   (identity => [identity.value]);\n  //.\n  //. const S = create ({\n  //.   checkTypes: process.env.NODE_ENV !== 'production',\n  //.   env: env.concat ([IdentityType ($.Unknown)]),\n  //. });\n  //.\n  //. S.map (S.sub (1)) (Identity (43));\n  //. // => Identity (42)\n  //. ```\n  //.\n  //. See also [`env`](#env).\n  function create(opts) {\n    var def = $.create (opts);\n    var S = {\n      env: opts.env,\n      is: def ('is') ({}) ([$.Type, $.Any, $.Boolean]) ($.test (opts.env)),\n      MaybeType: $Maybe,\n      Maybe: Maybe,\n      Nothing: Nothing,\n      EitherType: $Either,\n      Either: Either,\n      PairType: $Pair\n    };\n    (Object.keys (_)).forEach (function(name) {\n      S[name] = def (name) (_[name].consts) (_[name].types) (_[name].impl);\n    });\n    S.unchecked = opts.checkTypes ? create ({checkTypes: false, env: opts.env})\n                                  : S;\n    return S;\n  }\n  _.create = {\n    consts: {},\n    types: [Options, $.Object],\n    impl: create\n  };\n\n  //# env :: Array Type\n  //.\n  //. The Sanctuary module's environment (`(S.create ({checkTypes, env})).env`\n  //. is a reference to `env`). Useful in conjunction with [`create`](#create).\n  //.\n  //. ```javascript\n  //. > S.env\n  //. [ $.AnyFunction,\n  //. . $.Arguments,\n  //. . $.Array ($.Unknown),\n  //. . $.Boolean,\n  //. . $.Date,\n  //. . $.Error,\n  //. . $.HtmlElement,\n  //. . $.Null,\n  //. . $.Number,\n  //. . $.Object,\n  //. . $.RegExp,\n  //. . $.StrMap ($.Unknown),\n  //. . $.String,\n  //. . $.Symbol,\n  //. . $.Undefined,\n  //. . $.FiniteNumber,\n  //. . $.NonZeroFiniteNumber,\n  //. . S.EitherType ($.Unknown) ($.Unknown),\n  //. . $.Function ([$.Unknown, $.Unknown]),\n  //. . $.GlobalRegExp,\n  //. . $.NonGlobalRegExp,\n  //. . $.Integer,\n  //. . $.NonNegativeInteger,\n  //. . S.MaybeType ($.Unknown),\n  //. . $.Array2 ($.Unknown) ($.Unknown),\n  //. . S.PairType ($.Unknown) ($.Unknown),\n  //. . $.RegexFlags,\n  //. . $.Type,\n  //. . $.TypeClass,\n  //. . $.ValidDate,\n  //. . $.ValidNumber ]\n  //. ```\n\n  //# unchecked :: Module\n  //.\n  //. A complete Sanctuary module which performs no type checking. This is\n  //. useful as it permits operations which Sanctuary's type checking would\n  //. disallow, such as mapping over an object with heterogeneous values.\n  //.\n  //. See also [`create`](#create).\n  //.\n  //. ```javascript\n  //. > S.unchecked.map (S.show) ({x: 'foo', y: true, z: 42})\n  //. {x: '\"foo\"', y: 'true', z: '42'}\n  //. ```\n  //.\n  //. Opting out of type checking may cause type errors to go unnoticed.\n  //.\n  //. ```javascript\n  //. > S.unchecked.add (2) ('2')\n  //. '22'\n  //. ```\n\n  //. ### Classify\n\n  //# type :: Any -> { namespace :: Maybe String, name :: String, version :: NonNegativeInteger }\n  //.\n  //. Returns the result of parsing the [type identifier][] of the given value.\n  //.\n  //. ```javascript\n  //. > S.type (S.Just (42))\n  //. {namespace: Just ('sanctuary-maybe'), name: 'Maybe', version: 1}\n  //.\n  //. > S.type ([1, 2, 3])\n  //. {namespace: Nothing, name: 'Array', version: 0}\n  //. ```\n  function type_(x) {\n    var r = type.parse (type (x));\n    r.namespace = toMaybe (r.namespace);\n    return r;\n  }\n  _.type = {\n    consts: {},\n    types: [$.Any,\n            $.RecordType ({namespace: $Maybe ($.String),\n                           name: $.String,\n                           version: $.NonNegativeInteger})],\n    impl: type_\n  };\n\n  //# is :: Type -> Any -> Boolean\n  //.\n  //. Returns `true` [iff][] the given value is a member of the specified type.\n  //. See [`$.test`][] for details.\n  //.\n  //. ```javascript\n  //. > S.is ($.Array ($.Integer)) ([1, 2, 3])\n  //. true\n  //.\n  //. > S.is ($.Array ($.Integer)) ([1, 2, 3.14])\n  //. false\n  //. ```\n\n  //. ### Showable\n\n  //# show :: Any -> String\n  //.\n  //. Alias of [`show`][].\n  //.\n  //. ```javascript\n  //. > S.show (-0)\n  //. '-0'\n  //.\n  //. > S.show (['foo', 'bar', 'baz'])\n  //. '[\"foo\", \"bar\", \"baz\"]'\n  //.\n  //. > S.show ({x: 1, y: 2, z: 3})\n  //. '{\"x\": 1, \"y\": 2, \"z\": 3}'\n  //.\n  //. > S.show (S.Left (S.Right (S.Just (S.Nothing))))\n  //. 'Left (Right (Just (Nothing)))'\n  //. ```\n  _.show = {\n    consts: {},\n    types: [$.Any, $.String],\n    impl: show\n  };\n\n  //. ### Fantasy Land\n  //.\n  //. Sanctuary is compatible with the [Fantasy Land][] specification.\n\n  //# equals :: Setoid a => a -> a -> Boolean\n  //.\n  //. Curried version of [`Z.equals`][] which requires two arguments of the\n  //. same type.\n  //.\n  //. To compare values of different types first use [`create`](#create) to\n  //. create a Sanctuary module with type checking disabled, then use that\n  //. module's `equals` function.\n  //.\n  //. ```javascript\n  //. > S.equals (0) (-0)\n  //. true\n  //.\n  //. > S.equals (NaN) (NaN)\n  //. true\n  //.\n  //. > S.equals (S.Just ([1, 2, 3])) (S.Just ([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals (S.Just ([1, 2, 3])) (S.Just ([1, 2, 4]))\n  //. false\n  //. ```\n  _.equals = {\n    consts: {a: [Z.Setoid]},\n    types: [a, a, $.Boolean],\n    impl: curry2 (Z.equals)\n  };\n\n  //# lt :: Ord a => a -> a -> Boolean\n  //.\n  //. Returns `true` [iff][] the *second* argument is less than the first\n  //. according to [`Z.lt`][].\n  //.\n  //. ```javascript\n  //. > S.filter (S.lt (3)) ([1, 2, 3, 4, 5])\n  //. [1, 2]\n  //. ```\n  function lt(y) {\n    return function(x) {\n      return Z.lt (x, y);\n    };\n  }\n  _.lt = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, $.Boolean],\n    impl: lt\n  };\n\n  //# lte :: Ord a => a -> a -> Boolean\n  //.\n  //. Returns `true` [iff][] the *second* argument is less than or equal to\n  //. the first according to [`Z.lte`][].\n  //.\n  //. ```javascript\n  //. > S.filter (S.lte (3)) ([1, 2, 3, 4, 5])\n  //. [1, 2, 3]\n  //. ```\n  function lte(y) {\n    return function(x) {\n      return Z.lte (x, y);\n    };\n  }\n  _.lte = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, $.Boolean],\n    impl: lte\n  };\n\n  //# gt :: Ord a => a -> a -> Boolean\n  //.\n  //. Returns `true` [iff][] the *second* argument is greater than the first\n  //. according to [`Z.gt`][].\n  //.\n  //. ```javascript\n  //. > S.filter (S.gt (3)) ([1, 2, 3, 4, 5])\n  //. [4, 5]\n  //. ```\n  function gt(y) {\n    return function(x) {\n      return Z.gt (x, y);\n    };\n  }\n  _.gt = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, $.Boolean],\n    impl: gt\n  };\n\n  //# gte :: Ord a => a -> a -> Boolean\n  //.\n  //. Returns `true` [iff][] the *second* argument is greater than or equal\n  //. to the first according to [`Z.gte`][].\n  //.\n  //. ```javascript\n  //. > S.filter (S.gte (3)) ([1, 2, 3, 4, 5])\n  //. [3, 4, 5]\n  //. ```\n  function gte(y) {\n    return function(x) {\n      return Z.gte (x, y);\n    };\n  }\n  _.gte = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, $.Boolean],\n    impl: gte\n  };\n\n  //# min :: Ord a => a -> a -> a\n  //.\n  //. Returns the smaller of its two arguments (according to [`Z.lte`][]).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > S.min (10) (2)\n  //. 2\n  //.\n  //. > S.min (new Date ('1999-12-31')) (new Date ('2000-01-01'))\n  //. new Date ('1999-12-31')\n  //.\n  //. > S.min ('10') ('2')\n  //. '10'\n  //. ```\n  _.min = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, a],\n    impl: curry2 (Z.min)\n  };\n\n  //# max :: Ord a => a -> a -> a\n  //.\n  //. Returns the larger of its two arguments (according to [`Z.lte`][]).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > S.max (10) (2)\n  //. 10\n  //.\n  //. > S.max (new Date ('1999-12-31')) (new Date ('2000-01-01'))\n  //. new Date ('2000-01-01')\n  //.\n  //. > S.max ('10') ('2')\n  //. '2'\n  //. ```\n  _.max = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, a],\n    impl: curry2 (Z.max)\n  };\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.id`][].\n  //.\n  //. ```javascript\n  //. > S.id (Function) (42)\n  //. 42\n  //. ```\n  _.id = {\n    consts: {c: [Z.Category]},\n    types: [TypeRep (c), c],\n    impl: Z.id\n  };\n\n  //# concat :: Semigroup a => a -> a -> a\n  //.\n  //. Curried version of [`Z.concat`][].\n  //.\n  //. ```javascript\n  //. > S.concat ('abc') ('def')\n  //. 'abcdef'\n  //.\n  //. > S.concat ([1, 2, 3]) ([4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > S.concat ({x: 1, y: 2}) ({y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > S.concat (S.Just ([1, 2, 3])) (S.Just ([4, 5, 6]))\n  //. Just ([1, 2, 3, 4, 5, 6])\n  //.\n  //. > S.concat (Sum (18)) (Sum (24))\n  //. Sum (42)\n  //. ```\n  _.concat = {\n    consts: {a: [Z.Semigroup]},\n    types: [a, a, a],\n    impl: curry2 (Z.concat)\n  };\n\n  //# empty :: Monoid a => TypeRep a -> a\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.empty`][].\n  //.\n  //. ```javascript\n  //. > S.empty (String)\n  //. ''\n  //.\n  //. > S.empty (Array)\n  //. []\n  //.\n  //. > S.empty (Object)\n  //. {}\n  //.\n  //. > S.empty (Sum)\n  //. Sum (0)\n  //. ```\n  _.empty = {\n    consts: {a: [Z.Monoid]},\n    types: [TypeRep (a), a],\n    impl: Z.empty\n  };\n\n  //# invert :: Group g => g -> g\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.invert`][].\n  //.\n  //. ```javascript\n  //. > S.invert (Sum (5))\n  //. Sum (-5)\n  //. ```\n  _.invert = {\n    consts: {g: [Z.Group]},\n    types: [g, g],\n    impl: Z.invert\n  };\n\n  //# filter :: Filterable f => (a -> Boolean) -> f a -> f a\n  //.\n  //. Curried version of [`Z.filter`][]. Discards every element which does not\n  //. satisfy the predicate.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > S.filter (S.odd) ([1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > S.filter (S.odd) ({x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > S.filter (S.odd) (S.Nothing)\n  //. Nothing\n  //.\n  //. > S.filter (S.odd) (S.Just (0))\n  //. Nothing\n  //.\n  //. > S.filter (S.odd) (S.Just (1))\n  //. Just (1)\n  //. ```\n  function filter(pred) {\n    return function(filterable) {\n      return Z.filter (pred, filterable);\n    };\n  }\n  _.filter = {\n    consts: {f: [Z.Filterable]},\n    types: [$.Predicate (a), f (a), f (a)],\n    impl: filter\n  };\n\n  //# reject :: Filterable f => (a -> Boolean) -> f a -> f a\n  //.\n  //. Curried version of [`Z.reject`][]. Discards every element which satisfies\n  //. the predicate.\n  //.\n  //. See also [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > S.reject (S.odd) ([1, 2, 3])\n  //. [2]\n  //.\n  //. > S.reject (S.odd) ({x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > S.reject (S.odd) (S.Nothing)\n  //. Nothing\n  //.\n  //. > S.reject (S.odd) (S.Just (0))\n  //. Just (0)\n  //.\n  //. > S.reject (S.odd) (S.Just (1))\n  //. Nothing\n  //. ```\n  _.reject = {\n    consts: {f: [Z.Filterable]},\n    types: [$.Predicate (a), f (a), f (a)],\n    impl: curry2 (Z.reject)\n  };\n\n  //# takeWhile :: Filterable f => (a -> Boolean) -> f a -> f a\n  //.\n  //. Curried version of [`Z.takeWhile`][]. Discards the first element which\n  //. does not satisfy the predicate, and all subsequent elements.\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > S.takeWhile (S.odd) ([3, 3, 3, 7, 6, 3, 5, 4])\n  //. [3, 3, 3, 7]\n  //.\n  //. > S.takeWhile (S.even) ([3, 3, 3, 7, 6, 3, 5, 4])\n  //. []\n  //. ```\n  _.takeWhile = {\n    consts: {f: [Z.Filterable]},\n    types: [$.Predicate (a), f (a), f (a)],\n    impl: curry2 (Z.takeWhile)\n  };\n\n  //# dropWhile :: Filterable f => (a -> Boolean) -> f a -> f a\n  //.\n  //. Curried version of [`Z.dropWhile`][]. Retains the first element which\n  //. does not satisfy the predicate, and all subsequent elements.\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > S.dropWhile (S.odd) ([3, 3, 3, 7, 6, 3, 5, 4])\n  //. [6, 3, 5, 4]\n  //.\n  //. > S.dropWhile (S.even) ([3, 3, 3, 7, 6, 3, 5, 4])\n  //. [3, 3, 3, 7, 6, 3, 5, 4]\n  //. ```\n  _.dropWhile = {\n    consts: {f: [Z.Filterable]},\n    types: [$.Predicate (a), f (a), f (a)],\n    impl: curry2 (Z.dropWhile)\n  };\n\n  //# map :: Functor f => (a -> b) -> f a -> f b\n  //.\n  //. Curried version of [`Z.map`][].\n  //.\n  //. ```javascript\n  //. > S.map (Math.sqrt) ([1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > S.map (Math.sqrt) ({x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > S.map (Math.sqrt) (S.Just (9))\n  //. Just (3)\n  //.\n  //. > S.map (Math.sqrt) (S.Right (9))\n  //. Right (3)\n  //.\n  //. > S.map (Math.sqrt) (S.Pair (99980001) (99980001))\n  //. Pair (99980001) (9999)\n  //. ```\n  //.\n  //. Replacing `Functor f => f` with `Function x` produces the B combinator\n  //. from combinatory logic (i.e. [`compose`](#compose)):\n  //.\n  //.     Functor f => (a -> b) -> f a -> f b\n  //.     (a -> b) -> Function x a -> Function x b\n  //.     (a -> c) -> Function x a -> Function x c\n  //.     (b -> c) -> Function x b -> Function x c\n  //.     (b -> c) -> Function a b -> Function a c\n  //.     (b -> c) -> (a -> b) -> (a -> c)\n  //.\n  //. ```javascript\n  //. > S.map (Math.sqrt) (S.add (1)) (99)\n  //. 10\n  //. ```\n  function map(f) {\n    return function(functor) {\n      return Z.map (f, functor);\n    };\n  }\n  _.map = {\n    consts: {f: [Z.Functor]},\n    types: [Fn (a) (b), f (a), f (b)],\n    impl: map\n  };\n\n  //# flip :: Functor f => f (a -> b) -> a -> f b\n  //.\n  //. Curried version of [`Z.flip`][]. Maps over the given functions, applying\n  //. each to the given value.\n  //.\n  //. Replacing `Functor f => f` with `Function x` produces the C combinator\n  //. from combinatory logic:\n  //.\n  //.     Functor f => f (a -> b) -> a -> f b\n  //.     Function x (a -> b) -> a -> Function x b\n  //.     Function x (a -> c) -> a -> Function x c\n  //.     Function x (b -> c) -> b -> Function x c\n  //.     Function a (b -> c) -> b -> Function a c\n  //.     (a -> b -> c) -> b -> a -> c\n  //.\n  //. ```javascript\n  //. > S.flip (S.concat) ('!') ('foo')\n  //. 'foo!'\n  //.\n  //. > S.flip ([Math.floor, Math.ceil]) (1.5)\n  //. [1, 2]\n  //.\n  //. > S.flip ({floor: Math.floor, ceil: Math.ceil}) (1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > S.flip (Cons (Math.floor) (Cons (Math.ceil) (Nil))) (1.5)\n  //. Cons (1) (Cons (2) (Nil))\n  //. ```\n  _.flip = {\n    consts: {f: [Z.Functor]},\n    types: [f (Fn (a) (b)), a, f (b)],\n    impl: curry2 (Z.flip)\n  };\n\n  //# bimap :: Bifunctor f => (a -> b) -> (c -> d) -> f a c -> f b d\n  //.\n  //. Curried version of [`Z.bimap`][].\n  //.\n  //. ```javascript\n  //. > S.bimap (S.toUpper) (Math.sqrt) (S.Pair ('foo') (64))\n  //. Pair ('FOO') (8)\n  //.\n  //. > S.bimap (S.toUpper) (Math.sqrt) (S.Left ('foo'))\n  //. Left ('FOO')\n  //.\n  //. > S.bimap (S.toUpper) (Math.sqrt) (S.Right (64))\n  //. Right (8)\n  //. ```\n  _.bimap = {\n    consts: {p: [Z.Bifunctor]},\n    types: [Fn (a) (b), Fn (c) (d), p (a) (c), p (b) (d)],\n    impl: curry3 (Z.bimap)\n  };\n\n  //# mapLeft :: Bifunctor f => (a -> b) -> f a c -> f b c\n  //.\n  //. Curried version of [`Z.mapLeft`][]. Maps the given function over the left\n  //. side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > S.mapLeft (S.toUpper) (S.Pair ('foo') (64))\n  //. Pair ('FOO') (64)\n  //.\n  //. > S.mapLeft (S.toUpper) (S.Left ('foo'))\n  //. Left ('FOO')\n  //.\n  //. > S.mapLeft (S.toUpper) (S.Right (64))\n  //. Right (64)\n  //. ```\n  _.mapLeft = {\n    consts: {p: [Z.Bifunctor]},\n    types: [Fn (a) (b), p (a) (c), p (b) (c)],\n    impl: curry2 (Z.mapLeft)\n  };\n\n  //# promap :: Profunctor p => (a -> b) -> (c -> d) -> p b c -> p a d\n  //.\n  //. Curried version of [`Z.promap`][].\n  //.\n  //. ```javascript\n  //. > S.promap (Math.abs) (S.add (1)) (Math.sqrt) (-100)\n  //. 11\n  //. ```\n  _.promap = {\n    consts: {p: [Z.Profunctor]},\n    types: [Fn (a) (b), Fn (c) (d), p (b) (c), p (a) (d)],\n    impl: curry3 (Z.promap)\n  };\n\n  //# alt :: Alt f => f a -> f a -> f a\n  //.\n  //. Curried version of [`Z.alt`][].\n  //.\n  //. ```javascript\n  //. > S.alt (S.Nothing) (S.Just (1))\n  //. Just (1)\n  //.\n  //. > S.alt (S.Just (2)) (S.Just (3))\n  //. Just (2)\n  //.\n  //. > S.alt (S.Left ('X')) (S.Right (1))\n  //. Right (1)\n  //.\n  //. > S.alt (S.Right (2)) (S.Right (3))\n  //. Right (2)\n  //. ```\n  _.alt = {\n    consts: {f: [Z.Alt]},\n    types: [f (a), f (a), f (a)],\n    impl: curry2 (Z.alt)\n  };\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.zero`][].\n  //.\n  //. ```javascript\n  //. > S.zero (Array)\n  //. []\n  //.\n  //. > S.zero (Object)\n  //. {}\n  //.\n  //. > S.zero (S.Maybe)\n  //. Nothing\n  //. ```\n  _.zero = {\n    consts: {f: [Z.Plus]},\n    types: [TypeRep ($.TypeVariable ('f')), f (a)],\n    impl: Z.zero\n  };\n\n  //# reduce :: Foldable f => (b -> a -> b) -> b -> f a -> b\n  //.\n  //. Takes a curried binary function, an initial value, and a [Foldable][],\n  //. and applies the function to the initial value and the Foldable's first\n  //. value, then applies the function to the result of the previous\n  //. application and the Foldable's second value. Repeats this process\n  //. until each of the Foldable's values has been used. Returns the initial\n  //. value if the Foldable is empty; the result of the final application\n  //. otherwise.\n  //.\n  //. ```javascript\n  //. > S.reduce (S.add) (0) ([1, 2, 3, 4, 5])\n  //. 15\n  //.\n  //. > S.reduce (xs => x => S.prepend (x) (xs)) ([]) ([1, 2, 3, 4, 5])\n  //. [5, 4, 3, 2, 1]\n  //. ```\n  function reduce(f) {\n    return function(initial) {\n      return function(foldable) {\n        return Z.reduce (function(y, x) { return f (y) (x); },\n                         initial,\n                         foldable);\n      };\n    };\n  }\n  _.reduce = {\n    consts: {f: [Z.Foldable]},\n    types: [Fn (a) (Fn (b) (a)), a, f (b), a],\n    impl: reduce\n  };\n\n  //# traverse :: (Applicative f, Traversable t) => TypeRep f -> (a -> f b) -> t a -> f (t b)\n  //.\n  //. Curried version of [`Z.traverse`][].\n  //.\n  //. ```javascript\n  //. > S.traverse (Array) (S.words) (S.Just ('foo bar baz'))\n  //. [Just ('foo'), Just ('bar'), Just ('baz')]\n  //.\n  //. > S.traverse (Array) (S.words) (S.Nothing)\n  //. [Nothing]\n  //.\n  //. > S.traverse (S.Maybe) (S.parseInt (16)) (['A', 'B', 'C'])\n  //. Just ([10, 11, 12])\n  //.\n  //. > S.traverse (S.Maybe) (S.parseInt (16)) (['A', 'B', 'C', 'X'])\n  //. Nothing\n  //.\n  //. > S.traverse (S.Maybe) (S.parseInt (16)) ({a: 'A', b: 'B', c: 'C'})\n  //. Just ({a: 10, b: 11, c: 12})\n  //.\n  //. > S.traverse (S.Maybe) (S.parseInt (16)) ({a: 'A', b: 'B', c: 'C', x: 'X'})\n  //. Nothing\n  //. ```\n  _.traverse = {\n    consts: {f: [Z.Applicative], t: [Z.Traversable]},\n    types: [TypeRep ($.TypeVariable ('f')), Fn (a) (f (b)), t (a), f (t (b))],\n    impl: curry3 (Z.traverse)\n  };\n\n  //# sequence :: (Applicative f, Traversable t) => TypeRep f -> t (f a) -> f (t a)\n  //.\n  //. Curried version of [`Z.sequence`][]. Inverts the given `t (f a)`\n  //. to produce an `f (t a)`.\n  //.\n  //. ```javascript\n  //. > S.sequence (Array) (S.Just ([1, 2, 3]))\n  //. [Just (1), Just (2), Just (3)]\n  //.\n  //. > S.sequence (S.Maybe) ([S.Just (1), S.Just (2), S.Just (3)])\n  //. Just ([1, 2, 3])\n  //.\n  //. > S.sequence (S.Maybe) ([S.Just (1), S.Just (2), S.Nothing])\n  //. Nothing\n  //.\n  //. > S.sequence (S.Maybe) ({a: S.Just (1), b: S.Just (2), c: S.Just (3)})\n  //. Just ({a: 1, b: 2, c: 3})\n  //.\n  //. > S.sequence (S.Maybe) ({a: S.Just (1), b: S.Just (2), c: S.Nothing})\n  //. Nothing\n  //. ```\n  _.sequence = {\n    consts: {f: [Z.Applicative], t: [Z.Traversable]},\n    types: [TypeRep ($.TypeVariable ('f')), t (f (a)), f (t (a))],\n    impl: curry2 (Z.sequence)\n  };\n\n  //# ap :: Apply f => f (a -> b) -> f a -> f b\n  //.\n  //. Curried version of [`Z.ap`][].\n  //.\n  //. ```javascript\n  //. > S.ap ([Math.sqrt, x => x * x]) ([1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > S.ap ({x: Math.sqrt, y: S.add (1), z: S.sub (1)}) ({w: 4, x: 4, y: 4})\n  //. {x: 2, y: 5}\n  //.\n  //. > S.ap (S.Just (Math.sqrt)) (S.Just (64))\n  //. Just (8)\n  //. ```\n  //.\n  //. Replacing `Apply f => f` with `Function x` produces the S combinator\n  //. from combinatory logic:\n  //.\n  //.     Apply f => f (a -> b) -> f a -> f b\n  //.     Function x (a -> b) -> Function x a -> Function x b\n  //.     Function x (a -> c) -> Function x a -> Function x c\n  //.     Function x (b -> c) -> Function x b -> Function x c\n  //.     Function a (b -> c) -> Function a b -> Function a c\n  //.     (a -> b -> c) -> (a -> b) -> (a -> c)\n  //.\n  //. ```javascript\n  //. > S.ap (s => n => s.slice (0, n)) (s => Math.ceil (s.length / 2)) ('Haskell')\n  //. 'Hask'\n  //. ```\n  _.ap = {\n    consts: {f: [Z.Apply]},\n    types: [f (Fn (a) (b)), f (a), f (b)],\n    impl: curry2 (Z.ap)\n  };\n\n  //# lift2 :: Apply f => (a -> b -> c) -> f a -> f b -> f c\n  //.\n  //. Promotes a curried binary function to a function which operates on two\n  //. [Apply][]s.\n  //.\n  //. ```javascript\n  //. > S.lift2 (S.add) (S.Just (2)) (S.Just (3))\n  //. Just (5)\n  //.\n  //. > S.lift2 (S.add) (S.Just (2)) (S.Nothing)\n  //. Nothing\n  //.\n  //. > S.lift2 (S.and) (S.Just (true)) (S.Just (true))\n  //. Just (true)\n  //.\n  //. > S.lift2 (S.and) (S.Just (true)) (S.Just (false))\n  //. Just (false)\n  //. ```\n  _.lift2 = {\n    consts: {f: [Z.Apply]},\n    types: [Fn (a) (Fn (b) (c)), f (a), f (b), f (c)],\n    impl: curry3 (Z.lift2)\n  };\n\n  //# lift3 :: Apply f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d\n  //.\n  //. Promotes a curried ternary function to a function which operates on three\n  //. [Apply][]s.\n  //.\n  //. ```javascript\n  //. > S.lift3 (S.reduce) (S.Just (S.add)) (S.Just (0)) (S.Just ([1, 2, 3]))\n  //. Just (6)\n  //.\n  //. > S.lift3 (S.reduce) (S.Just (S.add)) (S.Just (0)) (S.Nothing)\n  //. Nothing\n  //. ```\n  _.lift3 = {\n    consts: {f: [Z.Apply]},\n    types: [Fn (a) (Fn (b) (Fn (c) (d))), f (a), f (b), f (c), f (d)],\n    impl: curry4 (Z.lift3)\n  };\n\n  //# apFirst :: Apply f => f a -> f b -> f a\n  //.\n  //. Curried version of [`Z.apFirst`][]. Combines two effectful actions,\n  //. keeping only the result of the first. Equivalent to Haskell's `(<*)`\n  //. function.\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > S.apFirst ([1, 2]) ([3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > S.apFirst (S.Just (1)) (S.Just (2))\n  //. Just (1)\n  //. ```\n  _.apFirst = {\n    consts: {f: [Z.Apply]},\n    types: [f (a), f (b), f (a)],\n    impl: curry2 (Z.apFirst)\n  };\n\n  //# apSecond :: Apply f => f a -> f b -> f b\n  //.\n  //. Curried version of [`Z.apSecond`][]. Combines two effectful actions,\n  //. keeping only the result of the second. Equivalent to Haskell's `(*>)`\n  //. function.\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > S.apSecond ([1, 2]) ([3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > S.apSecond (S.Just (1)) (S.Just (2))\n  //. Just (2)\n  //. ```\n  _.apSecond = {\n    consts: {f: [Z.Apply]},\n    types: [f (a), f (b), f (b)],\n    impl: curry2 (Z.apSecond)\n  };\n\n  //# of :: Applicative f => TypeRep f -> a -> f a\n  //.\n  //. Curried version of [`Z.of`][].\n  //.\n  //. ```javascript\n  //. > S.of (Array) (42)\n  //. [42]\n  //.\n  //. > S.of (Function) (42) (null)\n  //. 42\n  //.\n  //. > S.of (S.Maybe) (42)\n  //. Just (42)\n  //.\n  //. > S.of (S.Either) (42)\n  //. Right (42)\n  //. ```\n  function of(typeRep) {\n    return function(x) {\n      return Z.of (typeRep, x);\n    };\n  }\n  _.of = {\n    consts: {f: [Z.Applicative]},\n    types: [TypeRep ($.TypeVariable ('f')), a, f (a)],\n    impl: of\n  };\n\n  //# chain :: Chain m => (a -> m b) -> m a -> m b\n  //.\n  //. Curried version of [`Z.chain`][].\n  //.\n  //. ```javascript\n  //. > S.chain (x => [x, x]) ([1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > S.chain (n => s => s.slice (0, n)) (s => Math.ceil (s.length / 2)) ('slice')\n  //. 'sli'\n  //.\n  //. > S.chain (S.parseInt (10)) (S.Just ('123'))\n  //. Just (123)\n  //.\n  //. > S.chain (S.parseInt (10)) (S.Just ('XXX'))\n  //. Nothing\n  //. ```\n  _.chain = {\n    consts: {m: [Z.Chain]},\n    types: [Fn (a) (m (b)), m (a), m (b)],\n    impl: curry2 (Z.chain)\n  };\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.join`][].\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. ```javascript\n  //. > S.join ([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > S.join ([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > S.join (S.Just (S.Just (1)))\n  //. Just (1)\n  //.\n  //. > S.join (S.Pair ('foo') (S.Pair ('bar') ('baz')))\n  //. Pair ('foobar') ('baz')\n  //. ```\n  //.\n  //. Replacing `Chain m => m` with `Function x` produces the W combinator\n  //. from combinatory logic:\n  //.\n  //.     Chain m => m (m a) -> m a\n  //.     Function x (Function x a) -> Function x a\n  //.     (x -> x -> a) -> (x -> a)\n  //.\n  //. ```javascript\n  //. > S.join (S.concat) ('abc')\n  //. 'abcabc'\n  //. ```\n  _.join = {\n    consts: {m: [Z.Chain]},\n    types: [m (m (a)), m (a)],\n    impl: Z.join\n  };\n\n  //# chainRec :: ChainRec m => TypeRep m -> (a -> m (Either a b)) -> a -> m b\n  //.\n  //. Performs a [`chain`](#chain)-like computation with constant stack usage.\n  //. Similar to [`Z.chainRec`][], but curried and more convenient due to the\n  //. use of the Either type to indicate completion (via a Right).\n  //.\n  //. ```javascript\n  //. > S.chainRec (Array)\n  //. .            (s => s.length === 2 ? S.map (S.Right) ([s + '!', s + '?'])\n  //. .                                 : S.map (S.Left) ([s + 'o', s + 'n']))\n  //. .            ('')\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep) {\n    return function(f) {\n      return function(x) {\n        return Z.chainRec (typeRep, step, x);\n      };\n      function step(next, done, x) {\n        return Z.map (either (next) (done), f (x));\n      }\n    };\n  }\n  _.chainRec = {\n    consts: {m: [Z.ChainRec]},\n    types: [TypeRep ($.TypeVariable ('m')),\n            Fn (a) (m ($Either (a) (b))),\n            a,\n            m (b)],\n    impl: chainRec\n  };\n\n  //# extend :: Extend w => (w a -> b) -> w a -> w b\n  //.\n  //. Curried version of [`Z.extend`][].\n  //.\n  //. ```javascript\n  //. > S.extend (S.joinWith ('')) (['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > S.extend (f => f ([3, 4])) (S.reverse) ([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  _.extend = {\n    consts: {w: [Z.Extend]},\n    types: [Fn (w (a)) (b), w (a), w (b)],\n    impl: curry2 (Z.extend)\n  };\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.duplicate`][].\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. ```javascript\n  //. > S.duplicate (S.Just (1))\n  //. Just (Just (1))\n  //.\n  //. > S.duplicate ([1])\n  //. [[1]]\n  //.\n  //. > S.duplicate ([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > S.duplicate (S.reverse) ([1, 2]) ([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  _.duplicate = {\n    consts: {w: [Z.Extend]},\n    types: [w (a), w (w (a))],\n    impl: Z.duplicate\n  };\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.extract`][].\n  //.\n  //. ```javascript\n  //. > S.extract (S.Pair ('foo') ('bar'))\n  //. 'bar'\n  //. ```\n  _.extract = {\n    consts: {w: [Z.Comonad]},\n    types: [w (a), a],\n    impl: Z.extract\n  };\n\n  //# contramap :: Contravariant f => (b -> a) -> f a -> f b\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.contramap`][].\n  //.\n  //. ```javascript\n  //. > S.contramap (s => s.length) (Math.sqrt) ('Sanctuary')\n  //. 3\n  //. ```\n  _.contramap = {\n    consts: {f: [Z.Contravariant]},\n    types: [Fn (b) (a), f (a), f (b)],\n    impl: curry2 (Z.contramap)\n  };\n\n  //. ### Combinator\n\n  //# I :: a -> a\n  //.\n  //. The I combinator. Returns its argument. Equivalent to Haskell's `id`\n  //. function.\n  //.\n  //. ```javascript\n  //. > S.I ('foo')\n  //. 'foo'\n  //. ```\n  function I(x) {\n    return x;\n  }\n  _.I = {\n    consts: {},\n    types: [a, a],\n    impl: I\n  };\n\n  //# K :: a -> b -> a\n  //.\n  //. The K combinator. Takes two values and returns the first. Equivalent to\n  //. Haskell's `const` function.\n  //.\n  //. ```javascript\n  //. > S.K ('foo') ('bar')\n  //. 'foo'\n  //.\n  //. > S.map (S.K (42)) (S.range (0) (5))\n  //. [42, 42, 42, 42, 42]\n  //. ```\n  function K(x) {\n    return function(y) {\n      return x;\n    };\n  }\n  _.K = {\n    consts: {},\n    types: [a, b, a],\n    impl: K\n  };\n\n  //# T :: a -> (a -> b) -> b\n  //.\n  //. The T ([thrush][]) combinator. Takes a value and a function, and returns\n  //. the result of applying the function to the value. Equivalent to Haskell's\n  //. `(&)` function.\n  //.\n  //. ```javascript\n  //. > S.T (42) (S.add (1))\n  //. 43\n  //.\n  //. > S.map (S.T (100)) ([S.add (1), Math.sqrt])\n  //. [101, 10]\n  //. ```\n  function T(x) {\n    return function(f) {\n      return f (x);\n    };\n  }\n  _.T = {\n    consts: {},\n    types: [a, Fn (a) (b), b],\n    impl: T\n  };\n\n  //. ### Function\n\n  //# curry2 :: ((a, b) -> c) -> a -> b -> c\n  //.\n  //. Curries the given binary function.\n  //.\n  //. ```javascript\n  //. > S.map (S.curry2 (Math.pow) (10)) ([1, 2, 3])\n  //. [10, 100, 1000]\n  //. ```\n  function curry2(f) {\n    return function(x) {\n      return function(y) {\n        return f (x, y);\n      };\n    };\n  }\n  _.curry2 = {\n    consts: {},\n    types: [$.Function ([a, b, c]), a, b, c],\n    impl: curry2\n  };\n\n  //# curry3 :: ((a, b, c) -> d) -> a -> b -> c -> d\n  //.\n  //. Curries the given ternary function.\n  //.\n  //. ```javascript\n  //. > const replaceString = S.curry3 ((what, replacement, string) =>\n  //. .   string.replace (what, replacement)\n  //. . )\n  //.\n  //. > replaceString ('banana') ('orange') ('banana icecream')\n  //. 'orange icecream'\n  //. ```\n  function curry3(f) {\n    return function(x) {\n      return function(y) {\n        return function(z) {\n          return f (x, y, z);\n        };\n      };\n    };\n  }\n  _.curry3 = {\n    consts: {},\n    types: [$.Function ([a, b, c, d]), a, b, c, d],\n    impl: curry3\n  };\n\n  //# curry4 :: ((a, b, c, d) -> e) -> a -> b -> c -> d -> e\n  //.\n  //. Curries the given quaternary function.\n  //.\n  //. ```javascript\n  //. > const createRect = S.curry4 ((x, y, width, height) =>\n  //. .   ({x, y, width, height})\n  //. . )\n  //.\n  //. > createRect (0) (0) (10) (10)\n  //. {x: 0, y: 0, width: 10, height: 10}\n  //. ```\n  function curry4(f) {\n    return function(w) {\n      return function(x) {\n        return function(y) {\n          return function(z) {\n            return f (w, x, y, z);\n          };\n        };\n      };\n    };\n  }\n  _.curry4 = {\n    consts: {},\n    types: [$.Function ([a, b, c, d, e]), a, b, c, d, e],\n    impl: curry4\n  };\n\n  //# curry5 :: ((a, b, c, d, e) -> f) -> a -> b -> c -> d -> e -> f\n  //.\n  //. Curries the given quinary function.\n  //.\n  //. ```javascript\n  //. > const toUrl = S.curry5 ((protocol, creds, hostname, port, pathname) =>\n  //. .   protocol + '//' +\n  //. .   S.maybe ('') (S.flip (S.concat) ('@')) (creds) +\n  //. .   hostname +\n  //. .   S.maybe ('') (S.concat (':')) (port) +\n  //. .   pathname\n  //. . )\n  //.\n  //. > toUrl ('https:') (S.Nothing) ('example.com') (S.Just ('443')) ('/foo/bar')\n  //. 'https://example.com:443/foo/bar'\n  //. ```\n  function curry5(f) {\n    return function(v) {\n      return function(w) {\n        return function(x) {\n          return function(y) {\n            return function(z) {\n              return f (v, w, x, y, z);\n            };\n          };\n        };\n      };\n    };\n  }\n  _.curry5 = {\n    consts: {},\n    types: [$.Function ([a, b, c, d, e, r]), a, b, c, d, e, r],\n    impl: curry5\n  };\n\n  //. ### Composition\n\n  //# compose :: Semigroupoid s => s b c -> s a b -> s a c\n  //.\n  //. Curried version of [`Z.compose`][].\n  //.\n  //. When specialized to Function, `compose` composes two unary functions,\n  //. from right to left (this is the B combinator from combinatory logic).\n  //.\n  //. The generalized type signature indicates that `compose` is compatible\n  //. with any [Semigroupoid][].\n  //.\n  //. See also [`pipe`](#pipe).\n  //.\n  //. ```javascript\n  //. > S.compose (Math.sqrt) (S.add (1)) (99)\n  //. 10\n  //. ```\n  _.compose = {\n    consts: {s: [Z.Semigroupoid]},\n    types: [s (b) (c), s (a) (b), s (a) (c)],\n    impl: curry2 (Z.compose)\n  };\n\n  //# pipe :: Foldable f => f (Any -> Any) -> a -> b\n  //.\n  //. Takes a sequence of functions assumed to be unary and a value of any\n  //. type, and returns the result of applying the sequence of transformations\n  //. to the initial value.\n  //.\n  //. In general terms, `pipe` performs left-to-right composition of a sequence\n  //. of functions. `pipe ([f, g, h]) (x)` is equivalent to `h (g (f (x)))`.\n  //.\n  //. ```javascript\n  //. > S.pipe ([S.add (1), Math.sqrt, S.sub (1)]) (99)\n  //. 9\n  //. ```\n  function pipe(fs) {\n    return function(x) {\n      return reduce (T) (x) (fs);\n    };\n  }\n  _.pipe = {\n    consts: {f: [Z.Foldable]},\n    types: [f (Fn ($.Any) ($.Any)), a, b],\n    impl: pipe\n  };\n\n  //# pipeK :: (Foldable f, Chain m) => f (Any -> m Any) -> m a -> m b\n  //.\n  //. Takes a sequence of functions assumed to be unary which return values\n  //. with a [Chain][], and a value of that Chain, and returns the result\n  //. of applying the sequence of transformations to the initial value.\n  //.\n  //. In general terms, `pipeK` performs left-to-right [Kleisli][] composition\n  //. of an sequence of functions. `pipeK ([f, g, h]) (x)` is equivalent to\n  //. `chain (h) (chain (g) (chain (f) (x)))`.\n  //.\n  //. ```javascript\n  //. > S.pipeK ([S.tail, S.tail, S.head]) (S.Just ([1, 2, 3, 4]))\n  //. Just (3)\n  //. ```\n  function pipeK(fs) {\n    return function(x) {\n      return Z.reduce (function(x, f) { return Z.chain (f, x); }, x, fs);\n    };\n  }\n  _.pipeK = {\n    consts: {f: [Z.Foldable], m: [Z.Chain]},\n    types: [f (Fn ($.Any) (m ($.Any))), m (a), m (b)],\n    impl: pipeK\n  };\n\n  //# on :: (b -> b -> c) -> (a -> b) -> a -> a -> c\n  //.\n  //. Takes a binary function `f`, a unary function `g`, and two\n  //. values `x` and `y`. Returns `f (g (x)) (g (y))`.\n  //.\n  //. This is the P combinator from combinatory logic.\n  //.\n  //. ```javascript\n  //. > S.on (S.concat) (S.reverse) ([1, 2, 3]) ([4, 5, 6])\n  //. [3, 2, 1, 6, 5, 4]\n  //. ```\n  function on(f) {\n    return function(g) {\n      return function(x) {\n        return function(y) {\n          return f (g (x)) (g (y));\n        };\n      };\n    };\n  }\n  _.on = {\n    consts: {},\n    types: [Fn (b) (Fn (b) (c)), Fn (a) (b), a, a, c],\n    impl: on\n  };\n\n  //. ### Pair type\n  //.\n  //. Pair is the canonical product type: a value of type `Pair a b` always\n  //. contains exactly two values: one of type `a`; one of type `b`.\n  //.\n  //. The implementation is provided by [sanctuary-pair][].\n\n  //# PairType :: Type -> Type -> Type\n  //.\n  //. A [`BinaryType`][BinaryType] for use with [sanctuary-def][].\n\n  //# Pair :: a -> b -> Pair a b\n  //.\n  //. Pair's sole data constructor. Additionally, it serves as the\n  //. Pair [type representative][].\n  //.\n  //. ```javascript\n  //. > S.Pair ('foo') (42)\n  //. Pair ('foo') (42)\n  //. ```\n  _.Pair = {\n    consts: {},\n    types: [a, b, $Pair (a) (b)],\n    impl: Pair\n  };\n\n  //# fst :: Pair a b -> a\n  //.\n  //. `fst (Pair (x) (y))` is equivalent to `x`.\n  //.\n  //. ```javascript\n  //. > S.fst (S.Pair ('foo') (42))\n  //. 'foo'\n  //. ```\n  _.fst = {\n    consts: {},\n    types: [$Pair (a) (b), a],\n    impl: Pair.fst\n  };\n\n  //# snd :: Pair a b -> b\n  //.\n  //. `snd (Pair (x) (y))` is equivalent to `y`.\n  //.\n  //. ```javascript\n  //. > S.snd (S.Pair ('foo') (42))\n  //. 42\n  //. ```\n  _.snd = {\n    consts: {},\n    types: [$Pair (a) (b), b],\n    impl: Pair.snd\n  };\n\n  //# swap :: Pair a b -> Pair b a\n  //.\n  //. `swap (Pair (x) (y))` is equivalent to `Pair (y) (x)`.\n  //.\n  //. ```javascript\n  //. > S.swap (S.Pair ('foo') (42))\n  //. Pair (42) ('foo')\n  //. ```\n  _.swap = {\n    consts: {},\n    types: [$Pair (a) (b), $Pair (b) (a)],\n    impl: Pair.swap\n  };\n\n  //. ### Maybe type\n  //.\n  //. The Maybe type represents optional values: a value of type `Maybe a` is\n  //. either Nothing (the empty value) or a Just whose value is of type `a`.\n  //.\n  //. The implementation is provided by [sanctuary-maybe][].\n\n  //# MaybeType :: Type -> Type\n  //.\n  //. A [`UnaryType`][UnaryType] for use with [sanctuary-def][].\n\n  //# Maybe :: TypeRep Maybe\n  //.\n  //. Maybe [type representative][].\n\n  //# Nothing :: Maybe a\n  //.\n  //. The empty value of type `Maybe a`.\n  //.\n  //. ```javascript\n  //. > S.Nothing\n  //. Nothing\n  //. ```\n\n  //# Just :: a -> Maybe a\n  //.\n  //. Constructs a value of type `Maybe a` from a value of type `a`.\n  //.\n  //. ```javascript\n  //. > S.Just (42)\n  //. Just (42)\n  //. ```\n  _.Just = {\n    consts: {},\n    types: [a, $Maybe (a)],\n    impl: Just\n  };\n\n  //# isNothing :: Maybe a -> Boolean\n  //.\n  //. Returns `true` if the given Maybe is Nothing; `false` if it is a Just.\n  //.\n  //. ```javascript\n  //. > S.isNothing (S.Nothing)\n  //. true\n  //.\n  //. > S.isNothing (S.Just (42))\n  //. false\n  //. ```\n  function isNothing(maybe) {\n    return maybe.isNothing;\n  }\n  _.isNothing = {\n    consts: {},\n    types: [$Maybe (a), $.Boolean],\n    impl: isNothing\n  };\n\n  //# isJust :: Maybe a -> Boolean\n  //.\n  //. Returns `true` if the given Maybe is a Just; `false` if it is Nothing.\n  //.\n  //. ```javascript\n  //. > S.isJust (S.Just (42))\n  //. true\n  //.\n  //. > S.isJust (S.Nothing)\n  //. false\n  //. ```\n  function isJust(maybe) {\n    return maybe.isJust;\n  }\n  _.isJust = {\n    consts: {},\n    types: [$Maybe (a), $.Boolean],\n    impl: isJust\n  };\n\n  //# fromMaybe :: a -> Maybe a -> a\n  //.\n  //. Takes a default value and a Maybe, and returns the Maybe's value\n  //. if the Maybe is a Just; the default value otherwise.\n  //.\n  //. See also [`fromMaybe_`](#fromMaybe_) and\n  //. [`maybeToNullable`](#maybeToNullable).\n  //.\n  //. ```javascript\n  //. > S.fromMaybe (0) (S.Just (42))\n  //. 42\n  //.\n  //. > S.fromMaybe (0) (S.Nothing)\n  //. 0\n  //. ```\n  _.fromMaybe = {\n    consts: {},\n    types: [a, $Maybe (a), a],\n    impl: C (maybe) (I)\n  };\n\n  //# fromMaybe_ :: (() -> a) -> Maybe a -> a\n  //.\n  //. Variant of [`fromMaybe`](#fromMaybe) which takes a thunk so the default\n  //. value is only computed if required.\n  //.\n  //. ```javascript\n  //. > function fib(n) { return n <= 1 ? n : fib (n - 2) + fib (n - 1); }\n  //.\n  //. > S.fromMaybe_ (() => fib (30)) (S.Just (1000000))\n  //. 1000000\n  //.\n  //. > S.fromMaybe_ (() => fib (30)) (S.Nothing)\n  //. 832040\n  //. ```\n  _.fromMaybe_ = {\n    consts: {},\n    types: [$.Thunk (a), $Maybe (a), a],\n    impl: C (maybe_) (I)\n  };\n\n  //# maybeToNullable :: Maybe a -> Nullable a\n  //.\n  //. Returns the given Maybe's value if the Maybe is a Just; `null` otherwise.\n  //. [Nullable][] is defined in [sanctuary-def][].\n  //.\n  //. See also [`fromMaybe`](#fromMaybe).\n  //.\n  //. ```javascript\n  //. > S.maybeToNullable (S.Just (42))\n  //. 42\n  //.\n  //. > S.maybeToNullable (S.Nothing)\n  //. null\n  //. ```\n  function maybeToNullable(maybe) {\n    return maybe.isJust ? maybe.value : null;\n  }\n  _.maybeToNullable = {\n    consts: {},\n    types: [$Maybe (a), $.Nullable (a)],\n    impl: maybeToNullable\n  };\n\n  //# toMaybe :: a? -> Maybe a\n  //.\n  //. Takes a value and returns Nothing if the value is `null` or `undefined`;\n  //. Just the value otherwise.\n  //.\n  //. ```javascript\n  //. > S.toMaybe (null)\n  //. Nothing\n  //.\n  //. > S.toMaybe (42)\n  //. Just (42)\n  //. ```\n  function toMaybe(x) {\n    return x == null ? Nothing : Just (x);\n  }\n  _.toMaybe = {\n    consts: {},\n    types: [a, $Maybe (a)],\n    impl: toMaybe\n  };\n\n  //# maybe :: b -> (a -> b) -> Maybe a -> b\n  //.\n  //. Takes a value of any type, a function, and a Maybe. If the Maybe is\n  //. a Just, the return value is the result of applying the function to\n  //. the Just's value. Otherwise, the first argument is returned.\n  //.\n  //. See also [`maybe_`](#maybe_).\n  //.\n  //. ```javascript\n  //. > S.maybe (0) (S.prop ('length')) (S.Just ('refuge'))\n  //. 6\n  //.\n  //. > S.maybe (0) (S.prop ('length')) (S.Nothing)\n  //. 0\n  //. ```\n  function maybe(x) {\n    return function(f) {\n      return function(maybe) {\n        return maybe.isJust ? f (maybe.value) : x;\n      };\n    };\n  }\n  _.maybe = {\n    consts: {},\n    types: [b, Fn (a) (b), $Maybe (a), b],\n    impl: maybe\n  };\n\n  //# maybe_ :: (() -> b) -> (a -> b) -> Maybe a -> b\n  //.\n  //. Variant of [`maybe`](#maybe) which takes a thunk so the default value\n  //. is only computed if required.\n  //.\n  //. ```javascript\n  //. > function fib(n) { return n <= 1 ? n : fib (n - 2) + fib (n - 1); }\n  //.\n  //. > S.maybe_ (() => fib (30)) (Math.sqrt) (S.Just (1000000))\n  //. 1000\n  //.\n  //. > S.maybe_ (() => fib (30)) (Math.sqrt) (S.Nothing)\n  //. 832040\n  //. ```\n  function maybe_(thunk) {\n    return function(f) {\n      return function(maybe) {\n        return maybe.isJust ? f (maybe.value) : thunk ();\n      };\n    };\n  }\n  _.maybe_ = {\n    consts: {},\n    types: [$.Thunk (b), Fn (a) (b), $Maybe (a), b],\n    impl: maybe_\n  };\n\n  //# justs :: (Filterable f, Functor f) => f (Maybe a) -> f a\n  //.\n  //. Discards each element which is Nothing, and unwraps each element which is\n  //. a Just. Related to Haskell's `catMaybes` function.\n  //.\n  //. See also [`lefts`](#lefts) and [`rights`](#rights).\n  //.\n  //. ```javascript\n  //. > S.justs ([S.Just ('foo'), S.Nothing, S.Just ('baz')])\n  //. ['foo', 'baz']\n  //. ```\n  function justs(maybes) {\n    return map (value) (filter (isJust) (maybes));\n  }\n  _.justs = {\n    consts: {f: [Z.Filterable, Z.Functor]},\n    types: [f ($Maybe (a)), f (a)],\n    impl: justs\n  };\n\n  //# mapMaybe :: (Filterable f, Functor f) => (a -> Maybe b) -> f a -> f b\n  //.\n  //. Takes a function and a structure, applies the function to each element\n  //. of the structure, and returns the \"successful\" results. If the result of\n  //. applying the function to an element is Nothing, the result is discarded;\n  //. if the result is a Just, the Just's value is included.\n  //.\n  //. ```javascript\n  //. > S.mapMaybe (S.head) ([[], [1, 2, 3], [], [4, 5, 6], []])\n  //. [1, 4]\n  //.\n  //. > S.mapMaybe (S.head) ({x: [1, 2, 3], y: [], z: [4, 5, 6]})\n  //. {x: 1, z: 4}\n  //. ```\n  _.mapMaybe = {\n    consts: {f: [Z.Filterable, Z.Functor]},\n    types: [Fn (a) ($Maybe (b)), f (a), f (b)],\n    impl: B (B (justs)) (map)\n  };\n\n  //# encase :: (a -> b) -> a -> Maybe b\n  //.\n  //. Takes a unary function `f` which may throw and a value `x` of any type,\n  //. and applies `f` to `x` inside a `try` block. If an exception is caught,\n  //. the return value is Nothing; otherwise the return value is Just the\n  //. result of applying `f` to `x`.\n  //.\n  //. See also [`encaseEither`](#encaseEither).\n  //.\n  //. ```javascript\n  //. > S.encase (eval) ('1 + 1')\n  //. Just (2)\n  //.\n  //. > S.encase (eval) ('1 +')\n  //. Nothing\n  //. ```\n  function encase(f) {\n    return B (eitherToMaybe) (encaseEither (I) (f));\n  }\n  _.encase = {\n    consts: {},\n    types: [Fn (a) (b), a, $Maybe (b)],\n    impl: encase\n  };\n\n  //# encase2 :: (a -> b -> c) -> a -> b -> Maybe c\n  //.\n  //. Binary version of [`encase`](#encase).\n  _.encase2 = {\n    consts: {},\n    types: [Fn (a) (Fn (b) (c)), a, b, $Maybe (c)],\n    impl: B (B (B (eitherToMaybe))) (encaseEither2 (I))\n  };\n\n  //# encase3 :: (a -> b -> c -> d) -> a -> b -> c -> Maybe d\n  //.\n  //. Ternary version of [`encase`](#encase).\n  _.encase3 = {\n    consts: {},\n    types: [Fn (a) (Fn (b) (Fn (c) (d))), a, b, c, $Maybe (d)],\n    impl: B (B (B (B (eitherToMaybe)))) (encaseEither3 (I))\n  };\n\n  //# maybeToEither :: a -> Maybe b -> Either a b\n  //.\n  //. Converts a Maybe to an Either. Nothing becomes a Left (containing the\n  //. first argument); a Just becomes a Right.\n  //.\n  //. See also [`eitherToMaybe`](#eitherToMaybe).\n  //.\n  //. ```javascript\n  //. > S.maybeToEither ('Expecting an integer') (S.parseInt (10) ('xyz'))\n  //. Left ('Expecting an integer')\n  //.\n  //. > S.maybeToEither ('Expecting an integer') (S.parseInt (10) ('42'))\n  //. Right (42)\n  //. ```\n  function maybeToEither(x) {\n    return maybe (Left (x)) (Right);\n  }\n  _.maybeToEither = {\n    consts: {},\n    types: [a, $Maybe (b), $Either (a) (b)],\n    impl: maybeToEither\n  };\n\n  //. ### Either type\n  //.\n  //. The Either type represents values with two possibilities: a value of type\n  //. `Either a b` is either a Left whose value is of type `a` or a Right whose\n  //. value is of type `b`.\n  //.\n  //. The implementation is provided by [sanctuary-either][].\n\n  //# EitherType :: Type -> Type -> Type\n  //.\n  //. A [`BinaryType`][BinaryType] for use with [sanctuary-def][].\n\n  //# Either :: TypeRep Either\n  //.\n  //. Either [type representative][].\n\n  //# Left :: a -> Either a b\n  //.\n  //. Constructs a value of type `Either a b` from a value of type `a`.\n  //.\n  //. ```javascript\n  //. > S.Left ('Cannot divide by zero')\n  //. Left ('Cannot divide by zero')\n  //. ```\n  _.Left = {\n    consts: {},\n    types: [a, $Either (a) (b)],\n    impl: Left\n  };\n\n  //# Right :: b -> Either a b\n  //.\n  //. Constructs a value of type `Either a b` from a value of type `b`.\n  //.\n  //. ```javascript\n  //. > S.Right (42)\n  //. Right (42)\n  //. ```\n  _.Right = {\n    consts: {},\n    types: [b, $Either (a) (b)],\n    impl: Right\n  };\n\n  //# isLeft :: Either a b -> Boolean\n  //.\n  //. Returns `true` if the given Either is a Left; `false` if it is a Right.\n  //.\n  //. ```javascript\n  //. > S.isLeft (S.Left ('Cannot divide by zero'))\n  //. true\n  //.\n  //. > S.isLeft (S.Right (42))\n  //. false\n  //. ```\n  function isLeft(either) {\n    return either.isLeft;\n  }\n  _.isLeft = {\n    consts: {},\n    types: [$Either (a) (b), $.Boolean],\n    impl: isLeft\n  };\n\n  //# isRight :: Either a b -> Boolean\n  //.\n  //. Returns `true` if the given Either is a Right; `false` if it is a Left.\n  //.\n  //. ```javascript\n  //. > S.isRight (S.Right (42))\n  //. true\n  //.\n  //. > S.isRight (S.Left ('Cannot divide by zero'))\n  //. false\n  //. ```\n  function isRight(either) {\n    return either.isRight;\n  }\n  _.isRight = {\n    consts: {},\n    types: [$Either (a) (b), $.Boolean],\n    impl: isRight\n  };\n\n  //# fromEither :: b -> Either a b -> b\n  //.\n  //. Takes a default value and an Either, and returns the Right value\n  //. if the Either is a Right; the default value otherwise.\n  //.\n  //. ```javascript\n  //. > S.fromEither (0) (S.Right (42))\n  //. 42\n  //.\n  //. > S.fromEither (0) (S.Left (42))\n  //. 0\n  //. ```\n  function fromEither(x) {\n    return either (K (x)) (I);\n  }\n  _.fromEither = {\n    consts: {},\n    types: [b, $Either (a) (b), b],\n    impl: fromEither\n  };\n\n  //# toEither :: a -> b? -> Either a b\n  //.\n  //. Converts an arbitrary value to an Either: a Left if the value is `null`\n  //. or `undefined`; a Right otherwise. The first argument specifies the\n  //. value of the Left in the \"failure\" case.\n  //.\n  //. ```javascript\n  //. > S.toEither ('XYZ') (null)\n  //. Left ('XYZ')\n  //.\n  //. > S.toEither ('XYZ') ('ABC')\n  //. Right ('ABC')\n  //.\n  //. > S.map (S.prop ('0'))\n  //. .       (S.toEither ('Invalid protocol')\n  //. .                   ('ftp://example.com/'.match (/^https?:/)))\n  //. Left ('Invalid protocol')\n  //.\n  //. > S.map (S.prop ('0'))\n  //. .       (S.toEither ('Invalid protocol')\n  //. .                   ('https://example.com/'.match (/^https?:/)))\n  //. Right ('https:')\n  //. ```\n  function toEither(x) {\n    return function(y) {\n      return y == null ? Left (x) : Right (y);\n    };\n  }\n  _.toEither = {\n    consts: {},\n    types: [a, b, $Either (a) (b)],\n    impl: toEither\n  };\n\n  //# either :: (a -> c) -> (b -> c) -> Either a b -> c\n  //.\n  //. Takes two functions and an Either, and returns the result of\n  //. applying the first function to the Left's value, if the Either\n  //. is a Left, or the result of applying the second function to the\n  //. Right's value, if the Either is a Right.\n  //.\n  //. ```javascript\n  //. > S.either (S.toUpper) (S.show) (S.Left ('Cannot divide by zero'))\n  //. 'CANNOT DIVIDE BY ZERO'\n  //.\n  //. > S.either (S.toUpper) (S.show) (S.Right (42))\n  //. '42'\n  //. ```\n  function either(l) {\n    return function(r) {\n      return function(either) {\n        return (either.isLeft ? l : r) (either.value);\n      };\n    };\n  }\n  _.either = {\n    consts: {},\n    types: [Fn (a) (c), Fn (b) (c), $Either (a) (b), c],\n    impl: either\n  };\n\n  //# lefts :: (Filterable f, Functor f) => f (Either a b) -> f a\n  //.\n  //. Discards each element which is a Right, and unwraps each element which is\n  //. a Left.\n  //.\n  //. See also [`rights`](#rights).\n  //.\n  //. ```javascript\n  //. > S.lefts ([S.Right (20), S.Left ('foo'), S.Right (10), S.Left ('bar')])\n  //. ['foo', 'bar']\n  //. ```\n  _.lefts = {\n    consts: {f: [Z.Filterable, Z.Functor]},\n    types: [f ($Either (a) (b)), f (a)],\n    impl: B (map (value)) (filter (isLeft))\n  };\n\n  //# rights :: (Filterable f, Functor f) => f (Either a b) -> f b\n  //.\n  //. Discards each element which is a Left, and unwraps each element which is\n  //. a Right.\n  //.\n  //. See also [`lefts`](#lefts).\n  //.\n  //. ```javascript\n  //. > S.rights ([S.Right (20), S.Left ('foo'), S.Right (10), S.Left ('bar')])\n  //. [20, 10]\n  //. ```\n  _.rights = {\n    consts: {f: [Z.Filterable, Z.Functor]},\n    types: [f ($Either (a) (b)), f (b)],\n    impl: B (map (value)) (filter (isRight))\n  };\n\n  //# tagBy :: (a -> Boolean) -> a -> Either a a\n  //.\n  //. Takes a predicate and a value, and returns a Right of the value if it\n  //. satisfies the predicate; a Left of the value otherwise.\n  //.\n  //. ```javascript\n  //. > S.tagBy (S.odd) (0)\n  //. Left (0)\n  //\n  //. > S.tagBy (S.odd) (1)\n  //. Right (1)\n  //. ```\n  function tagBy(pred) {\n    return ifElse (pred) (Right) (Left);\n  }\n  _.tagBy = {\n    consts: {},\n    types: [$.Predicate (a), a, $Either (a) (a)],\n    impl: tagBy\n  };\n\n  //# encaseEither :: (Error -> l) -> (a -> r) -> a -> Either l r\n  //.\n  //. Takes two unary functions, `f` and `g`, the second of which may throw,\n  //. and a value `x` of any type. Applies `g` to `x` inside a `try` block.\n  //. If an exception is caught, the return value is a Left containing the\n  //. result of applying `f` to the caught Error object; otherwise the return\n  //. value is a Right containing the result of applying `g` to `x`.\n  //.\n  //. See also [`encase`](#encase).\n  //.\n  //. ```javascript\n  //. > S.encaseEither (S.I) (JSON.parse) ('[\"foo\",\"bar\",\"baz\"]')\n  //. Right (['foo', 'bar', 'baz'])\n  //.\n  //. > S.encaseEither (S.I) (JSON.parse) ('[')\n  //. Left (new SyntaxError ('Unexpected end of JSON input'))\n  //.\n  //. > S.encaseEither (S.prop ('message')) (JSON.parse) ('[')\n  //. Left ('Unexpected end of JSON input')\n  //. ```\n  function encaseEither(f) {\n    return function(g) {\n      return function(x) {\n        try {\n          return Right (g (x));\n        } catch (err) {\n          return Left (f (err));\n        }\n      };\n    };\n  }\n  _.encaseEither = {\n    consts: {},\n    types: [Fn ($.Error) (l), Fn (a) (r), a, $Either (l) (r)],\n    impl: encaseEither\n  };\n\n  //# encaseEither2 :: (Error -> l) -> (a -> b -> r) -> a -> b -> Either l r\n  //.\n  //. Binary version of [`encaseEither`](#encaseEither).\n  function encaseEither2(f) {\n    return function(g) {\n      return function(x) {\n        return function(y) {\n          try {\n            return Right (g (x) (y));\n          } catch (err) {\n            return Left (f (err));\n          }\n        };\n      };\n    };\n  }\n  _.encaseEither2 = {\n    consts: {},\n    types: [Fn ($.Error) (l), Fn (a) (Fn (b) (r)), a, b, $Either (l) (r)],\n    impl: encaseEither2\n  };\n\n  //# encaseEither3 :: (Error -> l) -> (a -> b -> c -> r) -> a -> b -> c -> Either l r\n  //.\n  //. Ternary version of [`encaseEither`](#encaseEither).\n  function encaseEither3(f) {\n    return function(g) {\n      return function(x) {\n        return function(y) {\n          return function(z) {\n            try {\n              return Right (g (x) (y) (z));\n            } catch (err) {\n              return Left (f (err));\n            }\n          };\n        };\n      };\n    };\n  }\n  _.encaseEither3 = {\n    consts: {},\n    types: [Fn ($.Error) (l),\n            Fn (a) (Fn (b) (Fn (c) (r))),\n            a,\n            b,\n            c,\n            $Either (l) (r)],\n    impl: encaseEither3\n  };\n\n  //# eitherToMaybe :: Either a b -> Maybe b\n  //.\n  //. Converts an Either to a Maybe. A Left becomes Nothing; a Right becomes\n  //. a Just.\n  //.\n  //. See also [`maybeToEither`](#maybeToEither).\n  //.\n  //. ```javascript\n  //. > S.eitherToMaybe (S.Left ('Cannot divide by zero'))\n  //. Nothing\n  //.\n  //. > S.eitherToMaybe (S.Right (42))\n  //. Just (42)\n  //. ```\n  function eitherToMaybe(either) {\n    return either.isLeft ? Nothing : Just (either.value);\n  }\n  _.eitherToMaybe = {\n    consts: {},\n    types: [$Either (a) (b), $Maybe (b)],\n    impl: eitherToMaybe\n  };\n\n  //. ### Logic\n\n  //# and :: Boolean -> Boolean -> Boolean\n  //.\n  //. Boolean \"and\".\n  //.\n  //. ```javascript\n  //. > S.and (false) (false)\n  //. false\n  //.\n  //. > S.and (false) (true)\n  //. false\n  //.\n  //. > S.and (true) (false)\n  //. false\n  //.\n  //. > S.and (true) (true)\n  //. true\n  //. ```\n  function and(x) {\n    return function(y) {\n      return x && y;\n    };\n  }\n  _.and = {\n    consts: {},\n    types: [$.Boolean, $.Boolean, $.Boolean],\n    impl: and\n  };\n\n  //# or :: Boolean -> Boolean -> Boolean\n  //.\n  //. Boolean \"or\".\n  //.\n  //. ```javascript\n  //. > S.or (false) (false)\n  //. false\n  //.\n  //. > S.or (false) (true)\n  //. true\n  //.\n  //. > S.or (true) (false)\n  //. true\n  //.\n  //. > S.or (true) (true)\n  //. true\n  //. ```\n  function or(x) {\n    return function(y) {\n      return x || y;\n    };\n  }\n  _.or = {\n    consts: {},\n    types: [$.Boolean, $.Boolean, $.Boolean],\n    impl: or\n  };\n\n  //# not :: Boolean -> Boolean\n  //.\n  //. Boolean \"not\".\n  //.\n  //. See also [`complement`](#complement).\n  //.\n  //. ```javascript\n  //. > S.not (false)\n  //. true\n  //.\n  //. > S.not (true)\n  //. false\n  //. ```\n  function not(x) {\n    return !x;\n  }\n  _.not = {\n    consts: {},\n    types: [$.Boolean, $.Boolean],\n    impl: not\n  };\n\n  //# complement :: (a -> Boolean) -> a -> Boolean\n  //.\n  //. Takes a unary predicate and a value of any type, and returns the logical\n  //. negation of applying the predicate to the value.\n  //.\n  //. See also [`not`](#not).\n  //.\n  //. ```javascript\n  //. > Number.isInteger (42)\n  //. true\n  //.\n  //. > S.complement (Number.isInteger) (42)\n  //. false\n  //. ```\n  _.complement = {\n    consts: {},\n    types: [$.Predicate (a), a, $.Boolean],\n    impl: B (not)\n  };\n\n  //# ifElse :: (a -> Boolean) -> (a -> b) -> (a -> b) -> a -> b\n  //.\n  //. Takes a unary predicate, a unary \"if\" function, a unary \"else\"\n  //. function, and a value of any type, and returns the result of\n  //. applying the \"if\" function to the value if the value satisfies\n  //. the predicate; the result of applying the \"else\" function to the\n  //. value otherwise.\n  //.\n  //. See also [`when`](#when) and [`unless`](#unless).\n  //.\n  //. ```javascript\n  //. > S.ifElse (x => x < 0) (Math.abs) (Math.sqrt) (-1)\n  //. 1\n  //.\n  //. > S.ifElse (x => x < 0) (Math.abs) (Math.sqrt) (16)\n  //. 4\n  //. ```\n  function ifElse(pred) {\n    return function(f) {\n      return function(g) {\n        return function(x) {\n          return (pred (x) ? f : g) (x);\n        };\n      };\n    };\n  }\n  _.ifElse = {\n    consts: {},\n    types: [$.Predicate (a), Fn (a) (b), Fn (a) (b), a, b],\n    impl: ifElse\n  };\n\n  //# when :: (a -> Boolean) -> (a -> a) -> a -> a\n  //.\n  //. Takes a unary predicate, a unary function, and a value of any type, and\n  //. returns the result of applying the function to the value if the value\n  //. satisfies the predicate; the value otherwise.\n  //.\n  //. See also [`unless`](#unless) and [`ifElse`](#ifElse).\n  //.\n  //. ```javascript\n  //. > S.when (x => x >= 0) (Math.sqrt) (16)\n  //. 4\n  //.\n  //. > S.when (x => x >= 0) (Math.sqrt) (-1)\n  //. -1\n  //. ```\n  function when(pred) {\n    return C (ifElse (pred)) (I);\n  }\n  _.when = {\n    consts: {},\n    types: [$.Predicate (a), Fn (a) (a), a, a],\n    impl: when\n  };\n\n  //# unless :: (a -> Boolean) -> (a -> a) -> a -> a\n  //.\n  //. Takes a unary predicate, a unary function, and a value of any type, and\n  //. returns the result of applying the function to the value if the value\n  //. does not satisfy the predicate; the value otherwise.\n  //.\n  //. See also [`when`](#when) and [`ifElse`](#ifElse).\n  //.\n  //. ```javascript\n  //. > S.unless (x => x < 0) (Math.sqrt) (16)\n  //. 4\n  //.\n  //. > S.unless (x => x < 0) (Math.sqrt) (-1)\n  //. -1\n  //. ```\n  function unless(pred) {\n    return ifElse (pred) (I);\n  }\n  _.unless = {\n    consts: {},\n    types: [$.Predicate (a), Fn (a) (a), a, a],\n    impl: unless\n  };\n\n  //# allPass :: Foldable f => f (a -> Boolean) -> a -> Boolean\n  //.\n  //. Takes a structure containing zero or more predicates, and a value\n  //. of any type. Returns `true` [iff][] the value satisfies all of the\n  //. predicates. None of the subsequent predicates will be applied after\n  //. the first predicate not satisfied.\n  //.\n  //. ```javascript\n  //. > S.allPass ([S.test (/q/), S.test (/u/), S.test (/i/)]) ('quiessence')\n  //. true\n  //.\n  //. > S.allPass ([S.test (/q/), S.test (/u/), S.test (/i/)]) ('fissiparous')\n  //. false\n  //. ```\n  function allPass(preds) {\n    return function(x) {\n      return Z.reduce (function(b, p) { return b && p (x); }, true, preds);\n    };\n  }\n  _.allPass = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($.Predicate (a)), a, $.Boolean],\n    impl: allPass\n  };\n\n  //# anyPass :: Foldable f => f (a -> Boolean) -> a -> Boolean\n  //.\n  //. Takes a structure containing zero or more predicates, and a value\n  //. of any type. Returns `true` [iff][] the value satisfies any of the\n  //. predicates. None of the subsequent predicates will be applied after\n  //. the first predicate satisfied.\n  //.\n  //. ```javascript\n  //. > S.anyPass ([S.test (/q/), S.test (/u/), S.test (/i/)]) ('incandescent')\n  //. true\n  //.\n  //. > S.anyPass ([S.test (/q/), S.test (/u/), S.test (/i/)]) ('empathy')\n  //. false\n  //. ```\n  function anyPass(preds) {\n    return function(x) {\n      return Z.reduce (function(b, p) { return b || p (x); }, false, preds);\n    };\n  }\n  _.anyPass = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($.Predicate (a)), a, $.Boolean],\n    impl: anyPass\n  };\n\n  //. ### Array\n\n  //# slice :: Integer -> Integer -> Array a -> Maybe (Array a)\n  //.\n  //. Takes a start index `i`, an end index `j`, and an array, and returns\n  //. Just the `[i,j)` slice of the array if possible; Nothing otherwise.\n  //. A negative index represents an offset from the length of the array.\n  //.\n  //. See also [`take`](#take), [`drop`](#drop), [`takeLast`](#takeLast),\n  //. and [`dropLast`](#dropLast).\n  //.\n  //. ```javascript\n  //. > S.slice (1) (3) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['b', 'c'])\n  //.\n  //. > S.slice (-3) (-1) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['c', 'd'])\n  //.\n  //. > S.slice (1) (6) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //. ```\n  function slice(start) {\n    return function(end) {\n      return function(xs) {\n        var fromIdx = start < 0 ? start + xs.length : start;\n        var toIdx = end < 0 ? end + xs.length : end;\n\n        return Math.abs (start) <= xs.length &&\n               Math.abs (end) <= xs.length &&\n               fromIdx <= toIdx ?\n                 Just (xs.slice (fromIdx, toIdx)) :\n                 Nothing;\n      };\n    };\n  }\n  _.slice = {\n    consts: {},\n    types: [$.Integer, $.Integer, $.Array (a), $Maybe ($.Array (a))],\n    impl: slice\n  };\n\n  //# at :: Integer -> Array a -> Maybe a\n  //.\n  //. Returns Just the element of the given array at the specified index if\n  //. the index is within the array's bounds; Nothing otherwise. A negative\n  //. index represents an offset from the length of the array.\n  //.\n  //. ```javascript\n  //. > S.at (2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just ('c')\n  //.\n  //. > S.at (5) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //.\n  //. > S.at (-2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just ('d')\n  //. ```\n  function at(n) {\n    return function(xs) {\n      var idx = n < 0 ? xs.length + n : n;\n      return idx < 0 || idx >= xs.length ? Nothing : Just (xs[idx]);\n    };\n  }\n  _.at = {\n    consts: {},\n    types: [$.Integer, $.Array (a), $Maybe (a)],\n    impl: at\n  };\n\n  //# head :: Array a -> Maybe a\n  //.\n  //. Returns Just the first element of the given array if the array contains\n  //. at least one element; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.head ([1, 2, 3])\n  //. Just (1)\n  //.\n  //. > S.head ([])\n  //. Nothing\n  //. ```\n  function head(xs) {\n    return xs.length > 0 ? Just (xs[0]) : Nothing;\n  }\n  _.head = {\n    consts: {},\n    types: [$.Array (a), $Maybe (a)],\n    impl: head\n  };\n\n  //# last :: Array a -> Maybe a\n  //.\n  //. Returns Just the last element of the given array if the array contains\n  //. at least one element; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.last ([1, 2, 3])\n  //. Just (3)\n  //.\n  //. > S.last ([])\n  //. Nothing\n  //. ```\n  function last(xs) {\n    return xs.length > 0 ? Just (xs[xs.length - 1]) : Nothing;\n  }\n  _.last = {\n    consts: {},\n    types: [$.Array (a), $Maybe (a)],\n    impl: last\n  };\n\n  //# tail :: Array a -> Maybe (Array a)\n  //.\n  //. Returns Just all but the first of the given array's elements if the\n  //. array contains at least one element; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.tail ([1, 2, 3])\n  //. Just ([2, 3])\n  //.\n  //. > S.tail ([])\n  //. Nothing\n  //. ```\n  function tail(xs) {\n    return xs.length > 0 ? Just (xs.slice (1)) : Nothing;\n  }\n  _.tail = {\n    consts: {},\n    types: [$.Array (a), $Maybe ($.Array (a))],\n    impl: tail\n  };\n\n  //# init :: Array a -> Maybe (Array a)\n  //.\n  //. Returns Just all but the last of the given array's elements if the\n  //. array contains at least one element; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.init ([1, 2, 3])\n  //. Just ([1, 2])\n  //.\n  //. > S.init ([])\n  //. Nothing\n  //. ```\n  function init(xs) {\n    return xs.length > 0 ? Just (xs.slice (0, -1)) : Nothing;\n  }\n  _.init = {\n    consts: {},\n    types: [$.Array (a), $Maybe ($.Array (a))],\n    impl: init\n  };\n\n  //# take :: Integer -> Array a -> Maybe (Array a)\n  //.\n  //. Returns Just the first N elements of the given array if N is greater\n  //. than or equal to zero and less than or equal to the length of the array;\n  //. Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.take (2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['a', 'b'])\n  //.\n  //. > S.take (5) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['a', 'b', 'c', 'd', 'e'])\n  //.\n  //. > S.take (6) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //. ```\n  function take(n) {\n    return function(xs) {\n      return n >= 0 && n <= xs.length ? Just (xs.slice (0, n)) : Nothing;\n    };\n  }\n  _.take = {\n    consts: {},\n    types: [$.Integer, $.Array (a), $Maybe ($.Array (a))],\n    impl: take\n  };\n\n  //# takeLast :: Integer -> Array a -> Maybe (Array a)\n  //.\n  //. Returns Just the last N elements of the given array if N is greater\n  //. than or equal to zero and less than or equal to the length of the array;\n  //. Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.takeLast (2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['d', 'e'])\n  //.\n  //. > S.takeLast (5) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['a', 'b', 'c', 'd', 'e'])\n  //.\n  //. > S.takeLast (6) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //. ```\n  function takeLast(n) {\n    return function(xs) {\n      return n >= 0 && n <= xs.length ? Just (xs.slice (xs.length - n))\n                                      : Nothing;\n    };\n  }\n  _.takeLast = {\n    consts: {},\n    types: [$.Integer, $.Array (a), $Maybe ($.Array (a))],\n    impl: takeLast\n  };\n\n  //# drop :: Integer -> Array a -> Maybe (Array a)\n  //.\n  //. Returns Just all but the first N elements of the given array if N is\n  //. greater than or equal to zero and less than or equal to the length of\n  //. the array; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.drop (2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['c', 'd', 'e'])\n  //.\n  //. > S.drop (5) (['a', 'b', 'c', 'd', 'e'])\n  //. Just ([])\n  //.\n  //. > S.drop (6) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //. ```\n  function drop(n) {\n    return function(xs) {\n      return n >= 0 && n <= xs.length ? Just (xs.slice (n)) : Nothing;\n    };\n  }\n  _.drop = {\n    consts: {},\n    types: [$.Integer, $.Array (a), $Maybe ($.Array (a))],\n    impl: drop\n  };\n\n  //# dropLast :: Integer -> Array a -> Maybe (Array a)\n  //.\n  //. Returns Just all but the last N elements of the given array if N is\n  //. greater than or equal to zero and less than or equal to the length of\n  //. the array; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.dropLast (2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['a', 'b', 'c'])\n  //.\n  //. > S.dropLast (5) (['a', 'b', 'c', 'd', 'e'])\n  //. Just ([])\n  //.\n  //. > S.dropLast (6) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //. ```\n  function dropLast(n) {\n    return function(xs) {\n      return n >= 0 && n <= xs.length ? Just (xs.slice (0, xs.length - n))\n                                      : Nothing;\n    };\n  }\n  _.dropLast = {\n    consts: {},\n    types: [$.Integer, $.Array (a), $Maybe ($.Array (a))],\n    impl: dropLast\n  };\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. ```javascript\n  //. > S.size ([])\n  //. 0\n  //.\n  //. > S.size (['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > S.size (Nil)\n  //. 0\n  //.\n  //. > S.size (Cons ('foo') (Cons ('bar') (Cons ('baz') (Nil))))\n  //. 3\n  //.\n  //. > S.size (S.Nothing)\n  //. 0\n  //.\n  //. > S.size (S.Just ('quux'))\n  //. 1\n  //.\n  //. > S.size (S.Pair ('ignored!') ('counted!'))\n  //. 1\n  //. ```\n  _.size = {\n    consts: {f: [Z.Foldable]},\n    types: [f (a), $.Integer],\n    impl: Z.size\n  };\n\n  //# append :: (Applicative f, Semigroup (f a)) => a -> f a -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > S.append (3) ([1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > S.append (3) (Cons (1) (Cons (2) (Nil)))\n  //. Cons (1) (Cons (2) (Cons (3) (Nil)))\n  //.\n  //. > S.append ([1]) (S.Nothing)\n  //. Just ([1])\n  //.\n  //. > S.append ([3]) (S.Just ([1, 2]))\n  //. Just ([1, 2, 3])\n  //. ```\n  _.append = {\n    consts: {f: [Z.Applicative, Z.Semigroup]},\n    types: [a, f (a), f (a)],\n    impl: curry2 (Z.append)\n  };\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => a -> f a -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > S.prepend (1) ([2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > S.prepend (1) (Cons (2) (Cons (3) (Nil)))\n  //. Cons (1) (Cons (2) (Cons (3) (Nil)))\n  //.\n  //. > S.prepend ([1]) (S.Nothing)\n  //. Just ([1])\n  //.\n  //. > S.prepend ([1]) (S.Just ([2, 3]))\n  //. Just ([1, 2, 3])\n  //. ```\n  _.prepend = {\n    consts: {f: [Z.Applicative, Z.Semigroup]},\n    types: [a, f (a), f (a)],\n    impl: curry2 (Z.prepend)\n  };\n\n  //# joinWith :: String -> Array String -> String\n  //.\n  //. Joins the strings of the second argument separated by the first argument.\n  //.\n  //. Properties:\n  //.\n  //.   - `forall s :: String, t :: String.\n  //.      S.joinWith (s) (S.splitOn (s) (t)) = t`\n  //.\n  //. See also [`splitOn`](#splitOn).\n  //.\n  //. ```javascript\n  //. > S.joinWith (':') (['foo', 'bar', 'baz'])\n  //. 'foo:bar:baz'\n  //. ```\n  _.joinWith = {\n    consts: {},\n    types: [$.String, $.Array ($.String), $.String],\n    impl: invoke1 ('join')\n  };\n\n  //# elem :: (Setoid a, Foldable f) => a -> f a -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` [iff][] the value is an\n  //. element of the structure.\n  //.\n  //. See also [`find`](#find).\n  //.\n  //. ```javascript\n  //. > S.elem ('c') (['a', 'b', 'c'])\n  //. true\n  //.\n  //. > S.elem ('x') (['a', 'b', 'c'])\n  //. false\n  //.\n  //. > S.elem (3) ({x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > S.elem (8) ({x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > S.elem (0) (S.Just (0))\n  //. true\n  //.\n  //. > S.elem (0) (S.Just (1))\n  //. false\n  //.\n  //. > S.elem (0) (S.Nothing)\n  //. false\n  //. ```\n  _.elem = {\n    consts: {a: [Z.Setoid], f: [Z.Foldable]},\n    types: [a, f (a), $.Boolean],\n    impl: curry2 (Z.elem)\n  };\n\n  //# find :: Foldable f => (a -> Boolean) -> f a -> Maybe a\n  //.\n  //. Takes a predicate and a structure and returns Just the leftmost element\n  //. of the structure which satisfies the predicate; Nothing if there is no\n  //. such element.\n  //.\n  //. See also [`elem`](#elem).\n  //.\n  //. ```javascript\n  //. > S.find (S.lt (0)) ([1, -2, 3, -4, 5])\n  //. Just (-2)\n  //.\n  //. > S.find (S.lt (0)) ([1, 2, 3, 4, 5])\n  //. Nothing\n  //. ```\n  function find(pred) {\n    return function(xs) {\n      return Z.reduce (\n        function(m, x) {\n          return m.isJust ? m : pred (x) ? Just (x) : Nothing;\n        },\n        Nothing,\n        xs\n      );\n    };\n  }\n  _.find = {\n    consts: {f: [Z.Foldable]},\n    types: [$.Predicate (a), f (a), $Maybe (a)],\n    impl: find\n  };\n\n  //# foldMap :: (Monoid m, Foldable f) => TypeRep m -> (a -> m) -> f a -> m\n  //.\n  //. Curried version of [`Z.foldMap`][]. Deconstructs a foldable by mapping\n  //. every element to a monoid and concatenating the results.\n  //.\n  //. ```javascript\n  //. > S.foldMap (String) (f => f.name) ([Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  _.foldMap = {\n    consts: {b: [Z.Monoid], f: [Z.Foldable]},\n    types: [TypeRep (b), Fn (a) (b), f (a), b],\n    impl: curry3 (Z.foldMap)\n  };\n\n  //# unfoldr :: (b -> Maybe (Pair a b)) -> b -> Array a\n  //.\n  //. Takes a function and a seed value, and returns an array generated by\n  //. applying the function repeatedly. The array is initially empty. The\n  //. function is initially applied to the seed value. Each application\n  //. of the function should result in either:\n  //.\n  //.   - Nothing, in which case the array is returned; or\n  //.\n  //.   - Just a pair, in which case the first element is appended to\n  //.     the array and the function is applied to the second element.\n  //.\n  //. ```javascript\n  //. > S.unfoldr (n => n < 5 ? S.Just (S.Pair (n) (n + 1)) : S.Nothing) (1)\n  //. [1, 2, 3, 4]\n  //. ```\n  function unfoldr(f) {\n    return function(x) {\n      var result = [];\n      for (var m = f (x); m.isJust; m = f (m.value.snd)) {\n        result.push (m.value.fst);\n      }\n      return result;\n    };\n  }\n  _.unfoldr = {\n    consts: {},\n    types: [Fn (b) ($Maybe ($Pair (a) (b))), b, $.Array (a)],\n    impl: unfoldr\n  };\n\n  //# range :: Integer -> Integer -> Array Integer\n  //.\n  //. Returns an array of consecutive integers starting with the first argument\n  //. and ending with the second argument minus one. Returns `[]` if the second\n  //. argument is less than or equal to the first argument.\n  //.\n  //. ```javascript\n  //. > S.range (0) (10)\n  //. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  //.\n  //. > S.range (-5) (0)\n  //. [-5, -4, -3, -2, -1]\n  //.\n  //. > S.range (0) (-5)\n  //. []\n  //. ```\n  function range(from) {\n    return function(to) {\n      var result = [];\n      for (var n = from; n < to; n += 1) result.push (n);\n      return result;\n    };\n  }\n  _.range = {\n    consts: {},\n    types: [$.Integer, $.Integer, $.Array ($.Integer)],\n    impl: range\n  };\n\n  //# groupBy :: (a -> a -> Boolean) -> Array a -> Array (Array a)\n  //.\n  //. Splits its array argument into an array of arrays of equal,\n  //. adjacent elements. Equality is determined by the function\n  //. provided as the first argument. Its behaviour can be surprising\n  //. for functions that aren't reflexive, transitive, and symmetric\n  //. (see [equivalence][] relation).\n  //.\n  //. Properties:\n  //.\n  //.   - `forall f :: a -> a -> Boolean, xs :: Array a.\n  //.      S.join (S.groupBy (f) (xs)) = xs`\n  //.\n  //. ```javascript\n  //. > S.groupBy (S.equals) ([1, 1, 2, 1, 1])\n  //. [[1, 1], [2], [1, 1]]\n  //.\n  //. > S.groupBy (x => y => x + y === 0) ([2, -3, 3, 3, 3, 4, -4, 4])\n  //. [[2], [-3, 3, 3, 3], [4, -4], [4]]\n  //. ```\n  function groupBy(f) {\n    return function(xs) {\n      if (xs.length === 0) return [];\n      var x0 = xs[0];         // :: a\n      var active = [x0];      // :: Array a\n      var result = [active];  // :: Array (Array a)\n      for (var idx = 1; idx < xs.length; idx += 1) {\n        var x = xs[idx];\n        if (f (x0) (x)) active.push (x); else result.push (active = [x0 = x]);\n      }\n      return result;\n    };\n  }\n  _.groupBy = {\n    consts: {},\n    types: [Fn (a) ($.Predicate (a)), $.Array (a), $.Array ($.Array (a))],\n    impl: groupBy\n  };\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. ```javascript\n  //. > S.reverse ([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > S.reverse (Cons (1) (Cons (2) (Cons (3) (Nil))))\n  //. Cons (3) (Cons (2) (Cons (1) (Nil)))\n  //.\n  //. > S.pipe ([S.splitOn (''), S.reverse, S.joinWith ('')]) ('abc')\n  //. 'cba'\n  //. ```\n  _.reverse = {\n    consts: {f: [Z.Applicative, Z.Foldable, Z.Monoid]},\n    types: [f (a), f (a)],\n    impl: Z.reverse\n  };\n\n  //# sort :: (Ord a, Applicative m, Foldable m, Monoid (m a)) => m a -> m a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure, using\n  //. [`Z.lte`][] for comparisons.\n  //.\n  //. Properties:\n  //.\n  //.   - `S.sort (S.sort (m)) = S.sort (m)` (idempotence)\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > S.sort (['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > S.sort ([S.Left (4), S.Right (3), S.Left (2), S.Right (1)])\n  //. [Left (2), Left (4), Right (1), Right (3)]\n  //. ```\n  _.sort = {\n    consts: {a: [Z.Ord], m: [Z.Applicative, Z.Foldable, Z.Monoid]},\n    types: [m (a), m (a)],\n    impl: Z.sort\n  };\n\n  //# sortBy :: (Ord b, Applicative m, Foldable m, Monoid (m a)) => (a -> b) -> m a -> m a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure, using\n  //. [`Z.lte`][] to compare the values produced by applying the given function\n  //. to each element of the structure.\n  //.\n  //. Properties:\n  //.\n  //.   - `S.sortBy (f) (S.sortBy (f) (m)) = S.sortBy (f) (m)` (idempotence)\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > S.sortBy (S.prop ('rank')) ([\n  //. .   {rank: 7, suit: 'spades'},\n  //. .   {rank: 5, suit: 'hearts'},\n  //. .   {rank: 2, suit: 'hearts'},\n  //. .   {rank: 5, suit: 'spades'},\n  //. . ])\n  //. [ {rank: 2, suit: 'hearts'},\n  //. . {rank: 5, suit: 'hearts'},\n  //. . {rank: 5, suit: 'spades'},\n  //. . {rank: 7, suit: 'spades'} ]\n  //.\n  //. > S.sortBy (S.prop ('suit')) ([\n  //. .   {rank: 7, suit: 'spades'},\n  //. .   {rank: 5, suit: 'hearts'},\n  //. .   {rank: 2, suit: 'hearts'},\n  //. .   {rank: 5, suit: 'spades'},\n  //. . ])\n  //. [ {rank: 5, suit: 'hearts'},\n  //. . {rank: 2, suit: 'hearts'},\n  //. . {rank: 7, suit: 'spades'},\n  //. . {rank: 5, suit: 'spades'} ]\n  //. ```\n  //.\n  //. If descending order is desired, one may use [`Descending`][]:\n  //.\n  //. ```javascript\n  //. > S.sortBy (Descending) ([83, 97, 110, 99, 116, 117, 97, 114, 121])\n  //. [121, 117, 116, 114, 110, 99, 97, 97, 83]\n  //. ```\n  _.sortBy = {\n    consts: {b: [Z.Ord], m: [Z.Applicative, Z.Foldable, Z.Monoid]},\n    types: [Fn (a) (b), m (a), m (a)],\n    impl: curry2 (Z.sortBy)\n  };\n\n  //# zip :: Array a -> Array b -> Array (Pair a b)\n  //.\n  //. Returns an array of pairs of corresponding elements from the given\n  //. arrays. The length of the resulting array is equal to the length of\n  //. the shorter input array.\n  //.\n  //. See also [`zipWith`](#zipWith).\n  //.\n  //. ```javascript\n  //. > S.zip (['a', 'b']) (['x', 'y', 'z'])\n  //. [Pair ('a') ('x'), Pair ('b') ('y')]\n  //.\n  //. > S.zip ([1, 3, 5]) ([2, 4])\n  //. [Pair (1) (2), Pair (3) (4)]\n  //. ```\n  _.zip = {\n    consts: {},\n    types: [$.Array (a), $.Array (b), $.Array ($Pair (a) (b))],\n    impl: zipWith (Pair)\n  };\n\n  //# zipWith :: (a -> b -> c) -> Array a -> Array b -> Array c\n  //.\n  //. Returns the result of combining, pairwise, the given arrays using the\n  //. given binary function. The length of the resulting array is equal to the\n  //. length of the shorter input array.\n  //.\n  //. See also [`zip`](#zip).\n  //.\n  //. ```javascript\n  //. > S.zipWith (a => b => a + b) (['a', 'b']) (['x', 'y', 'z'])\n  //. ['ax', 'by']\n  //.\n  //. > S.zipWith (a => b => [a, b]) ([1, 3, 5]) ([2, 4])\n  //. [[1, 2], [3, 4]]\n  //. ```\n  function zipWith(f) {\n    return function(xs) {\n      return function(ys) {\n        var result = [];\n        var len = Math.min (xs.length, ys.length);\n        for (var idx = 0; idx < len; idx += 1) {\n          result.push (f (xs[idx]) (ys[idx]));\n        }\n        return result;\n      };\n    };\n  }\n  _.zipWith = {\n    consts: {},\n    types: [Fn (a) (Fn (b) (c)), $.Array (a), $.Array (b), $.Array (c)],\n    impl: zipWith\n  };\n\n  //. ### Object\n\n  //# prop :: String -> a -> b\n  //.\n  //. Takes a property name and an object with known properties and returns\n  //. the value of the specified property. If for some reason the object\n  //. lacks the specified property, a type error is thrown.\n  //.\n  //. For accessing properties of uncertain objects, use [`get`](#get) instead.\n  //.\n  //. ```javascript\n  //. > S.prop ('a') ({a: 1, b: 2})\n  //. 1\n  //. ```\n  function prop(key) {\n    return function(x) {\n      var obj = toObject (x);\n      if (key in obj) return obj[key];\n      throw new TypeError ('‘prop’ expected object to have a property named ' +\n                           '‘' + key + '’; ' + show (x) + ' does not');\n    };\n  }\n  _.prop = {\n    consts: {},\n    types: [$.String, a, b],\n    impl: prop\n  };\n\n  //# props :: Array String -> a -> b\n  //.\n  //. Takes a property path (an array of property names) and an object with\n  //. known structure and returns the value at the given path. If for some\n  //. reason the path does not exist, a type error is thrown.\n  //.\n  //. For accessing property paths of uncertain objects, use [`gets`](#gets)\n  //. instead.\n  //.\n  //. ```javascript\n  //. > S.props (['a', 'b', 'c']) ({a: {b: {c: 1}}})\n  //. 1\n  //. ```\n  function props(path) {\n    return function(x) {\n      return path.reduce (function(x, key) {\n        var obj = toObject (x);\n        if (key in obj) return obj[key];\n        throw new TypeError ('‘props’ expected object to have a property at ' +\n                             show (path) + '; ' + show (x) + ' does not');\n      }, x);\n    };\n  }\n  _.props = {\n    consts: {},\n    types: [$.Array ($.String), a, b],\n    impl: props\n  };\n\n  //# get :: (Any -> Boolean) -> String -> a -> Maybe b\n  //.\n  //. Takes a predicate, a property name, and an object and returns Just the\n  //. value of the specified object property if it exists and the value\n  //. satisfies the given predicate; Nothing otherwise.\n  //.\n  //. See also [`gets`](#gets) and [`prop`](#prop).\n  //.\n  //. ```javascript\n  //. > S.get (S.is ($.Number)) ('x') ({x: 1, y: 2})\n  //. Just (1)\n  //.\n  //. > S.get (S.is ($.Number)) ('x') ({x: '1', y: '2'})\n  //. Nothing\n  //.\n  //. > S.get (S.is ($.Number)) ('x') ({})\n  //. Nothing\n  //.\n  //. > S.get (S.is ($.Array ($.Number))) ('x') ({x: [1, 2, 3]})\n  //. Just ([1, 2, 3])\n  //.\n  //. > S.get (S.is ($.Array ($.Number))) ('x') ({x: [1, 2, 3, null]})\n  //. Nothing\n  //. ```\n  function get(pred) {\n    return B (B (filter (pred))) (get_);\n  }\n  _.get = {\n    consts: {},\n    types: [$.Predicate ($.Any), $.String, a, $Maybe (b)],\n    impl: get\n  };\n\n  //# gets :: (Any -> Boolean) -> Array String -> a -> Maybe b\n  //.\n  //. Takes a predicate, a property path (an array of property names), and\n  //. an object and returns Just the value at the given path if such a path\n  //. exists and the value satisfies the given predicate; Nothing otherwise.\n  //.\n  //. See also [`get`](#get).\n  //.\n  //. ```javascript\n  //. > S.gets (S.is ($.Number)) (['a', 'b', 'c']) ({a: {b: {c: 42}}})\n  //. Just (42)\n  //.\n  //. > S.gets (S.is ($.Number)) (['a', 'b', 'c']) ({a: {b: {c: '42'}}})\n  //. Nothing\n  //.\n  //. > S.gets (S.is ($.Number)) (['a', 'b', 'c']) ({})\n  //. Nothing\n  //. ```\n  function gets(pred) {\n    return function(keys) {\n      return function(x) {\n        return Z.filter (pred, keys.reduce (function(maybe, key) {\n          return Z.chain (get_ (key), maybe);\n        }, Just (x)));\n      };\n    };\n  }\n  _.gets = {\n    consts: {},\n    types: [$.Predicate ($.Any), $.Array ($.String), a, $Maybe (b)],\n    impl: gets\n  };\n\n  //. ### StrMap\n  //.\n  //. StrMap is an abbreviation of _string map_. A string map is an object,\n  //. such as `{foo: 1, bar: 2, baz: 3}`, whose values are all members of\n  //. the same type. Formally, a value is a member of type `StrMap a` if its\n  //. [type identifier][] is `'Object'` and the values of its enumerable own\n  //. properties are all members of type `a`.\n\n  //# singleton :: String -> a -> StrMap a\n  //.\n  //. Takes a string and a value of any type, and returns a string map with\n  //. a single entry (mapping the key to the value).\n  //.\n  //. ```javascript\n  //. > S.singleton ('foo') (42)\n  //. {foo: 42}\n  //. ```\n  function singleton(key) {\n    return function(val) {\n      var strMap = {};\n      strMap[key] = val;\n      return strMap;\n    };\n  }\n  _.singleton = {\n    consts: {},\n    types: [$.String, a, $.StrMap (a)],\n    impl: singleton\n  };\n\n  //# insert :: String -> a -> StrMap a -> StrMap a\n  //.\n  //. Takes a string, a value of any type, and a string map, and returns a\n  //. string map comprising all the entries of the given string map plus the\n  //. entry specified by the first two arguments (which takes precedence).\n  //.\n  //. Equivalent to Haskell's `insert` function. Similar to Clojure's `assoc`\n  //. function.\n  //.\n  //. ```javascript\n  //. > S.insert ('c') (3) ({a: 1, b: 2})\n  //. {a: 1, b: 2, c: 3}\n  //.\n  //. > S.insert ('a') (4) ({a: 1, b: 2})\n  //. {a: 4, b: 2}\n  //. ```\n  function insert(key) {\n    return function(val) {\n      return function(strMap) {\n        return Z.concat (strMap, singleton (key) (val));\n      };\n    };\n  }\n  _.insert = {\n    consts: {},\n    types: [$.String, a, $.StrMap (a), $.StrMap (a)],\n    impl: insert\n  };\n\n  //# remove :: String -> StrMap a -> StrMap a\n  //.\n  //. Takes a string and a string map, and returns a string map comprising all\n  //. the entries of the given string map except the one whose key matches the\n  //. given string (if such a key exists).\n  //.\n  //. Equivalent to Haskell's `delete` function. Similar to Clojure's `dissoc`\n  //. function.\n  //.\n  //. ```javascript\n  //. > S.remove ('c') ({a: 1, b: 2, c: 3})\n  //. {a: 1, b: 2}\n  //.\n  //. > S.remove ('c') ({})\n  //. {}\n  //. ```\n  function remove(key) {\n    return function(strMap) {\n      var result = Z.concat (strMap, {});\n      delete result[key];\n      return result;\n    };\n  }\n  _.remove = {\n    consts: {},\n    types: [$.String, $.StrMap (a), $.StrMap (a)],\n    impl: remove\n  };\n\n  //# keys :: StrMap a -> Array String\n  //.\n  //. Returns the keys of the given string map, in arbitrary order.\n  //.\n  //. ```javascript\n  //. > S.sort (S.keys ({b: 2, c: 3, a: 1}))\n  //. ['a', 'b', 'c']\n  //. ```\n  _.keys = {\n    consts: {},\n    types: [$.StrMap (a), $.Array ($.String)],\n    impl: Object.keys\n  };\n\n  //# values :: StrMap a -> Array a\n  //.\n  //. Returns the values of the given string map, in arbitrary order.\n  //.\n  //. ```javascript\n  //. > S.sort (S.values ({a: 1, c: 3, b: 2}))\n  //. [1, 2, 3]\n  //. ```\n  function values(strMap) {\n    return Z.map (function(k) { return strMap[k]; }, Object.keys (strMap));\n  }\n  _.values = {\n    consts: {},\n    types: [$.StrMap (a), $.Array (a)],\n    impl: values\n  };\n\n  //# pairs :: StrMap a -> Array (Pair String a)\n  //.\n  //. Returns the key–value pairs of the given string map, in arbitrary order.\n  //.\n  //. ```javascript\n  //. > S.sort (S.pairs ({b: 2, a: 1, c: 3}))\n  //. [Pair ('a') (1), Pair ('b') (2), Pair ('c') (3)]\n  //. ```\n  function pairs(strMap) {\n    return Z.map (function(k) { return Pair (k) (strMap[k]); },\n                  Object.keys (strMap));\n  }\n  _.pairs = {\n    consts: {},\n    types: [$.StrMap (a), $.Array ($Pair ($.String) (a))],\n    impl: pairs\n  };\n\n  //# fromPairs :: Foldable f => f (Pair String a) -> StrMap a\n  //.\n  //. Returns a string map containing the key–value pairs specified by the\n  //. given [Foldable][]. If a key appears in multiple pairs, the rightmost\n  //. pair takes precedence.\n  //.\n  //. ```javascript\n  //. > S.fromPairs ([S.Pair ('a') (1), S.Pair ('b') (2), S.Pair ('c') (3)])\n  //. {a: 1, b: 2, c: 3}\n  //.\n  //. > S.fromPairs ([S.Pair ('x') (1), S.Pair ('x') (2)])\n  //. {x: 2}\n  //. ```\n  function fromPairs(pairs) {\n    return Z.reduce (function(strMap, pair) {\n      strMap[pair.fst] = pair.snd;\n      return strMap;\n    }, {}, pairs);\n  }\n  _.fromPairs = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($Pair ($.String) (a)), $.StrMap (a)],\n    impl: fromPairs\n  };\n\n  //. ### Number\n\n  //# negate :: ValidNumber -> ValidNumber\n  //.\n  //. Negates its argument.\n  //.\n  //. ```javascript\n  //. > S.negate (12.5)\n  //. -12.5\n  //.\n  //. > S.negate (-42)\n  //. 42\n  //. ```\n  function negate(n) {\n    return -n;\n  }\n  _.negate = {\n    consts: {},\n    types: [$.ValidNumber, $.ValidNumber],\n    impl: negate\n  };\n\n  //# add :: FiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Returns the sum of two (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.add (1) (1)\n  //. 2\n  //. ```\n  function add(x) {\n    return function(y) {\n      return x + y;\n    };\n  }\n  _.add = {\n    consts: {},\n    types: [$.FiniteNumber, $.FiniteNumber, $.FiniteNumber],\n    impl: add\n  };\n\n  //# sum :: Foldable f => f FiniteNumber -> FiniteNumber\n  //.\n  //. Returns the sum of the given array of (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.sum ([1, 2, 3, 4, 5])\n  //. 15\n  //.\n  //. > S.sum ([])\n  //. 0\n  //.\n  //. > S.sum (S.Just (42))\n  //. 42\n  //.\n  //. > S.sum (S.Nothing)\n  //. 0\n  //. ```\n  _.sum = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($.FiniteNumber), $.FiniteNumber],\n    impl: reduce (add) (0)\n  };\n\n  //# sub :: FiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Takes a finite number `n` and returns the _subtract `n`_ function.\n  //.\n  //. ```javascript\n  //. > S.map (S.sub (1)) ([1, 2, 3])\n  //. [0, 1, 2]\n  //. ```\n  function sub(y) {\n    return function(x) {\n      return x - y;\n    };\n  }\n  _.sub = {\n    consts: {},\n    types: [$.FiniteNumber, $.FiniteNumber, $.FiniteNumber],\n    impl: sub\n  };\n\n  //# mult :: FiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Returns the product of two (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.mult (4) (2)\n  //. 8\n  //. ```\n  function mult(x) {\n    return function(y) {\n      return x * y;\n    };\n  }\n  _.mult = {\n    consts: {},\n    types: [$.FiniteNumber, $.FiniteNumber, $.FiniteNumber],\n    impl: mult\n  };\n\n  //# product :: Foldable f => f FiniteNumber -> FiniteNumber\n  //.\n  //. Returns the product of the given array of (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.product ([1, 2, 3, 4, 5])\n  //. 120\n  //.\n  //. > S.product ([])\n  //. 1\n  //.\n  //. > S.product (S.Just (42))\n  //. 42\n  //.\n  //. > S.product (S.Nothing)\n  //. 1\n  //. ```\n  _.product = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($.FiniteNumber), $.FiniteNumber],\n    impl: reduce (mult) (1)\n  };\n\n  //# div :: NonZeroFiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Takes a non-zero finite number `n` and returns the _divide by `n`_\n  //. function.\n  //.\n  //. ```javascript\n  //. > S.map (S.div (2)) ([0, 1, 2, 3])\n  //. [0, 0.5, 1, 1.5]\n  //. ```\n  function div(y) {\n    return function(x) {\n      return x / y;\n    };\n  }\n  _.div = {\n    consts: {},\n    types: [$.NonZeroFiniteNumber, $.FiniteNumber, $.FiniteNumber],\n    impl: div\n  };\n\n  //# pow :: FiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Takes a finite number `n` and returns the _power of `n`_ function.\n  //.\n  //. ```javascript\n  //. > S.map (S.pow (2)) ([-3, -2, -1, 0, 1, 2, 3])\n  //. [9, 4, 1, 0, 1, 4, 9]\n  //.\n  //. > S.map (S.pow (0.5)) ([1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5]\n  //. ```\n  function pow(exp) {\n    return function(base) {\n      return Math.pow (base, exp);\n    };\n  }\n  _.pow = {\n    consts: {},\n    types: [$.FiniteNumber, $.FiniteNumber, $.FiniteNumber],\n    impl: pow\n  };\n\n  //# mean :: Foldable f => f FiniteNumber -> Maybe FiniteNumber\n  //.\n  //. Returns the mean of the given array of (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.mean ([1, 2, 3, 4, 5])\n  //. Just (3)\n  //.\n  //. > S.mean ([])\n  //. Nothing\n  //.\n  //. > S.mean (S.Just (42))\n  //. Just (42)\n  //.\n  //. > S.mean (S.Nothing)\n  //. Nothing\n  //. ```\n  function mean(foldable) {\n    var result = Z.reduce (\n      function(acc, n) {\n        acc.total += n;\n        acc.count += 1;\n        return acc;\n      },\n      {total: 0, count: 0},\n      foldable\n    );\n    return result.count > 0 ? Just (result.total / result.count) : Nothing;\n  }\n  _.mean = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($.FiniteNumber), $Maybe ($.FiniteNumber)],\n    impl: mean\n  };\n\n  //. ### Integer\n\n  //# even :: Integer -> Boolean\n  //.\n  //. Returns `true` if the given integer is even; `false` if it is odd.\n  //.\n  //. ```javascript\n  //. > S.even (42)\n  //. true\n  //.\n  //. > S.even (99)\n  //. false\n  //. ```\n  function even(n) {\n    return n % 2 === 0;\n  }\n  _.even = {\n    consts: {},\n    types: [$.Integer, $.Boolean],\n    impl: even\n  };\n\n  //# odd :: Integer -> Boolean\n  //.\n  //. Returns `true` if the given integer is odd; `false` if it is even.\n  //.\n  //. ```javascript\n  //. > S.odd (99)\n  //. true\n  //.\n  //. > S.odd (42)\n  //. false\n  //. ```\n  function odd(n) {\n    return n % 2 !== 0;\n  }\n  _.odd = {\n    consts: {},\n    types: [$.Integer, $.Boolean],\n    impl: odd\n  };\n\n  //. ### Parse\n\n  //# parseDate :: String -> Maybe ValidDate\n  //.\n  //. Takes a string and returns Just the date represented by the string\n  //. if it does in fact represent a date; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.parseDate ('2011-01-19T17:40:00Z')\n  //. Just (new Date ('2011-01-19T17:40:00.000Z'))\n  //.\n  //. > S.parseDate ('today')\n  //. Nothing\n  //. ```\n  function parseDate(s) {\n    var date = new Date (s);\n    return isNaN (date.valueOf ()) ? Nothing : Just (date);\n  }\n  _.parseDate = {\n    consts: {},\n    types: [$.String, $Maybe ($.ValidDate)],\n    impl: parseDate\n  };\n\n  //  requiredNonCapturingGroup :: Array String -> String\n  function requiredNonCapturingGroup(xs) {\n    return '(?:' + xs.join ('|') + ')';\n  }\n\n  //  optionalNonCapturingGroup :: Array String -> String\n  function optionalNonCapturingGroup(xs) {\n    return requiredNonCapturingGroup (xs) + '?';\n  }\n\n  //  validFloatRepr :: RegExp\n  var validFloatRepr = new RegExp (\n    '^' +                     // start-of-string anchor\n    '\\\\s*' +                  // any number of leading whitespace characters\n    '[+-]?' +                 // optional sign\n    requiredNonCapturingGroup ([\n      'Infinity',             // \"Infinity\"\n      'NaN',                  // \"NaN\"\n      requiredNonCapturingGroup ([\n        '[0-9]+',             // number\n        '[0-9]+[.][0-9]+',    // number with interior decimal point\n        '[0-9]+[.]',          // number with trailing decimal point\n        '[.][0-9]+'           // number with leading decimal point\n      ]) +\n      optionalNonCapturingGroup ([\n        '[Ee]' +              // \"E\" or \"e\"\n        '[+-]?' +             // optional sign\n        '[0-9]+'              // exponent\n      ])\n    ]) +\n    '\\\\s*' +                  // any number of trailing whitespace characters\n    '$'                       // end-of-string anchor\n  );\n\n  //# parseFloat :: String -> Maybe Number\n  //.\n  //. Takes a string and returns Just the number represented by the string\n  //. if it does in fact represent a number; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.parseFloat ('-123.45')\n  //. Just (-123.45)\n  //.\n  //. > S.parseFloat ('foo.bar')\n  //. Nothing\n  //. ```\n  function parseFloat_(s) {\n    return validFloatRepr.test (s) ? Just (parseFloat (s)) : Nothing;\n  }\n  _.parseFloat = {\n    consts: {},\n    types: [$.String, $Maybe ($.Number)],\n    impl: parseFloat_\n  };\n\n  //  Radix :: Type\n  var Radix = $.NullaryType\n    ('sanctuary/Radix')\n    ('')\n    (function(x) { return $.Integer._test (x) && x >= 2 && x <= 36; });\n\n  //# parseInt :: Radix -> String -> Maybe Integer\n  //.\n  //. Takes a radix (an integer between 2 and 36 inclusive) and a string,\n  //. and returns Just the number represented by the string if it does in\n  //. fact represent a number in the base specified by the radix; Nothing\n  //. otherwise.\n  //.\n  //. This function is stricter than [`parseInt`][parseInt]: a string\n  //. is considered to represent an integer only if all its non-prefix\n  //. characters are members of the character set specified by the radix.\n  //.\n  //. ```javascript\n  //. > S.parseInt (10) ('-42')\n  //. Just (-42)\n  //.\n  //. > S.parseInt (16) ('0xFF')\n  //. Just (255)\n  //.\n  //. > S.parseInt (16) ('0xGG')\n  //. Nothing\n  //. ```\n  function parseInt_(radix) {\n    return function(s) {\n      var charset = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'.slice (0, radix);\n      var pattern = new RegExp ('^[' + charset + ']+$', 'i');\n\n      var t = s.replace (/^[+-]/, '');\n      if (pattern.test (radix === 16 ? t.replace (/^0x/i, '') : t)) {\n        var n = parseInt (s, radix);\n        if ($.Integer._test (n)) return Just (n);\n      }\n      return Nothing;\n    };\n  }\n  _.parseInt = {\n    consts: {},\n    types: [Radix, $.String, $Maybe ($.Integer)],\n    impl: parseInt_\n  };\n\n  //# parseJson :: (Any -> Boolean) -> String -> Maybe a\n  //.\n  //. Takes a predicate and a string which may or may not be valid JSON, and\n  //. returns Just the result of applying `JSON.parse` to the string *if* the\n  //. result satisfies the predicate; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.parseJson (S.is ($.Array ($.Integer))) ('[')\n  //. Nothing\n  //.\n  //. > S.parseJson (S.is ($.Array ($.Integer))) ('[\"1\",\"2\",\"3\"]')\n  //. Nothing\n  //.\n  //. > S.parseJson (S.is ($.Array ($.Integer))) ('[0,1.5,3,4.5]')\n  //. Nothing\n  //.\n  //. > S.parseJson (S.is ($.Array ($.Integer))) ('[1,2,3]')\n  //. Just ([1, 2, 3])\n  //. ```\n  function parseJson(pred) {\n    return B (filter (pred)) (encase (JSON.parse));\n  }\n  _.parseJson = {\n    consts: {},\n    types: [$.Predicate ($.Any), $.String, $Maybe (a)],\n    impl: parseJson\n  };\n\n  //. ### RegExp\n\n  //  Match :: Type\n  var Match = $.RecordType ({\n    match: $.String,\n    groups: $.Array ($Maybe ($.String))\n  });\n\n  //  toMatch :: Array String? -> Match\n  function toMatch(ss) {\n    return {match: ss[0], groups: Z.map (toMaybe, ss.slice (1))};\n  }\n\n  //  withRegex :: (RegExp, () -> a) -> a\n  function withRegex(pattern, thunk) {\n    var lastIndex = pattern.lastIndex;\n    var result = thunk ();\n    pattern.lastIndex = lastIndex;\n    return result;\n  }\n\n  //# regex :: RegexFlags -> String -> RegExp\n  //.\n  //. Takes a [RegexFlags][] and a pattern, and returns a RegExp.\n  //.\n  //. ```javascript\n  //. > S.regex ('g') (':\\\\d+:')\n  //. /:\\d+:/g\n  //. ```\n  function regex(flags) {\n    return function(source) {\n      return new RegExp (source, flags);\n    };\n  }\n  _.regex = {\n    consts: {},\n    types: [$.RegexFlags, $.String, $.RegExp],\n    impl: regex\n  };\n\n  //# regexEscape :: String -> String\n  //.\n  //. Takes a string which may contain regular expression metacharacters,\n  //. and returns a string with those metacharacters escaped.\n  //.\n  //. Properties:\n  //.\n  //.   - `forall s :: String.\n  //.      S.test (S.regex ('') (S.regexEscape (s))) (s) = true`\n  //.\n  //. ```javascript\n  //. > S.regexEscape ('-=*{XYZ}*=-')\n  //. '\\\\-=\\\\*\\\\{XYZ\\\\}\\\\*=\\\\-'\n  //. ```\n  function regexEscape(s) {\n    return s.replace (/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n  }\n  _.regexEscape = {\n    consts: {},\n    types: [$.String, $.String],\n    impl: regexEscape\n  };\n\n  //# test :: RegExp -> String -> Boolean\n  //.\n  //. Takes a pattern and a string, and returns `true` [iff][] the pattern\n  //. matches the string.\n  //.\n  //. ```javascript\n  //. > S.test (/^a/) ('abacus')\n  //. true\n  //.\n  //. > S.test (/^a/) ('banana')\n  //. false\n  //. ```\n  function test(pattern) {\n    return function(s) {\n      return withRegex (pattern, function() { return pattern.test (s); });\n    };\n  }\n  _.test = {\n    consts: {},\n    types: [$.RegExp, $.String, $.Boolean],\n    impl: test\n  };\n\n  //# match :: NonGlobalRegExp -> String -> Maybe { match :: String, groups :: Array (Maybe String) }\n  //.\n  //. Takes a pattern and a string, and returns Just a match record if the\n  //. pattern matches the string; Nothing otherwise.\n  //.\n  //. `groups :: Array (Maybe String)` acknowledges the existence of optional\n  //. capturing groups.\n  //.\n  //. Properties:\n  //.\n  //.   - `forall p :: Pattern, s :: String.\n  //.      S.head (S.matchAll (S.regex ('g') (p)) (s))\n  //.      = S.match (S.regex ('') (p)) (s)`\n  //.\n  //. See also [`matchAll`](#matchAll).\n  //.\n  //. ```javascript\n  //. > S.match (/(good)?bye/) ('goodbye')\n  //. Just ({match: 'goodbye', groups: [Just ('good')]})\n  //.\n  //. > S.match (/(good)?bye/) ('bye')\n  //. Just ({match: 'bye', groups: [Nothing]})\n  //. ```\n  function match(pattern) {\n    return function(s) {\n      return Z.map (toMatch, toMaybe (s.match (pattern)));\n    };\n  }\n  _.match = {\n    consts: {},\n    types: [$.NonGlobalRegExp, $.String, $Maybe (Match)],\n    impl: match\n  };\n\n  //# matchAll :: GlobalRegExp -> String -> Array { match :: String, groups :: Array (Maybe String) }\n  //.\n  //. Takes a pattern and a string, and returns an array of match records.\n  //.\n  //. `groups :: Array (Maybe String)` acknowledges the existence of optional\n  //. capturing groups.\n  //.\n  //. See also [`match`](#match).\n  //.\n  //. ```javascript\n  //. > S.matchAll (/@([a-z]+)/g) ('Hello, world!')\n  //. []\n  //.\n  //. > S.matchAll (/@([a-z]+)/g) ('Hello, @foo! Hello, @bar! Hello, @baz!')\n  //. [ {match: '@foo', groups: [Just ('foo')]},\n  //. . {match: '@bar', groups: [Just ('bar')]},\n  //. . {match: '@baz', groups: [Just ('baz')]} ]\n  //. ```\n  function matchAll(pattern) {\n    return function(s) {\n      return withRegex (pattern, function() {\n        return unfoldr (function(_) {\n          return Z.map (function(ss) {\n            return Pair (toMatch (ss)) (null);\n          }, toMaybe (pattern.exec (s)));\n        }) ([]);\n      });\n    };\n  }\n  _.matchAll = {\n    consts: {},\n    types: [$.GlobalRegExp, $.String, $.Array (Match)],\n    impl: matchAll\n  };\n\n  //. ### String\n\n  //# toUpper :: String -> String\n  //.\n  //. Returns the upper-case equivalent of its argument.\n  //.\n  //. See also [`toLower`](#toLower).\n  //.\n  //. ```javascript\n  //. > S.toUpper ('ABC def 123')\n  //. 'ABC DEF 123'\n  //. ```\n  _.toUpper = {\n    consts: {},\n    types: [$.String, $.String],\n    impl: invoke0 ('toUpperCase')\n  };\n\n  //# toLower :: String -> String\n  //.\n  //. Returns the lower-case equivalent of its argument.\n  //.\n  //. See also [`toUpper`](#toUpper).\n  //.\n  //. ```javascript\n  //. > S.toLower ('ABC def 123')\n  //. 'abc def 123'\n  //. ```\n  _.toLower = {\n    consts: {},\n    types: [$.String, $.String],\n    impl: invoke0 ('toLowerCase')\n  };\n\n  //# trim :: String -> String\n  //.\n  //. Strips leading and trailing whitespace characters.\n  //.\n  //. ```javascript\n  //. > S.trim ('\\t\\t foo bar \\n')\n  //. 'foo bar'\n  //. ```\n  _.trim = {\n    consts: {},\n    types: [$.String, $.String],\n    impl: invoke0 ('trim')\n  };\n\n  //# stripPrefix :: String -> String -> Maybe String\n  //.\n  //. Returns Just the portion of the given string (the second argument) left\n  //. after removing the given prefix (the first argument) if the string starts\n  //. with the prefix; Nothing otherwise.\n  //.\n  //. See also [`stripSuffix`](#stripSuffix).\n  //.\n  //. ```javascript\n  //. > S.stripPrefix ('https://') ('https://sanctuary.js.org')\n  //. Just ('sanctuary.js.org')\n  //.\n  //. > S.stripPrefix ('https://') ('http://sanctuary.js.org')\n  //. Nothing\n  //. ```\n  function stripPrefix(prefix) {\n    return function(s) {\n      var idx = prefix.length;\n      return s.slice (0, idx) === prefix ? Just (s.slice (idx)) : Nothing;\n    };\n  }\n  _.stripPrefix = {\n    consts: {},\n    types: [$.String, $.String, $Maybe ($.String)],\n    impl: stripPrefix\n  };\n\n  //# stripSuffix :: String -> String -> Maybe String\n  //.\n  //. Returns Just the portion of the given string (the second argument) left\n  //. after removing the given suffix (the first argument) if the string ends\n  //. with the suffix; Nothing otherwise.\n  //.\n  //. See also [`stripPrefix`](#stripPrefix).\n  //.\n  //. ```javascript\n  //. > S.stripSuffix ('.md') ('README.md')\n  //. Just ('README')\n  //.\n  //. > S.stripSuffix ('.md') ('README')\n  //. Nothing\n  //. ```\n  function stripSuffix(suffix) {\n    return function(s) {\n      var idx = s.length - suffix.length;  // value may be negative\n      return s.slice (idx) === suffix ? Just (s.slice (0, idx)) : Nothing;\n    };\n  }\n  _.stripSuffix = {\n    consts: {},\n    types: [$.String, $.String, $Maybe ($.String)],\n    impl: stripSuffix\n  };\n\n  //# words :: String -> Array String\n  //.\n  //. Takes a string and returns the array of words the string contains\n  //. (words are delimited by whitespace characters).\n  //.\n  //. See also [`unwords`](#unwords).\n  //.\n  //. ```javascript\n  //. > S.words (' foo bar baz ')\n  //. ['foo', 'bar', 'baz']\n  //. ```\n  function words(s) {\n    var words = s.split (/\\s+/);\n    var len = words.length;\n    return words.slice (words[0] === '' ? 1 : 0,\n                        words[len - 1] === '' ? len - 1 : len);\n  }\n  _.words = {\n    consts: {},\n    types: [$.String, $.Array ($.String)],\n    impl: words\n  };\n\n  //# unwords :: Array String -> String\n  //.\n  //. Takes an array of words and returns the result of joining the words\n  //. with separating spaces.\n  //.\n  //. See also [`words`](#words).\n  //.\n  //. ```javascript\n  //. > S.unwords (['foo', 'bar', 'baz'])\n  //. 'foo bar baz'\n  //. ```\n  _.unwords = {\n    consts: {},\n    types: [$.Array ($.String), $.String],\n    impl: invoke1 ('join') (' ')\n  };\n\n  //# lines :: String -> Array String\n  //.\n  //. Takes a string and returns the array of lines the string contains\n  //. (lines are delimited by newlines: `'\\n'` or `'\\r\\n'` or `'\\r'`).\n  //. The resulting strings do not contain newlines.\n  //.\n  //. See also [`unlines`](#unlines).\n  //.\n  //. ```javascript\n  //. > S.lines ('foo\\nbar\\nbaz\\n')\n  //. ['foo', 'bar', 'baz']\n  //. ```\n  function lines(s) {\n    return s === '' ? []\n                    : (s.replace (/\\r\\n?/g, '\\n')).match (/^(?=[\\s\\S]).*/gm);\n  }\n  _.lines = {\n    consts: {},\n    types: [$.String, $.Array ($.String)],\n    impl: lines\n  };\n\n  //# unlines :: Array String -> String\n  //.\n  //. Takes an array of lines and returns the result of joining the lines\n  //. after appending a terminating line feed (`'\\n'`) to each.\n  //.\n  //. See also [`lines`](#lines).\n  //.\n  //. ```javascript\n  //. > S.unlines (['foo', 'bar', 'baz'])\n  //. 'foo\\nbar\\nbaz\\n'\n  //. ```\n  function unlines(xs) {\n    return xs.reduce (function(s, x) { return s + x + '\\n'; }, '');\n  }\n  _.unlines = {\n    consts: {},\n    types: [$.Array ($.String), $.String],\n    impl: unlines\n  };\n\n  //# splitOn :: String -> String -> Array String\n  //.\n  //. Returns the substrings of its second argument separated by occurrences\n  //. of its first argument.\n  //.\n  //. See also [`joinWith`](#joinWith) and [`splitOnRegex`](#splitOnRegex).\n  //.\n  //. ```javascript\n  //. > S.splitOn ('::') ('foo::bar::baz')\n  //. ['foo', 'bar', 'baz']\n  //. ```\n  _.splitOn = {\n    consts: {},\n    types: [$.String, $.String, $.Array ($.String)],\n    impl: invoke1 ('split')\n  };\n\n  //# splitOnRegex :: GlobalRegExp -> String -> Array String\n  //.\n  //. Takes a pattern and a string, and returns the result of splitting the\n  //. string at every non-overlapping occurrence of the pattern.\n  //.\n  //. Properties:\n  //.\n  //.   - `forall s :: String, t :: String.\n  //.      S.joinWith (s)\n  //.                 (S.splitOnRegex (S.regex ('g') (S.regexEscape (s))) (t))\n  //.      = t`\n  //.\n  //. See also [`splitOn`](#splitOn).\n  //.\n  //. ```javascript\n  //. > S.splitOnRegex (/[,;][ ]*/g) ('foo, bar, baz')\n  //. ['foo', 'bar', 'baz']\n  //.\n  //. > S.splitOnRegex (/[,;][ ]*/g) ('foo;bar;baz')\n  //. ['foo', 'bar', 'baz']\n  //. ```\n  function splitOnRegex(pattern) {\n    return function(s) {\n      return withRegex (pattern, function() {\n        var result = [];\n        var lastIndex = 0;\n        var match;\n        while ((match = pattern.exec (s)) != null) {\n          if (pattern.lastIndex === lastIndex && match[0] === '') {\n            if (pattern.lastIndex === s.length) return result;\n            pattern.lastIndex += 1;\n          } else {\n            result.push (s.slice (lastIndex, match.index));\n            lastIndex = match.index + match[0].length;\n          }\n        }\n        result.push (s.slice (lastIndex));\n        return result;\n      });\n    };\n  }\n  _.splitOnRegex = {\n    consts: {},\n    types: [$.GlobalRegExp, $.String, $.Array ($.String)],\n    impl: splitOnRegex\n  };\n\n  return create ({\n    checkTypes: (\n      /* global process:false */\n      typeof process === 'undefined'\n      || process == null\n      || process.env == null\n      || process.env.NODE_ENV !== 'production'\n    ),\n    env: Z.concat ($.env, [\n      $.FiniteNumber,\n      $.NonZeroFiniteNumber,\n      $Either ($.Unknown) ($.Unknown),\n      Fn ($.Unknown) ($.Unknown),\n      $.GlobalRegExp,\n      $.NonGlobalRegExp,\n      $.Integer,\n      $.NonNegativeInteger,\n      $Maybe ($.Unknown),\n      $.Array2 ($.Unknown) ($.Unknown),\n      $Pair ($.Unknown) ($.Unknown),\n      $.RegexFlags,\n      $.Type,\n      $.TypeClass,\n      $.ValidDate,\n      $.ValidNumber\n    ])\n  });\n\n}));\n\n//. [#438]:                     https://github.com/sanctuary-js/sanctuary/issues/438\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [BinaryType]:               v:sanctuary-js/sanctuary-def#BinaryType\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [Either]:                   #either-type\n//. [Fantasy Land]:             v:fantasyland/fantasy-land\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [GIGO]:                     https://en.wikipedia.org/wiki/Garbage_in,_garbage_out\n//. [Haskell]:                  https://www.haskell.org/\n//. [Kleisli]:                  https://en.wikipedia.org/wiki/Kleisli_category\n//. [Maybe]:                    #maybe-type\n//. [Nullable]:                 v:sanctuary-js/sanctuary-def#Nullable\n//. [PureScript]:               http://www.purescript.org/\n//. [Ramda]:                    http://ramdajs.com/\n//. [RegexFlags]:               v:sanctuary-js/sanctuary-def#RegexFlags\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [UnaryType]:                v:sanctuary-js/sanctuary-def#UnaryType\n//. [`$.test`]:                 v:sanctuary-js/sanctuary-def#test\n//. [`Descending`]:             v:sanctuary-js/sanctuary-descending#Descending\n//. [`R.__`]:                   http://ramdajs.com/docs/#__\n//. [`R.bind`]:                 http://ramdajs.com/docs/#bind\n//. [`R.invoker`]:              http://ramdajs.com/docs/#invoker\n//. [`Z.alt`]:                  v:sanctuary-js/sanctuary-type-classes#alt\n//. [`Z.ap`]:                   v:sanctuary-js/sanctuary-type-classes#ap\n//. [`Z.apFirst`]:              v:sanctuary-js/sanctuary-type-classes#apFirst\n//. [`Z.apSecond`]:             v:sanctuary-js/sanctuary-type-classes#apSecond\n//. [`Z.bimap`]:                v:sanctuary-js/sanctuary-type-classes#bimap\n//. [`Z.chain`]:                v:sanctuary-js/sanctuary-type-classes#chain\n//. [`Z.chainRec`]:             v:sanctuary-js/sanctuary-type-classes#chainRec\n//. [`Z.compose`]:              v:sanctuary-js/sanctuary-type-classes#compose\n//. [`Z.concat`]:               v:sanctuary-js/sanctuary-type-classes#concat\n//. [`Z.contramap`]:            v:sanctuary-js/sanctuary-type-classes#contramap\n//. [`Z.dropWhile`]:            v:sanctuary-js/sanctuary-type-classes#dropWhile\n//. [`Z.duplicate`]:            v:sanctuary-js/sanctuary-type-classes#duplicate\n//. [`Z.empty`]:                v:sanctuary-js/sanctuary-type-classes#empty\n//. [`Z.equals`]:               v:sanctuary-js/sanctuary-type-classes#equals\n//. [`Z.extend`]:               v:sanctuary-js/sanctuary-type-classes#extend\n//. [`Z.extract`]:              v:sanctuary-js/sanctuary-type-classes#extract\n//. [`Z.filter`]:               v:sanctuary-js/sanctuary-type-classes#filter\n//. [`Z.flip`]:                 v:sanctuary-js/sanctuary-type-classes#flip\n//. [`Z.foldMap`]:              v:sanctuary-js/sanctuary-type-classes#foldMap\n//. [`Z.gt`]:                   v:sanctuary-js/sanctuary-type-classes#gt\n//. [`Z.gte`]:                  v:sanctuary-js/sanctuary-type-classes#gte\n//. [`Z.id`]:                   v:sanctuary-js/sanctuary-type-classes#id\n//. [`Z.invert`]:               v:sanctuary-js/sanctuary-type-classes#invert\n//. [`Z.join`]:                 v:sanctuary-js/sanctuary-type-classes#join\n//. [`Z.lt`]:                   v:sanctuary-js/sanctuary-type-classes#lt\n//. [`Z.lte`]:                  v:sanctuary-js/sanctuary-type-classes#lte\n//. [`Z.map`]:                  v:sanctuary-js/sanctuary-type-classes#map\n//. [`Z.mapLeft`]:              v:sanctuary-js/sanctuary-type-classes#mapLeft\n//. [`Z.of`]:                   v:sanctuary-js/sanctuary-type-classes#of\n//. [`Z.promap`]:               v:sanctuary-js/sanctuary-type-classes#promap\n//. [`Z.reject`]:               v:sanctuary-js/sanctuary-type-classes#reject\n//. [`Z.sequence`]:             v:sanctuary-js/sanctuary-type-classes#sequence\n//. [`Z.takeWhile`]:            v:sanctuary-js/sanctuary-type-classes#takeWhile\n//. [`Z.traverse`]:             v:sanctuary-js/sanctuary-type-classes#traverse\n//. [`Z.zero`]:                 v:sanctuary-js/sanctuary-type-classes#zero\n//. [`show`]:                   v:sanctuary-js/sanctuary-show#show\n//. [equivalence]:              https://en.wikipedia.org/wiki/Equivalence_relation\n//. [iff]:                      https://en.wikipedia.org/wiki/If_and_only_if\n//. [parseInt]:                 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n//. [partial functions]:        https://en.wikipedia.org/wiki/Partial_function\n//. [ramda/ramda#683]:          https://github.com/ramda/ramda/issues/683\n//. [ramda/ramda#1413]:         https://github.com/ramda/ramda/issues/1413\n//. [ramda/ramda#1419]:         https://github.com/ramda/ramda/pull/1419\n//. [sanctuary-def]:            v:sanctuary-js/sanctuary-def\n//. [sanctuary-either]:         v:sanctuary-js/sanctuary-either\n//. [sanctuary-maybe]:          v:sanctuary-js/sanctuary-maybe\n//. [sanctuary-pair]:           v:sanctuary-js/sanctuary-pair\n//. [sanctuary-show]:           v:sanctuary-js/sanctuary-show\n//. [sanctuary-type-classes]:   v:sanctuary-js/sanctuary-type-classes\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [thrush]:                   https://github.com/raganwald-deprecated/homoiconic/blob/master/2008-10-30/thrush.markdown\n//. [total functions]:          https://en.wikipedia.org/wiki/Partial_function#Total_function\n//. [type checking]:            #type-checking\n//. [type identifier]:          v:sanctuary-js/sanctuary-type-identifiers\n//. [type representative]:      v:fantasyland/fantasy-land#type-representatives\n//. [variadic functions]:       https://en.wikipedia.org/wiki/Variadic_function\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar Control_Apply = require(\"../Control.Apply/index.js\");\nvar Data_Functor = require(\"../Data.Functor/index.js\");\nvar Data_Unit = require(\"../Data.Unit/index.js\");\nvar Applicative = function (Apply0, pure) {\n    this.Apply0 = Apply0;\n    this.pure = pure;\n};\nvar pure = function (dict) {\n    return dict.pure;\n};\nvar unless = function (dictApplicative) {\n    return function (v) {\n        return function (v1) {\n            if (!v) {\n                return v1;\n            };\n            if (v) {\n                return pure(dictApplicative)(Data_Unit.unit);\n            };\n            throw new Error(\"Failed pattern match at Control.Applicative line 62, column 1 - line 62, column 65: \" + [ v.constructor.name, v1.constructor.name ]);\n        };\n    };\n};\nvar when = function (dictApplicative) {\n    return function (v) {\n        return function (v1) {\n            if (v) {\n                return v1;\n            };\n            if (!v) {\n                return pure(dictApplicative)(Data_Unit.unit);\n            };\n            throw new Error(\"Failed pattern match at Control.Applicative line 57, column 1 - line 57, column 63: \" + [ v.constructor.name, v1.constructor.name ]);\n        };\n    };\n};\nvar liftA1 = function (dictApplicative) {\n    return function (f) {\n        return function (a) {\n            return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);\n        };\n    };\n};\nvar applicativeFn = new Applicative(function () {\n    return Control_Apply.applyFn;\n}, function (x) {\n    return function (v) {\n        return x;\n    };\n});\nvar applicativeArray = new Applicative(function () {\n    return Control_Apply.applyArray;\n}, function (x) {\n    return [ x ];\n});\nmodule.exports = {\n    Applicative: Applicative,\n    pure: pure,\n    liftA1: liftA1,\n    unless: unless,\n    when: when,\n    applicativeFn: applicativeFn,\n    applicativeArray: applicativeArray\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar Semigroupoid = function (compose) {\n    this.compose = compose;\n};\nvar semigroupoidFn = new Semigroupoid(function (f) {\n    return function (g) {\n        return function (x) {\n            return f(g(x));\n        };\n    };\n});\nvar compose = function (dict) {\n    return dict.compose;\n};\nvar composeFlipped = function (dictSemigroupoid) {\n    return function (f) {\n        return function (g) {\n            return compose(dictSemigroupoid)(g)(f);\n        };\n    };\n};\nmodule.exports = {\n    compose: compose,\n    Semigroupoid: Semigroupoid,\n    composeFlipped: composeFlipped,\n    semigroupoidFn: semigroupoidFn\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar otherwise = true;\nmodule.exports = {\n    otherwise: otherwise\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar $foreign = require(\"./foreign.js\");\nvar Data_Symbol = require(\"../Data.Symbol/index.js\");\nvar Data_Unit = require(\"../Data.Unit/index.js\");\nvar Data_Void = require(\"../Data.Void/index.js\");\nvar Record_Unsafe = require(\"../Record.Unsafe/index.js\");\nvar Type_Data_RowList = require(\"../Type.Data.RowList/index.js\");\nvar Semigroup = function (append) {\n    this.append = append;\n};\nvar SemigroupRecord = function (appendRecord) {\n    this.appendRecord = appendRecord;\n};\nvar semigroupVoid = new Semigroup(function (v) {\n    return Data_Void.absurd;\n});\nvar semigroupUnit = new Semigroup(function (v) {\n    return function (v1) {\n        return Data_Unit.unit;\n    };\n});\nvar semigroupString = new Semigroup($foreign.concatString);\nvar semigroupRecordNil = new SemigroupRecord(function (v) {\n    return function (v1) {\n        return function (v2) {\n            return {};\n        };\n    };\n});\nvar semigroupArray = new Semigroup($foreign.concatArray);\nvar appendRecord = function (dict) {\n    return dict.appendRecord;\n};\nvar semigroupRecord = function (dictRowToList) {\n    return function (dictSemigroupRecord) {\n        return new Semigroup(appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value));\n    };\n};\nvar append = function (dict) {\n    return dict.append;\n};\nvar semigroupFn = function (dictSemigroup) {\n    return new Semigroup(function (f) {\n        return function (g) {\n            return function (x) {\n                return append(dictSemigroup)(f(x))(g(x));\n            };\n        };\n    });\n};\nvar semigroupRecordCons = function (dictIsSymbol) {\n    return function (dictCons) {\n        return function (dictSemigroupRecord) {\n            return function (dictSemigroup) {\n                return new SemigroupRecord(function (v) {\n                    return function (ra) {\n                        return function (rb) {\n                            var tail = appendRecord(dictSemigroupRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);\n                            var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);\n                            var insert = Record_Unsafe.unsafeSet(key);\n                            var get = Record_Unsafe.unsafeGet(key);\n                            return insert(append(dictSemigroup)(get(ra))(get(rb)))(tail);\n                        };\n                    };\n                });\n            };\n        };\n    };\n};\nmodule.exports = {\n    Semigroup: Semigroup,\n    append: append,\n    SemigroupRecord: SemigroupRecord,\n    appendRecord: appendRecord,\n    semigroupString: semigroupString,\n    semigroupUnit: semigroupUnit,\n    semigroupVoid: semigroupVoid,\n    semigroupFn: semigroupFn,\n    semigroupArray: semigroupArray,\n    semigroupRecord: semigroupRecord,\n    semigroupRecordNil: semigroupRecordNil,\n    semigroupRecordCons: semigroupRecordCons\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar Data_Ring = require(\"../Data.Ring/index.js\");\nvar Data_Semiring = require(\"../Data.Semiring/index.js\");\nvar Data_Symbol = require(\"../Data.Symbol/index.js\");\nvar Data_Unit = require(\"../Data.Unit/index.js\");\nvar CommutativeRing = function (Ring0) {\n    this.Ring0 = Ring0;\n};\nvar CommutativeRingRecord = function (RingRecord0) {\n    this.RingRecord0 = RingRecord0;\n};\nvar commutativeRingUnit = new CommutativeRing(function () {\n    return Data_Ring.ringUnit;\n});\nvar commutativeRingRecordNil = new CommutativeRingRecord(function () {\n    return Data_Ring.ringRecordNil;\n});\nvar commutativeRingRecordCons = function (dictIsSymbol) {\n    return function (dictCons) {\n        return function (dictCommutativeRingRecord) {\n            return function (dictCommutativeRing) {\n                return new CommutativeRingRecord(function () {\n                    return Data_Ring.ringRecordCons(dictIsSymbol)(dictCons)(dictCommutativeRingRecord.RingRecord0())(dictCommutativeRing.Ring0());\n                });\n            };\n        };\n    };\n};\nvar commutativeRingRecord = function (dictRowToList) {\n    return function (dictCommutativeRingRecord) {\n        return new CommutativeRing(function () {\n            return Data_Ring.ringRecord(dictRowToList)(dictCommutativeRingRecord.RingRecord0());\n        });\n    };\n};\nvar commutativeRingNumber = new CommutativeRing(function () {\n    return Data_Ring.ringNumber;\n});\nvar commutativeRingInt = new CommutativeRing(function () {\n    return Data_Ring.ringInt;\n});\nvar commutativeRingFn = function (dictCommutativeRing) {\n    return new CommutativeRing(function () {\n        return Data_Ring.ringFn(dictCommutativeRing.Ring0());\n    });\n};\nmodule.exports = {\n    CommutativeRing: CommutativeRing,\n    CommutativeRingRecord: CommutativeRingRecord,\n    commutativeRingInt: commutativeRingInt,\n    commutativeRingNumber: commutativeRingNumber,\n    commutativeRingUnit: commutativeRingUnit,\n    commutativeRingFn: commutativeRingFn,\n    commutativeRingRecord: commutativeRingRecord,\n    commutativeRingRecordNil: commutativeRingRecordNil,\n    commutativeRingRecordCons: commutativeRingRecordCons\n};\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '9.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","/*              ___                 ______\n               /  /\\               /  ___/\\\n        ______/  / / _______    __/  /___\\/\n       /  ___   / / /  ___  \\  /_   __/\\\n      /  /\\_/  / / /  /__/  /\\ \\/  /\\_\\/\n     /  / //  / / /  ______/ / /  / /\n    /  /_//  / / /  /______\\/ /  / /\n    \\_______/ /  \\_______/\\  /__/ /\n     \\______\\/    \\______\\/  \\__*/\n\n//. # sanctuary-def\n//.\n//. sanctuary-def is a run-time type system for JavaScript. It facilitates\n//. the definition of curried JavaScript functions which are explicit about\n//. the number of arguments to which they may be applied and the types of\n//. those arguments.\n//.\n//. It is conventional to import the package as `$`:\n//.\n//. ```javascript\n//. const $ = require ('sanctuary-def');\n//. ```\n//.\n//. The next step is to define an environment. An environment is an array\n//. of [types][]. [`env`][] is an environment containing all the built-in\n//. JavaScript types. It may be used as the basis for environments which\n//. include custom types in addition to the built-in types:\n//.\n//. ```javascript\n//. //    Integer :: Type\n//. const Integer = '...';\n//.\n//. //    NonZeroInteger :: Type\n//. const NonZeroInteger = '...';\n//.\n//. //    env :: Array Type\n//. const env = $.env.concat ([Integer, NonZeroInteger]);\n//. ```\n//.\n//. Type constructors such as `List :: Type -> Type` cannot be included in\n//. an environment as they're not of the correct type. One could, though,\n//. use a type constructor to define a fixed number of concrete types:\n//.\n//. ```javascript\n//. //    env :: Array Type\n//. const env = $.env.concat ([\n//.   List ($.Number),                // :: Type\n//.   List ($.String),                // :: Type\n//.   List (List ($.Number)),         // :: Type\n//.   List (List ($.String)),         // :: Type\n//.   List (List (List ($.Number))),  // :: Type\n//.   List (List (List ($.String))),  // :: Type\n//. ]);\n//. ```\n//.\n//. Not only would this be tedious, but one could never enumerate all possible\n//. types as there are infinitely many. Instead, one should use [`Unknown`][]:\n//.\n//. ```javascript\n//. //    env :: Array Type\n//. const env = $.env.concat ([List ($.Unknown)]);\n//. ```\n//.\n//. The next step is to define a `def` function for the environment:\n//.\n//. ```javascript\n//. const def = $.create ({checkTypes: true, env});\n//. ```\n//.\n//. The `checkTypes` option determines whether type checking is enabled.\n//. This allows one to only pay the performance cost of run-time type checking\n//. during development. For example:\n//.\n//. ```javascript\n//. const def = $.create ({\n//.   checkTypes: process.env.NODE_ENV === 'development',\n//.   env,\n//. });\n//. ```\n//.\n//. `def` is a function for defining functions. For example:\n//.\n//. ```javascript\n//. //    add :: Number -> Number -> Number\n//. const add =\n//. def ('add')\n//.     ({})\n//.     ([$.Number, $.Number, $.Number])\n//.     (x => y => x + y);\n//. ```\n//.\n//. `[$.Number, $.Number, $.Number]` specifies that `add` takes two arguments\n//. of type `Number`, one at a time, and returns a value of type `Number`.\n//.\n//. Applying `add` to two arguments, one at a time, gives the expected result:\n//.\n//. ```javascript\n//. add (2) (2);\n//. // => 4\n//. ```\n//.\n//. Applying `add` to multiple arguments at once results in an exception being\n//. thrown:\n//.\n//. ```javascript\n//. add (2, 2, 2);\n//. // ! TypeError: ‘add’ applied to the wrong number of arguments\n//. //\n//. //   add :: Number -> Number -> Number\n//. //          ^^^^^^\n//. //            1\n//. //\n//. //   Expected one argument but received three arguments:\n//. //\n//. //     - 2\n//. //     - 2\n//. //     - 2\n//. ```\n//.\n//. Applying `add` to one argument produces a function awaiting the remaining\n//. argument. This is known as partial application. Partial application allows\n//. more specific functions to be defined in terms of more general ones:\n//.\n//. ```javascript\n//. //    inc :: Number -> Number\n//. const inc = add (1);\n//.\n//. inc (7);\n//. // => 8\n//. ```\n//.\n//. JavaScript's implicit type coercion often obfuscates the source of type\n//. errors. Consider the following function:\n//.\n//. ```javascript\n//. //    _add :: Number -> Number -> Number\n//. const _add = x => y => x + y;\n//. ```\n//.\n//. The type signature indicates that `_add` takes arguments of type `Number`,\n//. but this is not enforced. This allows type errors to be silently ignored:\n//.\n//. ```javascript\n//. _add ('2') ('2');\n//. // => '22'\n//. ```\n//.\n//. `add`, on the other hand, throws if applied to arguments of the wrong\n//. types:\n//.\n//. ```javascript\n//. add ('2') ('2');\n//. // ! TypeError: Invalid value\n//. //\n//. //   add :: Number -> Number -> Number\n//. //          ^^^^^^\n//. //            1\n//. //\n//. //   1)  \"2\" :: String\n//. //\n//. //   The value at position 1 is not a member of ‘Number’.\n//. ```\n//.\n//. Type checking is performed as arguments are provided (rather than once all\n//. arguments have been provided), so type errors are reported early:\n//.\n//. ```javascript\n//. add ('X');\n//. // ! TypeError: Invalid value\n//. //\n//. //   add :: Number -> Number -> Number\n//. //          ^^^^^^\n//. //            1\n//. //\n//. //   1)  \"X\" :: String\n//. //\n//. //   The value at position 1 is not a member of ‘Number’.\n//. ```\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f (require ('sanctuary-either'),\n                        require ('sanctuary-show'),\n                        require ('sanctuary-type-classes'),\n                        require ('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define (['sanctuary-either',\n             'sanctuary-show',\n             'sanctuary-type-classes',\n             'sanctuary-type-identifiers'],\n            f);\n  } else {\n    self.sanctuaryDef = f (self.sanctuaryEither,\n                           self.sanctuaryShow,\n                           self.sanctuaryTypeClasses,\n                           self.sanctuaryTypeIdentifiers);\n  }\n\n} (function(Either, show, Z, type) {\n\n  'use strict';\n\n  var MAX_SAFE_INTEGER = Math.pow (2, 53) - 1;\n  var MIN_SAFE_INTEGER = -MAX_SAFE_INTEGER;\n\n  var slice             = Array.prototype.slice;\n  var hasOwnProperty    = Object.prototype.hasOwnProperty;\n  var toString          = Object.prototype.toString;\n\n  var inspect = (function() {\n    /* istanbul ignore else */\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n      var util = require ('util');\n      /* istanbul ignore else */\n      if (typeof util.inspect.custom === 'symbol') return util.inspect.custom;\n    }\n    return 'inspect';\n  } ());\n\n  //  Left :: a -> Either a b\n  var Left = Either.Left;\n\n  //  Right :: b -> Either a b\n  var Right = Either.Right;\n\n  //  K :: a -> b -> a\n  function K(x) { return function(y) { return x; }; }\n\n  //  W :: (a -> a -> b) -> a -> b\n  function W(f) { return function(x) { return f (x) (x); }; }\n\n  //  always0 :: a -> () -> a\n  function always0(x) { return function() { return x; }; }\n\n  //  always2 :: a -> (b, c) -> a\n  function always2(x) { return function(y, z) { return x; }; }\n\n  //  compose :: (b -> c, a -> b) -> (a -> c)\n  function compose(f, g) {\n    return function(x) {\n      return f (g (x));\n    };\n  }\n\n  //  id :: a -> a\n  function id(x) { return x; }\n\n  //  init :: Array a -> Array a\n  function init(xs) { return xs.slice (0, -1); }\n\n  //  isEmpty :: Array a -> Boolean\n  function isEmpty(xs) { return xs.length === 0; }\n\n  //  isPrefix :: Array a -> Array a -> Boolean\n  function isPrefix(candidate) {\n    return function(xs) {\n      if (candidate.length > xs.length) return false;\n      for (var idx = 0; idx < candidate.length; idx += 1) {\n        if (candidate[idx] !== xs[idx]) return false;\n      }\n      return true;\n    };\n  }\n\n  //  joinWith :: (String, Array String) -> String\n  function joinWith(separator, ss) {\n    return ss.join (separator);\n  }\n\n  //  last :: Array a -> a\n  function last(xs) { return xs[xs.length - 1]; }\n\n  //  memberOf :: Array a -> a -> Boolean\n  function memberOf(xs) {\n    return function(y) {\n      return xs.some (function(x) { return Z.equals (x, y); });\n    };\n  }\n\n  //  or :: (Array a, Array a) -> Array a\n  function or(xs, ys) { return isEmpty (xs) ? ys : xs; }\n\n  //  strRepeat :: (String, Integer) -> String\n  function strRepeat(s, times) {\n    return joinWith (s, Array (times + 1));\n  }\n\n  //  r :: Char -> String -> String\n  function r(c) {\n    return function(s) {\n      return strRepeat (c, s.length);\n    };\n  }\n\n  //  _ :: String -> String\n  var _ = r (' ');\n\n  //  sortedKeys :: Object -> Array String\n  function sortedKeys(o) {\n    return (Object.keys (o)).sort ();\n  }\n\n  //  stripOutermostParens :: String -> String\n  function stripOutermostParens(s) {\n    return s.slice ('('.length, -')'.length);\n  }\n\n  //  toMarkdownList :: (String, String, a -> String, Array a) -> String\n  function toMarkdownList(empty, s, f, xs) {\n    return isEmpty (xs) ?\n      empty :\n      Z.reduce (function(s, x) { return s + '  - ' + f (x) + '\\n'; }, s, xs);\n  }\n\n  //  trimTrailingSpaces :: String -> String\n  function trimTrailingSpaces(s) {\n    return s.replace (/[ ]+$/gm, '');\n  }\n\n  //  unless :: (Boolean, (a -> a), a) -> a\n  function unless(bool, f, x) {\n    return bool ? x : f (x);\n  }\n\n  //  when :: (Boolean, (a -> a), a) -> a\n  function when(bool, f, x) {\n    return bool ? f (x) : x;\n  }\n\n  //  wrap :: String -> String -> String -> String\n  function wrap(prefix) {\n    return function(suffix) {\n      return function(s) {\n        return prefix + s + suffix;\n      };\n    };\n  }\n\n  //  parenthesize :: String -> String\n  var parenthesize = wrap ('(') (')');\n\n  //  q :: String -> String\n  var q = wrap ('\\u2018') ('\\u2019');\n\n  //  stripNamespace :: String -> String\n  function stripNamespace(s) { return s.slice (s.indexOf ('/') + 1); }\n\n  //  _Type :: ... -> Type\n  function _Type(\n    type,       // :: String\n    name,       // :: String\n    url,        // :: String\n    format,     // :: (String -> String, String -> String -> String) -> String\n    test,       // :: Any -> Boolean\n    keys,       // :: Array String\n    types       // :: StrMap { extractor :: a -> Array b, type :: Type }\n  ) {\n    this._test = test;\n    this.format = format;\n    this.keys = keys;\n    this.name = name;\n    this.type = type;\n    this.types = types;\n    this.url = url;\n  }\n\n  _Type['@@type'] = 'sanctuary-def/Type';\n\n  //  Type#fantasy-land/equals :: Type ~> Type -> Boolean\n  _Type.prototype['fantasy-land/equals'] = function(other) {\n    return (\n      Z.equals (this.type, other.type) &&\n      Z.equals (this.name, other.name) &&\n      Z.equals (this.url, other.url) &&\n      Z.equals (this.keys, other.keys) &&\n      this.keys.every (function(k) {\n        return Z.equals (this.types[k].type, other.types[k].type);\n      }, this)\n    );\n  };\n\n  _Type.prototype.validate = function(x) {\n    if (!(this._test (x))) return Left ({value: x, propPath: []});\n    for (var idx = 0; idx < this.keys.length; idx += 1) {\n      var k = this.keys[idx];\n      var t = this.types[k];\n      for (var idx2 = 0, ys = t.extractor (x); idx2 < ys.length; idx2 += 1) {\n        var result = t.type.validate (ys[idx2]);\n        if (result.isLeft) {\n          var value = result.value.value;\n          var propPath = Z.concat ([k], result.value.propPath);\n          return Left ({value: value, propPath: propPath});\n        }\n      }\n    }\n    return Right (x);\n  };\n\n  _Type.prototype['@@show'] = function() {\n    return this.format (id, K (id));\n  };\n\n  var BINARY        = 'BINARY';\n  var FUNCTION      = 'FUNCTION';\n  var INCONSISTENT  = 'INCONSISTENT';\n  var NO_ARGUMENTS  = 'NO_ARGUMENTS';\n  var NULLARY       = 'NULLARY';\n  var RECORD        = 'RECORD';\n  var UNARY         = 'UNARY';\n  var UNKNOWN       = 'UNKNOWN';\n  var VARIABLE      = 'VARIABLE';\n\n  //  Inconsistent :: Type\n  var Inconsistent =\n  new _Type (INCONSISTENT, '', '', always2 ('???'), K (false), [], {});\n\n  //  NoArguments :: Type\n  var NoArguments =\n  new _Type (NO_ARGUMENTS, '', '', always2 ('()'), K (true), [], {});\n\n  //  typeEq :: String -> a -> Boolean\n  function typeEq(name) {\n    return function(x) {\n      return type (x) === name;\n    };\n  }\n\n  //  typeofEq :: String -> a -> Boolean\n  function typeofEq(typeof_) {\n    return function(x) {\n      // eslint-disable-next-line valid-typeof\n      return typeof x === typeof_;\n    };\n  }\n\n  //  functionUrl :: String -> String\n  function functionUrl(name) {\n    var version = '0.18.1';  // updated programmatically\n    return 'https://github.com/sanctuary-js/sanctuary-def/tree/v' + version +\n           '#' + stripNamespace (name);\n  }\n\n  //  NullaryTypeWithUrl :: (String, Any -> Boolean) -> Type\n  function NullaryTypeWithUrl(name, test) {\n    return NullaryType (name) (functionUrl (name)) (test);\n  }\n\n  //  EnumTypeWithUrl :: (String, Array Any) -> Type\n  function EnumTypeWithUrl(name, members) {\n    return EnumType (name) (functionUrl (name)) (members);\n  }\n\n  //  UnaryTypeWithUrl ::\n  //    (String, Any -> Boolean, t a -> Array a) -> (Type -> Type)\n  function UnaryTypeWithUrl(name, test, _1) {\n    return UnaryType (name) (functionUrl (name)) (test) (_1);\n  }\n\n  //  BinaryTypeWithUrl ::\n  //    (String, Any -> Boolean, t a b -> Array a, t a b -> Array b) ->\n  //      ((Type, Type) -> Type)\n  function BinaryTypeWithUrl(name, test, _1, _2) {\n    return BinaryType (name) (functionUrl (name)) (test) (_1) (_2);\n  }\n\n  //. ### Types\n  //.\n  //. Conceptually, a type is a set of values. One can think of a value of\n  //. type `Type` as a function of type `Any -> Boolean` which tests values\n  //. for membership in the set (though this is an oversimplification).\n\n  //# Any :: Type\n  //.\n  //. Type comprising every JavaScript value.\n  var Any = NullaryTypeWithUrl ('sanctuary-def/Any', K (true));\n\n  //# AnyFunction :: Type\n  //.\n  //. Type comprising every Function value.\n  var AnyFunction = NullaryTypeWithUrl ('Function', typeofEq ('function'));\n\n  //# Arguments :: Type\n  //.\n  //. Type comprising every [`arguments`][arguments] object.\n  var Arguments = NullaryTypeWithUrl ('Arguments', typeEq ('Arguments'));\n\n  //# Array :: Type -> Type\n  //.\n  //. Constructor for homogeneous Array types.\n  var Array_ = UnaryTypeWithUrl ('Array', typeEq ('Array'), id);\n\n  //# Array0 :: Type\n  //.\n  //. Type whose sole member is `[]`.\n  var Array0 = NullaryTypeWithUrl (\n    'sanctuary-def/Array0',\n    function(x) { return typeEq ('Array') (x) && x.length === 0; }\n  );\n\n  //# Array1 :: Type -> Type\n  //.\n  //. Constructor for singleton Array types.\n  var Array1 = UnaryTypeWithUrl (\n    'sanctuary-def/Array1',\n    function(x) { return typeEq ('Array') (x) && x.length === 1; },\n    id\n  );\n\n  //# Array2 :: Type -> Type -> Type\n  //.\n  //. Constructor for heterogeneous Array types of length 2. `['foo', true]` is\n  //. a member of `Array2 String Boolean`.\n  var Array2 = BinaryTypeWithUrl (\n    'sanctuary-def/Array2',\n    function(x) { return typeEq ('Array') (x) && x.length === 2; },\n    function(array2) { return [array2[0]]; },\n    function(array2) { return [array2[1]]; }\n  );\n\n  //# Boolean :: Type\n  //.\n  //. Type comprising `true` and `false`.\n  var Boolean_ = NullaryTypeWithUrl ('Boolean', typeofEq ('boolean'));\n\n  //# Date :: Type\n  //.\n  //. Type comprising every Date value.\n  var Date_ = NullaryTypeWithUrl ('Date', typeEq ('Date'));\n\n  //# Error :: Type\n  //.\n  //. Type comprising every Error value, including values of more specific\n  //. constructors such as [`SyntaxError`][] and [`TypeError`][].\n  var Error_ = NullaryTypeWithUrl ('Error', typeEq ('Error'));\n\n  //# FiniteNumber :: Type\n  //.\n  //. Type comprising every [`ValidNumber`][] value except `Infinity` and\n  //. `-Infinity`.\n  var FiniteNumber = NullaryTypeWithUrl (\n    'sanctuary-def/FiniteNumber',\n    function(x) { return ValidNumber._test (x) && isFinite (x); }\n  );\n\n  //  augmentThunk :: NonEmpty (Array Type) -> NonEmpty (Array Type)\n  function augmentThunk(types) {\n    return types.length === 1 ? Z.concat ([NoArguments], types) : types;\n  }\n\n  //# Function :: NonEmpty (Array Type) -> Type\n  //.\n  //. Constructor for Function types.\n  //.\n  //. Examples:\n  //.\n  //.   - `$.Function ([$.Date, $.String])` represents the `Date -> String`\n  //.     type; and\n  //.   - `$.Function ([a, b, a])` represents the `(a, b) -> a` type.\n  function Function_(_types) {\n    var types = augmentThunk (_types);\n\n    function format(outer, inner) {\n      var xs = types.map (function(t, idx) {\n        return unless (t.type === RECORD || isEmpty (t.keys),\n                       stripOutermostParens,\n                       inner ('$' + show (idx + 1)) (show (t)));\n      });\n      var parenthesize = wrap (outer ('(')) (outer (')'));\n      return parenthesize (unless (types.length === 2,\n                                   parenthesize,\n                                   joinWith (outer (', '), init (xs))) +\n                           outer (' -> ') +\n                           last (xs));\n    }\n\n    var test = AnyFunction._test;\n\n    var $keys = [];\n    var $types = {};\n    types.forEach (function(t, idx) {\n      var k = '$' + show (idx + 1);\n      $keys.push (k);\n      $types[k] = {extractor: K ([]), type: t};\n    });\n\n    return new _Type (FUNCTION, '', '', format, test, $keys, $types);\n  }\n\n  //# GlobalRegExp :: Type\n  //.\n  //. Type comprising every [`RegExp`][] value whose `global` flag is `true`.\n  //.\n  //. See also [`NonGlobalRegExp`][].\n  var GlobalRegExp = NullaryTypeWithUrl (\n    'sanctuary-def/GlobalRegExp',\n    function(x) { return RegExp_._test (x) && x.global; }\n  );\n\n  //# HtmlElement :: Type\n  //.\n  //. Type comprising every [HTML element][].\n  var HtmlElement = NullaryTypeWithUrl (\n    'sanctuary-def/HtmlElement',\n    function(x) {\n      return /^\\[object HTML.+Element\\]$/.test (toString.call (x));\n    }\n  );\n\n  //# Integer :: Type\n  //.\n  //. Type comprising every integer in the range\n  //. [[`Number.MIN_SAFE_INTEGER`][min] .. [`Number.MAX_SAFE_INTEGER`][max]].\n  var Integer = NullaryTypeWithUrl (\n    'sanctuary-def/Integer',\n    function(x) {\n      return ValidNumber._test (x) &&\n             Math.floor (x) === x &&\n             x >= MIN_SAFE_INTEGER &&\n             x <= MAX_SAFE_INTEGER;\n    }\n  );\n\n  //# NegativeFiniteNumber :: Type\n  //.\n  //. Type comprising every [`FiniteNumber`][] value less than zero.\n  var NegativeFiniteNumber = NullaryTypeWithUrl (\n    'sanctuary-def/NegativeFiniteNumber',\n    function(x) { return FiniteNumber._test (x) && x < 0; }\n  );\n\n  //# NegativeInteger :: Type\n  //.\n  //. Type comprising every [`Integer`][] value less than zero.\n  var NegativeInteger = NullaryTypeWithUrl (\n    'sanctuary-def/NegativeInteger',\n    function(x) { return Integer._test (x) && x < 0; }\n  );\n\n  //# NegativeNumber :: Type\n  //.\n  //. Type comprising every [`Number`][] value less than zero.\n  var NegativeNumber = NullaryTypeWithUrl (\n    'sanctuary-def/NegativeNumber',\n    function(x) { return Number_._test (x) && x < 0; }\n  );\n\n  //# NonEmpty :: Type -> Type\n  //.\n  //. Constructor for non-empty types. `$.NonEmpty ($.String)`, for example, is\n  //. the type comprising every [`String`][] value except `''`.\n  //.\n  //. The given type must satisfy the [Monoid][] and [Setoid][] specifications.\n  var NonEmpty = UnaryTypeWithUrl (\n    'sanctuary-def/NonEmpty',\n    function(x) {\n      return Z.Monoid.test (x) &&\n             Z.Setoid.test (x) &&\n             !(Z.equals (x, Z.empty (x.constructor)));\n    },\n    function(monoid) { return [monoid]; }\n  );\n\n  //# NonGlobalRegExp :: Type\n  //.\n  //. Type comprising every [`RegExp`][] value whose `global` flag is `false`.\n  //.\n  //. See also [`GlobalRegExp`][].\n  var NonGlobalRegExp = NullaryTypeWithUrl (\n    'sanctuary-def/NonGlobalRegExp',\n    function(x) { return RegExp_._test (x) && !x.global; }\n  );\n\n  //# NonNegativeInteger :: Type\n  //.\n  //. Type comprising every non-negative [`Integer`][] value (including `-0`).\n  //. Also known as the set of natural numbers under ISO 80000-2:2009.\n  var NonNegativeInteger = NullaryTypeWithUrl (\n    'sanctuary-def/NonNegativeInteger',\n    function(x) { return Integer._test (x) && x >= 0; }\n  );\n\n  //# NonZeroFiniteNumber :: Type\n  //.\n  //. Type comprising every [`FiniteNumber`][] value except `0` and `-0`.\n  var NonZeroFiniteNumber = NullaryTypeWithUrl (\n    'sanctuary-def/NonZeroFiniteNumber',\n    function(x) { return FiniteNumber._test (x) && x !== 0; }\n  );\n\n  //# NonZeroInteger :: Type\n  //.\n  //. Type comprising every [`Integer`][] value except `0` and `-0`.\n  var NonZeroInteger = NullaryTypeWithUrl (\n    'sanctuary-def/NonZeroInteger',\n    function(x) { return Integer._test (x) && x !== 0; }\n  );\n\n  //# NonZeroValidNumber :: Type\n  //.\n  //. Type comprising every [`ValidNumber`][] value except `0` and `-0`.\n  var NonZeroValidNumber = NullaryTypeWithUrl (\n    'sanctuary-def/NonZeroValidNumber',\n    function(x) { return ValidNumber._test (x) && x !== 0; }\n  );\n\n  //# Null :: Type\n  //.\n  //. Type whose sole member is `null`.\n  var Null = NullaryTypeWithUrl ('Null', typeEq ('Null'));\n\n  //# Nullable :: Type -> Type\n  //.\n  //. Constructor for types which include `null` as a member.\n  var Nullable = UnaryTypeWithUrl (\n    'sanctuary-def/Nullable',\n    K (true),\n    function(nullable) {\n      // eslint-disable-next-line eqeqeq\n      return nullable === null ? [] : [nullable];\n    }\n  );\n\n  //# Number :: Type\n  //.\n  //. Type comprising every primitive Number value (including `NaN`).\n  var Number_ = NullaryTypeWithUrl ('Number', typeofEq ('number'));\n\n  //# Object :: Type\n  //.\n  //. Type comprising every \"plain\" Object value. Specifically, values\n  //. created via:\n  //.\n  //.   - object literal syntax;\n  //.   - [`Object.create`][]; or\n  //.   - the `new` operator in conjunction with `Object` or a custom\n  //.     constructor function.\n  var Object_ = NullaryTypeWithUrl ('Object', typeEq ('Object'));\n\n  //# PositiveFiniteNumber :: Type\n  //.\n  //. Type comprising every [`FiniteNumber`][] value greater than zero.\n  var PositiveFiniteNumber = NullaryTypeWithUrl (\n    'sanctuary-def/PositiveFiniteNumber',\n    function(x) { return FiniteNumber._test (x) && x > 0; }\n  );\n\n  //# PositiveInteger :: Type\n  //.\n  //. Type comprising every [`Integer`][] value greater than zero.\n  var PositiveInteger = NullaryTypeWithUrl (\n    'sanctuary-def/PositiveInteger',\n    function(x) { return Integer._test (x) && x > 0; }\n  );\n\n  //# PositiveNumber :: Type\n  //.\n  //. Type comprising every [`Number`][] value greater than zero.\n  var PositiveNumber = NullaryTypeWithUrl (\n    'sanctuary-def/PositiveNumber',\n    function(x) { return Number_._test (x) && x > 0; }\n  );\n\n  //# RegExp :: Type\n  //.\n  //. Type comprising every RegExp value.\n  var RegExp_ = NullaryTypeWithUrl ('RegExp', typeEq ('RegExp'));\n\n  //# RegexFlags :: Type\n  //.\n  //. Type comprising the canonical RegExp flags:\n  //.\n  //.   - `''`\n  //.   - `'g'`\n  //.   - `'i'`\n  //.   - `'m'`\n  //.   - `'gi'`\n  //.   - `'gm'`\n  //.   - `'im'`\n  //.   - `'gim'`\n  var RegexFlags = EnumTypeWithUrl (\n    'sanctuary-def/RegexFlags',\n    ['', 'g', 'i', 'm', 'gi', 'gm', 'im', 'gim']\n  );\n\n  //# StrMap :: Type -> Type\n  //.\n  //. Constructor for homogeneous Object types.\n  //.\n  //. `{foo: 1, bar: 2, baz: 3}`, for example, is a member of `StrMap Number`;\n  //. `{foo: 1, bar: 2, baz: 'XXX'}` is not.\n  var StrMap = UnaryTypeWithUrl (\n    'sanctuary-def/StrMap',\n    Object_._test,\n    function(strMap) {\n      return Z.reduce (function(xs, x) { xs.push (x); return xs; },\n                       [],\n                       strMap);\n    }\n  );\n\n  //# String :: Type\n  //.\n  //. Type comprising every primitive String value.\n  var String_ = NullaryTypeWithUrl ('String', typeofEq ('string'));\n\n  //# Symbol :: Type\n  //.\n  //. Type comprising every Symbol value.\n  var Symbol_ = NullaryTypeWithUrl ('Symbol', typeofEq ('symbol'));\n\n  //# Type :: Type\n  //.\n  //. Type comprising every `Type` value.\n  var Type = NullaryTypeWithUrl ('Type', typeEq ('sanctuary-def/Type'));\n\n  //# TypeClass :: Type\n  //.\n  //. Type comprising every [`TypeClass`][] value.\n  var TypeClass = NullaryTypeWithUrl (\n    'TypeClass',\n    typeEq ('sanctuary-type-classes/TypeClass')\n  );\n\n  //# Undefined :: Type\n  //.\n  //. Type whose sole member is `undefined`.\n  var Undefined = NullaryTypeWithUrl ('Undefined', typeEq ('Undefined'));\n\n  //# Unknown :: Type\n  //.\n  //. Type used to represent missing type information. The type of `[]`,\n  //. for example, is `Array ???`.\n  //.\n  //. May be used with type constructors when defining environments. Given a\n  //. type constructor `List :: Type -> Type`, one could use `List ($.Unknown)`\n  //. to include an infinite number of types in an environment:\n  //.\n  //.   - `List Number`\n  //.   - `List String`\n  //.   - `List (List Number)`\n  //.   - `List (List String)`\n  //.   - `List (List (List Number))`\n  //.   - `List (List (List String))`\n  //.   - `...`\n  var Unknown =\n  new _Type (UNKNOWN, '', '', always2 ('Unknown'), K (true), [], {});\n\n  //# ValidDate :: Type\n  //.\n  //. Type comprising every [`Date`][] value except `new Date (NaN)`.\n  var ValidDate = NullaryTypeWithUrl (\n    'sanctuary-def/ValidDate',\n    function(x) { return Date_._test (x) && !isNaN (x.valueOf ()); }\n  );\n\n  //# ValidNumber :: Type\n  //.\n  //. Type comprising every [`Number`][] value except `NaN`.\n  var ValidNumber = NullaryTypeWithUrl (\n    'sanctuary-def/ValidNumber',\n    function(x) { return Number_._test (x) && !isNaN (x); }\n  );\n\n  //# env :: Array Type\n  //.\n  //. An array of [types][]:\n  //.\n  //.   - <code>[AnyFunction](#AnyFunction)</code>\n  //.   - <code>[Arguments](#Arguments)</code>\n  //.   - <code>[Array](#Array) ([Unknown](#Unknown))</code>\n  //.   - <code>[Boolean](#Boolean)</code>\n  //.   - <code>[Date](#Date)</code>\n  //.   - <code>[Error](#Error)</code>\n  //.   - <code>[HtmlElement](#HtmlElement)</code>\n  //.   - <code>[Null](#Null)</code>\n  //.   - <code>[Number](#Number)</code>\n  //.   - <code>[Object](#Object)</code>\n  //.   - <code>[RegExp](#RegExp)</code>\n  //.   - <code>[StrMap](#StrMap) ([Unknown](#Unknown))</code>\n  //.   - <code>[String](#String)</code>\n  //.   - <code>[Symbol](#Symbol)</code>\n  //.   - <code>[Undefined](#Undefined)</code>\n  var env = [\n    AnyFunction,\n    Arguments,\n    Array_ (Unknown),\n    Boolean_,\n    Date_,\n    Error_,\n    HtmlElement,\n    Null,\n    Number_,\n    Object_,\n    RegExp_,\n    StrMap (Unknown),\n    String_,\n    Symbol_,\n    Undefined\n  ];\n\n  //  Unchecked :: String -> Type\n  function Unchecked(s) { return NullaryType (s) ('') (K (true)); }\n\n  //  production :: Boolean\n  var production =\n    typeof process !== 'undefined' &&\n    /* global process:false */\n    process != null &&\n    process.env != null &&\n    process.env.NODE_ENV === 'production';\n\n  var def = _create ({checkTypes: !production, env: env});\n\n  //  numbers :: Array String\n  var numbers = [\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n    'nine'\n  ];\n\n  //  numArgs :: Integer -> String\n  function numArgs(n) {\n    return (n < numbers.length ? numbers[n] : show (n)) + ' ' +\n           (n === 1 ? 'argument' : 'arguments');\n  }\n\n  //  expandUnknown :: ... -> Array Type\n  function expandUnknown(\n    env,            // :: Array Type\n    seen,           // :: Array Object\n    value,          // :: Any\n    r               // :: { extractor :: a -> Array b, type :: Type }\n  ) {\n    return r.type.type === UNKNOWN ?\n      _determineActualTypes (env, seen, r.extractor (value)) :\n      [r.type];\n  }\n\n  //  _determineActualTypes :: ... -> Array Type\n  function _determineActualTypes(\n    env,            // :: Array Type\n    seen,           // :: Array Object\n    values          // :: Array Any\n  ) {\n    function refine(types, value) {\n      var seen$;\n      if (typeof value === 'object' && value != null ||\n          typeof value === 'function') {\n        //  Abort if a circular reference is encountered; add the current\n        //  object to the array of seen objects otherwise.\n        if (seen.indexOf (value) >= 0) return [];\n        seen$ = Z.concat (seen, [value]);\n      } else {\n        seen$ = seen;\n      }\n      return Z.chain (function(t) {\n        return (\n          t.name === 'sanctuary-def/Nullable' || (t.validate (value)).isLeft ?\n            [] :\n          t.type === UNARY ?\n            Z.map (fromUnaryType (t),\n                   expandUnknown (env, seen$, value, t.types.$1)) :\n          t.type === BINARY ?\n            xprod (t,\n                   expandUnknown (env, seen$, value, t.types.$1),\n                   expandUnknown (env, seen$, value, t.types.$2)) :\n          // else\n            [t]\n        );\n      }, types);\n    }\n\n    return isEmpty (values) ?\n      [Unknown] :\n      or (Z.reduce (refine, env, values), [Inconsistent]);\n  }\n\n  //  isConsistent :: Type -> Boolean\n  function isConsistent(t) {\n    return t.type === UNARY   ? isConsistent (t.types.$1.type) :\n           t.type === BINARY  ? isConsistent (t.types.$1.type) &&\n                                isConsistent (t.types.$2.type) :\n           /* else */           t.type !== INCONSISTENT;\n  }\n\n  //  determineActualTypesStrict :: (Array Type, Array Any) -> Array Type\n  function determineActualTypesStrict(env, values) {\n    return Z.filter (isConsistent,\n                     _determineActualTypes (env, [], values));\n  }\n\n  //  determineActualTypesLoose :: (Array Type, Array Any) -> Array Type\n  function determineActualTypesLoose(env, values) {\n    return Z.reject (function(t) { return t.type === INCONSISTENT; },\n                     _determineActualTypes (env, [], values));\n  }\n\n  //  TypeInfo = { name :: String\n  //             , constraints :: StrMap (Array TypeClass)\n  //             , types :: NonEmpty (Array Type) }\n  //\n  //  TypeVarMap = StrMap { types :: Array Type\n  //                      , valuesByPath :: StrMap (Array Any) }\n  //\n  //  PropPath = Array (Number | String)\n\n  //  updateTypeVarMap :: ... -> TypeVarMap\n  function updateTypeVarMap(\n    env,            // :: Array Type\n    typeVarMap,     // :: TypeVarMap\n    typeVar,        // :: Type\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    values          // :: Array Any\n  ) {\n    var $typeVarMap = {};\n    for (var typeVarName in typeVarMap) {\n      var entry = typeVarMap[typeVarName];\n      var $entry = {types: entry.types.slice (), valuesByPath: {}};\n      for (var k in entry.valuesByPath) {\n        $entry.valuesByPath[k] = entry.valuesByPath[k].slice ();\n      }\n      $typeVarMap[typeVarName] = $entry;\n    }\n    if (!(hasOwnProperty.call ($typeVarMap, typeVar.name))) {\n      $typeVarMap[typeVar.name] = {types: env.slice (), valuesByPath: {}};\n    }\n\n    var key = JSON.stringify (Z.concat ([index], propPath));\n    if (!(hasOwnProperty.call ($typeVarMap[typeVar.name].valuesByPath, key))) {\n      $typeVarMap[typeVar.name].valuesByPath[key] = [];\n    }\n\n    var isNullaryTypeVar = isEmpty (typeVar.keys);\n    var isValid = test (env);\n\n    function expandUnknownStrict(value, r) {\n      return Z.filter (isConsistent, expandUnknown (env, [], value, r));\n    }\n\n    values.forEach (function(value) {\n      $typeVarMap[typeVar.name].valuesByPath[key].push (value);\n      $typeVarMap[typeVar.name].types = Z.chain (function(t) {\n        return (\n          t.keys.length < typeVar.keys.length || !isValid (t) (value) ?\n            [] :\n          isNullaryTypeVar && t.type === UNARY ?\n            Z.map (fromUnaryType (t),\n                   expandUnknownStrict (value, t.types.$1)) :\n          isNullaryTypeVar && t.type === BINARY ?\n            xprod (t,\n                   expandUnknownStrict (value, t.types.$1),\n                   expandUnknownStrict (value, t.types.$2)) :\n          // else\n            [t]\n        );\n      }, $typeVarMap[typeVar.name].types);\n    });\n\n    return $typeVarMap;\n  }\n\n  //  underlineTypeVars :: (TypeInfo, StrMap (Array Any)) -> String\n  function underlineTypeVars(typeInfo, valuesByPath) {\n    //  Note: Sorting these keys lexicographically is not \"correct\", but it\n    //  does the right thing for indexes less than 10.\n    var paths = Z.map (JSON.parse, sortedKeys (valuesByPath));\n    return underline (\n      typeInfo,\n      K (K (_)),\n      function(index) {\n        return function(f) {\n          return function(t) {\n            return function(propPath) {\n              var indexedPropPath = Z.concat ([index], propPath);\n              return function(s) {\n                if (paths.some (isPrefix (indexedPropPath))) {\n                  var key = JSON.stringify (indexedPropPath);\n                  if (!(hasOwnProperty.call (valuesByPath, key))) return s;\n                  if (!(isEmpty (valuesByPath[key]))) return f (s);\n                }\n                return _ (s);\n              };\n            };\n          };\n        };\n      }\n    );\n  }\n\n  //  satisfactoryTypes :: ... -> Either (() -> Error)\n  //                                     { typeVarMap :: TypeVarMap\n  //                                     , types :: Array Type }\n  function satisfactoryTypes(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    typeVarMap,     // :: TypeVarMap\n    expType,        // :: Type\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    values          // :: Array Any\n  ) {\n    var recur = satisfactoryTypes;\n\n    for (var idx = 0; idx < values.length; idx += 1) {\n      var result = expType.validate (values[idx]);\n      if (result.isLeft) {\n        return Left (function() {\n          return invalidValue (env,\n                               typeInfo,\n                               index,\n                               Z.concat (propPath, result.value.propPath),\n                               result.value.value);\n        });\n      }\n    }\n\n    switch (expType.type) {\n\n      case VARIABLE:\n        var typeVarName = expType.name;\n        var constraints = typeInfo.constraints;\n        if (hasOwnProperty.call (constraints, typeVarName)) {\n          var typeClasses = constraints[typeVarName];\n          for (idx = 0; idx < values.length; idx += 1) {\n            for (var idx2 = 0; idx2 < typeClasses.length; idx2 += 1) {\n              if (!typeClasses[idx2].test (values[idx])) {\n                return Left (function() {\n                  return typeClassConstraintViolation (\n                    env,\n                    typeInfo,\n                    typeClasses[idx2],\n                    index,\n                    propPath,\n                    values[idx],\n                    typeVarMap\n                  );\n                });\n              }\n            }\n          }\n        }\n\n        var typeVarMap$ = updateTypeVarMap (env,\n                                            typeVarMap,\n                                            expType,\n                                            index,\n                                            propPath,\n                                            values);\n\n        var okTypes = typeVarMap$[typeVarName].types;\n        return isEmpty (okTypes) ?\n          Left (function() {\n            return typeVarConstraintViolation (\n              env,\n              typeInfo,\n              index,\n              propPath,\n              typeVarMap$[typeVarName].valuesByPath\n            );\n          }) :\n          Z.reduce (function(e, t) {\n            return Z.chain (function(r) {\n              //  The `a` in `Functor f => f a` corresponds to the `a`\n              //  in `Maybe a` but to the `b` in `Either a b`. A type\n              //  variable's $1 will correspond to either $1 or $2 of\n              //  the actual type depending on the actual type's arity.\n              var offset = t.keys.length - expType.keys.length;\n              return expType.keys.reduce (function(e, k, idx) {\n                var extractor = t.types[t.keys[offset + idx]].extractor;\n                return Z.reduce (function(e, x) {\n                  return Z.chain (function(r) {\n                    return recur (env,\n                                  typeInfo,\n                                  r.typeVarMap,\n                                  expType.types[k].type,\n                                  index,\n                                  Z.concat (propPath, [k]),\n                                  [x]);\n                  }, e);\n                }, e, Z.chain (extractor, values));\n              }, Right (r));\n            }, e);\n          }, Right ({typeVarMap: typeVarMap$, types: okTypes}), okTypes);\n\n      case UNARY:\n        return Z.map (\n          function(result) {\n            return {\n              typeVarMap: result.typeVarMap,\n              types: Z.map (fromUnaryType (expType),\n                            or (result.types, [expType.types.$1.type]))\n            };\n          },\n          recur (env,\n                 typeInfo,\n                 typeVarMap,\n                 expType.types.$1.type,\n                 index,\n                 Z.concat (propPath, ['$1']),\n                 Z.chain (expType.types.$1.extractor, values))\n        );\n\n      case BINARY:\n        return Z.chain (\n          function(result) {\n            var $1s = result.types;\n            return Z.map (\n              function(result) {\n                var $2s = result.types;\n                return {\n                  typeVarMap: result.typeVarMap,\n                  types: xprod (expType,\n                                or ($1s, [expType.types.$1.type]),\n                                or ($2s, [expType.types.$2.type]))\n                };\n              },\n              recur (env,\n                     typeInfo,\n                     result.typeVarMap,\n                     expType.types.$2.type,\n                     index,\n                     Z.concat (propPath, ['$2']),\n                     Z.chain (expType.types.$2.extractor, values))\n            );\n          },\n          recur (env,\n                 typeInfo,\n                 typeVarMap,\n                 expType.types.$1.type,\n                 index,\n                 Z.concat (propPath, ['$1']),\n                 Z.chain (expType.types.$1.extractor, values))\n        );\n\n      case RECORD:\n        return Z.reduce (function(e, k) {\n          return Z.chain (function(r) {\n            return recur (env,\n                          typeInfo,\n                          r.typeVarMap,\n                          expType.types[k].type,\n                          index,\n                          Z.concat (propPath, [k]),\n                          Z.chain (expType.types[k].extractor, values));\n          }, e);\n        }, Right ({typeVarMap: typeVarMap, types: [expType]}), expType.keys);\n\n      default:\n        return Right ({typeVarMap: typeVarMap, types: [expType]});\n    }\n  }\n\n  //# test :: Array Type -> Type -> a -> Boolean\n  //.\n  //. Takes an environment, a type, and any value. Returns `true` if the value\n  //. is a member of the type; `false` otherwise.\n  //.\n  //. The environment is only significant if the type contains\n  //. [type variables][].\n  //.\n  //. One may define a more restrictive type in terms of a more general one:\n  //.\n  //. ```javascript\n  //. //    NonNegativeInteger :: Type\n  //. const NonNegativeInteger = $.NullaryType\n  //.   ('my-package/NonNegativeInteger')\n  //.   ('http://example.com/my-package#NonNegativeInteger')\n  //.   (x => $.test ([]) ($.Integer) (x) && x >= 0);\n  //. ```\n  //.\n  //. Using types as predicates is useful in other contexts too. One could,\n  //. for example, define a [record type][] for each endpoint of a REST API\n  //. and validate the bodies of incoming POST requests against these types.\n  function test(env) {\n    return function(t) {\n      return function(x) {\n        var typeInfo = {name: 'name', constraints: {}, types: [t]};\n        return (satisfactoryTypes (env, typeInfo, {}, t, 0, [], [x])).isRight;\n      };\n    };\n  }\n\n  //. ### Type constructors\n  //.\n  //. sanctuary-def provides several functions for defining types.\n\n  //# NullaryType :: String -> String -> (Any -> Boolean) -> Type\n  //.\n  //. Type constructor for types with no type variables (such as [`Number`][]).\n  //.\n  //. To define a nullary type `t` one must provide:\n  //.\n  //.   - the name of `t` (exposed as `t.name`);\n  //.\n  //.   - the documentation URL of `t` (exposed as `t.url`); and\n  //.\n  //.   - a predicate which accepts any JavaScript value and returns `true` if\n  //.     (and only if) the value is a member of `t`.\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. //    Integer :: Type\n  //. const Integer = $.NullaryType\n  //.   ('my-package/Integer')\n  //.   ('http://example.com/my-package#Integer')\n  //.   (x => typeof x === 'number' &&\n  //.         Math.floor (x) === x &&\n  //.         x >= Number.MIN_SAFE_INTEGER &&\n  //.         x <= Number.MAX_SAFE_INTEGER);\n  //.\n  //. //    NonZeroInteger :: Type\n  //. const NonZeroInteger = $.NullaryType\n  //.   ('my-package/NonZeroInteger')\n  //.   ('http://example.com/my-package#NonZeroInteger')\n  //.   (x => $.test ([]) (Integer) (x) && x !== 0);\n  //.\n  //. //    rem :: Integer -> NonZeroInteger -> Integer\n  //. const rem =\n  //. def ('rem')\n  //.     ({})\n  //.     ([Integer, NonZeroInteger, Integer])\n  //.     (x => y => x % y);\n  //.\n  //. rem (42) (5);\n  //. // => 2\n  //.\n  //. rem (0.5);\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   rem :: Integer -> NonZeroInteger -> Integer\n  //. //          ^^^^^^^\n  //. //             1\n  //. //\n  //. //   1)  0.5 :: Number\n  //. //\n  //. //   The value at position 1 is not a member of ‘Integer’.\n  //.\n  //. rem (42) (0);\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   rem :: Integer -> NonZeroInteger -> Integer\n  //. //                     ^^^^^^^^^^^^^^\n  //. //                           1\n  //. //\n  //. //   1)  0 :: Number\n  //. //\n  //. //   The value at position 1 is not a member of ‘NonZeroInteger’.\n  //. ```\n  function NullaryType(name) {\n    function format(outer, inner) {\n      return outer (stripNamespace (name));\n    }\n    return function(url) {\n      return function(test) {\n        return new _Type (NULLARY, name, url, format, test, [], {});\n      };\n    };\n  }\n\n  var CheckedNullaryType =\n  def ('NullaryType')\n      ({})\n      ([String_, String_, Function_ ([Any, Boolean_]), Type])\n      (NullaryType);\n\n  //# UnaryType :: String -> String -> (Any -> Boolean) -> (t a -> Array a) -> Type -> Type\n  //.\n  //. Type constructor for types with one type variable (such as [`Array`][]).\n  //.\n  //. To define a unary type `t a` one must provide:\n  //.\n  //.   - the name of `t` (exposed as `t.name`);\n  //.\n  //.   - the documentation URL of `t` (exposed as `t.url`);\n  //.\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if (and only if) the value is a member of `t x` for some type `x`;\n  //.\n  //.   - a function which takes any value of type `t a` and returns an array\n  //.     of the values of type `a` contained in the `t` (exposed as\n  //.     `t.types.$1.extractor`); and\n  //.\n  //.   - the type of `a` (exposed as `t.types.$1.type`).\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. const show = require ('sanctuary-show');\n  //. const type = require ('sanctuary-type-identifiers');\n  //.\n  //. //    maybeTypeIdent :: String\n  //. const maybeTypeIdent = 'my-package/Maybe';\n  //.\n  //. //    Maybe :: Type -> Type\n  //. const Maybe = $.UnaryType\n  //.   (maybeTypeIdent)\n  //.   ('http://example.com/my-package#Maybe')\n  //.   (x => type (x) === maybeTypeIdent)\n  //.   (maybe => maybe.isJust ? [maybe.value] : []);\n  //.\n  //. //    MaybeTypeRep :: TypeRep Maybe\n  //. const MaybeTypeRep = {'@@type': maybeTypeIdent};\n  //.\n  //. //    Nothing :: Maybe a\n  //. const Nothing = {\n  //.   'constructor': MaybeTypeRep,\n  //.   'isJust': false,\n  //.   'isNothing': true,\n  //.   '@@show': () => 'Nothing',\n  //. };\n  //.\n  //. //    Just :: a -> Maybe a\n  //. const Just = x => ({\n  //.   'constructor': MaybeTypeRep,\n  //.   'isJust': true,\n  //.   'isNothing': false,\n  //.   '@@show': () => `Just (${show (x)})`,\n  //.   'value': x,\n  //. });\n  //.\n  //. //    fromMaybe :: a -> Maybe a -> a\n  //. const fromMaybe =\n  //. def ('fromMaybe')\n  //.     ({})\n  //.     ([a, Maybe (a), a])\n  //.     (x => m => m.isJust ? m.value : x);\n  //.\n  //. fromMaybe (0) (Just (42));\n  //. // => 42\n  //.\n  //. fromMaybe (0) (Nothing);\n  //. // => 0\n  //.\n  //. fromMaybe (0) (Just ('XXX'));\n  //. // ! TypeError: Type-variable constraint violation\n  //. //\n  //. //   fromMaybe :: a -> Maybe a -> a\n  //. //                ^          ^\n  //. //                1          2\n  //. //\n  //. //   1)  0 :: Number\n  //. //\n  //. //   2)  \"XXX\" :: String\n  //. //\n  //. //   Since there is no type of which all the above values are members, the type-variable constraint has been violated.\n  //. ```\n  function UnaryType(name) {\n    return function(url) {\n      return function(test) {\n        return function(_1) {\n          return function($1) {\n            function format(outer, inner) {\n              return outer ('(' + stripNamespace (name) + ' ') +\n                     inner ('$1') (show ($1)) +\n                     outer (')');\n            }\n            var types = {$1: {extractor: _1, type: $1}};\n            return new _Type (UNARY, name, url, format, test, ['$1'], types);\n          };\n        };\n      };\n    };\n  }\n\n  var CheckedUnaryType =\n  def ('UnaryType')\n      ({})\n      ([String_,\n        String_,\n        Function_ ([Any, Boolean_]),\n        Function_ ([Unchecked ('t a'), Array_ (Unchecked ('a'))]),\n        AnyFunction])\n      (function(name) {\n         return function(url) {\n           return function(test) {\n             return compose (def (stripNamespace (name)) ({}) ([Type, Type]),\n                             UnaryType (name) (url) (test));\n           };\n         };\n       });\n\n  //  fromUnaryType :: Type -> (Type -> Type)\n  function fromUnaryType(t) {\n    return UnaryType (t.name) (t.url) (t._test) (t.types.$1.extractor);\n  }\n\n  //# BinaryType :: String -> String -> (Any -> Boolean) -> (t a b -> Array a) -> (t a b -> Array b) -> Type -> Type -> Type\n  //.\n  //. Type constructor for types with two type variables (such as\n  //. [`Array2`][]).\n  //.\n  //. To define a binary type `t a b` one must provide:\n  //.\n  //.   - the name of `t` (exposed as `t.name`);\n  //.\n  //.   - the documentation URL of `t` (exposed as `t.url`);\n  //.\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if (and only if) the value is a member of `t x y` for some types\n  //.     `x` and `y`;\n  //.\n  //.   - a function which takes any value of type `t a b` and returns an array\n  //.     of the values of type `a` contained in the `t` (exposed as\n  //.     `t.types.$1.extractor`);\n  //.\n  //.   - a function which takes any value of type `t a b` and returns an array\n  //.     of the values of type `b` contained in the `t` (exposed as\n  //.     `t.types.$2.extractor`);\n  //.\n  //.   - the type of `a` (exposed as `t.types.$1.type`); and\n  //.\n  //.   - the type of `b` (exposed as `t.types.$2.type`).\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. const type = require ('sanctuary-type-identifiers');\n  //.\n  //. //    pairTypeIdent :: String\n  //. const pairTypeIdent = 'my-package/Pair';\n  //.\n  //. //    $Pair :: Type -> Type -> Type\n  //. const $Pair = $.BinaryType\n  //.   (pairTypeIdent)\n  //.   ('http://example.com/my-package#Pair')\n  //.   (x => type (x) === pairTypeIdent)\n  //.   (({fst}) => [fst])\n  //.   (({snd}) => [snd]);\n  //.\n  //. //    PairTypeRep :: TypeRep Pair\n  //. const PairTypeRep = {'@@type': pairTypeIdent};\n  //.\n  //. //    Pair :: a -> b -> Pair a b\n  //. const Pair =\n  //. def ('Pair')\n  //.     ({})\n  //.     ([a, b, $Pair (a) (b)])\n  //.     (fst => snd => ({\n  //.        'constructor': PairTypeRep,\n  //.        'fst': fst,\n  //.        'snd': snd,\n  //.        '@@show': () => `Pair (${show (fst)}) (${show (snd)})`,\n  //.      }));\n  //.\n  //. //    Rank :: Type\n  //. const Rank = $.NullaryType\n  //.   ('my-package/Rank')\n  //.   ('http://example.com/my-package#Rank')\n  //.   (x => typeof x === 'string' &&\n  //.         /^(A|2|3|4|5|6|7|8|9|10|J|Q|K)$/.test (x));\n  //.\n  //. //    Suit :: Type\n  //. const Suit = $.NullaryType\n  //.   ('my-package/Suit')\n  //.   ('http://example.com/my-package#Suit')\n  //.   (x => typeof x === 'string' &&\n  //.         /^[\\u2660\\u2663\\u2665\\u2666]$/.test (x));\n  //.\n  //. //    Card :: Type\n  //. const Card = $Pair (Rank) (Suit);\n  //.\n  //. //    showCard :: Card -> String\n  //. const showCard =\n  //. def ('showCard')\n  //.     ({})\n  //.     ([Card, $.String])\n  //.     (card => card.fst + card.snd);\n  //.\n  //. showCard (Pair ('A') ('♠'));\n  //. // => 'A♠'\n  //.\n  //. showCard (Pair ('X') ('♠'));\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   showCard :: Pair Rank Suit -> String\n  //. //                    ^^^^\n  //. //                     1\n  //. //\n  //. //   1)  \"X\" :: String\n  //. //\n  //. //   The value at position 1 is not a member of ‘Rank’.\n  //. ```\n  function BinaryType(name) {\n    return function(url) {\n      return function(test) {\n        return function(_1) {\n          return function(_2) {\n            return function($1) {\n              return function($2) {\n                function format(outer, inner) {\n                  return outer ('(' + stripNamespace (name) + ' ') +\n                         inner ('$1') (show ($1)) +\n                         outer (' ') +\n                         inner ('$2') (show ($2)) +\n                         outer (')');\n                }\n                return new _Type (BINARY,\n                                  name,\n                                  url,\n                                  format,\n                                  test,\n                                  ['$1', '$2'],\n                                  {$1: {extractor: _1, type: $1},\n                                   $2: {extractor: _2, type: $2}});\n              };\n            };\n          };\n        };\n      };\n    };\n  }\n\n  var CheckedBinaryType =\n  def ('BinaryType')\n      ({})\n      ([String_,\n        String_,\n        Function_ ([Any, Boolean_]),\n        Function_ ([Unchecked ('t a b'), Array_ (Unchecked ('a'))]),\n        Function_ ([Unchecked ('t a b'), Array_ (Unchecked ('b'))]),\n        AnyFunction])\n      (function(name) {\n         return function(url) {\n           return function(test) {\n             return function(_1) {\n               return function(_2) {\n                 return def (stripNamespace (name))\n                            ({})\n                            ([Type, Type, Type])\n                            (BinaryType (name) (url) (test) (_1) (_2));\n               };\n             };\n           };\n         };\n       });\n\n  //  xprod :: (Type, Array Type, Array Type) -> Array Type\n  function xprod(t, $1s, $2s) {\n    return Z.chain (\n      function(specialize) { return Z.map (specialize, $2s); },\n      Z.map (BinaryType (t.name)\n                        (t.url)\n                        (t._test)\n                        (t.types.$1.extractor)\n                        (t.types.$2.extractor),\n             $1s)\n    );\n  }\n\n  //# EnumType :: String -> String -> Array Any -> Type\n  //.\n  //. Type constructor for [enumerated types][] (such as [`RegexFlags`][]).\n  //.\n  //. To define an enumerated type `t` one must provide:\n  //.\n  //.   - the name of `t` (exposed as `t.name`);\n  //.\n  //.   - the documentation URL of `t` (exposed as `t.url`); and\n  //.\n  //.   - an array of distinct values.\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. //    Denomination :: Type\n  //. const Denomination = $.EnumType\n  //.   ('my-package/Denomination')\n  //.   ('http://example.com/my-package#Denomination')\n  //.   ([10, 20, 50, 100, 200]);\n  //. ```\n  function EnumType(name) {\n    return function(url) {\n      return compose (NullaryType (name) (url), memberOf);\n    };\n  }\n\n  var CheckedEnumType =\n  def ('EnumType')\n      ({})\n      ([String_, String_, Array_ (Any), Type])\n      (EnumType);\n\n  //# RecordType :: StrMap Type -> Type\n  //.\n  //. `RecordType` is used to construct record types. The type definition\n  //. specifies the name and type of each required field. A field is an\n  //. enumerable property (either an own property or an inherited property).\n  //.\n  //. To define a record type one must provide:\n  //.\n  //.   - an object mapping field name to type.\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. //    Point :: Type\n  //. const Point = $.RecordType ({x: $.FiniteNumber, y: $.FiniteNumber});\n  //.\n  //. //    dist :: Point -> Point -> FiniteNumber\n  //. const dist =\n  //. def ('dist')\n  //.     ({})\n  //.     ([Point, Point, $.FiniteNumber])\n  //.     (p => q => Math.sqrt (Math.pow (p.x - q.x, 2) +\n  //.                           Math.pow (p.y - q.y, 2)));\n  //.\n  //. dist ({x: 0, y: 0}) ({x: 3, y: 4});\n  //. // => 5\n  //.\n  //. dist ({x: 0, y: 0}) ({x: 3, y: 4, color: 'red'});\n  //. // => 5\n  //.\n  //. dist ({x: 0, y: 0}) ({x: NaN, y: NaN});\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   dist :: { x :: FiniteNumber, y :: FiniteNumber } -> { x :: FiniteNumber, y :: FiniteNumber } -> FiniteNumber\n  //. //                                                              ^^^^^^^^^^^^\n  //. //                                                                   1\n  //. //\n  //. //   1)  NaN :: Number\n  //. //\n  //. //   The value at position 1 is not a member of ‘FiniteNumber’.\n  //.\n  //. dist (0);\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   dist :: { x :: FiniteNumber, y :: FiniteNumber } -> { x :: FiniteNumber, y :: FiniteNumber } -> FiniteNumber\n  //. //           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  //. //                              1\n  //. //\n  //. //   1)  0 :: Number\n  //. //\n  //. //   The value at position 1 is not a member of ‘{ x :: FiniteNumber, y :: FiniteNumber }’.\n  //. ```\n  function RecordType(fields) {\n    var keys = sortedKeys (fields);\n\n    function format(outer, inner) {\n      if (isEmpty (keys)) return outer ('{}');\n      var reprs = Z.map (function(k) {\n        var t = fields[k];\n        return outer (' ') +\n               outer (/^(?!\\d)[$\\w]+$/.test (k) ? k : show (k)) +\n               outer (' :: ') +\n               unless (t.type === RECORD || isEmpty (t.keys),\n                       stripOutermostParens,\n                       inner (k) (show (t)));\n      }, keys);\n      return wrap (outer ('{')) (outer (' }')) (joinWith (outer (','), reprs));\n    }\n\n    function test(x) {\n      var missing = {};\n      keys.forEach (function(k) { missing[k] = k; });\n      for (var k in x) delete missing[k];\n      return isEmpty (Object.keys (missing));\n    }\n\n    var $types = {};\n    keys.forEach (function(k) {\n      $types[k] = {extractor: function(x) { return [x[k]]; }, type: fields[k]};\n    });\n\n    return new _Type (RECORD, '', '', format, test, keys, $types);\n  }\n\n  var CheckedRecordType =\n  def ('RecordType') ({}) ([StrMap (Type), Type]) (RecordType);\n\n  //# TypeVariable :: String -> Type\n  //.\n  //. Polymorphism is powerful. Not being able to define a function for\n  //. all types would be very limiting indeed: one couldn't even define the\n  //. identity function!\n  //.\n  //. Before defining a polymorphic function one must define one or more type\n  //. variables:\n  //.\n  //. ```javascript\n  //. const a = $.TypeVariable ('a');\n  //. const b = $.TypeVariable ('b');\n  //.\n  //. //    id :: a -> a\n  //. const id = def ('id') ({}) ([a, a]) (x => x);\n  //.\n  //. id (42);\n  //. // => 42\n  //.\n  //. id (null);\n  //. // => null\n  //. ```\n  //.\n  //. The same type variable may be used in multiple positions, creating a\n  //. constraint:\n  //.\n  //. ```javascript\n  //. //    cmp :: a -> a -> Number\n  //. const cmp =\n  //. def ('cmp')\n  //.     ({})\n  //.     ([a, a, $.Number])\n  //.     (x => y => x < y ? -1 : x > y ? 1 : 0);\n  //.\n  //. cmp (42) (42);\n  //. // => 0\n  //.\n  //. cmp ('a') ('z');\n  //. // => -1\n  //.\n  //. cmp ('z') ('a');\n  //. // => 1\n  //.\n  //. cmp (0) ('1');\n  //. // ! TypeError: Type-variable constraint violation\n  //. //\n  //. //   cmp :: a -> a -> Number\n  //. //          ^    ^\n  //. //          1    2\n  //. //\n  //. //   1)  0 :: Number\n  //. //\n  //. //   2)  \"1\" :: String\n  //. //\n  //. //   Since there is no type of which all the above values are members, the type-variable constraint has been violated.\n  //. ```\n  function TypeVariable(name) {\n    return new _Type (VARIABLE, name, '', always2 (name), K (true), [], {});\n  }\n\n  var CheckedTypeVariable =\n  def ('TypeVariable') ({}) ([String_, Type]) (TypeVariable);\n\n  //# UnaryTypeVariable :: String -> Type -> Type\n  //.\n  //. Combines [`UnaryType`][] and [`TypeVariable`][].\n  //.\n  //. To define a unary type variable `t a` one must provide:\n  //.\n  //.   - a name (conventionally matching `^[a-z]$`); and\n  //.\n  //.   - the type of `a` (exposed as `t.types.$1.type`).\n  //.\n  //. Consider the type of a generalized `map`:\n  //.\n  //. ```haskell\n  //. map :: Functor f => (a -> b) -> f a -> f b\n  //. ```\n  //.\n  //. `f` is a unary type variable. With two (nullary) type variables, one\n  //. unary type variable, and one [type class][] it's possible to define a\n  //. fully polymorphic `map` function:\n  //.\n  //. ```javascript\n  //. const $ = require ('sanctuary-def');\n  //. const Z = require ('sanctuary-type-classes');\n  //.\n  //. const a = $.TypeVariable ('a');\n  //. const b = $.TypeVariable ('b');\n  //. const f = $.UnaryTypeVariable ('f');\n  //.\n  //. //    map :: Functor f => (a -> b) -> f a -> f b\n  //. const map =\n  //. def ('map')\n  //.     ({f: [Z.Functor]})\n  //.     ([$.Function ([a, b]), f (a), f (b)])\n  //.     (f => functor => Z.map (f, functor));\n  //. ```\n  //.\n  //. Whereas a regular type variable is fully resolved (`a` might become\n  //. `Array (Array String)`, for example), a unary type variable defers to\n  //. its type argument, which may itself be a type variable. The type argument\n  //. corresponds to the type argument of a unary type or the *second* type\n  //. argument of a binary type. The second type argument of `Map k v`, for\n  //. example, is `v`. One could replace `Functor => f` with `Map k` or with\n  //. `Map Integer`, but not with `Map`.\n  //.\n  //. This shallow inspection makes it possible to constrain a value's \"outer\"\n  //. and \"inner\" types independently.\n  function UnaryTypeVariable(name) {\n    return function($1) {\n      function format(outer, inner) {\n        return outer ('(' + name + ' ') +\n               inner ('$1') (show ($1)) +\n               outer (')');\n      }\n      var types = {$1: {extractor: K ([]), type: $1}};\n      return new _Type (VARIABLE, name, '', format, K (true), ['$1'], types);\n    };\n  }\n\n  var CheckedUnaryTypeVariable =\n  def ('UnaryTypeVariable')\n      ({})\n      ([String_, AnyFunction])\n      (function(name) {\n         return def (name) ({}) ([Type, Type]) (UnaryTypeVariable (name));\n       });\n\n  //# BinaryTypeVariable :: String -> Type -> Type -> Type\n  //.\n  //. Combines [`BinaryType`][] and [`TypeVariable`][].\n  //.\n  //. To define a binary type variable `t a b` one must provide:\n  //.\n  //.   - a name (conventionally matching `^[a-z]$`);\n  //.\n  //.   - the type of `a` (exposed as `t.types.$1.type`); and\n  //.\n  //.   - the type of `b` (exposed as `t.types.$2.type`).\n  //.\n  //. The more detailed explanation of [`UnaryTypeVariable`][] also applies to\n  //. `BinaryTypeVariable`.\n  function BinaryTypeVariable(name) {\n    return function($1) {\n      return function($2) {\n        function format(outer, inner) {\n          return outer ('(' + name + ' ') +\n                 inner ('$1') (show ($1)) +\n                 outer (' ') +\n                 inner ('$2') (show ($2)) +\n                 outer (')');\n        }\n        var keys = ['$1', '$2'];\n        var types = {$1: {extractor: K ([]), type: $1},\n                     $2: {extractor: K ([]), type: $2}};\n        return new _Type (VARIABLE, name, '', format, K (true), keys, types);\n      };\n    };\n  }\n\n  var CheckedBinaryTypeVariable =\n  def ('BinaryTypeVariable')\n      ({})\n      ([String_, AnyFunction])\n      (function(name) {\n         return def (name)\n                    ({})\n                    ([Type, Type, Type])\n                    (BinaryTypeVariable (name));\n       });\n\n  //# Thunk :: Type -> Type\n  //.\n  //. `$.Thunk (T)` is shorthand for `$.Function ([T])`, the type comprising\n  //. every nullary function (thunk) which returns a value of type `T`.\n  var Thunk =\n  def ('Thunk')\n      ({})\n      ([Type, Type])\n      (function(t) { return Function_ ([t]); });\n\n  //# Predicate :: Type -> Type\n  //.\n  //. `$.Predicate (T)` is shorthand for `$.Function ([T, $.Boolean])`, the\n  //. type comprising every predicate function which takes a value of type `T`.\n  var Predicate =\n  def ('Predicate')\n      ({})\n      ([Type, Type])\n      (function(t) { return Function_ ([t, Boolean_]); });\n\n  //. ### Type classes\n  //.\n  //. `concatS`, defined earlier, is a function which concatenates two strings.\n  //. This is overly restrictive, since other types support concatenation\n  //. (Array, for example).\n  //.\n  //. One could use a type variable to define a polymorphic \"concat\" function:\n  //.\n  //. ```javascript\n  //. //    _concat :: a -> a -> a\n  //. const _concat =\n  //. def ('_concat')\n  //.     ({})\n  //.     ([a, a, a])\n  //.     (x => y => x.concat (y));\n  //.\n  //. _concat ('fizz') ('buzz');\n  //. // => 'fizzbuzz'\n  //.\n  //. _concat ([1, 2]) ([3, 4]);\n  //. // => [1, 2, 3, 4]\n  //.\n  //. _concat ([1, 2]) ('buzz');\n  //. // ! TypeError: Type-variable constraint violation\n  //. //\n  //. //   _concat :: a -> a -> a\n  //. //              ^    ^\n  //. //              1    2\n  //. //\n  //. //   1)  [1, 2] :: Array Number\n  //. //\n  //. //   2)  \"buzz\" :: String\n  //. //\n  //. //   Since there is no type of which all the above values are members, the type-variable constraint has been violated.\n  //. ```\n  //.\n  //. The type of `_concat` is misleading: it suggests that it can operate on\n  //. any two values of *any* one type. In fact there's an implicit constraint,\n  //. since the type must support concatenation (in [mathematical][semigroup]\n  //. terms, the type must have a [semigroup][FL:Semigroup]). Violating this\n  //. implicit constraint results in a run-time error in the implementation:\n  //.\n  //. ```javascript\n  //. _concat (null) (null);\n  //. // ! TypeError: Cannot read property 'concat' of null\n  //. ```\n  //.\n  //. The solution is to constrain `a` by first defining a [`TypeClass`][]\n  //. value, then specifying the constraint in the definition of the \"concat\"\n  //. function:\n  //.\n  //. ```javascript\n  //. const Z = require ('sanctuary-type-classes');\n  //.\n  //. //    Semigroup :: TypeClass\n  //. const Semigroup = Z.TypeClass (\n  //.   'my-package/Semigroup',\n  //.   'http://example.com/my-package#Semigroup',\n  //.   [],\n  //.   x => x != null && typeof x.concat === 'function'\n  //. );\n  //.\n  //. //    concat :: Semigroup a => a -> a -> a\n  //. const concat =\n  //. def ('concat')\n  //.     ({a: [Semigroup]})\n  //.     ([a, a, a])\n  //.     (x => y => x.concat (y));\n  //.\n  //. concat ([1, 2]) ([3, 4]);\n  //. // => [1, 2, 3, 4]\n  //.\n  //. concat (null) (null);\n  //. // ! TypeError: Type-class constraint violation\n  //. //\n  //. //   concat :: Semigroup a => a -> a -> a\n  //. //             ^^^^^^^^^^^    ^\n  //. //                            1\n  //. //\n  //. //   1)  null :: Null\n  //. //\n  //. //   ‘concat’ requires ‘a’ to satisfy the Semigroup type-class constraint; the value at position 1 does not.\n  //. //\n  //. //   See http://example.com/my-package#Semigroup for information about the my-package/Semigroup type class.\n  //. ```\n  //.\n  //. Multiple constraints may be placed on a type variable by including\n  //. multiple `TypeClass` values in the array (e.g. `{a: [Foo, Bar, Baz]}`).\n\n  //  invalidArgumentsCount :: (TypeInfo, Integer, Integer, Array Any) -> Error\n  //\n  //  This function is used in `curry` when a function defined via `def`\n  //  is applied to too many arguments.\n  function invalidArgumentsCount(typeInfo, index, numArgsExpected, args) {\n    return new TypeError (trimTrailingSpaces (\n      q (typeInfo.name) + ' applied to the wrong number of arguments\\n\\n' +\n      underline (\n        typeInfo,\n        K (K (_)),\n        function(index_) {\n          return function(f) {\n            return K (K (index_ === index ? f : _));\n          };\n        }\n      ) + '\\n' +\n      'Expected ' + numArgs (numArgsExpected) +\n      ' but received ' + numArgs (args.length) +\n      toMarkdownList ('.\\n', ':\\n\\n', show, args)\n    ));\n  }\n\n  //  constraintsRepr :: ... -> String\n  function constraintsRepr(\n    constraints,    // :: StrMap (Array TypeClass)\n    outer,          // :: String -> String\n    inner           // :: String -> TypeClass -> String -> String\n  ) {\n    var $reprs = [];\n    (sortedKeys (constraints)).forEach (function(k) {\n      var f = inner (k);\n      constraints[k].forEach (function(typeClass) {\n        $reprs.push (\n          f (typeClass) (stripNamespace (typeClass.name) + ' ' + k)\n        );\n      });\n    });\n    return when ($reprs.length > 0,\n                 function(s) { return s + outer (' => '); },\n                 when ($reprs.length > 1,\n                       wrap (outer ('(')) (outer (')')),\n                       joinWith (outer (', '), $reprs)));\n  }\n\n  //  label :: String -> String -> String\n  function label(label) {\n    return function(s) {\n      var delta = s.length - label.length;\n      return strRepeat (' ', Math.floor (delta / 2)) + label +\n             strRepeat (' ', Math.ceil (delta / 2));\n    };\n  }\n\n  //  typeVarNames :: Type -> Array String\n  function typeVarNames(t) {\n    return Z.concat (\n      t.type === VARIABLE ? [t.name] : [],\n      Z.chain (function(k) { return typeVarNames (t.types[k].type); }, t.keys)\n    );\n  }\n\n  //  showTypeWith :: TypeInfo -> Type -> String\n  function showTypeWith(typeInfo) {\n    var names = Z.chain (typeVarNames, typeInfo.types);\n    return function(t) {\n      var code = 'a'.charCodeAt (0);\n      return unless (\n        t.type === FUNCTION || t.type === RECORD || isEmpty (t.keys),\n        stripOutermostParens,\n        (show (t)).replace (/\\bUnknown\\b/g, function() {\n          // eslint-disable-next-line no-plusplus\n          do var name = String.fromCharCode (code++);\n          while (names.indexOf (name) >= 0);\n          return name;\n        })\n      );\n    };\n  }\n\n  //  showTypeQuoted :: Type -> String\n  function showTypeQuoted(t) {\n    return q (unless (t.type === RECORD || isEmpty (t.keys),\n                      stripOutermostParens,\n                      show (t)));\n  }\n\n  //  showValuesAndTypes :: ... -> String\n  function showValuesAndTypes(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    values,         // :: Array Any\n    pos             // :: Integer\n  ) {\n    var showType = showTypeWith (typeInfo);\n    return show (pos) + ')  ' + joinWith ('\\n    ', Z.map (function(x) {\n      var types = determineActualTypesLoose (env, [x]);\n      return show (x) + ' :: ' + joinWith (', ', Z.map (showType, types));\n    }, values));\n  }\n\n  //  typeSignature :: TypeInfo -> String\n  function typeSignature(typeInfo) {\n    var reprs = Z.map (showTypeWith (typeInfo), typeInfo.types);\n    var arity = reprs.length - 1;\n    return typeInfo.name + ' :: ' +\n             constraintsRepr (typeInfo.constraints, id, K (K (id))) +\n             when (arity === 0,\n                   parenthesize,\n                   joinWith (' -> ', init (reprs))) +\n             ' -> ' + last (reprs);\n  }\n\n  //  _underline :: ... -> String\n  function _underline(\n    t,              // :: Type\n    propPath,       // :: PropPath\n    formatType3     // :: Type -> Array String -> String -> String\n  ) {\n    return unless (t.type === RECORD ||\n                     isEmpty (t.keys) ||\n                     t.type === FUNCTION && isEmpty (propPath) ||\n                     !isEmpty (propPath),\n                   stripOutermostParens,\n                   formatType3 (t) (propPath) (t.format (_, function(k) {\n                     return K (_underline (t.types[k].type,\n                                           Z.concat (propPath, [k]),\n                                           formatType3));\n                   })));\n  }\n\n  //  underline :: ... -> String\n  function underline(\n    typeInfo,               // :: TypeInfo\n    underlineConstraint,    // :: String -> TypeClass -> String -> String\n    formatType5\n    // :: Integer -> (String -> String) -> Type -> PropPath -> String -> String\n  ) {\n    var st = typeInfo.types.reduce (function(st, t, index) {\n      var formatType4 = formatType5 (index);\n      st.numbers.push (_underline (t, [], formatType4 (function(s) {\n        return label (show (st.counter += 1)) (s);\n      })));\n      st.carets.push (_underline (t, [], W (function(type) {\n        var repr = show (type);\n        var parenthesized = repr.slice (0, 1) + repr.slice (-1) === '()';\n        return formatType4 (function(s) {\n          return parenthesized && repr !== '()' && s.length === repr.length ?\n            _ ('(') + r ('^') (s.slice (1, -1)) + _ (')') :\n            r ('^') (s);\n        });\n      })));\n      return st;\n    }, {carets: [], numbers: [], counter: 0});\n\n    return typeSignature (typeInfo) + '\\n' +\n           _ (typeInfo.name + ' :: ') +\n              constraintsRepr (typeInfo.constraints, _, underlineConstraint) +\n              joinWith (_ (' -> '), st.carets) + '\\n' +\n           _ (typeInfo.name + ' :: ') +\n              constraintsRepr (typeInfo.constraints, _, K (K (_))) +\n              joinWith (_ (' -> '), st.numbers) + '\\n';\n  }\n\n  //  resolvePropPath :: (Type, Array String) -> Type\n  function resolvePropPath(t, propPath) {\n    return Z.reduce (function(t, prop) { return t.types[prop].type; },\n                     t,\n                     propPath);\n  }\n\n  //  formatType6 ::\n  //    PropPath -> Integer -> (String -> String) ->\n  //      Type -> PropPath -> String -> String\n  function formatType6(indexedPropPath) {\n    return function(index_) {\n      return function(f) {\n        return function(t) {\n          return function(propPath_) {\n            var indexedPropPath_ = Z.concat ([index_], propPath_);\n            var p = isPrefix (indexedPropPath_) (indexedPropPath);\n            var q = isPrefix (indexedPropPath) (indexedPropPath_);\n            return p && q ? f : p ? id : _;\n          };\n        };\n      };\n    };\n  }\n\n  //  see :: (String, { name :: String, url :: String? }) -> String\n  function see(label, record) {\n    return record.url == null || record.url === '' ?\n           '' :\n           '\\nSee ' + record.url +\n           ' for information about the ' + record.name + ' ' + label + '.\\n';\n  }\n\n  //  typeClassConstraintViolation :: ... -> Error\n  function typeClassConstraintViolation(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    typeClass,      // :: TypeClass\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    value,          // :: Any\n    typeVarMap      // :: TypeVarMap\n  ) {\n    var expType = resolvePropPath (typeInfo.types[index], propPath);\n    return new TypeError (trimTrailingSpaces (\n      'Type-class constraint violation\\n\\n' +\n      underline (typeInfo,\n                 function(tvn) {\n                   return function(tc) {\n                     return (\n                       tvn === expType.name && tc.name === typeClass.name ?\n                         r ('^') :\n                         _\n                     );\n                   };\n                 },\n                 formatType6 (Z.concat ([index], propPath))) +\n      '\\n' +\n      showValuesAndTypes (env, typeInfo, [value], 1) + '\\n\\n' +\n      q (typeInfo.name) + ' requires ' +\n      q (expType.name) + ' to satisfy the ' +\n      stripNamespace (typeClass.name) + ' type-class constraint; ' +\n      'the value at position 1 does not.\\n' +\n      see ('type class', typeClass)\n    ));\n  }\n\n  //  typeVarConstraintViolation :: ... -> Error\n  function typeVarConstraintViolation(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    valuesByPath    // :: StrMap (Array Any)\n  ) {\n    //  If we apply an ‘a -> a -> a -> a’ function to Left ('x'), Right (1),\n    //  and Right (null) we'd like to avoid underlining the first argument\n    //  position, since Left ('x') is compatible with the other ‘a’ values.\n    var key = JSON.stringify (Z.concat ([index], propPath));\n    var values = valuesByPath[key];\n\n    //  Note: Sorting these keys lexicographically is not \"correct\", but it\n    //  does the right thing for indexes less than 10.\n    var keys = Z.filter (function(k) {\n      var values_ = valuesByPath[k];\n      return (\n        //  Keep X, the position at which the violation was observed.\n        k === key ||\n        //  Keep positions whose values are incompatible with the values at X.\n        isEmpty (determineActualTypesStrict (env, Z.concat (values, values_)))\n      );\n    }, sortedKeys (valuesByPath));\n\n    var underlinedTypeVars =\n    underlineTypeVars (typeInfo,\n                       Z.reduce (function($valuesByPath, k) {\n                         $valuesByPath[k] = valuesByPath[k];\n                         return $valuesByPath;\n                       }, {}, keys));\n\n    return new TypeError (trimTrailingSpaces (\n      values.length === 1 &&\n      isEmpty (determineActualTypesLoose (env, values)) ?\n        'Unrecognized value\\n\\n' +\n        underlinedTypeVars + '\\n' +\n        '1)  ' + show (values[0]) + ' :: (no types)\\n\\n' +\n        toMarkdownList (\n          'The environment is empty! ' +\n          'Polymorphic functions require a non-empty environment.\\n',\n          'The value at position 1 is not a member of any type in ' +\n          'the environment.\\n\\n' +\n          'The environment contains the following types:\\n\\n',\n          showTypeWith (typeInfo),\n          env\n        ) :\n      // else\n        'Type-variable constraint violation\\n\\n' +\n        underlinedTypeVars + '\\n' +\n        (Z.reduce (function(st, k) {\n          var values = valuesByPath[k];\n          return isEmpty (values) ? st : {\n            idx: st.idx + 1,\n            s: st.s +\n               showValuesAndTypes (env, typeInfo, values, st.idx + 1) +\n               '\\n\\n'\n          };\n        }, {idx: 0, s: ''}, keys)).s +\n        'Since there is no type of which all the above values are ' +\n        'members, the type-variable constraint has been violated.\\n'\n    ));\n  }\n\n  //  invalidValue :: ... -> Error\n  function invalidValue(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    value           // :: Any\n  ) {\n    var t = resolvePropPath (typeInfo.types[index], propPath);\n    return new TypeError (trimTrailingSpaces (\n      'Invalid value\\n\\n' +\n      underline (typeInfo,\n                 K (K (_)),\n                 formatType6 (Z.concat ([index], propPath))) +\n      '\\n' +\n      showValuesAndTypes (env, typeInfo, [value], 1) + '\\n\\n' +\n      'The value at position 1 is not a member of ' +\n      showTypeQuoted (t) + '.\\n' +\n      see ('type', t)\n    ));\n  }\n\n  //  invalidArgumentsLength :: ... -> Error\n  //\n  //  This function is used in `wrapFunctionCond` to ensure that higher-order\n  //  functions defined via `def` only ever apply a function argument to the\n  //  correct number of arguments.\n  function invalidArgumentsLength(\n    typeInfo,           // :: TypeInfo\n    index,              // :: Integer\n    numArgsExpected,    // :: Integer\n    args                // :: Array Any\n  ) {\n    return new TypeError (trimTrailingSpaces (\n      q (typeInfo.name) +\n      ' applied ' + showTypeQuoted (typeInfo.types[index]) +\n      ' to the wrong number of arguments\\n\\n' +\n      underline (\n        typeInfo,\n        K (K (_)),\n        function(index_) {\n          return function(f) {\n            return function(t) {\n              return function(propPath) {\n                return function(s) {\n                  return index_ === index ?\n                    t.format (_, function(k) { return k === '$1' ? f : _; }) :\n                    _ (s);\n                };\n              };\n            };\n          };\n        }\n      ) + '\\n' +\n      'Expected ' + numArgs (numArgsExpected) +\n      ' but received ' + numArgs (args.length) +\n      toMarkdownList ('.\\n', ':\\n\\n', show, args)\n    ));\n  }\n\n  //  assertRight :: Either (() -> Error) a -> a !\n  function assertRight(either) {\n    if (either.isLeft) throw either.value ();\n    return either.value;\n  }\n\n  //  withTypeChecking :: ... -> Function\n  function withTypeChecking(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    impl            // :: Function\n  ) {\n    var n = typeInfo.types.length - 1;\n\n    //  wrapFunctionCond :: (TypeVarMap, Integer, a) -> a\n    function wrapFunctionCond(_typeVarMap, index, value) {\n      if (typeInfo.types[index].type !== FUNCTION) return value;\n\n      var expType = typeInfo.types[index];\n\n      //  checkValue :: (TypeVarMap, Integer, String, a) -> Either (() -> Error) TypeVarMap\n      function checkValue(typeVarMap, index, k, x) {\n        var propPath = [k];\n        var t = expType.types[k].type;\n        return (\n          t.type === VARIABLE ?\n            Z.chain (\n              function(typeVarMap) {\n                return isEmpty (typeVarMap[t.name].types) ?\n                  Left (function() {\n                    return typeVarConstraintViolation (\n                      env,\n                      typeInfo,\n                      index,\n                      propPath,\n                      typeVarMap[t.name].valuesByPath\n                    );\n                  }) :\n                  Right (typeVarMap);\n              },\n              Right (updateTypeVarMap (env,\n                                       typeVarMap,\n                                       t,\n                                       index,\n                                       propPath,\n                                       [x]))\n            ) :\n          // else\n            Z.map (\n              function(r) { return r.typeVarMap; },\n              satisfactoryTypes (env,\n                                 typeInfo,\n                                 typeVarMap,\n                                 t,\n                                 index,\n                                 propPath,\n                                 [x])\n            )\n        );\n      }\n\n      var isThunk = expType.types.$1.type.type === NO_ARGUMENTS;\n      var numArgsExpected = isThunk ? 0 : expType.keys.length - 1;\n      var typeVarMap = _typeVarMap;\n      return function(x) {\n        if (arguments.length !== numArgsExpected) {\n          throw invalidArgumentsLength (typeInfo,\n                                        index,\n                                        numArgsExpected,\n                                        slice.call (arguments));\n        }\n\n        var args = arguments;\n        typeVarMap = assertRight (\n          (init (expType.keys)).reduce (function(either, k, idx) {\n            var arg = args[idx];\n            return Z.chain (function(typeVarMap) {\n              return checkValue (typeVarMap, index, k, arg);\n            }, either);\n          }, Right (typeVarMap))\n        );\n\n        var output = value.apply (this, arguments);\n        var k = last (expType.keys);\n        typeVarMap = assertRight (checkValue (typeVarMap, index, k, output));\n        return output;\n      };\n    }\n\n    //  wrapNext :: (TypeVarMap, Array Any, Integer) -> (a -> b)\n    function wrapNext(_typeVarMap, _values, index) {\n      return function(x) {\n        var args = slice.call (arguments);\n        if (args.length !== 1) {\n          throw invalidArgumentsCount (typeInfo, index, 1, args);\n        }\n        var typeVarMap = (assertRight (\n          satisfactoryTypes (env,\n                             typeInfo,\n                             _typeVarMap,\n                             typeInfo.types[index],\n                             index,\n                             [],\n                             args)\n        )).typeVarMap;\n\n        var values = Z.concat (_values, args);\n        if (index + 1 === n) {\n          var value = values.reduce (function(f, x, idx) {\n            return f (wrapFunctionCond (typeVarMap, idx, x));\n          }, impl);\n          typeVarMap = (assertRight (\n            satisfactoryTypes (env,\n                               typeInfo,\n                               typeVarMap,\n                               typeInfo.types[n],\n                               n,\n                               [],\n                               [value])\n          )).typeVarMap;\n          return wrapFunctionCond (typeVarMap, n, value);\n        } else {\n          return wrapNext (typeVarMap, values, index + 1);\n        }\n      };\n    }\n\n    var wrapped = typeInfo.types[0].type === NO_ARGUMENTS ?\n      function() {\n        if (arguments.length !== 0) {\n          throw invalidArgumentsCount (typeInfo, 0, 0, slice.call (arguments));\n        }\n        var value = impl ();\n        var typeVarMap = assertRight (\n          satisfactoryTypes (env,\n                             typeInfo,\n                             {},\n                             typeInfo.types[n],\n                             n,\n                             [],\n                             [value])\n        ).typeVarMap;\n        return wrapFunctionCond (typeVarMap, n, value);\n      } :\n      wrapNext ({}, [], 0);\n\n    wrapped[inspect] = wrapped.toString = always0 (typeSignature (typeInfo));\n\n    return wrapped;\n  }\n\n  function _create(opts) {\n    function def(name) {\n      return function(constraints) {\n        return function(expTypes) {\n          return function(impl) {\n            return opts.checkTypes ?\n              withTypeChecking (opts.env,\n                                {name: name,\n                                 constraints: constraints,\n                                 types: augmentThunk (expTypes)},\n                                impl) :\n              impl;\n          };\n        };\n      };\n    }\n    return def (def.name)\n               ({})\n               ([String_,\n                 StrMap (Array_ (TypeClass)),\n                 NonEmpty (Array_ (Type)),\n                 AnyFunction,\n                 AnyFunction])\n               (def);\n  }\n\n  var create =\n  def ('create')\n      ({})\n      ([RecordType ({checkTypes: Boolean_, env: Array_ (Any)}), AnyFunction])\n      (_create);\n\n  //  fromUncheckedUnaryType :: (Type -> Type) -> Type -> Type\n  function fromUncheckedUnaryType(typeConstructor) {\n    var t = typeConstructor (Unknown);\n    var _1 = t.types.$1.extractor;\n    return CheckedUnaryType (t.name) (t.url) (t._test) (_1);\n  }\n\n  //  fromUncheckedBinaryType :: (Type -> Type -> Type) -> Type -> Type -> Type\n  function fromUncheckedBinaryType(typeConstructor) {\n    var t = typeConstructor (Unknown) (Unknown);\n    var _1 = t.types.$1.extractor;\n    var _2 = t.types.$2.extractor;\n    return CheckedBinaryType (t.name) (t.url) (t._test) (_1) (_2);\n  }\n\n  return {\n    Any: Any,\n    AnyFunction: AnyFunction,\n    Arguments: Arguments,\n    Array: fromUncheckedUnaryType (Array_),\n    Array0: Array0,\n    Array1: fromUncheckedUnaryType (Array1),\n    Array2: fromUncheckedBinaryType (Array2),\n    Boolean: Boolean_,\n    Date: Date_,\n    Error: Error_,\n    FiniteNumber: FiniteNumber,\n    Function: def ('Function') ({}) ([Array_ (Type), Type]) (Function_),\n    GlobalRegExp: GlobalRegExp,\n    HtmlElement: HtmlElement,\n    Integer: Integer,\n    NegativeFiniteNumber: NegativeFiniteNumber,\n    NegativeInteger: NegativeInteger,\n    NegativeNumber: NegativeNumber,\n    NonEmpty: NonEmpty,\n    NonGlobalRegExp: NonGlobalRegExp,\n    NonNegativeInteger: NonNegativeInteger,\n    NonZeroFiniteNumber: NonZeroFiniteNumber,\n    NonZeroInteger: NonZeroInteger,\n    NonZeroValidNumber: NonZeroValidNumber,\n    Null: Null,\n    Nullable: fromUncheckedUnaryType (Nullable),\n    Number: Number_,\n    Object: Object_,\n    PositiveFiniteNumber: PositiveFiniteNumber,\n    PositiveInteger: PositiveInteger,\n    PositiveNumber: PositiveNumber,\n    RegExp: RegExp_,\n    RegexFlags: RegexFlags,\n    StrMap: fromUncheckedUnaryType (StrMap),\n    String: String_,\n    Symbol: Symbol_,\n    Type: Type,\n    TypeClass: TypeClass,\n    Undefined: Undefined,\n    Unknown: Unknown,\n    ValidDate: ValidDate,\n    ValidNumber: ValidNumber,\n    env: env,\n    create: create,\n    test: def ('test') ({}) ([Array_ (Type), Type, Any, Boolean_]) (test),\n    NullaryType: CheckedNullaryType,\n    UnaryType: CheckedUnaryType,\n    BinaryType: CheckedBinaryType,\n    EnumType: CheckedEnumType,\n    RecordType: CheckedRecordType,\n    TypeVariable: CheckedTypeVariable,\n    UnaryTypeVariable: CheckedUnaryTypeVariable,\n    BinaryTypeVariable: CheckedBinaryTypeVariable,\n    Thunk: Thunk,\n    Predicate: Predicate\n  };\n\n}));\n\n//. [FL:Semigroup]:         https://github.com/fantasyland/fantasy-land#semigroup\n//. [HTML element]:         https://developer.mozilla.org/en-US/docs/Web/HTML/Element\n//. [Monoid]:               https://github.com/fantasyland/fantasy-land#monoid\n//. [Setoid]:               https://github.com/fantasyland/fantasy-land#setoid\n//. [`Array`]:              #Array\n//. [`Array2`]:             #Array2\n//. [`BinaryType`]:         #BinaryType\n//. [`Date`]:               #Date\n//. [`FiniteNumber`]:       #FiniteNumber\n//. [`GlobalRegExp`]:       #GlobalRegExp\n//. [`Integer`]:            #Integer\n//. [`NonGlobalRegExp`]:    #NonGlobalRegExp\n//. [`Number`]:             #Number\n//. [`Object.create`]:      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n//. [`RegExp`]:             #RegExp\n//. [`RegexFlags`]:         #RegexFlags\n//. [`String`]:             #String\n//. [`SyntaxError`]:        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\n//. [`TypeClass`]:          https://github.com/sanctuary-js/sanctuary-type-classes#TypeClass\n//. [`TypeError`]:          https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n//. [`TypeVariable`]:       #TypeVariable\n//. [`UnaryType`]:          #UnaryType\n//. [`UnaryTypeVariable`]:  #UnaryTypeVariable\n//. [`Unknown`]:            #Unknown\n//. [`ValidNumber`]:        #ValidNumber\n//. [`env`]:                #env\n//. [arguments]:            https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\n//. [enumerated types]:     https://en.wikipedia.org/wiki/Enumerated_type\n//. [max]:                  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n//. [min]:                  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\n//. [record type]:          #RecordType\n//. [semigroup]:            https://en.wikipedia.org/wiki/Semigroup\n//. [type class]:           #type-classes\n//. [type variables]:       #TypeVariable\n//. [types]:                #types\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '9.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '9.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","/*\n    ,______  ______,  ,________,,_____,,_____,,__________  ,__________,\n    |      \\/      |  |        ||     ||     ||          \\ |          |\n    |_,          ,_|  |_      _||_    ||    _||_,   __    ||_,   _____|\n      |   \\  /   |     /      \\   \\   \\/   /    |        /   |      |\n    ,_|    ||    |_,,_/   /\\   \\_, \\      /   ,_|   __   \\ ,_|   ___|_,\n    |      ||      ||     ||     |  |    |    |           ||          |\n    |______||______||_____||_____|  |____|    |__________/ |__________|\n                                                                         */\n\n//. <a href=\"https://github.com/fantasyland/fantasy-land\"><img alt=\"Fantasy Land\" src=\"https://raw.githubusercontent.com/fantasyland/fantasy-land/master/logo.png\" width=\"75\" height=\"75\" align=\"left\"></a>\n//.\n//. # sanctuary-maybe\n//.\n//. The Maybe type represents optional values: a value of type `Maybe a` is\n//. either Nothing (the empty value) or a Just whose value is of type `a`.\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f (require ('sanctuary-show'),\n                        require ('sanctuary-type-classes'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define (['sanctuary-show', 'sanctuary-type-classes'], f);\n  } else {\n    self.sanctuaryMaybe = f (self.sanctuaryShow, self.sanctuaryTypeClasses);\n  }\n\n} (function(show, Z) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    var $ = __doctest.require ('sanctuary-def');\n    var type = __doctest.require ('sanctuary-type-identifiers');\n    var S = (function() {\n      var S = __doctest.require ('sanctuary');\n      var MaybeType = $.UnaryType\n        ('sanctuary-maybe/Maybe')\n        ('')\n        (function(x) { return type (x) === Maybe['@@type']; })\n        (function(m) { return m.isJust ? [m.value] : []; });\n      var env = Z.concat (S.env, [$.TypeClass, MaybeType ($.Unknown)]);\n      return S.create ({checkTypes: true, env: env});\n    } ());\n  }\n\n  var Maybe = {};\n\n  var Nothing$prototype = {\n    /* eslint-disable key-spacing */\n    'constructor':            Maybe,\n    'isNothing':              true,\n    'isJust':                 false,\n    '@@show':                 Nothing$prototype$show,\n    'fantasy-land/equals':    Nothing$prototype$equals,\n    'fantasy-land/lte':       Nothing$prototype$lte,\n    'fantasy-land/concat':    Nothing$prototype$concat,\n    'fantasy-land/filter':    Nothing$prototype$filter,\n    'fantasy-land/map':       Nothing$prototype$map,\n    'fantasy-land/ap':        Nothing$prototype$ap,\n    'fantasy-land/chain':     Nothing$prototype$chain,\n    'fantasy-land/alt':       Nothing$prototype$alt,\n    'fantasy-land/reduce':    Nothing$prototype$reduce,\n    'fantasy-land/traverse':  Nothing$prototype$traverse,\n    'fantasy-land/extend':    Nothing$prototype$extend\n    /* eslint-enable key-spacing */\n  };\n\n  var Just$prototype = {\n    /* eslint-disable key-spacing */\n    'constructor':            Maybe,\n    'isNothing':              false,\n    'isJust':                 true,\n    '@@show':                 Just$prototype$show,\n    'fantasy-land/filter':    Just$prototype$filter,\n    'fantasy-land/map':       Just$prototype$map,\n    'fantasy-land/ap':        Just$prototype$ap,\n    'fantasy-land/chain':     Just$prototype$chain,\n    'fantasy-land/alt':       Just$prototype$alt,\n    'fantasy-land/reduce':    Just$prototype$reduce,\n    'fantasy-land/traverse':  Just$prototype$traverse,\n    'fantasy-land/extend':    Just$prototype$extend\n    /* eslint-enable key-spacing */\n  };\n\n  var util =\n    typeof module === 'object' && typeof module.exports === 'object' ?\n    require ('util') :\n    /* istanbul ignore next */ {};\n  var inspect =\n    util.inspect != null && typeof util.inspect.custom === 'symbol' ?\n    /* istanbul ignore next */ util.inspect.custom :\n    /* istanbul ignore next */ 'inspect';\n  Nothing$prototype[inspect] = Nothing$prototype$show;\n  Just$prototype[inspect] = Just$prototype$show;\n\n  //. `Maybe a` satisfies the following [Fantasy Land][] specifications:\n  //.\n  //. ```javascript\n  //. > const Useless = require ('sanctuary-useless')\n  //.\n  //. > S.map (k => k + ' '.repeat (16 - k.length) +\n  //. .             (Z[k].test (Just (Useless)) ? '\\u2705   ' :\n  //. .              Z[k].test (Nothing)        ? '\\u2705 * ' :\n  //. .              /* otherwise */              '\\u274C   '))\n  //. .       (S.keys (Z.filter ($.test ([]) ($.TypeClass), Z)))\n  //. [ 'Setoid          ✅ * ',  // if ‘a’ satisfies Setoid\n  //. . 'Ord             ✅ * ',  // if ‘a’ satisfies Ord\n  //. . 'Semigroupoid    ❌   ',\n  //. . 'Category        ❌   ',\n  //. . 'Semigroup       ✅ * ',  // if ‘a’ satisfies Semigroup\n  //. . 'Monoid          ✅ * ',  // if ‘a’ satisfies Semigroup\n  //. . 'Group           ❌   ',\n  //. . 'Filterable      ✅   ',\n  //. . 'Functor         ✅   ',\n  //. . 'Bifunctor       ❌   ',\n  //. . 'Profunctor      ❌   ',\n  //. . 'Apply           ✅   ',\n  //. . 'Applicative     ✅   ',\n  //. . 'Chain           ✅   ',\n  //. . 'ChainRec        ✅   ',\n  //. . 'Monad           ✅   ',\n  //. . 'Alt             ✅   ',\n  //. . 'Plus            ✅   ',\n  //. . 'Alternative     ✅   ',\n  //. . 'Foldable        ✅   ',\n  //. . 'Traversable     ✅   ',\n  //. . 'Extend          ✅   ',\n  //. . 'Comonad         ❌   ',\n  //. . 'Contravariant   ❌   ' ]\n  //. ```\n\n  //# Maybe :: TypeRep Maybe\n  //.\n  //. Maybe [type representative][].\n\n  //# Maybe.Nothing :: Maybe a\n  //.\n  //. The empty value of type `Maybe a`.\n  //.\n  //. ```javascript\n  //. > Nothing\n  //. Nothing\n  //. ```\n  var Nothing = Maybe.Nothing = Object.create (Nothing$prototype);\n\n  //# Maybe.Just :: a -> Maybe a\n  //.\n  //. Constructs a value of type `Maybe a` from a value of type `a`.\n  //.\n  //. ```javascript\n  //. > Just (42)\n  //. Just (42)\n  //. ```\n  var Just = Maybe.Just = function(value) {\n    var just = Object.create (Just$prototype);\n    if (Z.Setoid.test (value)) {\n      just['fantasy-land/equals'] = Just$prototype$equals;\n      if (Z.Ord.test (value)) {\n        just['fantasy-land/lte'] = Just$prototype$lte;\n      }\n    }\n    if (Z.Semigroup.test (value)) {\n      just['fantasy-land/concat'] = Just$prototype$concat;\n    }\n    just.value = value;\n    return just;\n  };\n\n  //# Maybe.@@type :: String\n  //.\n  //. Maybe [type identifier][].\n  //.\n  //. ```javascript\n  //. > type (Just (42))\n  //. 'sanctuary-maybe/Maybe@1'\n  //.\n  //. > type.parse (type (Just (42)))\n  //. {namespace: 'sanctuary-maybe', name: 'Maybe', version: 1}\n  //. ```\n  Maybe['@@type'] = 'sanctuary-maybe/Maybe@1';\n\n  //# Maybe.fantasy-land/empty :: () -> Maybe a\n  //.\n  //.   - `empty (Maybe)` is equivalent to `Nothing`\n  //.\n  //. ```javascript\n  //. > S.empty (Maybe)\n  //. Nothing\n  //. ```\n  Maybe['fantasy-land/empty'] = function() { return Nothing; };\n\n  //# Maybe.fantasy-land/of :: a -> Maybe a\n  //.\n  //.   - `of (Maybe) (x)` is equivalent to `Just (x)`\n  //.\n  //. ```javascript\n  //. > S.of (Maybe) (42)\n  //. Just (42)\n  //. ```\n  Maybe['fantasy-land/of'] = Just;\n\n  function next(x) { return {tag: next, value: x}; }\n  function done(x) { return {tag: done, value: x}; }\n\n  //# Maybe.fantasy-land/chainRec :: ((a -> c, b -> c, a) -> Maybe c, a) -> Maybe b\n  //.\n  //. ```javascript\n  //. > Z.chainRec (\n  //. .   Maybe,\n  //. .   (next, done, x) =>\n  //. .     x <= 1 ? Nothing : Just (x >= 1000 ? done (x) : next (x * x)),\n  //. .   1\n  //. . )\n  //. Nothing\n  //.\n  //. > Z.chainRec (\n  //. .   Maybe,\n  //. .   (next, done, x) =>\n  //. .     x <= 1 ? Nothing : Just (x >= 1000 ? done (x) : next (x * x)),\n  //. .   2\n  //. . )\n  //. Just (65536)\n  //. ```\n  Maybe['fantasy-land/chainRec'] = function(f, x) {\n    var r = next (x);\n    while (r.tag === next) {\n      var maybe = f (next, done, r.value);\n      if (maybe.isNothing) return maybe;\n      r = maybe.value;\n    }\n    return Just (r.value);\n  };\n\n  //# Maybe.fantasy-land/zero :: () -> Maybe a\n  //.\n  //.   - `zero (Maybe)` is equivalent to `Nothing`\n  //.\n  //. ```javascript\n  //. > S.zero (Maybe)\n  //. Nothing\n  //. ```\n  Maybe['fantasy-land/zero'] = function() { return Nothing; };\n\n  //# Maybe#@@show :: Showable a => Maybe a ~> () -> String\n  //.\n  //.   - `show (Nothing)` is equivalent to `'Nothing'`\n  //.   - `show (Just (x))` is equivalent to `'Just (' + show (x) + ')'`\n  //.\n  //. ```javascript\n  //. > show (Nothing)\n  //. 'Nothing'\n  //.\n  //. > show (Just (['foo', 'bar', 'baz']))\n  //. 'Just ([\"foo\", \"bar\", \"baz\"])'\n  //. ```\n  function Nothing$prototype$show() {\n    return 'Nothing';\n  }\n  function Just$prototype$show() {\n    return 'Just (' + show (this.value) + ')';\n  }\n\n  //# Maybe#fantasy-land/equals :: Setoid a => Maybe a ~> Maybe a -> Boolean\n  //.\n  //.   - `Nothing` is equal to `Nothing`\n  //.   - `Just (x)` is equal to `Just (y)` [iff][] `x` is equal to `y`\n  //.     according to [`Z.equals`][]\n  //.   - `Nothing` is never equal to `Just (x)`\n  //.\n  //. ```javascript\n  //. > S.equals (Nothing) (Nothing)\n  //. true\n  //.\n  //. > S.equals (Just ([1, 2, 3])) (Just ([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals (Just ([1, 2, 3])) (Just ([3, 2, 1]))\n  //. false\n  //.\n  //. > S.equals (Just ([1, 2, 3])) (Nothing)\n  //. false\n  //. ```\n  function Nothing$prototype$equals(other) {\n    return other.isNothing;\n  }\n  function Just$prototype$equals(other) {\n    return other.isJust && Z.equals (this.value, other.value);\n  }\n\n  //# Maybe#fantasy-land/lte :: Ord a => Maybe a ~> Maybe a -> Boolean\n  //.\n  //.   - `Nothing` is (less than or) equal to `Nothing`\n  //.   - `Just (x)` is less than or equal to `Just (y)` [iff][] `x` is less\n  //.     than or equal to `y` according to [`Z.lte`][]\n  //.   - `Nothing` is always less than `Just (x)`\n  //.\n  //. ```javascript\n  //. > S.filter (S.lte (Nothing)) ([Nothing, Just (0), Just (1), Just (2)])\n  //. [Nothing]\n  //.\n  //. > S.filter (S.lte (Just (1))) ([Nothing, Just (0), Just (1), Just (2)])\n  //. [Nothing, Just (0), Just (1)]\n  //. ```\n  function Nothing$prototype$lte(other) {\n    return true;\n  }\n  function Just$prototype$lte(other) {\n    return other.isJust && Z.lte (this.value, other.value);\n  }\n\n  //# Maybe#fantasy-land/concat :: Semigroup a => Maybe a ~> Maybe a -> Maybe a\n  //.\n  //.   - `concat (Nothing) (Nothing)` is equivalent to `Nothing`\n  //.   - `concat (Just (x)) (Just (y))` is equivalent to\n  //.     `Just (concat (x) (y))`\n  //.   - `concat (Nothing) (Just (x))` is equivalent to `Just (x)`\n  //.   - `concat (Just (x)) (Nothing)` is equivalent to `Just (x)`\n  //.\n  //. ```javascript\n  //. > S.concat (Nothing) (Nothing)\n  //. Nothing\n  //.\n  //. > S.concat (Just ([1, 2, 3])) (Just ([4, 5, 6]))\n  //. Just ([1, 2, 3, 4, 5, 6])\n  //.\n  //. > S.concat (Nothing) (Just ([1, 2, 3]))\n  //. Just ([1, 2, 3])\n  //.\n  //. > S.concat (Just ([1, 2, 3])) (Nothing)\n  //. Just ([1, 2, 3])\n  //. ```\n  function Nothing$prototype$concat(other) {\n    return other;\n  }\n  function Just$prototype$concat(other) {\n    return other.isJust ? Just (Z.concat (this.value, other.value)) : this;\n  }\n\n  //# Maybe#fantasy-land/filter :: Maybe a ~> (a -> Boolean) -> Maybe a\n  //.\n  //.   - `filterM (p) (Nothing)` is equivalent to `Nothing`\n  //.   - `filterM (p) (Just (x))` is equivalent to\n  //.     `p (x) ? Just (x) : Nothing`\n  //.\n  //. ```javascript\n  //. > S.filterM (isFinite) (Nothing)\n  //. Nothing\n  //.\n  //. > S.filterM (isFinite) (Just (Infinity))\n  //. Nothing\n  //.\n  //. > S.filterM (isFinite) (Just (Number.MAX_SAFE_INTEGER))\n  //. Just (9007199254740991)\n  //. ```\n  function Nothing$prototype$filter(pred) {\n    return this;\n  }\n  function Just$prototype$filter(pred) {\n    return pred (this.value) ? this : Nothing;\n  }\n\n  //# Maybe#fantasy-land/map :: Maybe a ~> (a -> b) -> Maybe b\n  //.\n  //.   - `map (f) (Nothing)` is equivalent to `Nothing`\n  //.   - `map (f) (Just (x))` is equivalent to `Just (f (x))`\n  //.\n  //. ```javascript\n  //. > S.map (Math.sqrt) (Nothing)\n  //. Nothing\n  //.\n  //. > S.map (Math.sqrt) (Just (9))\n  //. Just (3)\n  //. ```\n  function Nothing$prototype$map(f) {\n    return this;\n  }\n  function Just$prototype$map(f) {\n    return Just (f (this.value));\n  }\n\n  //# Maybe#fantasy-land/ap :: Maybe a ~> Maybe (a -> b) -> Maybe b\n  //.\n  //.   - `ap (Nothing) (Nothing)` is equivalent to `Nothing`\n  //.   - `ap (Nothing) (Just (x))` is equivalent to `Nothing`\n  //.   - `ap (Just (f)) (Nothing)` is equivalent to `Nothing`\n  //.   - `ap (Just (f)) (Just (x))` is equivalent to `Just (f (x))`\n  //.\n  //. ```javascript\n  //. > S.ap (Nothing) (Nothing)\n  //. Nothing\n  //.\n  //. > S.ap (Nothing) (Just (9))\n  //. Nothing\n  //.\n  //. > S.ap (Just (Math.sqrt)) (Nothing)\n  //. Nothing\n  //.\n  //. > S.ap (Just (Math.sqrt)) (Just (9))\n  //. Just (3)\n  //. ```\n  function Nothing$prototype$ap(other) {\n    return this;\n  }\n  function Just$prototype$ap(other) {\n    return other.isJust ? Just (other.value (this.value)) : other;\n  }\n\n  //# Maybe#fantasy-land/chain :: Maybe a ~> (a -> Maybe b) -> Maybe b\n  //.\n  //.   - `chain (f) (Nothing)` is equivalent to `Nothing`\n  //.   - `chain (f) (Just (x))` is equivalent to `f (x)`\n  //.\n  //. ```javascript\n  //. > const head = xs => xs.length === 0 ? Nothing : Just (xs[0])\n  //.\n  //. > S.chain (head) (Nothing)\n  //. Nothing\n  //.\n  //. > S.chain (head) (Just ([]))\n  //. Nothing\n  //.\n  //. > S.chain (head) (Just (['foo', 'bar', 'baz']))\n  //. Just ('foo')\n  //. ```\n  function Nothing$prototype$chain(f) {\n    return this;\n  }\n  function Just$prototype$chain(f) {\n    return f (this.value);\n  }\n\n  //# Maybe#fantasy-land/alt :: Maybe a ~> Maybe a -> Maybe a\n  //.\n  //.   - `alt (Nothing) (Nothing)` is equivalent to `Nothing`\n  //.   - `alt (Nothing) (Just (x))` is equivalent to `Just (x)`\n  //.   - `alt (Just (x)) (Nothing)` is equivalent to `Just (x)`\n  //.   - `alt (Just (x)) (Just (y))` is equivalent to `Just (x)`\n  //.\n  //. ```javascript\n  //. > S.alt (Nothing) (Nothing)\n  //. Nothing\n  //.\n  //. > S.alt (Nothing) (Just (1))\n  //. Just (1)\n  //.\n  //. > S.alt (Just (2)) (Nothing)\n  //. Just (2)\n  //.\n  //. > S.alt (Just (3)) (Just (4))\n  //. Just (3)\n  //. ```\n  function Nothing$prototype$alt(other) {\n    return other;\n  }\n  function Just$prototype$alt(other) {\n    return this;\n  }\n\n  //# Maybe#fantasy-land/reduce :: Maybe a ~> ((b, a) -> b, b) -> b\n  //.\n  //.   - `reduce (f) (x) (Nothing)` is equivalent to `x`\n  //.   - `reduce (f) (x) (Just (y))` is equivalent to `f (x) (y)`\n  //.\n  //. ```javascript\n  //. > S.reduce (S.concat) ('abc') (Nothing)\n  //. 'abc'\n  //.\n  //. > S.reduce (S.concat) ('abc') (Just ('xyz'))\n  //. 'abcxyz'\n  //. ```\n  function Nothing$prototype$reduce(f, x) {\n    return x;\n  }\n  function Just$prototype$reduce(f, x) {\n    return f (x, this.value);\n  }\n\n  //# Maybe#fantasy-land/traverse :: Applicative f => Maybe a ~> (TypeRep f, a -> f b) -> f (Maybe b)\n  //.\n  //.   - `traverse (A) (f) (Nothing)` is equivalent to `of (A) (Nothing)`\n  //.   - `traverse (A) (f) (Just (x))` is equivalent to `map (Just) (f (x))`\n  //.\n  //. ```javascript\n  //. > S.traverse (Array) (S.words) (Nothing)\n  //. [Nothing]\n  //.\n  //. > S.traverse (Array) (S.words) (Just ('foo bar baz'))\n  //. [Just ('foo'), Just ('bar'), Just ('baz')]\n  //. ```\n  function Nothing$prototype$traverse(typeRep, f) {\n    return Z.of (typeRep, this);\n  }\n  function Just$prototype$traverse(typeRep, f) {\n    return Z.map (Just, f (this.value));\n  }\n\n  //# Maybe#fantasy-land/extend :: Maybe a ~> (Maybe a -> b) -> Maybe b\n  //.\n  //.   - `extend (f) (Nothing)` is equivalent to `Nothing`\n  //.   - `extend (f) (Just (x))` is equivalent to `Just (f (Just (x)))`\n  //.\n  //. ```javascript\n  //. > S.extend (S.reduce (S.add) (1)) (Nothing)\n  //. Nothing\n  //.\n  //. > S.extend (S.reduce (S.add) (1)) (Just (99))\n  //. Just (100)\n  //. ```\n  function Nothing$prototype$extend(f) {\n    return this;\n  }\n  function Just$prototype$extend(f) {\n    return Just (f (this));\n  }\n\n  return Maybe;\n\n}));\n\n//. [Fantasy Land]:             v:fantasyland/fantasy-land\n//. [`Z.equals`]:               v:sanctuary-js/sanctuary-type-classes#equals\n//. [`Z.lte`]:                  v:sanctuary-js/sanctuary-type-classes#lte\n//. [iff]:                      https://en.wikipedia.org/wiki/If_and_only_if\n//. [type identifier]:          v:sanctuary-js/sanctuary-type-identifiers\n//. [type representative]:      v:fantasyland/fantasy-land#type-representatives\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '9.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","       /*                   *\\\n      //                     \\\\\n     //   @@  @@     @@  @@   \\\\\n    //      @@       @@  @@    \\\\\n    \\\\      @@       @@  @@    //\n     \\\\   @@  @@  @    @@ @   //\n      \\\\          /       @  //\n       \\*             @@@@  */\n\n//. <a href=\"https://github.com/fantasyland/fantasy-land\"><img alt=\"Fantasy Land\" src=\"https://raw.githubusercontent.com/fantasyland/fantasy-land/master/logo.png\" width=\"75\" height=\"75\" align=\"left\"></a>\n//.\n//. # sanctuary-pair\n//.\n//. Pair is the canonical product type: a value of type `Pair a b` always\n//. contains exactly two values: one of type `a`; one of type `b`.\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f (require ('sanctuary-show'),\n                        require ('sanctuary-type-classes'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define (['sanctuary-show', 'sanctuary-type-classes'], f);\n  } else {\n    self.sanctuaryPair = f (self.sanctuaryShow, self.sanctuaryTypeClasses);\n  }\n\n} (function(show, Z) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    var $ = __doctest.require ('sanctuary-def');\n    var type = __doctest.require ('sanctuary-type-identifiers');\n    var S = (function() {\n      var S = __doctest.require ('sanctuary');\n      var PairType = $.BinaryType\n        ('sanctuary-pair/Pair')\n        ('')\n        (function(x) { return type (x) === Pair['@@type']; })\n        (function(p) { return [p.fst]; })\n        (function(p) { return [p.snd]; });\n      var env = Z.concat (S.env,\n                          [$.TypeClass, PairType ($.Unknown) ($.Unknown)]);\n      return S.create ({checkTypes: true, env: env});\n    } ());\n  }\n\n  var prototype = {\n    /* eslint-disable key-spacing */\n    'constructor':            Pair,\n    '@@show':                 Pair$prototype$show,\n    'fantasy-land/compose':   Pair$prototype$compose,\n    'fantasy-land/map':       Pair$prototype$map,\n    'fantasy-land/bimap':     Pair$prototype$bimap,\n    'fantasy-land/reduce':    Pair$prototype$reduce,\n    'fantasy-land/traverse':  Pair$prototype$traverse,\n    'fantasy-land/extend':    Pair$prototype$extend,\n    'fantasy-land/extract':   Pair$prototype$extract\n    /* eslint-enable key-spacing */\n  };\n\n  var util =\n    typeof module === 'object' && typeof module.exports === 'object' ?\n    require ('util') :\n    /* istanbul ignore next */ {};\n  prototype[\n    util.inspect != null && typeof util.inspect.custom === 'symbol' ?\n    /* istanbul ignore next */ util.inspect.custom :\n    /* istanbul ignore next */ 'inspect'\n  ] = Pair$prototype$show;\n\n  /* istanbul ignore else */\n  if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n    prototype[Symbol.iterator] = function() {\n      return [this.fst, this.snd][Symbol.iterator] ();\n    };\n  }\n\n  //. `Pair a b` satisfies the following [Fantasy Land][] specifications:\n  //.\n  //. ```javascript\n  //. > const Useless = require ('sanctuary-useless')\n  //.\n  //. > S.map (k => k + ' '.repeat (16 - k.length) +\n  //. .             (Z[k].test (Pair (Useless) (Useless)) ? '\\u2705   ' :\n  //. .              Z[k].test (Pair (['foo']) (['bar'])) ? '\\u2705 * ' :\n  //. .              /* otherwise */                        '\\u274C   '))\n  //. .       (S.keys (Z.filter ($.test ([]) ($.TypeClass), Z)))\n  //. [ 'Setoid          ✅ * ',  // if ‘a’ and ‘b’ satisfy Setoid\n  //. . 'Ord             ✅ * ',  // if ‘a’ and ‘b’ satisfy Ord\n  //. . 'Semigroupoid    ✅   ',\n  //. . 'Category        ❌   ',\n  //. . 'Semigroup       ✅ * ',  // if ‘a’ and ‘b’ satisfy Semigroup\n  //. . 'Monoid          ❌   ',\n  //. . 'Group           ❌   ',\n  //. . 'Filterable      ❌   ',\n  //. . 'Functor         ✅   ',\n  //. . 'Bifunctor       ✅   ',\n  //. . 'Profunctor      ❌   ',\n  //. . 'Apply           ✅ * ',  // if ‘a’ satisfies Semigroup\n  //. . 'Applicative     ❌   ',\n  //. . 'Chain           ✅ * ',  // if ‘a’ satisfies Semigroup\n  //. . 'ChainRec        ❌   ',\n  //. . 'Monad           ❌   ',\n  //. . 'Alt             ❌   ',\n  //. . 'Plus            ❌   ',\n  //. . 'Alternative     ❌   ',\n  //. . 'Foldable        ✅   ',\n  //. . 'Traversable     ✅   ',\n  //. . 'Extend          ✅   ',\n  //. . 'Comonad         ✅   ',\n  //. . 'Contravariant   ❌   ' ]\n  //. ```\n\n  //# Pair :: a -> b -> Pair a b\n  //.\n  //. Pair's sole data constructor. Additionally, it serves as the\n  //. Pair [type representative][].\n  //.\n  //. ```javascript\n  //. > Pair (1) (2)\n  //. Pair (1) (2)\n  //. ```\n  function Pair(fst) {\n    return function(snd) {\n      var pair = Object.create (prototype);\n      if (Z.Setoid.test (fst) && Z.Setoid.test (snd)) {\n        pair['fantasy-land/equals'] = Pair$prototype$equals;\n        if (Z.Ord.test (fst) && Z.Ord.test (snd)) {\n          pair['fantasy-land/lte'] = Pair$prototype$lte;\n        }\n      }\n      if (Z.Semigroup.test (fst)) {\n        if (Z.Semigroup.test (snd)) {\n          pair['fantasy-land/concat'] = Pair$prototype$concat;\n        }\n        pair['fantasy-land/ap'] = Pair$prototype$ap;\n        pair['fantasy-land/chain'] = Pair$prototype$chain;\n      }\n      pair.fst = fst;\n      pair.snd = snd;\n      return pair;\n    };\n  }\n\n  //# Pair.fst :: Pair a b -> a\n  //.\n  //. `fst (Pair (x) (y))` is equivalent to `x`.\n  //.\n  //. ```javascript\n  //. > Pair.fst (Pair ('abc') ([1, 2, 3]))\n  //. 'abc'\n  //. ```\n  Pair.fst = function(p) { return p.fst; };\n\n  //# Pair.snd :: Pair a b -> b\n  //.\n  //. `snd (Pair (x) (y))` is equivalent to `y`.\n  //.\n  //. ```javascript\n  //. > Pair.snd (Pair ('abc') ([1, 2, 3]))\n  //. [1, 2, 3]\n  //. ```\n  Pair.snd = function(p) { return p.snd; };\n\n  //# Pair.swap :: Pair a b -> Pair b a\n  //.\n  //. `swap (Pair (x) (y))` is equivalent to `Pair (y) (x)`.\n  //.\n  //. ```javascript\n  //. > Pair.swap (Pair ('abc') ([1, 2, 3]))\n  //. Pair ([1, 2, 3]) ('abc')\n  //. ```\n  Pair.swap = function(p) { return Pair (p.snd) (p.fst); };\n\n  //# Pair.@@type :: String\n  //.\n  //. Pair [type identifier][].\n  //.\n  //. ```javascript\n  //. > type (Pair ('abc') ([1, 2, 3]))\n  //. 'sanctuary-pair/Pair@1'\n  //.\n  //. > type.parse (type (Pair ('abc') ([1, 2, 3])))\n  //. {namespace: 'sanctuary-pair', name: 'Pair', version: 1}\n  //. ```\n  Pair['@@type'] = 'sanctuary-pair/Pair@1';\n\n  //# Pair#@@show :: (Showable a, Showable b) => Pair a b ~> () -> String\n  //.\n  //. `show (Pair (x) (y))` is equivalent to\n  //. `'Pair (' + show (x) + ') (' + show (y) + ')'`.\n  //.\n  //. ```javascript\n  //. > show (Pair ('abc') ([1, 2, 3]))\n  //. 'Pair (\"abc\") ([1, 2, 3])'\n  //. ```\n  function Pair$prototype$show() {\n    return 'Pair (' + show (this.fst) + ') (' + show (this.snd) + ')';\n  }\n\n  //# Pair#fantasy-land/equals :: (Setoid a, Setoid b) => Pair a b ~> Pair a b -> Boolean\n  //.\n  //. `Pair (x) (y)` is equal to `Pair (v) (w)` [iff][] `x` is equal to `v`\n  //. and `y` is equal to `w` according to [`Z.equals`][].\n  //.\n  //. ```javascript\n  //. > S.equals (Pair ('abc') ([1, 2, 3])) (Pair ('abc') ([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals (Pair ('abc') ([1, 2, 3])) (Pair ('abc') ([3, 2, 1]))\n  //. false\n  //. ```\n  function Pair$prototype$equals(other) {\n    return Z.equals (this.fst, other.fst) && Z.equals (this.snd, other.snd);\n  }\n\n  //# Pair#fantasy-land/lte :: (Ord a, Ord b) => Pair a b ~> Pair a b -> Boolean\n  //.\n  //. `Pair (x) (y)` is less than or equal to `Pair (v) (w)` [iff][] `x` is\n  //. less than `v` or `x` is equal to `v` and `y` is less than or equal to\n  //. `w` according to [`Z.lte`][].\n  //.\n  //. ```javascript\n  //. > S.filter (S.lte (Pair ('b') (2)))\n  //. .          ([Pair ('a') (1), Pair ('a') (2), Pair ('a') (3),\n  //. .            Pair ('b') (1), Pair ('b') (2), Pair ('b') (3),\n  //. .            Pair ('c') (1), Pair ('c') (2), Pair ('c') (3)])\n  //. [ Pair ('a') (1),\n  //. . Pair ('a') (2),\n  //. . Pair ('a') (3),\n  //. . Pair ('b') (1),\n  //. . Pair ('b') (2) ]\n  //. ```\n  function Pair$prototype$lte(other) {\n    return Z.equals (this.fst, other.fst) ? Z.lte (this.snd, other.snd)\n                                          : Z.lte (this.fst, other.fst);\n  }\n\n  //# Pair#fantasy-land/compose :: Pair a b ~> Pair b c -> Pair a c\n  //.\n  //. `compose (Pair (x) (y)) (Pair (v) (w))` is equivalent to `Pair (v) (y)`.\n  //.\n  //. ```javascript\n  //. > S.compose (Pair ('a') (0)) (Pair ([1, 2, 3]) ('b'))\n  //. Pair ([1, 2, 3]) (0)\n  //. ```\n  function Pair$prototype$compose(other) {\n    return Pair (this.fst) (other.snd);\n  }\n\n  //# Pair#fantasy-land/concat :: (Semigroup a, Semigroup b) => Pair a b ~> Pair a b -> Pair a b\n  //.\n  //. `concat (Pair (x) (y)) (Pair (v) (w))` is equivalent to\n  //. `Pair (concat (x) (v)) (concat (y) (w))`.\n  //.\n  //. ```javascript\n  //. > S.concat (Pair ('abc') ([1, 2, 3])) (Pair ('xyz') ([4, 5, 6]))\n  //. Pair ('abcxyz') ([1, 2, 3, 4, 5, 6])\n  //. ```\n  function Pair$prototype$concat(other) {\n    return Pair (Z.concat (this.fst, other.fst))\n                (Z.concat (this.snd, other.snd));\n  }\n\n  //# Pair#fantasy-land/map :: Pair a b ~> (b -> c) -> Pair a c\n  //.\n  //. `map (f) (Pair (x) (y))` is equivalent to `Pair (x) (f (y))`.\n  //.\n  //. ```javascript\n  //. > S.map (Math.sqrt) (Pair ('abc') (256))\n  //. Pair ('abc') (16)\n  //. ```\n  function Pair$prototype$map(f) {\n    return Pair (this.fst) (f (this.snd));\n  }\n\n  //# Pair#fantasy-land/bimap :: Pair a c ~> (a -> b, c -> d) -> Pair b d\n  //.\n  //. `bimap (f) (g) (Pair (x) (y))` is equivalent to `Pair (f (x)) (g (y))`.\n  //.\n  //. ```javascript\n  //. > S.bimap (S.toUpper) (Math.sqrt) (Pair ('abc') (256))\n  //. Pair ('ABC') (16)\n  //. ```\n  function Pair$prototype$bimap(f, g) {\n    return Pair (f (this.fst)) (g (this.snd));\n  }\n\n  //# Pair#fantasy-land/ap :: Semigroup a => Pair a b ~> Pair a (b -> c) -> Pair a c\n  //.\n  //. `ap (Pair (v) (f)) (Pair (x) (y))` is equivalent to\n  //. `Pair (concat (v) (x)) (f (y))`.\n  //.\n  //. ```javascript\n  //. > S.ap (Pair ('abc') (Math.sqrt)) (Pair ('xyz') (256))\n  //. Pair ('abcxyz') (16)\n  //. ```\n  function Pair$prototype$ap(other) {\n    return Pair (Z.concat (other.fst, this.fst)) (other.snd (this.snd));\n  }\n\n  //# Pair#fantasy-land/chain :: Semigroup a => Pair a b ~> (b -> Pair a c) -> Pair a c\n  //.\n  //. `chain (f) (Pair (x) (y))` is equivalent to\n  //. `Pair (concat (x) (fst (f (y)))) (snd (f (y)))`.\n  //.\n  //. ```javascript\n  //. > S.chain (n => Pair (show (n)) (Math.sqrt (n))) (Pair ('abc') (256))\n  //. Pair ('abc256') (16)\n  //. ```\n  function Pair$prototype$chain(f) {\n    var other = f (this.snd);\n    return Pair (Z.concat (this.fst, other.fst)) (other.snd);\n  }\n\n  //# Pair#fantasy-land/reduce :: Pair a b ~> ((c, b) -> c, c) -> c\n  //.\n  //. `reduce (f) (x) (Pair (v) (w))` is equivalent to `f (x) (w)`.\n  //.\n  //. ```javascript\n  //. > S.reduce (S.concat) ([1, 2, 3]) (Pair ('abc') ([4, 5, 6]))\n  //. [1, 2, 3, 4, 5, 6]\n  //. ```\n  function Pair$prototype$reduce(f, x) {\n    return f (x, this.snd);\n  }\n\n  //# Pair#fantasy-land/traverse :: Applicative f => Pair a b ~> (TypeRep f, b -> f c) -> f (Pair a c)\n  //.\n  //. `traverse (_) (f) (Pair (x) (y))` is equivalent to\n  //. `map (Pair (x)) (f (y))`.\n  //.\n  //. ```javascript\n  //. > S.traverse (Array) (S.words) (Pair (123) ('foo bar baz'))\n  //. [Pair (123) ('foo'), Pair (123) ('bar'), Pair (123) ('baz')]\n  //. ```\n  function Pair$prototype$traverse(typeRep, f) {\n    return Z.map (Pair (this.fst), f (this.snd));\n  }\n\n  //# Pair#fantasy-land/extend :: Pair a b ~> (Pair a b -> c) -> Pair a c\n  //.\n  //. `extend (f) (Pair (x) (y))` is equivalent to\n  //. `Pair (x) (f (Pair (x) (y)))`.\n  //.\n  //. ```javascript\n  //. > S.extend (S.reduce (S.add) (1)) (Pair ('abc') (99))\n  //. Pair ('abc') (100)\n  //. ```\n  function Pair$prototype$extend(f) {\n    return Pair (this.fst) (f (this));\n  }\n\n  //# Pair#fantasy-land/extract :: Pair a b ~> () -> b\n  //.\n  //. `extract (Pair (x) (y))` is equivalent to `y`.\n  //.\n  //. ```javascript\n  //. > S.extract (Pair ('abc') ([1, 2, 3]))\n  //. [1, 2, 3]\n  //. ```\n  function Pair$prototype$extract() {\n    return this.snd;\n  }\n\n  return Pair;\n\n}));\n\n//. [Fantasy Land]:             v:fantasyland/fantasy-land\n//. [`Z.equals`]:               v:sanctuary-js/sanctuary-type-classes#equals\n//. [`Z.lte`]:                  v:sanctuary-js/sanctuary-type-classes#lte\n//. [iff]:                      https://en.wikipedia.org/wiki/If_and_only_if\n//. [type identifier]:          v:sanctuary-js/sanctuary-type-identifiers\n//. [type representative]:      v:fantasyland/fantasy-land#type-representatives\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '9.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '9.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","//Built-in constant from web api\r\nexport const MESSAGE = \"message\";\r\n\r\n/* \r\n * These are really just internal wrapped with the loader functions\r\n */\r\nexport enum WorkerLoaderCommand {\r\n    INIT, //Sent from IO when Worker JS is loaded\r\n    READY, //Sent from Worker when INIT is received (worker is ready)\r\n}\r\n\r\n/*\r\n * See where these are called in IO.ts and Worker.ts to make stuff happen\r\n */\r\n\r\nexport enum WorkerCommand {\r\n    SCENE_PING,//Sent from IO when first scene is ready\r\n    SCENE_PONG, //Sent from Worker when first scene is ready\r\n    TICK, //Sent from IO on frame tick - but only when not busy \r\n    RENDER, //Sent from Worker when work is finished processing \r\n}\r\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar RProxy = (function () {\n    function RProxy() {\n\n    };\n    RProxy.value = new RProxy();\n    return RProxy;\n})();\nmodule.exports = {\n    RProxy: RProxy\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar $foreign = require(\"./foreign.js\");\nvar Control_Applicative = require(\"../Control.Applicative/index.js\");\nvar Control_Apply = require(\"../Control.Apply/index.js\");\nvar Control_Category = require(\"../Control.Category/index.js\");\nvar Data_Function = require(\"../Data.Function/index.js\");\nvar Data_Functor = require(\"../Data.Functor/index.js\");\nvar Data_Unit = require(\"../Data.Unit/index.js\");\nvar Bind = function (Apply0, bind) {\n    this.Apply0 = Apply0;\n    this.bind = bind;\n};\nvar Discard = function (discard) {\n    this.discard = discard;\n};\nvar discard = function (dict) {\n    return dict.discard;\n};\nvar bindFn = new Bind(function () {\n    return Control_Apply.applyFn;\n}, function (m) {\n    return function (f) {\n        return function (x) {\n            return f(m(x))(x);\n        };\n    };\n});\nvar bindArray = new Bind(function () {\n    return Control_Apply.applyArray;\n}, $foreign.arrayBind);\nvar bind = function (dict) {\n    return dict.bind;\n};\nvar bindFlipped = function (dictBind) {\n    return Data_Function.flip(bind(dictBind));\n};\nvar composeKleisliFlipped = function (dictBind) {\n    return function (f) {\n        return function (g) {\n            return function (a) {\n                return bindFlipped(dictBind)(f)(g(a));\n            };\n        };\n    };\n};\nvar composeKleisli = function (dictBind) {\n    return function (f) {\n        return function (g) {\n            return function (a) {\n                return bind(dictBind)(f(a))(g);\n            };\n        };\n    };\n};\nvar discardUnit = new Discard(function (dictBind) {\n    return bind(dictBind);\n});\nvar ifM = function (dictBind) {\n    return function (cond) {\n        return function (t) {\n            return function (f) {\n                return bind(dictBind)(cond)(function (cond$prime) {\n                    if (cond$prime) {\n                        return t;\n                    };\n                    return f;\n                });\n            };\n        };\n    };\n};\nvar join = function (dictBind) {\n    return function (m) {\n        return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));\n    };\n};\nmodule.exports = {\n    Bind: Bind,\n    bind: bind,\n    bindFlipped: bindFlipped,\n    Discard: Discard,\n    discard: discard,\n    join: join,\n    composeKleisli: composeKleisli,\n    composeKleisliFlipped: composeKleisliFlipped,\n    ifM: ifM,\n    bindFn: bindFn,\n    bindArray: bindArray,\n    discardUnit: discardUnit\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar Data_HeytingAlgebra = require(\"../Data.HeytingAlgebra/index.js\");\nvar Data_Symbol = require(\"../Data.Symbol/index.js\");\nvar Data_Unit = require(\"../Data.Unit/index.js\");\nvar BooleanAlgebra = function (HeytingAlgebra0) {\n    this.HeytingAlgebra0 = HeytingAlgebra0;\n};\nvar BooleanAlgebraRecord = function (HeytingAlgebraRecord0) {\n    this.HeytingAlgebraRecord0 = HeytingAlgebraRecord0;\n};\nvar booleanAlgebraUnit = new BooleanAlgebra(function () {\n    return Data_HeytingAlgebra.heytingAlgebraUnit;\n});\nvar booleanAlgebraRecordNil = new BooleanAlgebraRecord(function () {\n    return Data_HeytingAlgebra.heytingAlgebraRecordNil;\n});\nvar booleanAlgebraRecordCons = function (dictIsSymbol) {\n    return function (dictCons) {\n        return function (dictBooleanAlgebraRecord) {\n            return function (dictBooleanAlgebra) {\n                return new BooleanAlgebraRecord(function () {\n                    return Data_HeytingAlgebra.heytingAlgebraRecordCons(dictIsSymbol)(dictCons)(dictBooleanAlgebraRecord.HeytingAlgebraRecord0())(dictBooleanAlgebra.HeytingAlgebra0());\n                });\n            };\n        };\n    };\n};\nvar booleanAlgebraRecord = function (dictRowToList) {\n    return function (dictBooleanAlgebraRecord) {\n        return new BooleanAlgebra(function () {\n            return Data_HeytingAlgebra.heytingAlgebraRecord(dictRowToList)(dictBooleanAlgebraRecord.HeytingAlgebraRecord0());\n        });\n    };\n};\nvar booleanAlgebraFn = function (dictBooleanAlgebra) {\n    return new BooleanAlgebra(function () {\n        return Data_HeytingAlgebra.heytingAlgebraFunction(dictBooleanAlgebra.HeytingAlgebra0());\n    });\n};\nvar booleanAlgebraBoolean = new BooleanAlgebra(function () {\n    return Data_HeytingAlgebra.heytingAlgebraBoolean;\n});\nmodule.exports = {\n    BooleanAlgebra: BooleanAlgebra,\n    BooleanAlgebraRecord: BooleanAlgebraRecord,\n    booleanAlgebraBoolean: booleanAlgebraBoolean,\n    booleanAlgebraUnit: booleanAlgebraUnit,\n    booleanAlgebraFn: booleanAlgebraFn,\n    booleanAlgebraRecord: booleanAlgebraRecord,\n    booleanAlgebraRecordNil: booleanAlgebraRecordNil,\n    booleanAlgebraRecordCons: booleanAlgebraRecordCons\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar Data_EuclideanRing = require(\"../Data.EuclideanRing/index.js\");\nvar Data_Ring = require(\"../Data.Ring/index.js\");\nvar Data_Semiring = require(\"../Data.Semiring/index.js\");\nvar DivisionRing = function (Ring0, recip) {\n    this.Ring0 = Ring0;\n    this.recip = recip;\n};\nvar recip = function (dict) {\n    return dict.recip;\n};\nvar rightDiv = function (dictDivisionRing) {\n    return function (a) {\n        return function (b) {\n            return Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(a)(recip(dictDivisionRing)(b));\n        };\n    };\n};\nvar leftDiv = function (dictDivisionRing) {\n    return function (a) {\n        return function (b) {\n            return Data_Semiring.mul((dictDivisionRing.Ring0()).Semiring0())(recip(dictDivisionRing)(b))(a);\n        };\n    };\n};\nvar divisionringNumber = new DivisionRing(function () {\n    return Data_Ring.ringNumber;\n}, function (x) {\n    return 1.0 / x;\n});\nmodule.exports = {\n    DivisionRing: DivisionRing,\n    recip: recip,\n    leftDiv: leftDiv,\n    rightDiv: rightDiv,\n    divisionringNumber: divisionringNumber\n};\n","import {GltfScene, gltf_createAnimator, gltf_updateScene} from \"pure3d\";\r\nimport {initWorker} from \"utils/Utils\";\r\nimport {WorkerCommand, MESSAGE} from \"types/Worker-Types\";\r\nimport {move} from \"purescript/Main/index\";\r\nimport * as L from \"partial.lenses\";\r\n\r\ninitWorker().fork(\r\n    console.error,\r\n    worker => {\r\n\r\n        //top-level mutable state\r\n        let lastTs:number;\r\n        let direction:number = 1;\r\n        let scene:Readonly<GltfScene>;\r\n        let updateSceneForRenderer: (frameTs: number) => (scene:GltfScene) => GltfScene;\r\n\r\n        let lightLens:Array<string | number>;\r\n\r\n        worker.addEventListener(MESSAGE, (e:MessageEvent) => {\r\n            switch(e.data.cmd) {\r\n                case WorkerCommand.SCENE_PING:\r\n\r\n                    scene = e.data.scene;\r\n                    updateSceneForRenderer = gltf_updateScene(gltf_createAnimator(e.data.animations) ({loop: true}));\r\n\r\n\r\n                    /* One day this will all be purescript :D */\r\n                    lightLens = [\r\n                        \"nodes\",\r\n                        scene.nodes.findIndex(node => node[\"name\"] === \"MyLight\"),\r\n                        \"transform\",\r\n                        \"trs\",\r\n                        \"translation\",\r\n                        0\r\n                    ];\r\n\r\n                    scene = L.set(lightLens) (-15) (scene);\r\n\r\n                    setInterval(() => direction *= -1, 3000);\r\n\r\n                    worker.postMessage({\r\n                        cmd: WorkerCommand.SCENE_PONG,\r\n                    });\r\n                    break;\r\n\r\n                case WorkerCommand.TICK:\r\n\r\n                    //Also this, would ideally all by in purescript... \r\n                    if(lastTs !== undefined) {\r\n                        const amt = (e.data.frameTs - lastTs) * .01 * direction;\r\n\r\n                        scene = L.modify(lightLens) (move(amt)) (scene)\r\n                    }\r\n\r\n                    lastTs = e.data.frameTs;\r\n\r\n                    scene = updateSceneForRenderer (e.data.frameTs) (scene);\r\n\r\n                    worker.postMessage({\r\n                        cmd: WorkerCommand.RENDER,\r\n                        scene\r\n                    });\r\n\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n);\r\n\r\n\r\n","'use strict';\n\n/**\n * Custom implementation of a double ended queue.\n */\nfunction Denque(array) {\n  this._head = 0;\n  this._tail = 0;\n  this._capacityMask = 0x3;\n  this._list = new Array(4);\n  if (Array.isArray(array)) {\n    this._fromArray(array);\n  }\n}\n\n/**\n * -------------\n *  PUBLIC API\n * -------------\n */\n\n/**\n * Returns the item at the specified index from the list.\n * 0 is the first element, 1 is the second, and so on...\n * Elements at negative values are that many from the end: -1 is one before the end\n * (the last element), -2 is two before the end (one before last), etc.\n * @param index\n * @returns {*}\n */\nDenque.prototype.peekAt = function peekAt(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var len = this.size();\n  if (i >= len || i < -len) return undefined;\n  if (i < 0) i += len;\n  i = (this._head + i) & this._capacityMask;\n  return this._list[i];\n};\n\n/**\n * Alias for peakAt()\n * @param i\n * @returns {*}\n */\nDenque.prototype.get = function get(i) {\n  return this.peekAt(i);\n};\n\n/**\n * Returns the first item in the list without removing it.\n * @returns {*}\n */\nDenque.prototype.peek = function peek() {\n  if (this._head === this._tail) return undefined;\n  return this._list[this._head];\n};\n\n/**\n * Alias for peek()\n * @returns {*}\n */\nDenque.prototype.peekFront = function peekFront() {\n  return this.peek();\n};\n\n/**\n * Returns the item that is at the back of the queue without removing it.\n * Uses peekAt(-1)\n */\nDenque.prototype.peekBack = function peekBack() {\n  return this.peekAt(-1);\n};\n\n/**\n * Returns the current length of the queue\n * @return {Number}\n */\nObject.defineProperty(Denque.prototype, 'length', {\n  get: function length() {\n    return this.size();\n  }\n});\n\n/**\n * Return the number of items on the list, or 0 if empty.\n * @returns {number}\n */\nDenque.prototype.size = function size() {\n  if (this._head === this._tail) return 0;\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Add an item at the beginning of the list.\n * @param item\n */\nDenque.prototype.unshift = function unshift(item) {\n  if (item === undefined) return this.size();\n  var len = this._list.length;\n  this._head = (this._head - 1 + len) & this._capacityMask;\n  this._list[this._head] = item;\n  if (this._tail === this._head) this._growArray();\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the first item on the list,\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.shift = function shift() {\n  var head = this._head;\n  if (head === this._tail) return undefined;\n  var item = this._list[head];\n  this._list[head] = undefined;\n  this._head = (head + 1) & this._capacityMask;\n  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Add an item to the bottom of the list.\n * @param item\n */\nDenque.prototype.push = function push(item) {\n  if (item === undefined) return this.size();\n  var tail = this._tail;\n  this._list[tail] = item;\n  this._tail = (tail + 1) & this._capacityMask;\n  if (this._tail === this._head) {\n    this._growArray();\n  }\n\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the last item on the list.\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.pop = function pop() {\n  var tail = this._tail;\n  if (tail === this._head) return undefined;\n  var len = this._list.length;\n  this._tail = (tail - 1 + len) & this._capacityMask;\n  var item = this._list[this._tail];\n  this._list[this._tail] = undefined;\n  if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Remove and return the item at the specified index from the list.\n * Returns undefined if the list is empty.\n * @param index\n * @returns {*}\n */\nDenque.prototype.removeOne = function removeOne(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size) return void 0;\n  if (i < 0) i += size;\n  i = (this._head + i) & this._capacityMask;\n  var item = this._list[i];\n  var k;\n  if (index < size / 2) {\n    for (k = index; k > 0; k--) {\n      this._list[i] = this._list[i = (i - 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._head = (this._head + 1 + len) & this._capacityMask;\n  } else {\n    for (k = size - 1 - index; k > 0; k--) {\n      this._list[i] = this._list[i = ( i + 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._tail = (this._tail - 1 + len) & this._capacityMask;\n  }\n  return item;\n};\n\n/**\n * Remove number of items from the specified index from the list.\n * Returns array of removed items.\n * Returns undefined if the list is empty.\n * @param index\n * @param count\n * @returns {array}\n */\nDenque.prototype.remove = function remove(index, count) {\n  var i = index;\n  var removed;\n  var del_count = count;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size || count < 1) return void 0;\n  if (i < 0) i += size;\n  if (count === 1 || !count) {\n    removed = new Array(1);\n    removed[0] = this.removeOne(i);\n    return removed;\n  }\n  if (i === 0 && i + count >= size) {\n    removed = this.toArray();\n    this.clear();\n    return removed;\n  }\n  if (i + count > size) count = size - i;\n  var k;\n  removed = new Array(count);\n  for (k = 0; k < count; k++) {\n    removed[k] = this._list[(this._head + i + k) & this._capacityMask];\n  }\n  i = (this._head + i) & this._capacityMask;\n  if (index + count === size) {\n    this._tail = (this._tail - count + len) & this._capacityMask;\n    for (k = count; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index === 0) {\n    this._head = (this._head + count + len) & this._capacityMask;\n    for (k = count - 1; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index < size / 2) {\n    this._head = (this._head + index + count + len) & this._capacityMask;\n    for (k = index; k > 0; k--) {\n      this.unshift(this._list[i = (i - 1 + len) & this._capacityMask]);\n    }\n    i = (this._head - 1 + len) & this._capacityMask;\n    while (del_count > 0) {\n      this._list[i = (i - 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n  } else {\n    this._tail = i;\n    i = (i + count + len) & this._capacityMask;\n    for (k = size - (count + index); k > 0; k--) {\n      this.push(this._list[i++]);\n    }\n    i = this._tail;\n    while (del_count > 0) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n  }\n  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();\n  return removed;\n};\n\n/**\n * Native splice implementation.\n * Remove number of items from the specified index from the list and/or add new elements.\n * Returns array of removed items or empty array if count == 0.\n * Returns undefined if the list is empty.\n *\n * @param index\n * @param count\n * @param {...*} [elements]\n * @returns {array}\n */\nDenque.prototype.splice = function splice(index, count) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var size = this.size();\n  if (i < 0) i += size;\n  if (i > size) return void 0;\n  if (arguments.length > 2) {\n    var k;\n    var temp;\n    var removed;\n    var arg_len = arguments.length;\n    var len = this._list.length;\n    var arguments_index = 2;\n    if (!size || i < size / 2) {\n      temp = new Array(i);\n      for (k = 0; k < i; k++) {\n        temp[k] = this._list[(this._head + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i > 0) {\n          this._head = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._head = (this._head + i + len) & this._capacityMask;\n      }\n      while (arg_len > arguments_index) {\n        this.unshift(arguments[--arg_len]);\n      }\n      for (k = i; k > 0; k--) {\n        this.unshift(temp[k - 1]);\n      }\n    } else {\n      temp = new Array(size - (i + count));\n      var leng = temp.length;\n      for (k = 0; k < leng; k++) {\n        temp[k] = this._list[(this._head + i + count + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i != size) {\n          this._tail = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._tail = (this._tail - leng + len) & this._capacityMask;\n      }\n      while (arguments_index < arg_len) {\n        this.push(arguments[arguments_index++]);\n      }\n      for (k = 0; k < leng; k++) {\n        this.push(temp[k]);\n      }\n    }\n    return removed;\n  } else {\n    return this.remove(i, count);\n  }\n};\n\n/**\n * Soft clear - does not reset capacity.\n */\nDenque.prototype.clear = function clear() {\n  this._head = 0;\n  this._tail = 0;\n};\n\n/**\n * Returns true or false whether the list is empty.\n * @returns {boolean}\n */\nDenque.prototype.isEmpty = function isEmpty() {\n  return this._head === this._tail;\n};\n\n/**\n * Returns an array of all queue items.\n * @returns {Array}\n */\nDenque.prototype.toArray = function toArray() {\n  return this._copyArray(false);\n};\n\n/**\n * -------------\n *   INTERNALS\n * -------------\n */\n\n/**\n * Fills the queue with items from an array\n * For use in the constructor\n * @param array\n * @private\n */\nDenque.prototype._fromArray = function _fromArray(array) {\n  for (var i = 0; i < array.length; i++) this.push(array[i]);\n};\n\n/**\n *\n * @param fullCopy\n * @returns {Array}\n * @private\n */\nDenque.prototype._copyArray = function _copyArray(fullCopy) {\n  var newArray = [];\n  var list = this._list;\n  var len = list.length;\n  var i;\n  if (fullCopy || this._head > this._tail) {\n    for (i = this._head; i < len; i++) newArray.push(list[i]);\n    for (i = 0; i < this._tail; i++) newArray.push(list[i]);\n  } else {\n    for (i = this._head; i < this._tail; i++) newArray.push(list[i]);\n  }\n  return newArray;\n};\n\n/**\n * Grows the internal list array.\n * @private\n */\nDenque.prototype._growArray = function _growArray() {\n  if (this._head) {\n    // copy existing data, head to end, then beginning to tail.\n    this._list = this._copyArray(true);\n    this._head = 0;\n  }\n\n  // head is at 0 and array is now full, safe to extend\n  this._tail = this._list.length;\n\n  this._list.length *= 2;\n  this._capacityMask = (this._capacityMask << 1) | 1;\n};\n\n/**\n * Shrinks the internal list array.\n * @private\n */\nDenque.prototype._shrinkArray = function _shrinkArray() {\n  this._list.length >>>= 1;\n  this._capacityMask >>>= 1;\n};\n\n\nmodule.exports = Denque;\n","//. # Concurrify\n//.\n//. [![Chat](https://badges.gitter.im/fluture-js/concurrify.svg)](https://gitter.im/fluture-js/fluture)\n//. [![NPM Version](https://badge.fury.io/js/concurrify.svg)](https://www.npmjs.com/package/concurrify)\n//. [![Dependencies](https://david-dm.org/fluture-js/concurrify.svg)](https://david-dm.org/fluture-js/concurrify)\n//. [![Build Status](https://travis-ci.org/fluture-js/concurrify.svg?branch=master)](https://travis-ci.org/fluture-js/concurrify)\n//. [![Code Coverage](https://codecov.io/gh/fluture-js/concurrify/branch/master/graph/badge.svg)](https://codecov.io/gh/fluture-js/concurrify)\n//.\n//. Turn non-concurrent [FantasyLand 3][FL3] Applicatives concurrent.\n//.\n//. Most time-dependent applicatives are very useful as Monads, because it\n//. gives them the ability to run sequentially, where each step depends on the\n//. previous. However, they lose the ability to run concurrently. This library\n//. allows one to wrap a [`Monad`][FL:Monad] (with sequential `ap`) in an\n//. [`Alternative`][FL:Alternative] (with parallel `ap`).\n//.\n//. ## Usage\n//.\n//. ```js\n//. // The concurrify function takes four arguments, explained below.\n//. const concurrify = require ('concurrify');\n//.\n//. // The Type Representative of the Applicative we want to transform.\n//. const Future = require ('fluture');\n//.\n//. // A \"zero\" instance and an \"alt\" function for \"Alternative\".\n//. const zero = Future (() => {});\n//. const alt = Future.race;\n//.\n//. // An override \"ap\" function that runs the Applicatives concurrently.\n//. const ap = (mx, mf) => (Future.both (mx, mf)).map (([x, f]) => f (x));\n//.\n//. // A new Type Representative created by concurrify.\n//. const ConcurrentFuture = concurrify (Future, zero, alt, ap);\n//.\n//. // We can use our type as such:\n//. const par = ConcurrentFuture (Future.of (1));\n//. const seq = par.sequential;\n//. seq.fork (console.error, console.log);\n//. ```\n//.\n//. ## Interoperability\n//.\n//. * Implements [FantasyLand 3][FL3] `Alternative`\n//.   (`of`, `zero`, `map`, `ap`, `alt`).\n//. * Instances can be identified by, and are compared using,\n//.   [Sanctuary Type Identifiers][STI].\n//. * Instances can be converted to String representations according to\n//.   [Sanctuary Show][SS].\n//.\n//. ## API\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore next */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f (\n      require ('sanctuary-show'),\n      require ('sanctuary-type-classes'),\n      require ('sanctuary-type-identifiers')\n    );\n  } else {\n    self.concurrify = f (\n      self.sanctuaryShow,\n      self.sanctuaryTypeClasses,\n      self.sanctuaryTypeIdentifiers\n    );\n  }\n\n} (function(show, Z, type) {\n\n  'use strict';\n\n  var $alt = 'fantasy-land/alt';\n  var $ap = 'fantasy-land/ap';\n  var $map = 'fantasy-land/map';\n  var $of = 'fantasy-land/of';\n  var $zero = 'fantasy-land/zero';\n  var $$type = '@@type';\n  var $$show = '@@show';\n  var ordinal = ['first', 'second', 'third', 'fourth', 'fifth'];\n\n  //       isFunction :: Any -> Boolean\n  function isFunction(f) {\n    return typeof f === 'function';\n  }\n\n  //       isBinary :: Function -> Boolean\n  function isBinary(f) {\n    return f.length >= 2;\n  }\n\n  //       isApplicativeRepr :: TypeRepr -> Boolean\n  function isApplicativeRepr(Repr) {\n    try {\n      return Z.Applicative.test (Z.of (Repr));\n    } catch (_) {\n      return false;\n    }\n  }\n\n  //       invalidArgument :: (String, Number, String, String) -> !Undefined\n  function invalidArgument(it, at, expected, actual) {\n    throw new TypeError (\n      it\n      + ' expects its '\n      + ordinal[at]\n      + ' argument to '\n      + expected\n      + '\\n  Actual: '\n      + show (actual)\n    );\n  }\n\n  //       invalidContext :: (String, String, String) -> !Undefined\n  function invalidContext(it, actual, an) {\n    throw new TypeError (\n      it\n      + ' was invoked outside the context of a '\n      + an\n      + '. \\n  Called on: '\n      + show (actual)\n    );\n  }\n\n  //       getTypeIdentifier :: TypeRepresentative -> String\n  function getTypeIdentifier(Repr) {\n    return Repr[$$type] || Repr.name || 'Anonymous';\n  }\n\n  //       generateTypeIdentifier :: String -> String\n  function generateTypeIdentifier(identifier) {\n    var o = type.parse (identifier);\n    return (\n      (o.namespace || 'concurrify') + '/Concurrent' + o.name + '@' + o.version\n    );\n  }\n\n  //# concurrify :: (Applicative f, Alternative (m f)) => (TypeRep f, f a, (f a, f a) -> f a, (f a, f (a -> b)) -> f b) -> f c -> m f c\n  return function concurrify(Repr, zero, alt, ap) {\n\n    var INNERTYPE = getTypeIdentifier (Repr);\n    var OUTERTYPE = generateTypeIdentifier (INNERTYPE);\n    var INNERNAME = (type.parse (INNERTYPE)).name;\n    var OUTERNAME = (type.parse (OUTERTYPE)).name;\n\n    function Concurrently(sequential) {\n      this.sequential = sequential;\n    }\n\n    function isInner(x) {\n      return (\n        (x instanceof Repr) ||\n        (Boolean (x) && x.constructor === Repr) ||\n        (type (x) === Repr[$$type])\n      );\n    }\n\n    function isOuter(x) {\n      return (\n        (x instanceof Concurrently) ||\n        (Boolean (x) && x.constructor === Concurrently) ||\n        (type (x) === OUTERTYPE)\n      );\n    }\n\n    function construct(x) {\n      if (!isInner (x)) {\n        invalidArgument (OUTERNAME, 0, 'be of type \"' + INNERNAME + '\"', x);\n      }\n      return new Concurrently (x);\n    }\n\n    if (!isApplicativeRepr (Repr)) {\n      invalidArgument ('concurrify', 0, 'represent an Applicative', Repr);\n    }\n\n    if (!isInner (zero)) {\n      invalidArgument\n        ('concurrify', 1, 'be of type \"' + INNERNAME + '\"', zero);\n    }\n\n    if (!isFunction (alt)) {\n      invalidArgument ('concurrify', 2, 'be a function', alt);\n    }\n\n    if (!isBinary (alt)) {\n      invalidArgument ('concurrify', 2, 'be binary', alt);\n    }\n\n    if (!isFunction (ap)) {\n      invalidArgument ('concurrify', 3, 'be a function', ap);\n    }\n\n    if (!isBinary (ap)) {\n      invalidArgument ('concurrify', 3, 'be binary', ap);\n    }\n\n    var proto =\n    Concurrently.prototype =\n    construct.prototype = {constructor: construct};\n\n    construct[$$type] = OUTERTYPE;\n\n    var mzero = new Concurrently (zero);\n\n    construct[$zero] = function Concurrently$zero() {\n      return mzero;\n    };\n\n    construct[$of] = function Concurrently$of(value) {\n      return new Concurrently (Z.of (Repr, value));\n    };\n\n    proto[$map] = function Concurrently$map(mapper) {\n      if (!isOuter (this)) {\n        invalidContext (OUTERNAME + '#map', this, OUTERNAME);\n      }\n\n      if (!isFunction (mapper)) {\n        invalidArgument (OUTERNAME + '#map', 0, 'be a function', mapper);\n      }\n\n      return new Concurrently (Z.map (mapper, this.sequential));\n    };\n\n    proto[$ap] = function Concurrently$ap(m) {\n      if (!isOuter (this)) {\n        invalidContext (OUTERNAME + '#ap', this, OUTERNAME);\n      }\n\n      if (!isOuter (m)) {\n        invalidArgument (OUTERNAME + '#ap', 0, 'be a ' + OUTERNAME, m);\n      }\n\n      return new Concurrently (ap (this.sequential, m.sequential));\n    };\n\n    proto[$alt] = function Concurrently$alt(m) {\n      if (!isOuter (this)) {\n        invalidContext (OUTERNAME + '#alt', this, OUTERNAME);\n      }\n\n      if (!isOuter (m)) {\n        invalidArgument (OUTERNAME + '#alt', 0, 'be a ' + OUTERNAME, m);\n      }\n\n      return new Concurrently (alt (this.sequential, m.sequential));\n    };\n\n    proto[$$show] = function Concurrently$show() {\n      return OUTERNAME + '(' + show (this.sequential) + ')';\n    };\n\n    proto.toString = function Concurrently$toString() {\n      if (!isOuter (this)) {\n        invalidContext (OUTERNAME + '#toString', this, OUTERNAME);\n      }\n      return this[$$show] ();\n    };\n\n    return construct;\n\n  };\n\n}));\n\n//. [FL3]: https://github.com/fantasyland/fantasy-land/\n//. [FL:Monad]: https://github.com/fantasyland/fantasy-land/#monad\n//. [FL:Alternative]: https://github.com/fantasyland/fantasy-land/#alternative\n//. [STI]: https://github.com/sanctuary-js/sanctuary-type-identifiers\n//. [SS]: https://github.com/sanctuary-js/sanctuary-show\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","export * from \"./flags/Flags\";\r\nexport * from \"./worker/Worker-Loader\";\r\nexport * from \"./datatypes/Maybe\";\r\n","\r\nexport const getCompileFlags = () => {\r\n    const buildMode = process.env['NODE_ENV'];\r\n    const buildVersion =  process.env['BUILD_VERSION'];\r\n    const isProduction = buildMode === \"production\" ? true : false;\r\n\r\n    return {buildMode, buildVersion, isProduction}\r\n}\r\n","import {Future} from \"fluture\";\r\nimport {WorkerLoaderCommand, MESSAGE} from \"types/Worker-Types\";\r\n\r\n\r\n/*\r\n * these loaders resolve _after_ communication is established\r\n */\r\n//Loaded by main thread \r\nexport const loadWorker = (worker:any) => Future<any, Worker>((reject, resolve) => {\r\n    const onInitial = (e: MessageEvent) => {\r\n        if(e.data.cmd === WorkerLoaderCommand.READY) {\r\n            worker.removeEventListener(MESSAGE, onInitial);\r\n            resolve(worker);\r\n        }\r\n    }\r\n    worker.addEventListener(MESSAGE, onInitial);\r\n\r\n    worker.postMessage({ cmd: WorkerLoaderCommand.INIT});\r\n});\r\n\r\n//Loaded by worker thread\r\nexport const initWorker = () => Future<any, any>((reject, resolve) => {\r\n\r\n    const onInitial = (e: MessageEvent) => {\r\n\r\n        if(e.data.cmd === WorkerLoaderCommand.INIT) {\r\n            (self as any).removeEventListener(MESSAGE, onInitial);\r\n            (self as any).postMessage({cmd: WorkerLoaderCommand.READY});\r\n            resolve(self);\r\n        }\r\n    }\r\n    (self as any).addEventListener(MESSAGE, onInitial);\r\n});\r\n\r\n","export interface Maybe <A>{\r\n    value0?:A; \r\n}\r\n\r\n\r\nexport const maybe = <A>(nothingFn: () => any) => (justFn:(value:A) => any) => (m:Maybe<A>):any => \r\n    m.value0 === undefined\r\n        ?   nothingFn()\r\n        :   justFn(m.value0);\r\n\r\n\r\nexport const getMaybeValue = maybe (() => undefined) (value => value);\r\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar Data_Semiring = require(\"../Data.Semiring/index.js\");\nvar Prelude = require(\"../Prelude/index.js\");\nvar move = function (amt) {\n    return function (x) {\n        return x + amt;\n    };\n};\nmodule.exports = {\n    move: move\n};\n","\"use strict\";\n\nexports.intAdd = function (x) {\n  return function (y) {\n    /* jshint bitwise: false */\n    return x + y | 0;\n  };\n};\n\nexports.intMul = function (x) {\n  return function (y) {\n    /* jshint bitwise: false */\n    return x * y | 0;\n  };\n};\n\nexports.numAdd = function (n1) {\n  return function (n2) {\n    return n1 + n2;\n  };\n};\n\nexports.numMul = function (n1) {\n  return function (n2) {\n    return n1 * n2;\n  };\n};\n","\"use strict\";\n\n// module Data.Symbol\n\nexports.unsafeCoerce = function (arg) {\n  return arg;\n};\n\n","\"use strict\";\n\nexports.unit = {};\n","\"use strict\";\n\nexports.showIntImpl = function (n) {\n  return n.toString();\n};\n\nexports.showNumberImpl = function (n) {\n  var str = n.toString();\n  return isNaN(str + \".0\") ? str : str + \".0\";\n};\n\nexports.showCharImpl = function (c) {\n  var code = c.charCodeAt(0);\n  if (code < 0x20 || code === 0x7F) {\n    switch (c) {\n      case \"\\x07\": return \"'\\\\a'\";\n      case \"\\b\": return \"'\\\\b'\";\n      case \"\\f\": return \"'\\\\f'\";\n      case \"\\n\": return \"'\\\\n'\";\n      case \"\\r\": return \"'\\\\r'\";\n      case \"\\t\": return \"'\\\\t'\";\n      case \"\\v\": return \"'\\\\v'\";\n    }\n    return \"'\\\\\" + code.toString(10) + \"'\";\n  }\n  return c === \"'\" || c === \"\\\\\" ? \"'\\\\\" + c + \"'\" : \"'\" + c + \"'\";\n};\n\nexports.showStringImpl = function (s) {\n  var l = s.length;\n  return \"\\\"\" + s.replace(\n    /[\\0-\\x1F\\x7F\"\\\\]/g, // eslint-disable-line no-control-regex\n    function (c, i) {\n      switch (c) {\n        case \"\\\"\":\n        case \"\\\\\":\n          return \"\\\\\" + c;\n        case \"\\x07\": return \"\\\\a\";\n        case \"\\b\": return \"\\\\b\";\n        case \"\\f\": return \"\\\\f\";\n        case \"\\n\": return \"\\\\n\";\n        case \"\\r\": return \"\\\\r\";\n        case \"\\t\": return \"\\\\t\";\n        case \"\\v\": return \"\\\\v\";\n      }\n      var k = i + 1;\n      var empty = k < l && s[k] >= \"0\" && s[k] <= \"9\" ? \"\\\\&\" : \"\";\n      return \"\\\\\" + c.charCodeAt(0).toString(10) + empty;\n    }\n  ) + \"\\\"\";\n};\n\nexports.showArrayImpl = function (f) {\n  return function (xs) {\n    var ss = [];\n    for (var i = 0, l = xs.length; i < l; i++) {\n      ss[i] = f(xs[i]);\n    }\n    return \"[\" + ss.join(\",\") + \"]\";\n  };\n};\n\nexports.cons = function (head) {\n  return function (tail) {\n    return [head].concat(tail);\n  };\n};\n\nexports.join = function (separator) {\n  return function (xs) {\n    return xs.join(separator);\n  };\n};\n","\"use strict\";\n\nexports.unsafeHas = function (label) {\n  return function (rec) {\n    return {}.hasOwnProperty.call(rec, label);\n  };\n};\n\nexports.unsafeGet = function (label) {\n  return function (rec) {\n    return rec[label];\n  };\n};\n\nexports.unsafeSet = function (label) {\n  return function (value) {\n    return function (rec) {\n      var copy = {};\n      for (var key in rec) {\n        if ({}.hasOwnProperty.call(rec, key)) {\n          copy[key] = rec[key];\n        }\n      }\n      copy[label] = value;\n      return copy;\n    };\n  };\n};\n\nexports.unsafeDelete = function (label) {\n  return function (rec) {\n    var copy = {};\n    for (var key in rec) {\n      if (key !== label && {}.hasOwnProperty.call(rec, key)) {\n        copy[key] = rec[key];\n      }\n    }\n    return copy;\n  };\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar Control_Applicative = require(\"../Control.Applicative/index.js\");\nvar Control_Apply = require(\"../Control.Apply/index.js\");\nvar Control_Bind = require(\"../Control.Bind/index.js\");\nvar Control_Category = require(\"../Control.Category/index.js\");\nvar Control_Monad = require(\"../Control.Monad/index.js\");\nvar Control_Semigroupoid = require(\"../Control.Semigroupoid/index.js\");\nvar Data_Boolean = require(\"../Data.Boolean/index.js\");\nvar Data_BooleanAlgebra = require(\"../Data.BooleanAlgebra/index.js\");\nvar Data_Bounded = require(\"../Data.Bounded/index.js\");\nvar Data_CommutativeRing = require(\"../Data.CommutativeRing/index.js\");\nvar Data_DivisionRing = require(\"../Data.DivisionRing/index.js\");\nvar Data_Eq = require(\"../Data.Eq/index.js\");\nvar Data_EuclideanRing = require(\"../Data.EuclideanRing/index.js\");\nvar Data_Field = require(\"../Data.Field/index.js\");\nvar Data_Function = require(\"../Data.Function/index.js\");\nvar Data_Functor = require(\"../Data.Functor/index.js\");\nvar Data_HeytingAlgebra = require(\"../Data.HeytingAlgebra/index.js\");\nvar Data_Monoid = require(\"../Data.Monoid/index.js\");\nvar Data_NaturalTransformation = require(\"../Data.NaturalTransformation/index.js\");\nvar Data_Ord = require(\"../Data.Ord/index.js\");\nvar Data_Ordering = require(\"../Data.Ordering/index.js\");\nvar Data_Ring = require(\"../Data.Ring/index.js\");\nvar Data_Semigroup = require(\"../Data.Semigroup/index.js\");\nvar Data_Semiring = require(\"../Data.Semiring/index.js\");\nvar Data_Show = require(\"../Data.Show/index.js\");\nvar Data_Unit = require(\"../Data.Unit/index.js\");\nvar Data_Void = require(\"../Data.Void/index.js\");\nmodule.exports = {};\n","\"use strict\";\n\nexports.arrayApply = function (fs) {\n  return function (xs) {\n    var l = fs.length;\n    var k = xs.length;\n    var result = new Array(l*k);\n    var n = 0;\n    for (var i = 0; i < l; i++) {\n      var f = fs[i];\n      for (var j = 0; j < k; j++) {\n        result[n++] = f(xs[j]);\n      }\n    }\n    return result;\n  };\n};\n","\"use strict\";\n\nexports.ordArrayImpl = function (f) {\n  return function (xs) {\n    return function (ys) {\n      var i = 0;\n      var xlen = xs.length;\n      var ylen = ys.length;\n      while (i < xlen && i < ylen) {\n        var x = xs[i];\n        var y = ys[i];\n        var o = f(x)(y);\n        if (o !== 0) {\n          return o;\n        }\n        i++;\n      }\n      if (xlen === ylen) {\n        return 0;\n      } else if (xlen > ylen) {\n        return -1;\n      } else {\n        return 1;\n      }\n    };\n  };\n};\n","\"use strict\";\n\nexports.refEq = function (r1) {\n  return function (r2) {\n    return r1 === r2;\n  };\n};\n\nexports.eqArrayImpl = function (f) {\n  return function (xs) {\n    return function (ys) {\n      if (xs.length !== ys.length) return false;\n      for (var i = 0; i < xs.length; i++) {\n        if (!f(xs[i])(ys[i])) return false;\n      }\n      return true;\n    };\n  };\n};\n","\"use strict\";\n\nexports.boolConj = function (b1) {\n  return function (b2) {\n    return b1 && b2;\n  };\n};\n\nexports.boolDisj = function (b1) {\n  return function (b2) {\n    return b1 || b2;\n  };\n};\n\nexports.boolNot = function (b) {\n  return !b;\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar $foreign = require(\"./foreign.js\");\nvar Data_Ordering = require(\"../Data.Ordering/index.js\");\nvar unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);\nmodule.exports = {\n    unsafeCompare: unsafeCompare\n};\n","\"use strict\";\n\nexports.unsafeCompareImpl = function (lt) {\n  return function (eq) {\n    return function (gt) {\n      return function (x) {\n        return function (y) {\n          return x < y ? lt : x === y ? eq : gt;\n        };\n      };\n    };\n  };\n};\n","\"use strict\";\n\nexports.concatString = function (s1) {\n  return function (s2) {\n    return s1 + s2;\n  };\n};\n\nexports.concatArray = function (xs) {\n  return function (ys) {\n    if (xs.length === 0) return ys;\n    if (ys.length === 0) return xs;\n    return xs.concat(ys);\n  };\n};\n","\"use strict\";\n\nexports.intSub = function (x) {\n  return function (y) {\n    /* jshint bitwise: false */\n    return x - y | 0;\n  };\n};\n\nexports.numSub = function (n1) {\n  return function (n2) {\n    return n1 - n2;\n  };\n};\n","\"use strict\";\n\nexports.arrayMap = function (f) {\n  return function (arr) {\n    var l = arr.length;\n    var result = new Array(l);\n    for (var i = 0; i < l; i++) {\n      result[i] = f(arr[i]);\n    }\n    return result;\n  };\n};\n","\"use strict\";\n\nexports.arrayBind = function (arr) {\n  return function (f) {\n    var result = [];\n    for (var i = 0, l = arr.length; i < l; i++) {\n      Array.prototype.push.apply(result, f(arr[i]));\n    }\n    return result;\n  };\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar Control_Applicative = require(\"../Control.Applicative/index.js\");\nvar Control_Apply = require(\"../Control.Apply/index.js\");\nvar Control_Bind = require(\"../Control.Bind/index.js\");\nvar Data_Functor = require(\"../Data.Functor/index.js\");\nvar Data_Unit = require(\"../Data.Unit/index.js\");\nvar Monad = function (Applicative0, Bind1) {\n    this.Applicative0 = Applicative0;\n    this.Bind1 = Bind1;\n};\nvar whenM = function (dictMonad) {\n    return function (mb) {\n        return function (m) {\n            return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {\n                return Control_Applicative.when(dictMonad.Applicative0())(v)(m);\n            });\n        };\n    };\n};\nvar unlessM = function (dictMonad) {\n    return function (mb) {\n        return function (m) {\n            return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {\n                return Control_Applicative.unless(dictMonad.Applicative0())(v)(m);\n            });\n        };\n    };\n};\nvar monadFn = new Monad(function () {\n    return Control_Applicative.applicativeFn;\n}, function () {\n    return Control_Bind.bindFn;\n});\nvar monadArray = new Monad(function () {\n    return Control_Applicative.applicativeArray;\n}, function () {\n    return Control_Bind.bindArray;\n});\nvar liftM1 = function (dictMonad) {\n    return function (f) {\n        return function (a) {\n            return Control_Bind.bind(dictMonad.Bind1())(a)(function (v) {\n                return Control_Applicative.pure(dictMonad.Applicative0())(f(v));\n            });\n        };\n    };\n};\nvar ap = function (dictMonad) {\n    return function (f) {\n        return function (a) {\n            return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {\n                return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {\n                    return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));\n                });\n            });\n        };\n    };\n};\nmodule.exports = {\n    Monad: Monad,\n    liftM1: liftM1,\n    ap: ap,\n    whenM: whenM,\n    unlessM: unlessM,\n    monadFn: monadFn,\n    monadArray: monadArray\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar $foreign = require(\"./foreign.js\");\nvar Data_Ord = require(\"../Data.Ord/index.js\");\nvar Data_Ordering = require(\"../Data.Ordering/index.js\");\nvar Data_Unit = require(\"../Data.Unit/index.js\");\nvar Bounded = function (Ord0, bottom, top) {\n    this.Ord0 = Ord0;\n    this.bottom = bottom;\n    this.top = top;\n};\nvar top = function (dict) {\n    return dict.top;\n};\nvar boundedUnit = new Bounded(function () {\n    return Data_Ord.ordUnit;\n}, Data_Unit.unit, Data_Unit.unit);\nvar boundedOrdering = new Bounded(function () {\n    return Data_Ord.ordOrdering;\n}, Data_Ordering.LT.value, Data_Ordering.GT.value);\nvar boundedNumber = new Bounded(function () {\n    return Data_Ord.ordNumber;\n}, $foreign.bottomNumber, $foreign.topNumber);\nvar boundedInt = new Bounded(function () {\n    return Data_Ord.ordInt;\n}, $foreign.bottomInt, $foreign.topInt);\nvar boundedChar = new Bounded(function () {\n    return Data_Ord.ordChar;\n}, $foreign.bottomChar, $foreign.topChar);\nvar boundedBoolean = new Bounded(function () {\n    return Data_Ord.ordBoolean;\n}, false, true);\nvar bottom = function (dict) {\n    return dict.bottom;\n};\nmodule.exports = {\n    Bounded: Bounded,\n    bottom: bottom,\n    top: top,\n    boundedBoolean: boundedBoolean,\n    boundedInt: boundedInt,\n    boundedChar: boundedChar,\n    boundedOrdering: boundedOrdering,\n    boundedUnit: boundedUnit,\n    boundedNumber: boundedNumber\n};\n","\"use strict\";\n\nexports.topInt = 2147483647;\nexports.bottomInt = -2147483648;\n\nexports.topChar = String.fromCharCode(65535);\nexports.bottomChar = String.fromCharCode(0);\n\nexports.topNumber = Number.POSITIVE_INFINITY;\nexports.bottomNumber = Number.NEGATIVE_INFINITY;\n","\"use strict\";\n\nexports.intDegree = function (x) {\n  return Math.min(Math.abs(x), 2147483647);\n};\n\n// See the Euclidean definition in\n// https://en.m.wikipedia.org/wiki/Modulo_operation.\nexports.intDiv = function (x) {\n  return function (y) {\n    if (y === 0) return 0;\n    return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);\n  };\n};\n\nexports.intMod = function (x) {\n  return function (y) {\n    if (y === 0) return 0;\n    var yy = Math.abs(y);\n    return ((x % yy) + yy) % yy;\n  };\n};\n\nexports.numDiv = function (n1) {\n  return function (n2) {\n    return n1 / n2;\n  };\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar Data_CommutativeRing = require(\"../Data.CommutativeRing/index.js\");\nvar Data_DivisionRing = require(\"../Data.DivisionRing/index.js\");\nvar Data_EuclideanRing = require(\"../Data.EuclideanRing/index.js\");\nvar Data_Ring = require(\"../Data.Ring/index.js\");\nvar Data_Semiring = require(\"../Data.Semiring/index.js\");\nvar Field = function (DivisionRing1, EuclideanRing0) {\n    this.DivisionRing1 = DivisionRing1;\n    this.EuclideanRing0 = EuclideanRing0;\n};\nvar field = function (dictEuclideanRing) {\n    return function (dictDivisionRing) {\n        return new Field(function () {\n            return dictDivisionRing;\n        }, function () {\n            return dictEuclideanRing;\n        });\n    };\n};\nmodule.exports = {\n    Field: Field,\n    field: field\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nvar Data_Boolean = require(\"../Data.Boolean/index.js\");\nvar Data_Eq = require(\"../Data.Eq/index.js\");\nvar Data_EuclideanRing = require(\"../Data.EuclideanRing/index.js\");\nvar Data_Ord = require(\"../Data.Ord/index.js\");\nvar Data_Ordering = require(\"../Data.Ordering/index.js\");\nvar Data_Semigroup = require(\"../Data.Semigroup/index.js\");\nvar Data_Symbol = require(\"../Data.Symbol/index.js\");\nvar Data_Unit = require(\"../Data.Unit/index.js\");\nvar Record_Unsafe = require(\"../Record.Unsafe/index.js\");\nvar Type_Data_RowList = require(\"../Type.Data.RowList/index.js\");\nvar Monoid = function (Semigroup0, mempty) {\n    this.Semigroup0 = Semigroup0;\n    this.mempty = mempty;\n};\nvar MonoidRecord = function (SemigroupRecord0, memptyRecord) {\n    this.SemigroupRecord0 = SemigroupRecord0;\n    this.memptyRecord = memptyRecord;\n};\nvar monoidUnit = new Monoid(function () {\n    return Data_Semigroup.semigroupUnit;\n}, Data_Unit.unit);\nvar monoidString = new Monoid(function () {\n    return Data_Semigroup.semigroupString;\n}, \"\");\nvar monoidRecordNil = new MonoidRecord(function () {\n    return Data_Semigroup.semigroupRecordNil;\n}, function (v) {\n    return {};\n});\nvar monoidOrdering = new Monoid(function () {\n    return Data_Ordering.semigroupOrdering;\n}, Data_Ordering.EQ.value);\nvar monoidArray = new Monoid(function () {\n    return Data_Semigroup.semigroupArray;\n}, [  ]);\nvar memptyRecord = function (dict) {\n    return dict.memptyRecord;\n};\nvar monoidRecord = function (dictRowToList) {\n    return function (dictMonoidRecord) {\n        return new Monoid(function () {\n            return Data_Semigroup.semigroupRecord(dictRowToList)(dictMonoidRecord.SemigroupRecord0());\n        }, memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value));\n    };\n};\nvar mempty = function (dict) {\n    return dict.mempty;\n};\nvar monoidFn = function (dictMonoid) {\n    return new Monoid(function () {\n        return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());\n    }, function (v) {\n        return mempty(dictMonoid);\n    });\n};\nvar monoidRecordCons = function (dictIsSymbol) {\n    return function (dictMonoid) {\n        return function (dictCons) {\n            return function (dictMonoidRecord) {\n                return new MonoidRecord(function () {\n                    return Data_Semigroup.semigroupRecordCons(dictIsSymbol)(dictCons)(dictMonoidRecord.SemigroupRecord0())(dictMonoid.Semigroup0());\n                }, function (v) {\n                    var tail = memptyRecord(dictMonoidRecord)(Type_Data_RowList.RLProxy.value);\n                    var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);\n                    var insert = Record_Unsafe.unsafeSet(key);\n                    return insert(mempty(dictMonoid))(tail);\n                });\n            };\n        };\n    };\n};\nvar power = function (dictMonoid) {\n    return function (x) {\n        var go = function (p) {\n            if (p <= 0) {\n                return mempty(dictMonoid);\n            };\n            if (p === 1) {\n                return x;\n            };\n            if (Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(p)(2) === 0) {\n                var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));\n                return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x$prime);\n            };\n            if (Data_Boolean.otherwise) {\n                var x$prime = go(Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(p)(2));\n                return Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(Data_Semigroup.append(dictMonoid.Semigroup0())(x$prime)(x));\n            };\n            throw new Error(\"Failed pattern match at Data.Monoid line 66, column 3 - line 66, column 17: \" + [ p.constructor.name ]);\n        };\n        return go;\n    };\n};\nvar guard = function (dictMonoid) {\n    return function (v) {\n        return function (v1) {\n            if (v) {\n                return v1;\n            };\n            if (!v) {\n                return mempty(dictMonoid);\n            };\n            throw new Error(\"Failed pattern match at Data.Monoid line 74, column 1 - line 74, column 49: \" + [ v.constructor.name, v1.constructor.name ]);\n        };\n    };\n};\nmodule.exports = {\n    Monoid: Monoid,\n    mempty: mempty,\n    power: power,\n    guard: guard,\n    MonoidRecord: MonoidRecord,\n    memptyRecord: memptyRecord,\n    monoidUnit: monoidUnit,\n    monoidOrdering: monoidOrdering,\n    monoidFn: monoidFn,\n    monoidString: monoidString,\n    monoidArray: monoidArray,\n    monoidRecord: monoidRecord,\n    monoidRecordNil: monoidRecordNil,\n    monoidRecordCons: monoidRecordCons\n};\n","// Generated by purs version 0.12.0\n\"use strict\";\nmodule.exports = {};\n","/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a03 = a[3];\n    let a12 = a[6], a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0], by = -a[1], bz = -a[2], bw = a[3],\n  ax = a[4], ay = a[5], az = a[6], aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2), nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = (2 * far * near) * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  let len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  len = x0*x0 + x1*x1 + x2*x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2];\n  let bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let x = a[0], y = a[1], z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    let uvx = qy * z - qz * y,\n        uvy = qz * x - qx * z,\n        uvz = qx * y - qy * x;\n    // var uuv = vec3.cross([], qvec, uv);\n    let uuvx = qy * uvz - qz * uvy,\n        uuvy = qz * uvx - qx * uvz,\n        uuvz = qx * uvy - qy * uvx;\n    // vec3.scale(uv, uv, 2 * w);\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let tempA = fromValues(a[0], a[1], a[2]);\n  let tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  let cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2];\n  let b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  let x = a[0], y = a[1], z = a[2];\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\"\nimport * as mat3 from \"./mat3.js\"\nimport * as vec3 from \"./vec3.js\"\nimport * as vec4 from \"./vec4.js\"\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  let rad = Math.acos(q[3]) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  let x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > glMatrix.EPSILON ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Generates a random quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  let u1 = glMatrix.RANDOM();\n  let u2 = glMatrix.RANDOM();\n  let u3 = glMatrix.RANDOM();\n\n  let sqrt1MinusU1 = Math.sqrt(1 - u1);\n  let sqrtU1 = Math.sqrt(u1);\n\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  let invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if ( m[4] > m[0] )\n      i = 1;\n    if ( m[8] > m[i*3+i] )\n      i = 2;\n    let j = (i+1)%3;\n    let k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n    let halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function() {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.fromValues(1,0,0);\n  let yUnitVec3 = vec3.fromValues(0,1,0);\n\n  return function(out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  let temp1 = create();\n  let temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function() {\n  let matr = mat3.create();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b00 = b[0], b01 = b[1], b02 = b[2];\n  let b10 = b[3], b11 = b[4], b12 = b[5];\n  let b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nexport function round (out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x*x + y*y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength (a) {\n  var x = a[0],\n    y = a[1];\n  return x*x + y*y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x*x + y*y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  let p0 = a[0] - b[0],\n  p1 = a[1] - b[1],\n  sinC = Math.sin(c),\n  cosC = Math.cos(c);\n  \n  //perform rotation and translate to correct position\n  out[0] = p0*cosC - p1*sinC + b[0];\n  out[1] = p0*sinC + p1*cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let x1 = a[0],\n    y1 = a[1],\n    x2 = b[0],\n    y2 = b[1];\n  \n  let len1 = x1*x1 + y1*y1;\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n  \n  let len2 = x2*x2 + y2*y2;\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n  \n  let cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n  \n  \n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1];\n  let b0 = b[0], b1 = b[1];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 2;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n","import { mat4, quat, vec3, vec2, vec4 } from 'gl-matrix';\nimport { Future, parallel } from 'fluture';\nimport { fetchImage, fetchJsonUrl, fetchArrayBufferUrl, loadImageFromArrayBuffer } from 'fluture-loaders';\n\nvar GltfAnimationTargetPath;\r\n(function (GltfAnimationTargetPath) {\r\n    GltfAnimationTargetPath[GltfAnimationTargetPath[\"TRANSLATION\"] = 1] = \"TRANSLATION\";\r\n    GltfAnimationTargetPath[GltfAnimationTargetPath[\"ROTATION\"] = 2] = \"ROTATION\";\r\n    GltfAnimationTargetPath[GltfAnimationTargetPath[\"SCALE\"] = 3] = \"SCALE\";\r\n    GltfAnimationTargetPath[GltfAnimationTargetPath[\"WEIGHTS\"] = 4] = \"WEIGHTS\";\r\n})(GltfAnimationTargetPath || (GltfAnimationTargetPath = {}));\r\nvar GltfAnimationInterpolation;\r\n(function (GltfAnimationInterpolation) {\r\n    GltfAnimationInterpolation[GltfAnimationInterpolation[\"LINEAR\"] = 1] = \"LINEAR\";\r\n    GltfAnimationInterpolation[GltfAnimationInterpolation[\"STEP\"] = 2] = \"STEP\";\r\n    GltfAnimationInterpolation[GltfAnimationInterpolation[\"CUBICSPLINE\"] = 3] = \"CUBICSPLINE\";\r\n})(GltfAnimationInterpolation || (GltfAnimationInterpolation = {}));\n\nvar GltfMaterialAlphaMode;\r\n(function (GltfMaterialAlphaMode) {\r\n    GltfMaterialAlphaMode[GltfMaterialAlphaMode[\"OPAQUE\"] = 1] = \"OPAQUE\";\r\n    GltfMaterialAlphaMode[GltfMaterialAlphaMode[\"MASK\"] = 2] = \"MASK\";\r\n    GltfMaterialAlphaMode[GltfMaterialAlphaMode[\"BLEND\"] = 3] = \"BLEND\";\r\n})(GltfMaterialAlphaMode || (GltfMaterialAlphaMode = {}));\n\n//would be nice to extend but that's not really doable with enums\r\nvar GltfNodeKind;\r\n(function (GltfNodeKind) {\r\n    GltfNodeKind[GltfNodeKind[\"MESH\"] = 3] = \"MESH\";\r\n    GltfNodeKind[GltfNodeKind[\"SKIN\"] = 4] = \"SKIN\";\r\n})(GltfNodeKind || (GltfNodeKind = {}));\n\nvar GltfPrimitiveDrawKind;\r\n(function (GltfPrimitiveDrawKind) {\r\n    GltfPrimitiveDrawKind[GltfPrimitiveDrawKind[\"ELEMENTS\"] = 1] = \"ELEMENTS\";\r\n    GltfPrimitiveDrawKind[GltfPrimitiveDrawKind[\"ARRAY\"] = 2] = \"ARRAY\";\r\n})(GltfPrimitiveDrawKind || (GltfPrimitiveDrawKind = {}));\n\nconst GltfIblExtensionName = \"PURE3D_IBL\";\n\nconst GltfLightsExtensionName = \"KHR_lights_punctual\";\r\nconst GltfLights_MAX = 10;\n\nconst GltfUnlitExtensionName = \"KHR_Unlit\";\n\nvar CameraKind;\r\n(function (CameraKind) {\r\n    CameraKind[CameraKind[\"PERSPECTIVE\"] = 0] = \"PERSPECTIVE\";\r\n    CameraKind[CameraKind[\"ORTHOGRAPHIC\"] = 1] = \"ORTHOGRAPHIC\";\r\n})(CameraKind || (CameraKind = {}));\n\nvar NodeKind;\r\n(function (NodeKind) {\r\n    NodeKind[NodeKind[\"CAMERA\"] = 1] = \"CAMERA\";\r\n    NodeKind[NodeKind[\"LIGHT\"] = 2] = \"LIGHT\";\r\n})(NodeKind || (NodeKind = {}));\n\nvar LightKind;\r\n(function (LightKind) {\r\n    LightKind[LightKind[\"Directional\"] = 1] = \"Directional\";\r\n    LightKind[LightKind[\"Point\"] = 2] = \"Point\";\r\n    LightKind[LightKind[\"Spot\"] = 3] = \"Spot\";\r\n})(LightKind || (LightKind = {}));\n\n//taken from https://raw.githubusercontent.com/mattdesl/gl-constants/master/1.0/index.js\r\n//would be good to properly check against https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants\r\nvar WebGlConstants;\r\n(function (WebGlConstants) {\r\n    WebGlConstants[WebGlConstants[\"ACTIVE_ATTRIBUTES\"] = 35721] = \"ACTIVE_ATTRIBUTES\";\r\n    WebGlConstants[WebGlConstants[\"ACTIVE_ATTRIBUTE_MAX_LENGTH\"] = 35722] = \"ACTIVE_ATTRIBUTE_MAX_LENGTH\";\r\n    WebGlConstants[WebGlConstants[\"ACTIVE_TEXTURE\"] = 34016] = \"ACTIVE_TEXTURE\";\r\n    WebGlConstants[WebGlConstants[\"ACTIVE_UNIFORMS\"] = 35718] = \"ACTIVE_UNIFORMS\";\r\n    WebGlConstants[WebGlConstants[\"ACTIVE_UNIFORM_MAX_LENGTH\"] = 35719] = \"ACTIVE_UNIFORM_MAX_LENGTH\";\r\n    WebGlConstants[WebGlConstants[\"ALIASED_LINE_WIDTH_RANGE\"] = 33902] = \"ALIASED_LINE_WIDTH_RANGE\";\r\n    WebGlConstants[WebGlConstants[\"ALIASED_POINT_SIZE_RANGE\"] = 33901] = \"ALIASED_POINT_SIZE_RANGE\";\r\n    WebGlConstants[WebGlConstants[\"ALPHA\"] = 6406] = \"ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"ALPHA_BITS\"] = 3413] = \"ALPHA_BITS\";\r\n    WebGlConstants[WebGlConstants[\"ALWAYS\"] = 519] = \"ALWAYS\";\r\n    WebGlConstants[WebGlConstants[\"ARRAY_BUFFER\"] = 34962] = \"ARRAY_BUFFER\";\r\n    WebGlConstants[WebGlConstants[\"ARRAY_BUFFER_BINDING\"] = 34964] = \"ARRAY_BUFFER_BINDING\";\r\n    WebGlConstants[WebGlConstants[\"ATTACHED_SHADERS\"] = 35717] = \"ATTACHED_SHADERS\";\r\n    WebGlConstants[WebGlConstants[\"BACK\"] = 1029] = \"BACK\";\r\n    WebGlConstants[WebGlConstants[\"BLEND\"] = 3042] = \"BLEND\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_COLOR\"] = 32773] = \"BLEND_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_DST_ALPHA\"] = 32970] = \"BLEND_DST_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_DST_RGB\"] = 32968] = \"BLEND_DST_RGB\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_EQUATION\"] = 32777] = \"BLEND_EQUATION\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_EQUATION_ALPHA\"] = 34877] = \"BLEND_EQUATION_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_EQUATION_RGB\"] = 32777] = \"BLEND_EQUATION_RGB\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_SRC_ALPHA\"] = 32971] = \"BLEND_SRC_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_SRC_RGB\"] = 32969] = \"BLEND_SRC_RGB\";\r\n    WebGlConstants[WebGlConstants[\"BLUE_BITS\"] = 3412] = \"BLUE_BITS\";\r\n    WebGlConstants[WebGlConstants[\"BOOL\"] = 35670] = \"BOOL\";\r\n    WebGlConstants[WebGlConstants[\"BOOL_VEC2\"] = 35671] = \"BOOL_VEC2\";\r\n    WebGlConstants[WebGlConstants[\"BOOL_VEC3\"] = 35672] = \"BOOL_VEC3\";\r\n    WebGlConstants[WebGlConstants[\"BOOL_VEC4\"] = 35673] = \"BOOL_VEC4\";\r\n    WebGlConstants[WebGlConstants[\"BROWSER_DEFAULT_WEBGL\"] = 37444] = \"BROWSER_DEFAULT_WEBGL\";\r\n    WebGlConstants[WebGlConstants[\"BUFFER_SIZE\"] = 34660] = \"BUFFER_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"BUFFER_USAGE\"] = 34661] = \"BUFFER_USAGE\";\r\n    WebGlConstants[WebGlConstants[\"BYTE\"] = 5120] = \"BYTE\";\r\n    WebGlConstants[WebGlConstants[\"CCW\"] = 2305] = \"CCW\";\r\n    WebGlConstants[WebGlConstants[\"CLAMP_TO_EDGE\"] = 33071] = \"CLAMP_TO_EDGE\";\r\n    WebGlConstants[WebGlConstants[\"COLOR_ATTACHMENT0\"] = 36064] = \"COLOR_ATTACHMENT0\";\r\n    WebGlConstants[WebGlConstants[\"COLOR_BUFFER_BIT\"] = 16384] = \"COLOR_BUFFER_BIT\";\r\n    WebGlConstants[WebGlConstants[\"COLOR_CLEAR_VALUE\"] = 3106] = \"COLOR_CLEAR_VALUE\";\r\n    WebGlConstants[WebGlConstants[\"COLOR_WRITEMASK\"] = 3107] = \"COLOR_WRITEMASK\";\r\n    WebGlConstants[WebGlConstants[\"COMPILE_STATUS\"] = 35713] = \"COMPILE_STATUS\";\r\n    WebGlConstants[WebGlConstants[\"COMPRESSED_TEXTURE_FORMATS\"] = 34467] = \"COMPRESSED_TEXTURE_FORMATS\";\r\n    WebGlConstants[WebGlConstants[\"CONSTANT_ALPHA\"] = 32771] = \"CONSTANT_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"CONSTANT_COLOR\"] = 32769] = \"CONSTANT_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"CONTEXT_LOST_WEBGL\"] = 37442] = \"CONTEXT_LOST_WEBGL\";\r\n    WebGlConstants[WebGlConstants[\"CULL_FACE\"] = 2884] = \"CULL_FACE\";\r\n    WebGlConstants[WebGlConstants[\"CULL_FACE_MODE\"] = 2885] = \"CULL_FACE_MODE\";\r\n    WebGlConstants[WebGlConstants[\"CURRENT_PROGRAM\"] = 35725] = \"CURRENT_PROGRAM\";\r\n    WebGlConstants[WebGlConstants[\"CURRENT_VERTEX_ATTRIB\"] = 34342] = \"CURRENT_VERTEX_ATTRIB\";\r\n    WebGlConstants[WebGlConstants[\"CW\"] = 2304] = \"CW\";\r\n    WebGlConstants[WebGlConstants[\"DECR\"] = 7683] = \"DECR\";\r\n    WebGlConstants[WebGlConstants[\"DECR_WRAP\"] = 34056] = \"DECR_WRAP\";\r\n    WebGlConstants[WebGlConstants[\"DELETE_STATUS\"] = 35712] = \"DELETE_STATUS\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_ATTACHMENT\"] = 36096] = \"DEPTH_ATTACHMENT\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_BITS\"] = 3414] = \"DEPTH_BITS\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_BUFFER_BIT\"] = 256] = \"DEPTH_BUFFER_BIT\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_CLEAR_VALUE\"] = 2931] = \"DEPTH_CLEAR_VALUE\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_COMPONENT\"] = 6402] = \"DEPTH_COMPONENT\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_COMPONENT16\"] = 33189] = \"DEPTH_COMPONENT16\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_FUNC\"] = 2932] = \"DEPTH_FUNC\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_RANGE\"] = 2928] = \"DEPTH_RANGE\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_STENCIL\"] = 34041] = \"DEPTH_STENCIL\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_STENCIL_ATTACHMENT\"] = 33306] = \"DEPTH_STENCIL_ATTACHMENT\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_TEST\"] = 2929] = \"DEPTH_TEST\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_WRITEMASK\"] = 2930] = \"DEPTH_WRITEMASK\";\r\n    WebGlConstants[WebGlConstants[\"DITHER\"] = 3024] = \"DITHER\";\r\n    WebGlConstants[WebGlConstants[\"DONT_CARE\"] = 4352] = \"DONT_CARE\";\r\n    WebGlConstants[WebGlConstants[\"DST_ALPHA\"] = 772] = \"DST_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"DST_COLOR\"] = 774] = \"DST_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"DYNAMIC_DRAW\"] = 35048] = \"DYNAMIC_DRAW\";\r\n    WebGlConstants[WebGlConstants[\"ELEMENT_ARRAY_BUFFER\"] = 34963] = \"ELEMENT_ARRAY_BUFFER\";\r\n    WebGlConstants[WebGlConstants[\"ELEMENT_ARRAY_BUFFER_BINDING\"] = 34965] = \"ELEMENT_ARRAY_BUFFER_BINDING\";\r\n    WebGlConstants[WebGlConstants[\"EQUAL\"] = 514] = \"EQUAL\";\r\n    WebGlConstants[WebGlConstants[\"FASTEST\"] = 4353] = \"FASTEST\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT\"] = 5126] = \"FLOAT\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_MAT2\"] = 35674] = \"FLOAT_MAT2\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_MAT3\"] = 35675] = \"FLOAT_MAT3\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_MAT4\"] = 35676] = \"FLOAT_MAT4\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_VEC2\"] = 35664] = \"FLOAT_VEC2\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_VEC3\"] = 35665] = \"FLOAT_VEC3\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_VEC4\"] = 35666] = \"FLOAT_VEC4\";\r\n    WebGlConstants[WebGlConstants[\"FRAGMENT_SHADER\"] = 35632] = \"FRAGMENT_SHADER\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER\"] = 36160] = \"FRAMEBUFFER\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME\"] = 36049] = \"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\"] = 36048] = \"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\"] = 36051] = \"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL\"] = 36050] = \"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_BINDING\"] = 36006] = \"FRAMEBUFFER_BINDING\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_COMPLETE\"] = 36053] = \"FRAMEBUFFER_COMPLETE\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\"] = 36054] = \"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\"] = 36057] = \"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\"] = 36055] = \"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_UNSUPPORTED\"] = 36061] = \"FRAMEBUFFER_UNSUPPORTED\";\r\n    WebGlConstants[WebGlConstants[\"FRONT\"] = 1028] = \"FRONT\";\r\n    WebGlConstants[WebGlConstants[\"FRONT_AND_BACK\"] = 1032] = \"FRONT_AND_BACK\";\r\n    WebGlConstants[WebGlConstants[\"FRONT_FACE\"] = 2886] = \"FRONT_FACE\";\r\n    WebGlConstants[WebGlConstants[\"FUNC_ADD\"] = 32774] = \"FUNC_ADD\";\r\n    WebGlConstants[WebGlConstants[\"FUNC_REVERSE_SUBTRACT\"] = 32779] = \"FUNC_REVERSE_SUBTRACT\";\r\n    WebGlConstants[WebGlConstants[\"FUNC_SUBTRACT\"] = 32778] = \"FUNC_SUBTRACT\";\r\n    WebGlConstants[WebGlConstants[\"GENERATE_MIPMAP_HINT\"] = 33170] = \"GENERATE_MIPMAP_HINT\";\r\n    WebGlConstants[WebGlConstants[\"GEQUAL\"] = 518] = \"GEQUAL\";\r\n    WebGlConstants[WebGlConstants[\"GREATER\"] = 516] = \"GREATER\";\r\n    WebGlConstants[WebGlConstants[\"GREEN_BITS\"] = 3411] = \"GREEN_BITS\";\r\n    WebGlConstants[WebGlConstants[\"HIGH_FLOAT\"] = 36338] = \"HIGH_FLOAT\";\r\n    WebGlConstants[WebGlConstants[\"HIGH_INT\"] = 36341] = \"HIGH_INT\";\r\n    WebGlConstants[WebGlConstants[\"INCR\"] = 7682] = \"INCR\";\r\n    WebGlConstants[WebGlConstants[\"INCR_WRAP\"] = 34055] = \"INCR_WRAP\";\r\n    WebGlConstants[WebGlConstants[\"INFO_LOG_LENGTH\"] = 35716] = \"INFO_LOG_LENGTH\";\r\n    WebGlConstants[WebGlConstants[\"INT\"] = 5124] = \"INT\";\r\n    WebGlConstants[WebGlConstants[\"INT_VEC2\"] = 35667] = \"INT_VEC2\";\r\n    WebGlConstants[WebGlConstants[\"INT_VEC3\"] = 35668] = \"INT_VEC3\";\r\n    WebGlConstants[WebGlConstants[\"INT_VEC4\"] = 35669] = \"INT_VEC4\";\r\n    WebGlConstants[WebGlConstants[\"INVALID_ENUM\"] = 1280] = \"INVALID_ENUM\";\r\n    WebGlConstants[WebGlConstants[\"INVALID_FRAMEBUFFER_OPERATION\"] = 1286] = \"INVALID_FRAMEBUFFER_OPERATION\";\r\n    WebGlConstants[WebGlConstants[\"INVALID_OPERATION\"] = 1282] = \"INVALID_OPERATION\";\r\n    WebGlConstants[WebGlConstants[\"INVALID_VALUE\"] = 1281] = \"INVALID_VALUE\";\r\n    WebGlConstants[WebGlConstants[\"INVERT\"] = 5386] = \"INVERT\";\r\n    WebGlConstants[WebGlConstants[\"KEEP\"] = 7680] = \"KEEP\";\r\n    WebGlConstants[WebGlConstants[\"LEQUAL\"] = 515] = \"LEQUAL\";\r\n    WebGlConstants[WebGlConstants[\"LESS\"] = 513] = \"LESS\";\r\n    WebGlConstants[WebGlConstants[\"LINEAR\"] = 9729] = \"LINEAR\";\r\n    WebGlConstants[WebGlConstants[\"LINEAR_MIPMAP_LINEAR\"] = 9987] = \"LINEAR_MIPMAP_LINEAR\";\r\n    WebGlConstants[WebGlConstants[\"LINEAR_MIPMAP_NEAREST\"] = 9985] = \"LINEAR_MIPMAP_NEAREST\";\r\n    WebGlConstants[WebGlConstants[\"LINES\"] = 1] = \"LINES\";\r\n    WebGlConstants[WebGlConstants[\"LINE_LOOP\"] = 2] = \"LINE_LOOP\";\r\n    WebGlConstants[WebGlConstants[\"LINE_STRIP\"] = 3] = \"LINE_STRIP\";\r\n    WebGlConstants[WebGlConstants[\"LINE_WIDTH\"] = 2849] = \"LINE_WIDTH\";\r\n    WebGlConstants[WebGlConstants[\"LINK_STATUS\"] = 35714] = \"LINK_STATUS\";\r\n    WebGlConstants[WebGlConstants[\"LOW_FLOAT\"] = 36336] = \"LOW_FLOAT\";\r\n    WebGlConstants[WebGlConstants[\"LOW_INT\"] = 36339] = \"LOW_INT\";\r\n    WebGlConstants[WebGlConstants[\"LUMINANCE\"] = 6409] = \"LUMINANCE\";\r\n    WebGlConstants[WebGlConstants[\"LUMINANCE_ALPHA\"] = 6410] = \"LUMINANCE_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"MAX_COMBINED_TEXTURE_IMAGE_UNITS\"] = 35661] = \"MAX_COMBINED_TEXTURE_IMAGE_UNITS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_CUBE_MAP_TEXTURE_SIZE\"] = 34076] = \"MAX_CUBE_MAP_TEXTURE_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"MAX_FRAGMENT_UNIFORM_VECTORS\"] = 36349] = \"MAX_FRAGMENT_UNIFORM_VECTORS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_RENDERBUFFER_SIZE\"] = 34024] = \"MAX_RENDERBUFFER_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"MAX_TEXTURE_IMAGE_UNITS\"] = 34930] = \"MAX_TEXTURE_IMAGE_UNITS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_TEXTURE_SIZE\"] = 3379] = \"MAX_TEXTURE_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"MAX_VARYING_VECTORS\"] = 36348] = \"MAX_VARYING_VECTORS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_VERTEX_ATTRIBS\"] = 34921] = \"MAX_VERTEX_ATTRIBS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_VERTEX_TEXTURE_IMAGE_UNITS\"] = 35660] = \"MAX_VERTEX_TEXTURE_IMAGE_UNITS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_VERTEX_UNIFORM_VECTORS\"] = 36347] = \"MAX_VERTEX_UNIFORM_VECTORS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_VIEWPORT_DIMS\"] = 3386] = \"MAX_VIEWPORT_DIMS\";\r\n    WebGlConstants[WebGlConstants[\"MEDIUM_FLOAT\"] = 36337] = \"MEDIUM_FLOAT\";\r\n    WebGlConstants[WebGlConstants[\"MEDIUM_INT\"] = 36340] = \"MEDIUM_INT\";\r\n    WebGlConstants[WebGlConstants[\"MIRRORED_REPEAT\"] = 33648] = \"MIRRORED_REPEAT\";\r\n    WebGlConstants[WebGlConstants[\"NEAREST\"] = 9728] = \"NEAREST\";\r\n    WebGlConstants[WebGlConstants[\"NEAREST_MIPMAP_LINEAR\"] = 9986] = \"NEAREST_MIPMAP_LINEAR\";\r\n    WebGlConstants[WebGlConstants[\"NEAREST_MIPMAP_NEAREST\"] = 9984] = \"NEAREST_MIPMAP_NEAREST\";\r\n    WebGlConstants[WebGlConstants[\"NEVER\"] = 512] = \"NEVER\";\r\n    WebGlConstants[WebGlConstants[\"NICEST\"] = 4354] = \"NICEST\";\r\n    WebGlConstants[WebGlConstants[\"NONE\"] = 0] = \"NONE\";\r\n    WebGlConstants[WebGlConstants[\"NOTEQUAL\"] = 517] = \"NOTEQUAL\";\r\n    WebGlConstants[WebGlConstants[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\r\n    WebGlConstants[WebGlConstants[\"NUM_COMPRESSED_TEXTURE_FORMATS\"] = 34466] = \"NUM_COMPRESSED_TEXTURE_FORMATS\";\r\n    WebGlConstants[WebGlConstants[\"ONE\"] = 1] = \"ONE\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_CONSTANT_ALPHA\"] = 32772] = \"ONE_MINUS_CONSTANT_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_CONSTANT_COLOR\"] = 32770] = \"ONE_MINUS_CONSTANT_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_DST_ALPHA\"] = 773] = \"ONE_MINUS_DST_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_DST_COLOR\"] = 775] = \"ONE_MINUS_DST_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_SRC_ALPHA\"] = 771] = \"ONE_MINUS_SRC_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_SRC_COLOR\"] = 769] = \"ONE_MINUS_SRC_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"OUT_OF_MEMORY\"] = 1285] = \"OUT_OF_MEMORY\";\r\n    WebGlConstants[WebGlConstants[\"PACK_ALIGNMENT\"] = 3333] = \"PACK_ALIGNMENT\";\r\n    WebGlConstants[WebGlConstants[\"POINTS\"] = 0] = \"POINTS\";\r\n    WebGlConstants[WebGlConstants[\"POLYGON_OFFSET_FACTOR\"] = 32824] = \"POLYGON_OFFSET_FACTOR\";\r\n    WebGlConstants[WebGlConstants[\"POLYGON_OFFSET_FILL\"] = 32823] = \"POLYGON_OFFSET_FILL\";\r\n    WebGlConstants[WebGlConstants[\"POLYGON_OFFSET_UNITS\"] = 10752] = \"POLYGON_OFFSET_UNITS\";\r\n    WebGlConstants[WebGlConstants[\"RED_BITS\"] = 3410] = \"RED_BITS\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER\"] = 36161] = \"RENDERBUFFER\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_ALPHA_SIZE\"] = 36179] = \"RENDERBUFFER_ALPHA_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_BINDING\"] = 36007] = \"RENDERBUFFER_BINDING\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_BLUE_SIZE\"] = 36178] = \"RENDERBUFFER_BLUE_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_DEPTH_SIZE\"] = 36180] = \"RENDERBUFFER_DEPTH_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_GREEN_SIZE\"] = 36177] = \"RENDERBUFFER_GREEN_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_HEIGHT\"] = 36163] = \"RENDERBUFFER_HEIGHT\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_INTERNAL_FORMAT\"] = 36164] = \"RENDERBUFFER_INTERNAL_FORMAT\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_RED_SIZE\"] = 36176] = \"RENDERBUFFER_RED_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_STENCIL_SIZE\"] = 36181] = \"RENDERBUFFER_STENCIL_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_WIDTH\"] = 36162] = \"RENDERBUFFER_WIDTH\";\r\n    WebGlConstants[WebGlConstants[\"RENDERER\"] = 7937] = \"RENDERER\";\r\n    WebGlConstants[WebGlConstants[\"REPEAT\"] = 10497] = \"REPEAT\";\r\n    WebGlConstants[WebGlConstants[\"REPLACE\"] = 7681] = \"REPLACE\";\r\n    WebGlConstants[WebGlConstants[\"RGB\"] = 6407] = \"RGB\";\r\n    WebGlConstants[WebGlConstants[\"RGB5_A1\"] = 32855] = \"RGB5_A1\";\r\n    WebGlConstants[WebGlConstants[\"RGB565\"] = 36194] = \"RGB565\";\r\n    WebGlConstants[WebGlConstants[\"RGBA\"] = 6408] = \"RGBA\";\r\n    WebGlConstants[WebGlConstants[\"RGBA4\"] = 32854] = \"RGBA4\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLER_2D\"] = 35678] = \"SAMPLER_2D\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLER_CUBE\"] = 35680] = \"SAMPLER_CUBE\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLES\"] = 32937] = \"SAMPLES\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLE_ALPHA_TO_COVERAGE\"] = 32926] = \"SAMPLE_ALPHA_TO_COVERAGE\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLE_BUFFERS\"] = 32936] = \"SAMPLE_BUFFERS\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLE_COVERAGE\"] = 32928] = \"SAMPLE_COVERAGE\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLE_COVERAGE_INVERT\"] = 32939] = \"SAMPLE_COVERAGE_INVERT\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLE_COVERAGE_VALUE\"] = 32938] = \"SAMPLE_COVERAGE_VALUE\";\r\n    WebGlConstants[WebGlConstants[\"SCISSOR_BOX\"] = 3088] = \"SCISSOR_BOX\";\r\n    WebGlConstants[WebGlConstants[\"SCISSOR_TEST\"] = 3089] = \"SCISSOR_TEST\";\r\n    WebGlConstants[WebGlConstants[\"SHADER_COMPILER\"] = 36346] = \"SHADER_COMPILER\";\r\n    WebGlConstants[WebGlConstants[\"SHADER_SOURCE_LENGTH\"] = 35720] = \"SHADER_SOURCE_LENGTH\";\r\n    WebGlConstants[WebGlConstants[\"SHADER_TYPE\"] = 35663] = \"SHADER_TYPE\";\r\n    WebGlConstants[WebGlConstants[\"SHADING_LANGUAGE_VERSION\"] = 35724] = \"SHADING_LANGUAGE_VERSION\";\r\n    WebGlConstants[WebGlConstants[\"SHORT\"] = 5122] = \"SHORT\";\r\n    WebGlConstants[WebGlConstants[\"SRC_ALPHA\"] = 770] = \"SRC_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"SRC_ALPHA_SATURATE\"] = 776] = \"SRC_ALPHA_SATURATE\";\r\n    WebGlConstants[WebGlConstants[\"SRC_COLOR\"] = 768] = \"SRC_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"STATIC_DRAW\"] = 35044] = \"STATIC_DRAW\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_ATTACHMENT\"] = 36128] = \"STENCIL_ATTACHMENT\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_FAIL\"] = 34817] = \"STENCIL_BACK_FAIL\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_FUNC\"] = 34816] = \"STENCIL_BACK_FUNC\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_PASS_DEPTH_FAIL\"] = 34818] = \"STENCIL_BACK_PASS_DEPTH_FAIL\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_PASS_DEPTH_PASS\"] = 34819] = \"STENCIL_BACK_PASS_DEPTH_PASS\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_REF\"] = 36003] = \"STENCIL_BACK_REF\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_VALUE_MASK\"] = 36004] = \"STENCIL_BACK_VALUE_MASK\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_WRITEMASK\"] = 36005] = \"STENCIL_BACK_WRITEMASK\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BITS\"] = 3415] = \"STENCIL_BITS\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BUFFER_BIT\"] = 1024] = \"STENCIL_BUFFER_BIT\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_CLEAR_VALUE\"] = 2961] = \"STENCIL_CLEAR_VALUE\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_FAIL\"] = 2964] = \"STENCIL_FAIL\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_FUNC\"] = 2962] = \"STENCIL_FUNC\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_INDEX\"] = 6401] = \"STENCIL_INDEX\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_INDEX8\"] = 36168] = \"STENCIL_INDEX8\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_PASS_DEPTH_FAIL\"] = 2965] = \"STENCIL_PASS_DEPTH_FAIL\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_PASS_DEPTH_PASS\"] = 2966] = \"STENCIL_PASS_DEPTH_PASS\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_REF\"] = 2967] = \"STENCIL_REF\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_TEST\"] = 2960] = \"STENCIL_TEST\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_VALUE_MASK\"] = 2963] = \"STENCIL_VALUE_MASK\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_WRITEMASK\"] = 2968] = \"STENCIL_WRITEMASK\";\r\n    WebGlConstants[WebGlConstants[\"STREAM_DRAW\"] = 35040] = \"STREAM_DRAW\";\r\n    WebGlConstants[WebGlConstants[\"SUBPIXEL_BITS\"] = 3408] = \"SUBPIXEL_BITS\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE\"] = 5890] = \"TEXTURE\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE0\"] = 33984] = \"TEXTURE0\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE1\"] = 33985] = \"TEXTURE1\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE2\"] = 33986] = \"TEXTURE2\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE3\"] = 33987] = \"TEXTURE3\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE4\"] = 33988] = \"TEXTURE4\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE5\"] = 33989] = \"TEXTURE5\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE6\"] = 33990] = \"TEXTURE6\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE7\"] = 33991] = \"TEXTURE7\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE8\"] = 33992] = \"TEXTURE8\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE9\"] = 33993] = \"TEXTURE9\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE10\"] = 33994] = \"TEXTURE10\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE11\"] = 33995] = \"TEXTURE11\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE12\"] = 33996] = \"TEXTURE12\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE13\"] = 33997] = \"TEXTURE13\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE14\"] = 33998] = \"TEXTURE14\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE15\"] = 33999] = \"TEXTURE15\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE16\"] = 34000] = \"TEXTURE16\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE17\"] = 34001] = \"TEXTURE17\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE18\"] = 34002] = \"TEXTURE18\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE19\"] = 34003] = \"TEXTURE19\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE20\"] = 34004] = \"TEXTURE20\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE21\"] = 34005] = \"TEXTURE21\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE22\"] = 34006] = \"TEXTURE22\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE23\"] = 34007] = \"TEXTURE23\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE24\"] = 34008] = \"TEXTURE24\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE25\"] = 34009] = \"TEXTURE25\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE26\"] = 34010] = \"TEXTURE26\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE27\"] = 34011] = \"TEXTURE27\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE28\"] = 34012] = \"TEXTURE28\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE29\"] = 34013] = \"TEXTURE29\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE30\"] = 34014] = \"TEXTURE30\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE31\"] = 34015] = \"TEXTURE31\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_2D\"] = 3553] = \"TEXTURE_2D\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_BINDING_2D\"] = 32873] = \"TEXTURE_BINDING_2D\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_BINDING_CUBE_MAP\"] = 34068] = \"TEXTURE_BINDING_CUBE_MAP\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP\"] = 34067] = \"TEXTURE_CUBE_MAP\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_NEGATIVE_X\"] = 34070] = \"TEXTURE_CUBE_MAP_NEGATIVE_X\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_NEGATIVE_Y\"] = 34072] = \"TEXTURE_CUBE_MAP_NEGATIVE_Y\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_NEGATIVE_Z\"] = 34074] = \"TEXTURE_CUBE_MAP_NEGATIVE_Z\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_POSITIVE_X\"] = 34069] = \"TEXTURE_CUBE_MAP_POSITIVE_X\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_POSITIVE_Y\"] = 34071] = \"TEXTURE_CUBE_MAP_POSITIVE_Y\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_POSITIVE_Z\"] = 34073] = \"TEXTURE_CUBE_MAP_POSITIVE_Z\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_MAG_FILTER\"] = 10240] = \"TEXTURE_MAG_FILTER\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_MIN_FILTER\"] = 10241] = \"TEXTURE_MIN_FILTER\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_WRAP_S\"] = 10242] = \"TEXTURE_WRAP_S\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_WRAP_T\"] = 10243] = \"TEXTURE_WRAP_T\";\r\n    WebGlConstants[WebGlConstants[\"TRIANGLES\"] = 4] = \"TRIANGLES\";\r\n    WebGlConstants[WebGlConstants[\"TRIANGLE_FAN\"] = 6] = \"TRIANGLE_FAN\";\r\n    WebGlConstants[WebGlConstants[\"TRIANGLE_STRIP\"] = 5] = \"TRIANGLE_STRIP\";\r\n    WebGlConstants[WebGlConstants[\"UNPACK_ALIGNMENT\"] = 3317] = \"UNPACK_ALIGNMENT\";\r\n    WebGlConstants[WebGlConstants[\"UNPACK_COLORSPACE_CONVERSION_WEBGL\"] = 37443] = \"UNPACK_COLORSPACE_CONVERSION_WEBGL\";\r\n    WebGlConstants[WebGlConstants[\"UNPACK_FLIP_Y_WEBGL\"] = 37440] = \"UNPACK_FLIP_Y_WEBGL\";\r\n    WebGlConstants[WebGlConstants[\"UNPACK_PREMULTIPLY_ALPHA_WEBGL\"] = 37441] = \"UNPACK_PREMULTIPLY_ALPHA_WEBGL\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_BYTE\"] = 5121] = \"UNSIGNED_BYTE\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_INT\"] = 5125] = \"UNSIGNED_INT\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_SHORT\"] = 5123] = \"UNSIGNED_SHORT\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_SHORT_4_4_4_4\"] = 32819] = \"UNSIGNED_SHORT_4_4_4_4\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_SHORT_5_5_5_1\"] = 32820] = \"UNSIGNED_SHORT_5_5_5_1\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_SHORT_5_6_5\"] = 33635] = \"UNSIGNED_SHORT_5_6_5\";\r\n    WebGlConstants[WebGlConstants[\"VALIDATE_STATUS\"] = 35715] = \"VALIDATE_STATUS\";\r\n    WebGlConstants[WebGlConstants[\"VENDOR\"] = 7936] = \"VENDOR\";\r\n    WebGlConstants[WebGlConstants[\"VERSION\"] = 7938] = \"VERSION\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\"] = 34975] = \"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_ENABLED\"] = 34338] = \"VERTEX_ATTRIB_ARRAY_ENABLED\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_NORMALIZED\"] = 34922] = \"VERTEX_ATTRIB_ARRAY_NORMALIZED\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_POINTER\"] = 34373] = \"VERTEX_ATTRIB_ARRAY_POINTER\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_SIZE\"] = 34339] = \"VERTEX_ATTRIB_ARRAY_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_STRIDE\"] = 34340] = \"VERTEX_ATTRIB_ARRAY_STRIDE\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_TYPE\"] = 34341] = \"VERTEX_ATTRIB_ARRAY_TYPE\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_SHADER\"] = 35633] = \"VERTEX_SHADER\";\r\n    WebGlConstants[WebGlConstants[\"VIEWPORT\"] = 2978] = \"VIEWPORT\";\r\n    WebGlConstants[WebGlConstants[\"ZERO\"] = 0] = \"ZERO\";\r\n})(WebGlConstants || (WebGlConstants = {}));\n\n//GLTF\n\nconst createVec2 = () => new Float64Array(2);\r\nconst createVec4 = () => new Float64Array(4);\r\nconst createVec3 = () => new Float64Array(3);\r\nconst createMat4 = () => {\r\n    const data = new Float64Array(16);\r\n    mat4.identity(data);\r\n    return data;\r\n};\r\nconst createQuat = () => {\r\n    const data = new Float64Array(4);\r\n    quat.identity(data);\r\n    return data;\r\n};\r\nconst createFill = (size) => (value) => {\r\n    const data = new Float64Array(size);\r\n    data.fill(value);\r\n    return data;\r\n};\n\nconst createIdentityTransform = (parentModelMatrix) => {\r\n    const translation = createVec3();\r\n    const rotation = createQuat();\r\n    const scale = createFill(3)(1);\r\n    const trs = { translation, rotation, scale };\r\n    const localMatrix = getMatrixFromTrs(trs);\r\n    const modelMatrix = getModelMatrix(parentModelMatrix)(localMatrix);\r\n    return { trs, localMatrix, modelMatrix };\r\n};\r\nconst createTransform = (parentModelMatrix) => (overrideTrs) => {\r\n    const trs = {};\r\n    trs.translation = overrideTrs.translation ? overrideTrs.translation : createVec3();\r\n    trs.rotation = overrideTrs.rotation ? overrideTrs.rotation : createQuat();\r\n    trs.scale = overrideTrs.scale ? overrideTrs.scale : createFill(3)(1);\r\n    const localMatrix = getMatrixFromTrs(trs);\r\n    const modelMatrix = getModelMatrix(parentModelMatrix)(localMatrix);\r\n    return { trs, localMatrix, modelMatrix };\r\n};\r\nconst getTrsFromMatrix = (matrix) => {\r\n    const scale = mat4.getScaling(createVec3(), matrix);\r\n    const scaledMatrix = mat4.scale(createMat4(), matrix, [1 / scale[0], 1 / scale[1], 1 / scale[2]]);\r\n    return {\r\n        translation: mat4.getTranslation(createVec3(), matrix),\r\n        rotation: mat4.getRotation(createVec4(), scaledMatrix),\r\n        scale\r\n    };\r\n};\r\nconst getMatrixFromTrs = (trs) => mat4.fromRotationTranslationScale(createMat4(), trs.rotation, trs.translation, trs.scale);\r\nconst getModelMatrix = (parentModelMatrix) => (localMatrix) => parentModelMatrix\r\n    ? mat4.multiply(createMat4(), parentModelMatrix, localMatrix)\r\n    : localMatrix.slice();\r\nconst getNormalMatrix = (modelMatrix) => mat4.transpose(mat4.create(), mat4.invert(mat4.create(), modelMatrix));\r\nconst getViewMatrices = (camera) => (modelMatrix) => {\r\n    const modelViewMatrix = mat4.multiply(mat4.create(), camera.view, modelMatrix);\r\n    const modelViewProjectionMatrix = mat4.multiply(mat4.create(), camera.projection, modelViewMatrix);\r\n    return {\r\n        modelViewMatrix,\r\n        modelViewProjectionMatrix\r\n    };\r\n};\r\nconst updateTransform = (opts) => (parentModelMatrix) => (transform) => {\r\n    const localMatrix = opts.updateLocal ? getMatrixFromTrs(transform.trs) : transform.localMatrix;\r\n    const modelMatrix = opts.updateModel ? getModelMatrix(parentModelMatrix)(localMatrix) : transform.modelMatrix;\r\n    const normalMatrix = opts.updateModel && transform.normalMatrix\r\n        ? getNormalMatrix(modelMatrix)\r\n        : undefined;\r\n    const { modelViewMatrix, modelViewProjectionMatrix } = opts.updateView ? getViewMatrices(opts.camera)(modelMatrix) : transform;\r\n    return Object.assign({}, transform, {\r\n        localMatrix, modelMatrix, normalMatrix, modelViewMatrix, modelViewProjectionMatrix\r\n    });\r\n};\r\nconst rotateVectorByMatrix = (vec) => (matrix) => {\r\n    const qRot = mat4.getRotation(createQuat(), matrix);\r\n    const vRes = vec3.transformQuat(createVec3(), vec, qRot);\r\n    return vRes;\r\n};\n\nconst getOrthographicProjection = (settings) => {\r\n    const values = createMat4();\r\n    const r = settings.xmag;\r\n    const t = settings.ymag;\r\n    const n = settings.znear;\r\n    const f = settings.zfar;\r\n    values[0] = 1 / r;\r\n    values[5] = 1 / t;\r\n    values[10] = 2 / (n - f);\r\n    values[14] = (f + n) / (n - f);\r\n    values[15] = 1;\r\n    return values;\r\n};\r\nconst getPerspectiveProjection = (settings) => {\r\n    const values = createMat4();\r\n    const a = settings.aspectRatio === undefined && settings.canvas !== undefined\r\n        ? settings.canvas.clientWidth / settings.canvas.clientHeight\r\n        : settings.aspectRatio;\r\n    const y = settings.yfov;\r\n    const n = settings.znear;\r\n    const f = settings.zfar; //if this is undefined, use infinite projection\r\n    values[0] = 1 / (a * Math.tan(.5 * y));\r\n    values[5] = 1 / (Math.tan(.5 * y));\r\n    values[10] = f === undefined ? -1 : (f + n) / (n - f);\r\n    values[11] = -1;\r\n    values[14] = f === undefined ? (-2 * n) : (2 * f * n) / (n - f);\r\n    return values;\r\n};\r\nconst getCameraProjection = (settings) => settings.kind == CameraKind.ORTHOGRAPHIC\r\n    ? getOrthographicProjection(settings)\r\n    : getPerspectiveProjection(settings);\r\nconst getCameraView = (modelMatrix) => mat4.invert(createMat4(), modelMatrix);\r\nconst getCameraPosition = (modelMatrix) => mat4.getTranslation(createVec3(), modelMatrix);\r\nconst setCameraViewFromTransform = (transform) => (camera) => Object.assign({}, camera, {\r\n    view: getCameraView(transform.modelMatrix)\r\n});\r\nconst setCameraPositionFromTransform = (transform) => (camera) => Object.assign({}, camera, {\r\n    position: getCameraPosition(transform.modelMatrix)\r\n});\r\nconst setCameraProjectionFromSettings = (settings) => (camera) => Object.assign({}, camera, {\r\n    projection: getCameraProjection(settings)\r\n});\n\n//Non-essential helpers\r\nconst getLightDirectionFromMatrix = (modelMatrix) => {\r\n    const vRes = rotateVectorByMatrix([0, 0, -1])(modelMatrix);\r\n    vec3.normalize(vRes, vRes);\r\n    return vRes;\r\n};\n\n//filter stuff could use some testing\r\nconst filterNodeDeep = (fn) => (node) => {\r\n    if (node === undefined || !fn(node)) {\r\n        return undefined;\r\n    }\r\n    return !node.children\r\n        ? node\r\n        : Object.assign({}, node, { children: node.children.map(filterNodeDeep(fn)).filter(n => n) });\r\n};\r\nconst filterNodesDeep = (fn) => (nodes) => nodes\r\n    .map(filterNodeDeep(fn))\r\n    .filter(n => n);\r\n//Side effects\r\nconst forEachNodes = (fn) => (nodes) => nodes.forEach(forEachNode(fn));\r\nconst forEachNode = (fn) => (node) => {\r\n    fn(node);\r\n    if (node.children) {\r\n        node.children.forEach(forEachNode(fn));\r\n    }\r\n};\r\nconst someNodes = (fn) => (nodes) => nodes.some(someNode(fn));\r\nconst someNode = (fn) => (node) => {\r\n    if (fn(node)) {\r\n        return true;\r\n    }\r\n    if (node.children) {\r\n        return node.children.some(someNode(fn));\r\n    }\r\n    return false;\r\n};\r\n//Helpers\r\nconst countNodes = (nodes) => {\r\n    let count = 0;\r\n    forEachNodes(() => count++)(nodes);\r\n    return count;\r\n};\r\nconst findNode = (pred) => (nodesOrNode) => {\r\n    let targetNode;\r\n    const fn = (node) => {\r\n        if (pred(node)) {\r\n            targetNode = node;\r\n            return true;\r\n        }\r\n    };\r\n    if (Array.isArray(nodesOrNode)) {\r\n        someNodes(fn)(nodesOrNode);\r\n    }\r\n    else {\r\n        someNode(fn)(nodesOrNode);\r\n    }\r\n    return targetNode;\r\n};\r\n//Note - the immutability guarantee is the responsibility of the function - after it returns, the children are _replaced_\r\nconst mapNode = (fn) => (node) => {\r\n    const n = fn(node);\r\n    return !n.children\r\n        ? n\r\n        : Object.assign(n, { children: n.children.map(mapNode(fn)) });\r\n};\r\nconst mapNodeWithParent = (fn) => (parent) => (node) => {\r\n    const n = fn(parent)(node);\r\n    return !n.children\r\n        ? n\r\n        : Object.assign(n, { children: n.children.map(mapNodeWithParent(fn)(n)) });\r\n};\r\nconst mapNodesWithParent = (fn) => (parent) => (nodes) => nodes.map(mapNodeWithParent(fn)(parent));\r\nconst mapNodes = (fn) => (nodes) => nodes.map(mapNode(fn));\r\n//Specific use-cases\r\nconst updateNodeTransforms = (opts) => (parent) => (node) => mapNodeWithParent((_parent) => (_node) => {\r\n    const pModelMatrix = _parent ? _parent.transform.modelMatrix : undefined;\r\n    const beforeModel = _node.transform.modelMatrix;\r\n    const t = updateTransform(opts)(pModelMatrix)(_node.transform);\r\n    const afterModel = t.modelMatrix;\r\n    const result = Object.assign({}, _node, { transform: t });\r\n    //not ideal for typescript, but meh\r\n    if (opts.updateLightDirection && result.kind === NodeKind.LIGHT) {\r\n        const lightKind = result.light.kind;\r\n        if (lightKind === LightKind.Directional || lightKind === LightKind.Spot) {\r\n            //only update if the model matrix is different\r\n            if (result.light.direction === undefined || !mat4.equals(beforeModel, afterModel)) {\r\n                result.light.direction = getLightDirectionFromMatrix(t.modelMatrix);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n})(parent)(node);\r\nconst updateNodeListTransforms = (opts) => (parent) => (nodes) => mapNodesWithParent(updateNodeTransforms(opts))(parent)(nodes);\n\n//adapted from https://www.geeksforgeeks.org/binary-search/\r\n//returns the left and right bounds if there's no _exact_ match, otherwise, the match\r\nconst binaryFindBounds = (getValue) => (arr) => (x) => {\r\n    const max = arr.length - 1;\r\n    const _withinBounds = ([l, r]) => {\r\n        if (l === r) {\r\n            return false;\r\n        }\r\n        if (l < 0 || r < 1) {\r\n            return false;\r\n        }\r\n        const pValue = getValue(arr[l]);\r\n        const nValue = getValue(arr[r]);\r\n        return (x > pValue && x < nValue);\r\n    };\r\n    const _binarySearch = ([l, r]) => {\r\n        if (r >= l) {\r\n            const mid = 0 | (l + (r - l) / 2);\r\n            const value = getValue(arr[mid]);\r\n            if (value == x) {\r\n                return mid;\r\n            }\r\n            if (_withinBounds([mid - 1, mid])) {\r\n                return [mid - 1, mid];\r\n            }\r\n            if (_withinBounds([mid, mid + 1])) {\r\n                return [mid, mid + 1];\r\n            }\r\n            return (value > x)\r\n                ? _binarySearch([l, mid - 1])\r\n                : _binarySearch([mid + 1, r]);\r\n        }\r\n        return -1;\r\n    };\r\n    return _binarySearch([0, max]);\r\n};\n\nconst interpolate_linear = ({ v0, v1, t }) => {\r\n    if (typeof v0 === \"number\" && typeof v1 === \"number\") {\r\n        return v0 * (1 - t) + v1 * t;\r\n    }\r\n    const xs0 = v0;\r\n    const xs1 = v1;\r\n    if (xs0.length !== xs1.length) {\r\n        throw new Error(\"different length of animation values\");\r\n    }\r\n    switch (xs0.length) {\r\n        case 1: return interpolate_linear({ v0: xs0[0], v1: xs1[0], t });\r\n        case 2: return vec2.lerp(vec2.create(), xs0, xs1, t);\r\n        case 3: return vec3.lerp(vec3.create(), xs0, xs1, t);\r\n        case 4: return vec4.lerp(vec4.create(), xs0, xs1, t);\r\n    }\r\n};\r\nconst interpolateKeyframes = ({ k0, k1, time, interpolation, targetPath }) => {\r\n    const v0 = k0.values;\r\n    const v1 = k1.values;\r\n    const t = (time - k0.timing) / (k1.timing - k0.timing); //get t as a percentage of timing between k0 and k1: https://math.stackexchange.com/questions/754130/find-what-percent-x-is-between-two-numbers\r\n    switch (interpolation) {\r\n        case GltfAnimationInterpolation.LINEAR: return targetPath === GltfAnimationTargetPath.ROTATION\r\n            ? quat.slerp(quat.create(), v0, v1, t)\r\n            : interpolate_linear({ v0, v1, t });\r\n        case GltfAnimationInterpolation.STEP: return v0;\r\n        case GltfAnimationInterpolation.CUBICSPLINE: throw new Error(\"cubicspline is not supported yet!\");\r\n        default: throw new Error(\"unsupported interpolation \");\r\n    }\r\n};\r\nconst findKeyframeBounds = binaryFindBounds((k) => k.timing);\n\nconst GLTF_PARSE_ACCESSOR_TYPE_SIZE = {\r\n    'SCALAR': 1,\r\n    'VEC2': 2,\r\n    'VEC3': 3,\r\n    'VEC4': 4,\r\n    'MAT2': 4,\r\n    'MAT3': 9,\r\n    'MAT4': 16\r\n};\r\nconst GLTF_PARSE_COMPONENT_BYTE_SIZE = {\r\n    [WebGlConstants.BYTE]: 1,\r\n    [WebGlConstants.UNSIGNED_BYTE]: 1,\r\n    [WebGlConstants.SHORT]: 2,\r\n    [WebGlConstants.UNSIGNED_SHORT]: 2,\r\n    [WebGlConstants.UNSIGNED_INT]: 4,\r\n    [WebGlConstants.FLOAT]: 4\r\n};\n\nconst getComponentTypedData = ({ buffer, componentType }) => {\r\n    switch (componentType) {\r\n        case WebGlConstants.BYTE: return new Int8Array(buffer);\r\n        case WebGlConstants.UNSIGNED_BYTE: return new Uint8Array(buffer);\r\n        case WebGlConstants.SHORT: return new Int16Array(buffer);\r\n        case WebGlConstants.UNSIGNED_SHORT: return new Uint16Array(buffer);\r\n        case WebGlConstants.UNSIGNED_INT: return new Uint32Array(buffer);\r\n        case WebGlConstants.FLOAT: return new Float32Array(buffer);\r\n        default: throw new Error(\"unknown accessor component type!\");\r\n    }\r\n};\r\nconst getTypedDataFromInfo = ({ info, buffers }) => (info.bufferViewIndex === undefined)\r\n    ? getComponentTypedData({\r\n        buffer: new ArrayBuffer(info.bufferLength),\r\n        componentType: info.componentType\r\n    })\r\n    : getComponentTypedData({\r\n        buffer: buffers[info.bufferIndex].slice(info.byteOffset, info.byteOffset + info.bufferLength),\r\n        componentType: info.componentType\r\n    });\r\nconst GLTF_PARSE_getAccessorTypedData = ({ gltf, info, buffers }) => {\r\n    const values = getTypedDataFromInfo({ info, buffers });\r\n    if (info.sparse) {\r\n        const typeCount = GLTF_PARSE_ACCESSOR_TYPE_SIZE[info.accessorType];\r\n        const sparseIndices = getTypedDataFromInfo({ info: info.sparse.indices, buffers });\r\n        const sparseValues = getTypedDataFromInfo({ info: info.sparse.values, buffers });\r\n        sparseIndices\r\n            .map(value => value * typeCount)\r\n            .forEach((indexOfValue, valueIndex) => {\r\n            for (let i = 0; i < typeCount; i++) {\r\n                values[indexOfValue + i] = sparseValues[i + (valueIndex * typeCount)];\r\n            }\r\n        });\r\n    }\r\n    return values;\r\n};\r\n/*\r\nexport const GLTF_PARSE_createTypedData = ({ gltf, buffers}: { gltf: GLTF_ORIGINAL, buffers: Array<ArrayBuffer>}) => {\r\n\n    const accessorData = new Map<number, TypedNumberArray>();\r\n\n    const isAttribute = (accessorId:number):boolean => {\r\n        if(!gltf.nodes || !gltf.meshes || !gltf.nodes.length || !gltf.meshes.length) {\r\n            return false;\r\n        }\r\n\n        return gltf.nodes.findIndex(node => {\r\n            if(node.mesh === undefined) {\r\n                return false;\r\n            }\r\n\n            return gltf.meshes[node.mesh].primitives.findIndex(p =>\r\n                Object.keys(p.attributes).findIndex(k => p[k] === accessorId) !== -1\r\n            ) !== -1\r\n        }) !== -1\r\n    }\r\n\n    const isImage = (accessorId:number):boolean => {\r\n        if(!gltf.images || !gltf.images.length) {\r\n            return false;\r\n        }\r\n\n        return gltf.images.findIndex(image =>\r\n            image.bufferView === gltf.accessors[accessorId].bufferView\r\n        ) !== -1\r\n    }\r\n\n    gltf.accessors\r\n        .forEach((accessor, accessorId) => {\r\n            if(!isAttribute(accessorId) && !isImage(accessorId)) {\r\n                const values = GLTF_PARSE_getAccessorTypedData({gltf, buffers, accessorId});\r\n                accessorData.set(accessorId, values);\r\n\n                console.log(\"created typed data for accessor\", accessorId);\r\n            } else {\r\n                console.log(\"skipping typed data for accessor\", accessorId);\r\n            }\r\n\n        });\r\n\n    return accessorData;\r\n}\r\n */\n\nconst getAccessorInfo = ({ gltf, accessor }) => {\r\n    const byteLength = (accessor.count * GLTF_PARSE_ACCESSOR_TYPE_SIZE[accessor.type] * GLTF_PARSE_COMPONENT_BYTE_SIZE[accessor.componentType]);\r\n    if (accessor.bufferView === undefined) {\r\n        if (accessor.sparse === undefined) {\r\n            throw new Error(\"accessor must either be sparse or have a buffer view\");\r\n        }\r\n        return {\r\n            bufferLength: byteLength,\r\n            componentType: accessor.componentType,\r\n            accessorType: accessor.type\r\n        };\r\n    }\r\n    const bufferView = gltf.bufferViews[accessor.bufferView];\r\n    const byteOffset = (bufferView.byteOffset === undefined ? 0 : bufferView.byteOffset) + (accessor.byteOffset === undefined ? 0 : accessor.byteOffset);\r\n    const byteStride = bufferView.byteStride ? bufferView.byteStride : 0;\r\n    const byteStrideLength = byteStride * GLTF_PARSE_ACCESSOR_TYPE_SIZE[accessor.type] * GLTF_PARSE_COMPONENT_BYTE_SIZE[accessor.componentType];\r\n    const bufferLength = byteStrideLength + byteLength;\r\n    return {\r\n        bufferLength,\r\n        componentType: accessor.componentType,\r\n        bufferViewIndex: accessor.bufferView,\r\n        bufferIndex: bufferView.buffer,\r\n        byteOffset,\r\n        accessorType: accessor.type\r\n    };\r\n};\r\nconst getSparseAccessorIndicesInfo = ({ gltf, accessor }) => {\r\n    const values = accessor.sparse.indices;\r\n    const byteLength = (accessor.sparse.count * GLTF_PARSE_COMPONENT_BYTE_SIZE[values.componentType]);\r\n    const bufferView = gltf.bufferViews[values.bufferView];\r\n    const byteOffset = (bufferView.byteOffset === undefined ? 0 : bufferView.byteOffset) + (values.byteOffset === undefined ? 0 : values.byteOffset);\r\n    return {\r\n        bufferLength: byteLength,\r\n        componentType: values.componentType,\r\n        bufferViewIndex: accessor.bufferView,\r\n        bufferIndex: bufferView.buffer,\r\n        byteOffset,\r\n        accessorType: accessor.type\r\n    };\r\n};\r\nconst getSparseAccessorValuesInfo = ({ gltf, accessor }) => {\r\n    const values = accessor.sparse.values;\r\n    const byteLength = (accessor.sparse.count * GLTF_PARSE_ACCESSOR_TYPE_SIZE[accessor.type] * GLTF_PARSE_COMPONENT_BYTE_SIZE[accessor.componentType]);\r\n    const bufferView = gltf.bufferViews[values.bufferView];\r\n    const byteOffset = (bufferView.byteOffset === undefined ? 0 : bufferView.byteOffset) + (values.byteOffset === undefined ? 0 : values.byteOffset);\r\n    return {\r\n        bufferLength: byteLength,\r\n        componentType: accessor.componentType,\r\n        bufferViewIndex: accessor.bufferView,\r\n        bufferIndex: bufferView.buffer,\r\n        byteOffset,\r\n        accessorType: accessor.type\r\n    };\r\n};\r\nconst GLTF_PARSE_getAccessorDataInfo = ({ gltf, accessorId }) => {\r\n    const accessor = gltf.accessors[accessorId];\r\n    const info = getAccessorInfo({ gltf, accessor });\r\n    if (accessor.sparse) {\r\n        info.sparse = {\r\n            indices: getSparseAccessorIndicesInfo({ gltf, accessor }),\r\n            values: getSparseAccessorValuesInfo({ gltf, accessor })\r\n        };\r\n    }\r\n    return info;\r\n};\n\nconst GLTF_PARSE_animationPathToString = {\r\n    [GltfAnimationTargetPath.WEIGHTS]: \"weights\",\r\n    [GltfAnimationTargetPath.TRANSLATION]: \"translation\",\r\n    [GltfAnimationTargetPath.ROTATION]: \"rotation\",\r\n    [GltfAnimationTargetPath.SCALE]: \"scale\"\r\n};\r\nconst GLTF_PARSE_animationStringToPath = {\r\n    \"weights\": GltfAnimationTargetPath.WEIGHTS,\r\n    \"translation\": GltfAnimationTargetPath.TRANSLATION,\r\n    \"rotation\": GltfAnimationTargetPath.ROTATION,\r\n    \"scale\": GltfAnimationTargetPath.SCALE,\r\n};\r\nconst GLTF_PARSE_interpolationLookup = {\r\n    \"linear\": GltfAnimationInterpolation.LINEAR,\r\n    \"step\": GltfAnimationInterpolation.STEP,\r\n    \"cubicspline\": GltfAnimationInterpolation.CUBICSPLINE\r\n};\r\nconst GLTF_PARSE_addAnimationIds = ({ gltf, nodes }) => {\r\n    let animationId = 0;\r\n    if (gltf.animations) {\r\n        gltf.animations.forEach(animation => {\r\n            animation\r\n                .channels\r\n                .filter(channel => channel.target.node !== undefined)\r\n                .forEach(channel => {\r\n                mapNodes((node) => {\r\n                    if (node.originalNodeId === channel.target.node) {\r\n                        if (!node.animationIds || node.animationIds.indexOf(animationId) === -1) {\r\n                            if (!node.animationIds) {\r\n                                node.animationIds = [];\r\n                            }\r\n                            node.animationIds.push(animationId);\r\n                        }\r\n                    }\r\n                    return node;\r\n                })(nodes);\r\n                animationId++;\r\n            });\r\n        });\r\n    }\r\n    return nodes;\r\n};\r\nconst GLTF_PARSE_createAnimations = ({ gltf, buffers }) => {\r\n    //load animation list\r\n    const animations = new Map();\r\n    let animationId = 0;\r\n    if (gltf.animations) {\r\n        gltf.animations.forEach(animation => {\r\n            animation\r\n                .channels\r\n                .filter(channel => channel.target.node !== undefined)\r\n                .forEach(channel => {\r\n                const targetPath = GLTF_PARSE_animationStringToPath[channel.target.path.toLowerCase()];\r\n                const sampler = animation.samplers[channel.sampler];\r\n                const interpolation = GLTF_PARSE_interpolationLookup[sampler.interpolation ? sampler.interpolation.toLowerCase() : \"linear\"];\r\n                const timeAccessor = gltf.accessors[sampler.input];\r\n                const timings = GLTF_PARSE_getAccessorTypedData({\r\n                    gltf,\r\n                    buffers,\r\n                    info: GLTF_PARSE_getAccessorDataInfo({ gltf, accessorId: sampler.input })\r\n                });\r\n                const values = GLTF_PARSE_getAccessorTypedData({\r\n                    gltf,\r\n                    buffers,\r\n                    info: GLTF_PARSE_getAccessorDataInfo({ gltf, accessorId: sampler.output })\r\n                });\r\n                const valuesAccessor = gltf.accessors[sampler.output];\r\n                //can't be map() because Array != Float64Array\r\n                let keyframes = new Array(timings.length);\r\n                timings.forEach((timing, index) => {\r\n                    const count = targetPath === GltfAnimationTargetPath.WEIGHTS\r\n                        ? values.length / timings.length //always a scalar and final size will be the number of morph targets times the number of animation frames.\r\n                        : GLTF_PARSE_ACCESSOR_TYPE_SIZE[valuesAccessor.type];\r\n                    keyframes[index] = {\r\n                        timing,\r\n                        values: count === 1\r\n                            ? values[index]\r\n                            : values.subarray(index * count, (index + 1) * count),\r\n                    };\r\n                });\r\n                animations.set(animationId++, {\r\n                    keyframes,\r\n                    interpolation,\r\n                    targetPath,\r\n                    timeMin: timeAccessor.min[0],\r\n                    timeMax: timeAccessor.max[0]\r\n                });\r\n            });\r\n        });\r\n    }\r\n    return animations;\r\n};\n\nconst gltf_setAnimationTime = (animation) => (time) => (node) => {\r\n    const bounds = findKeyframeBounds(animation.keyframes)(time);\r\n    if (bounds === -1) {\r\n        return;\r\n    }\r\n    const values = !Array.isArray(bounds)\r\n        ? animation.keyframes[bounds].values //if it's an exact match there's no need to interpolate\r\n        : interpolateKeyframes({\r\n            k0: animation.keyframes[bounds[0]],\r\n            k1: animation.keyframes[bounds[1]],\r\n            interpolation: animation.interpolation,\r\n            targetPath: animation.targetPath,\r\n            time\r\n        });\r\n    return Object.assign({}, node, (animation.targetPath === GltfAnimationTargetPath.WEIGHTS)\r\n        ? { morphWeights: values }\r\n        : { transform: Object.assign({}, node.transform, {\r\n                trs: Object.assign({}, node.transform.trs, {\r\n                    [GLTF_PARSE_animationPathToString[animation.targetPath]]: values\r\n                })\r\n            })\r\n        });\r\n};\r\n//creates a function that will iterate over all the baked in animations, with a provided timestep\r\nconst gltf_createAnimator = (animations) => ({ loop }) => {\r\n    const totalTimes = new Map();\r\n    animations.forEach((value, key) => totalTimes.set(key, 0));\r\n    let lastTs;\r\n    return (ts) => (nodes) => {\r\n        const dt = lastTs === undefined ? 0 : ((ts - lastTs) / 1000);\r\n        lastTs = ts;\r\n        animations.forEach((animation, key) => {\r\n            const prevTime = totalTimes.get(key);\r\n            let nextTime = prevTime + dt;\r\n            if (loop === true) {\r\n                while (nextTime > animation.timeMax) {\r\n                    nextTime -= animation.timeMax;\r\n                }\r\n            }\r\n            if (nextTime >= animation.timeMin && nextTime <= animation.timeMax) {\r\n                nodes = mapNodes((node) => node.animationIds && node.animationIds.indexOf(key) !== -1\r\n                    ? gltf_setAnimationTime(animation)(nextTime)(node)\r\n                    : node)(nodes);\r\n            }\r\n            totalTimes.set(key, nextTime);\r\n        });\r\n        return nodes;\r\n    };\r\n};\n\nconst GLTF_PARSE_attributeNames = [\r\n    \"a_Position\",\r\n    \"a_Normal\",\r\n    \"a_Tangent\",\r\n    \"a_UV\",\r\n    \"a_Color\",\r\n    \"a_Morph_0\",\r\n    \"a_Morph_1\",\r\n    \"a_Morph_2\",\r\n    \"a_Morph_3\",\r\n    \"a_Morph_4\",\r\n    \"a_Morph_5\",\r\n    \"a_Morph_6\",\r\n    \"a_Morph_7\",\r\n    \"a_Skin_Joint\",\r\n    \"a_Skin_Weight\"\r\n];\r\nconst getAccessorStrategy = ({ gltf, accessor, info }) => {\r\n    const typeCount = GLTF_PARSE_ACCESSOR_TYPE_SIZE[accessor.type];\r\n    const bufferView = (accessor.bufferView === undefined)\r\n        ? undefined\r\n        : gltf.bufferViews[accessor.bufferView];\r\n    const stride = (bufferView === undefined || bufferView.byteStride === undefined) ? 0 : bufferView.byteStride;\r\n    return {\r\n        size: typeCount,\r\n        type: accessor.componentType,\r\n        normalized: accessor.normalized === undefined ? false : accessor.normalized,\r\n        stride,\r\n        offset: (info.sparse || !accessor.byteOffset) ? 0 : accessor.byteOffset\r\n        //since we sliced it off already for sparse values, it's always 0 here\r\n    };\r\n};\r\nconst isAttribute = ({ gltf, accessorId }) => {\r\n    if (!gltf.nodes) {\r\n        return false;\r\n    }\r\n    return gltf.nodes.some(node => node.mesh === undefined ? false :\r\n        gltf.meshes[node.mesh].primitives.some(primitive => primitive.indices === accessorId\r\n            || Object.keys(primitive.attributes).some(key => primitive.attributes[key] === accessorId)\r\n            || (primitive.targets && primitive.targets.some(target => Object.keys(target).some(key => target[key] === accessorId)))));\r\n};\r\nconst GLTF_PARSE_createAttributes = ({ gltf, buffers, renderer }) => {\r\n    const bufferViewInfo = new Map();\r\n    const accessorLookup = new Map();\r\n    const indicesList = [];\r\n    if (gltf.meshes) {\r\n        gltf.meshes.forEach(mesh => {\r\n            mesh.primitives.forEach(primitive => {\r\n                if (primitive.indices !== undefined) {\r\n                    indicesList.push(primitive.indices);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    gltf.accessors\r\n        .map((accessor, accessorId) => ({ accessor, accessorId }))\r\n        .filter(({ accessorId }) => isAttribute({ gltf, accessorId }))\r\n        .forEach(({ accessor, accessorId }) => {\r\n        const isElements = indicesList.indexOf(accessorId) === -1 ? false : true;\r\n        const info = GLTF_PARSE_getAccessorDataInfo({ gltf, accessorId });\r\n        const strategy = getAccessorStrategy({ gltf, accessor, info });\r\n        let rendererBufferId, buffer;\r\n        if (accessor.sparse) {\r\n            rendererBufferId = Symbol(`accessor ${accessorId}`);\r\n            buffer = GLTF_PARSE_getAccessorTypedData({\r\n                gltf,\r\n                buffers,\r\n                info\r\n            }).buffer;\r\n        }\r\n        else {\r\n            if (!bufferViewInfo.has(info.bufferViewIndex)) {\r\n                const bufferView = gltf.bufferViews[info.bufferViewIndex];\r\n                const byteOffset = bufferView.byteOffset ? bufferView.byteOffset : 0;\r\n                bufferViewInfo.set(info.bufferViewIndex, {\r\n                    rendererBufferId: Symbol(`${info.bufferViewIndex}`),\r\n                    buffer: buffers[info.bufferIndex].slice(byteOffset, byteOffset + bufferView.byteLength)\r\n                });\r\n            }\r\n            const bvInfo = bufferViewInfo.get(info.bufferViewIndex);\r\n            rendererBufferId = bvInfo.rendererBufferId;\r\n            buffer = bvInfo.buffer;\r\n        }\r\n        renderer.buffers.assign(rendererBufferId)({\r\n            target: isElements ? WebGlConstants.ELEMENT_ARRAY_BUFFER : WebGlConstants.ARRAY_BUFFER,\r\n            usagePattern: WebGlConstants.STATIC_DRAW,\r\n            data: buffer\r\n        });\r\n        accessorLookup.set(accessorId, { strategy, rendererBufferId });\r\n    });\r\n    const vaoIdLookup = new Map();\r\n    return { accessorLookup, vaoIdLookup };\r\n};\n\nconst HAS_PREPPED = Symbol();\r\n//This only happens once and it won't hurt to call when in doubt\r\n//Only used at init/loading\r\nconst prepWebGlRenderer = (renderer) => {\r\n    if (renderer.extras[HAS_PREPPED] !== true) {\r\n        if (renderer.version > 1) {\r\n            throw new Error(\"GLTF Renderering only supports WebGL 1.0 for now\");\r\n        }\r\n        GLTF_PARSE_attributeNames.forEach(aName => {\r\n            renderer.attributes.globalLocations.add(aName);\r\n        });\r\n        renderer.getExtension('OES_standard_derivatives');\r\n        renderer.getExtension('EXT_shader_texture_lod');\r\n        renderer.getExtension('EXT_SRGB');\r\n        renderer.getExtension('OES_element_index_uint'); //only for scifi-helmet...\r\n        renderer.extras[HAS_PREPPED] = true;\r\n    }\r\n};\r\nconst getDefaultInitConfig = () => ({});\n\nconst faceTargetFromKey = (key) => {\r\n    switch (key) {\r\n        case \"posX\": return WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_X;\r\n        case \"negX\": return WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_X;\r\n        case \"posY\": return WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_Y;\r\n        case \"negY\": return WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_Y;\r\n        case \"posZ\": return WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_Z;\r\n        case \"negZ\": return WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_Z;\r\n    }\r\n};\r\nconst createTextureSwitcher = (gl) => {\r\n    const activeTextureMap = new Map();\r\n    const _switchTexture = (target) => (samplerIndex) => (texture) => {\r\n        const skipSwitch = activeTextureMap.has(samplerIndex) && (() => {\r\n            const cacheInfo = activeTextureMap.get(samplerIndex);\r\n            return cacheInfo.target === target && cacheInfo.texture === texture;\r\n        })();\r\n        if (!skipSwitch) {\r\n            gl.activeTexture(gl.TEXTURE0 + samplerIndex);\r\n            gl.bindTexture(target, texture);\r\n            activeTextureMap.set(samplerIndex, { target, texture });\r\n        }\r\n        return texture;\r\n    };\r\n    return {\r\n        switchTexture: _switchTexture(WebGlConstants.TEXTURE_2D),\r\n        switchCubeTexture: _switchTexture(WebGlConstants.TEXTURE_CUBE_MAP)\r\n    };\r\n};\r\nconst createTextureFromTarget = (opts) => (targets) => {\r\n    const { gl } = opts;\r\n    const texture = gl.createTexture();\r\n    const bindTarget = WebGlConstants.TEXTURE_2D;\r\n    const dataSize = opts.dataSize || gl.UNSIGNED_BYTE;\r\n    gl.bindTexture(bindTarget, texture);\r\n    opts.setParameters(opts);\r\n    const mipTargets = Array.isArray(targets) ? targets : [targets];\r\n    mipTargets.forEach((target, mipLevel) => {\r\n        if (target instanceof Element) {\r\n            gl.texImage2D(bindTarget, mipLevel, opts.format, opts.format, dataSize, target);\r\n        }\r\n        else {\r\n            gl.texImage2D(bindTarget, mipLevel, opts.format, opts.width, opts.height, 0, opts.format, dataSize, target);\r\n        }\r\n    });\r\n    return texture;\r\n};\r\nconst createCubeTextureFromTarget = (opts) => (targets) => {\r\n    const { gl } = opts;\r\n    const texture = gl.createTexture();\r\n    const bindTarget = WebGlConstants.TEXTURE_CUBE_MAP;\r\n    const dataSize = opts.dataSize || gl.UNSIGNED_BYTE;\r\n    gl.bindTexture(bindTarget, texture);\r\n    opts.setParameters(opts);\r\n    const mipTargets = Array.isArray(targets) ? targets : [targets];\r\n    mipTargets.forEach((mipTarget, mipLevel) => {\r\n        Object.keys(mipTarget).forEach((key) => {\r\n            const faceTarget = faceTargetFromKey(key);\r\n            const target = mipTarget[key];\r\n            if (target instanceof Element) {\r\n                gl.texImage2D(faceTarget, mipLevel, opts.format, opts.format, dataSize, target);\r\n            }\r\n            else {\r\n                gl.texImage2D(faceTarget, mipLevel, opts.format, opts.width, opts.height, 0, opts.format, dataSize, target);\r\n            }\r\n        });\r\n    });\r\n    return texture;\r\n};\r\n//only first param is set by user, second is set internally\r\nconst textureSetterSimple = (opts) => (_opts) => {\r\n    const { gl, width, height } = _opts;\r\n    const isPowerOf2 = (value) => (value & (value - 1)) == 0;\r\n    if (opts.flipY) {\r\n        gl.pixelStorei(WebGlConstants.UNPACK_FLIP_Y_WEBGL, true);\r\n    }\r\n    else {\r\n        gl.pixelStorei(WebGlConstants.UNPACK_FLIP_Y_WEBGL, false);\r\n    }\r\n    if (isPowerOf2(width) && isPowerOf2(height) && opts.useMips === true) {\r\n        gl.generateMipmap(WebGlConstants.TEXTURE_2D);\r\n    }\r\n    else {\r\n        gl.texParameteri(WebGlConstants.TEXTURE_2D, WebGlConstants.TEXTURE_WRAP_S, !opts.wrapS ? WebGlConstants.CLAMP_TO_EDGE : opts.wrapS);\r\n        gl.texParameteri(WebGlConstants.TEXTURE_2D, WebGlConstants.TEXTURE_WRAP_T, !opts.wrapT ? WebGlConstants.CLAMP_TO_EDGE : opts.wrapT);\r\n        gl.texParameteri(WebGlConstants.TEXTURE_2D, WebGlConstants.TEXTURE_MIN_FILTER, !opts.filterMin ? WebGlConstants.LINEAR : opts.filterMin);\r\n        gl.texParameteri(WebGlConstants.TEXTURE_2D, WebGlConstants.TEXTURE_MAG_FILTER, !opts.filterMag ? WebGlConstants.LINEAR : opts.filterMag);\r\n    }\r\n};\r\nconst createSimpleTextureFromTarget = (opts) => (target) => createTextureFromTarget({\r\n    gl: opts.gl,\r\n    format: opts.alpha ? WebGlConstants.RGBA : WebGlConstants.RGB,\r\n    setParameters: textureSetterSimple(opts)\r\n})(target);\n\nconst getColorSpaceForTextureId = ({ renderer, gltf, textureId }) => {\r\n    const defaultColorSpace = WebGlConstants.RGBA;\r\n    const SRGBA = 0x8C42; //SRGB_ALPHA_EXT ... not in type definitions yet and might vary by renderer.version\r\n    for (let i = 0; i < gltf.materials.length; i++) {\r\n        const material = gltf.materials[i];\r\n        if (material.emissiveTexture && material.emissiveTexture.index === textureId) {\r\n            return SRGBA;\r\n        }\r\n        if (material.normalTexture && material.normalTexture.index === textureId) {\r\n            return WebGlConstants.RGBA;\r\n        }\r\n        if (material.occlusionTexture && material.occlusionTexture.index === textureId) {\r\n            return WebGlConstants.RGBA;\r\n        }\r\n        if (material.pbrMetallicRoughness) {\r\n            if (material.pbrMetallicRoughness.baseColorTexture && material.pbrMetallicRoughness.baseColorTexture.index === textureId) {\r\n                return SRGBA;\r\n            }\r\n            if (material.pbrMetallicRoughness.metallicRoughnessTexture && material.pbrMetallicRoughness.metallicRoughnessTexture.index === textureId) {\r\n                return WebGlConstants.RGBA;\r\n            }\r\n        }\r\n    }\r\n    return defaultColorSpace;\r\n};\r\nconst requiresPowerOf2 = ({ wrapS, wrapT, filterMin, filterMag, sampler }) => (wrapS === WebGlConstants.REPEAT || wrapS === WebGlConstants.MIRRORED_REPEAT || wrapT === WebGlConstants.REPEAT || wrapT === WebGlConstants.MIRRORED_REPEAT)\r\n    || (filterMin === WebGlConstants.NEAREST_MIPMAP_NEAREST || filterMin === WebGlConstants.NEAREST_MIPMAP_LINEAR || filterMin === WebGlConstants.LINEAR_MIPMAP_NEAREST || filterMin === WebGlConstants.LINEAR_MIPMAP_LINEAR);\r\nconst isPowerOf2 = (img) => {\r\n    const check = (value) => (value & (value - 1)) == 0;\r\n    return check(img.naturalWidth) && check(img.naturalHeight);\r\n};\r\nconst nextHighestPowerOfTwo = (x) => {\r\n    --x;\r\n    for (var i = 1; i < 32; i <<= 1) {\r\n        x = x | x >> i;\r\n    }\r\n    return x + 1;\r\n};\r\nconst resizeImageToNextPowerOf2 = (img) => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = nextHighestPowerOfTwo(img.width);\r\n    canvas.height = nextHighestPowerOfTwo(img.height);\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height); //use img.width/height if not scaling\r\n    return canvas;\r\n};\r\nconst defaultSampler = {\r\n    filterMin: WebGlConstants.LINEAR,\r\n    filterMag: WebGlConstants.LINEAR,\r\n    wrapS: WebGlConstants.REPEAT,\r\n    wrapT: WebGlConstants.REPEAT\r\n};\r\nconst GLTF_PARSE_createTextures = ({ renderer, gltf, imageElements }) => {\r\n    const textureMap = new Map();\r\n    const { gl } = renderer;\r\n    if (gltf.textures) {\r\n        gltf.textures.forEach((texture, textureId) => {\r\n            const sampler = Object.assign({}, defaultSampler, texture.sampler === undefined ? undefined : gltf.samplers[texture.sampler]);\r\n            const colorSpace = getColorSpaceForTextureId({ renderer, gltf, textureId });\r\n            const img = imageElements[texture.source];\r\n            const { wrapS, wrapT, filterMin, filterMag } = sampler;\r\n            const display = (requiresPowerOf2({ wrapS, wrapT, filterMin, filterMag, sampler }) && !isPowerOf2(img))\r\n                ? resizeImageToNextPowerOf2(img)\r\n                : img;\r\n            const wTexture = createTextureFromTarget({\r\n                gl,\r\n                format: colorSpace,\r\n                setParameters: () => {\r\n                    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n                    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\r\n                    gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\r\n                    gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\r\n                    gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filterMin);\r\n                    gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filterMag);\r\n                }\r\n            })(display);\r\n            textureMap.set(textureId, wTexture);\r\n        });\r\n    }\r\n    return textureMap;\r\n};\n\n//helper for loading each item separately and creating the world manually\r\nconst getBasePath = (path) => {\r\n    const idx1 = (path.lastIndexOf(\"/\") + 1);\r\n    const idx2 = (path.lastIndexOf(\"\\\\\") + 1);\r\n    return !idx1 && !idx2\r\n        ? path\r\n        : path.substr(0, (idx1 > idx2) ? idx1 : idx2);\r\n};\n\nconst getIblConfig = (gltf) => {\r\n    if (gltf.extensionsUsed && gltf.extensionsUsed.indexOf(GltfIblExtensionName) !== -1) {\r\n        return gltf.extensions[GltfIblExtensionName];\r\n    }\r\n    return null;\r\n};\r\nconst loadAssets = ({ gltf, coreData }) => {\r\n    const config = getIblConfig(gltf);\r\n    const path = config ? config.path : \"\";\r\n    if (path === \"\") {\r\n        return Future.of(coreData);\r\n    }\r\n    return fetchJsonUrl(path)\r\n        .chain(jsonData => {\r\n        const basePath = getBasePath(path);\r\n        const imageUrls = Array();\r\n        imageUrls.push(jsonData.brdf.url);\r\n        const cubeMapNames = Object.keys(jsonData.cubeMaps);\r\n        cubeMapNames.forEach(cubeMapName => {\r\n            const cubeMap = jsonData.cubeMaps[cubeMapName];\r\n            cubeMap.urls.forEach(list => {\r\n                list.forEach(url => {\r\n                    imageUrls.push(cubeMapName + \"/\" + url);\r\n                });\r\n            });\r\n        });\r\n        const imageFutures = imageUrls.map(url => fetchImage(basePath + url).map(img => ({ url, img })));\r\n        return parallel(Infinity, imageFutures)\r\n            .map(ldrs => {\r\n            const m = new Map();\r\n            ldrs.forEach(ldr => {\r\n                m.set(ldr.url, ldr.img);\r\n            });\r\n            return m;\r\n        })\r\n            .map(imageMap => ({ jsonData, imageMap }));\r\n    })\r\n        .map(ibl => Object.assign({}, coreData, { extensions: Object.assign({}, coreData.extensions, { ibl })\r\n    }));\r\n};\r\nconst createData = ({ gltf, assets, renderer }) => (data) => {\r\n    if (!assets.extensions.ibl) {\r\n        return data;\r\n    }\r\n    prepWebGlRenderer(renderer);\r\n    const gl = renderer.gl;\r\n    const { jsonData, imageMap } = assets.extensions.ibl;\r\n    const makeBrdfTexture = createTextureFromTarget({\r\n        gl,\r\n        format: jsonData.brdf.colorSpace,\r\n        setParameters: () => {\r\n            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n            gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n            gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        }\r\n    });\r\n    const makeCubeMapTexture = (images) => (cubeMapName) => ({ colorSpace, urls }) => {\r\n        const faces = [\"posX\", \"negX\", \"posY\", \"negY\", \"posZ\", \"negZ\"];\r\n        let mipLevels = [];\r\n        urls.forEach(list => {\r\n            const mipLevel = {};\r\n            list.forEach((url, faceIndex) => {\r\n                const img = images.get(cubeMapName + \"/\" + url);\r\n                mipLevel[faces[faceIndex]] = img;\r\n            });\r\n            mipLevels.push(mipLevel);\r\n        });\r\n        return createCubeTextureFromTarget({\r\n            gl,\r\n            format: colorSpace,\r\n            setParameters: opts => {\r\n                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n                if (urls.length > 1) {\r\n                    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\r\n                    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n                }\r\n                else {\r\n                    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n                    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n                }\r\n            }\r\n        })(mipLevels);\r\n    };\r\n    const ibl = {\r\n        brdf: makeBrdfTexture(imageMap.get(jsonData.brdf.url)),\r\n        cubeMaps: {},\r\n        useLod: false\r\n    };\r\n    Object.keys(jsonData.cubeMaps).forEach(cubeMapName => {\r\n        const cubeMap = jsonData.cubeMaps[cubeMapName];\r\n        if (cubeMap.urls.length > 1) {\r\n            ibl.useLod = true;\r\n        }\r\n        ibl.cubeMaps[cubeMapName] = makeCubeMapTexture(imageMap)(cubeMapName)(jsonData.cubeMaps[cubeMapName]);\r\n    });\r\n    return Object.assign({}, data, { extensions: Object.assign({}, data.extensions, { ibl })\r\n    });\r\n};\r\nconst createScene = (gltf) => (originalScene) => (scene) => scene;\r\nconst createNode = (gltf) => (originalNode) => (node) => {\r\n    return node;\r\n};\r\nconst initialShaderConfig_Primitive = (data) => (originalIds) => (primitive) => (shaderConfig) => shaderConfig;\r\nconst initialShaderConfig_Scene = (data) => (scene) => (shaderConfig) => data.extensions.ibl\r\n    ? Object.assign({}, shaderConfig, {\r\n        ibl: {\r\n            useLod: data.extensions.ibl.useLod\r\n        }\r\n    })\r\n    : shaderConfig;\r\nconst runtimeShaderConfig_Primitive = (scene) => (primitive) => (shaderConfig) => shaderConfig;\r\nconst runtimeShaderConfig_Scene = (scene) => (shaderConfig) => shaderConfig;\r\nconst getShaderSource = (data) => (sceneShaderconfig) => (primitiveShaderConfig) => (source) => {\r\n    if (data.extensions.ibl) {\r\n        const defines = [];\r\n        defines.push(\"USE_IBL\");\r\n        if (data.extensions.ibl.useLod) {\r\n            defines.push(\"USE_TEX_LOD\");\r\n        }\r\n        const defineString = defines.map(value => `#define ${value} 1\\n`).join('');\r\n        return Object.assign({}, source, {\r\n            vertex: defineString + source.vertex,\r\n            fragment: defineString + source.fragment\r\n        });\r\n    }\r\n    return source;\r\n};\r\nconst GLTF_PARSE_Extension_Ibl = {\r\n    loadAssets,\r\n    createData,\r\n    createScene,\r\n    createNode,\r\n    initialShaderConfig_Primitive,\r\n    runtimeShaderConfig_Primitive,\r\n    initialShaderConfig_Scene,\r\n    runtimeShaderConfig_Scene,\r\n    getShaderSource\r\n};\n\n/* Note - lights are different than other extensions since\r\n * they are passed around really as part of the scene, for the sake of convenience (rather than scene.extensions for ambient, or hunting for nodes with extensions.light - lights are first-class citizens\r\n * For this reason, it is possible to \"trick\" the shader config by specifying the scene data directly rather than auto-loading it via KHR_Lights, though that typically wouldn't be used\r\n */\r\nconst getConfig = (gltf) => {\r\n    if (gltf.extensionsUsed && gltf.extensionsUsed.indexOf(GltfLightsExtensionName) !== -1) {\r\n        return gltf.extensions[GltfLightsExtensionName].lights;\r\n    }\r\n    return null;\r\n};\r\nconst getLight = (originalLight) => {\r\n    const kindMap = {\r\n        directional: LightKind.Directional,\r\n        point: LightKind.Point,\r\n        spot: LightKind.Spot\r\n    };\r\n    const light = {\r\n        kind: kindMap[originalLight.type],\r\n        color: originalLight.color\r\n            ? Float64Array.from(originalLight.color)\r\n            : Float64Array.from([1.0, 1.0, 1.0]),\r\n        intensity: originalLight.intensity !== undefined\r\n            ? originalLight.intensity\r\n            : 1.0\r\n    };\r\n    if (light.kind === LightKind.Spot) {\r\n        const innerConeAngle = originalLight.spot && originalLight.spot.innerConeAngle !== undefined\r\n            ? originalLight.spot.innerConeAngle\r\n            : 0;\r\n        const outerConeAngle = originalLight.spot && originalLight.spot.outerConeAngle !== undefined\r\n            ? originalLight.spot.outerConeAngle\r\n            : Math.PI / 4;\r\n        light.angleScale = 1.0 / Math.max(0.001, Math.cos(innerConeAngle) - Math.cos(outerConeAngle));\r\n        light.angleOffset = -Math.cos(outerConeAngle) * light.angleScale;\r\n    }\r\n    return light;\r\n};\r\nconst loadAssets$1 = ({ gltf, coreData }) => Future.of(coreData);\r\nconst createData$1 = ({ gltf, assets, renderer }) => (data) => data;\r\nconst createScene$1 = (gltf) => (originalScene) => (scene) => scene;\r\nconst createNode$1 = (gltf) => (originalNode) => (node) => {\r\n    const config = getConfig(gltf);\r\n    const nodeConfig = originalNode.extensions && originalNode.extensions.hasOwnProperty(GltfLightsExtensionName)\r\n        ? originalNode.extensions[GltfLightsExtensionName]\r\n        : undefined;\r\n    if (!config || !nodeConfig) {\r\n        return node;\r\n    }\r\n    const light = getLight(config[nodeConfig.light]);\r\n    if (node.kind) {\r\n        throw new Error(\"node cannot be both a light and some other kind...\");\r\n    }\r\n    return Object.assign({}, node, {\r\n        kind: NodeKind.LIGHT,\r\n        light\r\n    });\r\n};\r\nconst initialShaderConfig_Primitive$1 = (data) => (originalIds) => (primitive) => (shaderConfig) => shaderConfig;\r\nconst initialShaderConfig_Scene$1 = (data) => (scene) => (shaderConfig) => shaderConfig;\r\nconst runtimeShaderConfig_Primitive$1 = (scene) => (primitive) => (shaderConfig) => shaderConfig;\r\nconst runtimeShaderConfig_Scene$1 = (scene) => (shaderConfig) => {\r\n    let nPointLights = 0;\r\n    let nDirectionalLights = 0;\r\n    let nSpotLights = 0;\r\n    forEachNodes((node) => {\r\n        if (node.kind === NodeKind.LIGHT) {\r\n            switch (node.light.kind) {\r\n                case LightKind.Directional:\r\n                    nDirectionalLights++;\r\n                    break;\r\n                case LightKind.Point:\r\n                    nPointLights++;\r\n                    break;\r\n                case LightKind.Spot:\r\n                    nSpotLights++;\r\n                    break;\r\n            }\r\n        }\r\n    })(scene.nodes);\r\n    const config = {\r\n        nPointLights,\r\n        nDirectionalLights,\r\n        nSpotLights,\r\n    };\r\n    return Object.assign({}, shaderConfig, { lights: config });\r\n};\r\nconst getDynamicFragmentShader = (data) => (sceneShaderConfig) => (primitiveShaderConfig) => (fs) => {\r\n    let LIGHTS_VARS = '';\r\n    let LIGHTS_FUNCS = '';\r\n    const dLen = sceneShaderConfig.lights.nDirectionalLights;\r\n    const pLen = sceneShaderConfig.lights.nPointLights;\r\n    const sLen = sceneShaderConfig.lights.nSpotLights;\r\n    if (dLen) {\r\n        LIGHTS_VARS += `uniform vec3 u_Light_Directional_Direction[${dLen}];\\n`;\r\n        LIGHTS_VARS += `uniform vec3 u_Light_Directional_Color[${dLen}];\\n`;\r\n        LIGHTS_VARS += `uniform float u_Light_Directional_Intensity[${dLen}];\\n`;\r\n        for (let i = 0; i < dLen; i++) {\r\n            LIGHTS_FUNCS += `light = getDirectionalLight(\n                fragment,\n                u_Light_Directional_Direction[${i}],\n                u_Light_Directional_Color[${i}],\n                u_Light_Directional_Intensity[${i}]\n            );\\n`;\r\n            LIGHTS_FUNCS += `color += getColor(pbr, fragment, light);\\n`;\r\n        }\r\n    }\r\n    if (pLen) {\r\n        LIGHTS_VARS += `uniform vec3 u_Light_Point_Position[${pLen}];\\n`;\r\n        LIGHTS_VARS += `uniform vec3 u_Light_Point_Color[${pLen}];\\n`;\r\n        LIGHTS_VARS += `uniform float u_Light_Point_Intensity[${pLen}];\\n`;\r\n        for (let i = 0; i < pLen; i++) {\r\n            LIGHTS_FUNCS += `light = getPointLight(\n                fragment,\n                u_Light_Point_Position[${i}], \n                u_Light_Point_Color[${i}], \n                u_Light_Point_Intensity[${i}]\n            );\\n`;\r\n            LIGHTS_FUNCS += `color += getColor(pbr, fragment, light);\\n`;\r\n        }\r\n    }\r\n    if (sLen) {\r\n        LIGHTS_VARS += `uniform vec3 u_Light_Spot_Position[${sLen}];\\n`;\r\n        LIGHTS_VARS += `uniform vec3 u_Light_Spot_Direction[${sLen}];\\n`;\r\n        LIGHTS_VARS += `uniform float u_Light_Spot_AngleScale[${sLen}];\\n`;\r\n        LIGHTS_VARS += `uniform float u_Light_Spot_AngleOffset[${sLen}];\\n`;\r\n        LIGHTS_VARS += `uniform vec3 u_Light_Spot_Color[${sLen}];\\n`;\r\n        LIGHTS_VARS += `uniform float u_Light_Spot_Intensity[${sLen}];\\n`;\r\n        for (let i = 0; i < sLen; i++) {\r\n            LIGHTS_FUNCS += `light = getSpotLight(\n                fragment,\n                u_Light_Spot_Position[${i}], \n                u_Light_Spot_Direction[${i}], \n                u_Light_Spot_AngleScale[${i}], \n                u_Light_Spot_AngleOffset[${i}], \n                u_Light_Spot_Color[${i}], \n                u_Light_Spot_Intensity[${i}]\n            );\\n`;\r\n            LIGHTS_FUNCS += `color += getColor(pbr, fragment, light);\\n`;\r\n        }\r\n    }\r\n    return fs.replace(\"%PUNCTUAL_LIGHTS_VARS%\", LIGHTS_VARS).replace(\"%PUNCTUAL_LIGHTS_FUNCS%\", LIGHTS_FUNCS);\r\n};\r\nconst getShaderSource$1 = (data) => (sceneShaderConfig) => (primitiveShaderConfig) => (source) => {\r\n    if (sceneShaderConfig.lights) {\r\n        const defines = [];\r\n        const { nPointLights, nDirectionalLights, nSpotLights } = sceneShaderConfig.lights;\r\n        if (nPointLights > GltfLights_MAX || nDirectionalLights > GltfLights_MAX || nSpotLights > GltfLights_MAX) {\r\n            console.warn(`Only ${GltfLights_MAX} lights of each kind are supported`);\r\n        }\r\n        if (!nPointLights && !nDirectionalLights && !nSpotLights) {\r\n            return source;\r\n        }\r\n        defines.push(\"USE_PUNCTUAL_LIGHTS\");\r\n        const defineString = defines.map(value => `#define ${value} 1\\n`).join('');\r\n        return Object.assign({}, source, {\r\n            vertex: defineString + source.vertex,\r\n            fragment: getDynamicFragmentShader(data)(sceneShaderConfig)(primitiveShaderConfig)(defineString + source.fragment)\r\n        });\r\n    }\r\n    else {\r\n        return source;\r\n    }\r\n};\r\nconst GLTF_PARSE_Extension_Lights = {\r\n    loadAssets: loadAssets$1,\r\n    createData: createData$1,\r\n    createScene: createScene$1,\r\n    createNode: createNode$1,\r\n    initialShaderConfig_Primitive: initialShaderConfig_Primitive$1,\r\n    runtimeShaderConfig_Primitive: runtimeShaderConfig_Primitive$1,\r\n    initialShaderConfig_Scene: initialShaderConfig_Scene$1,\r\n    runtimeShaderConfig_Scene: runtimeShaderConfig_Scene$1,\r\n    getShaderSource: getShaderSource$1\r\n};\n\nconst GltfExtensions = [\r\n    GLTF_PARSE_Extension_Ibl,\r\n    GLTF_PARSE_Extension_Lights\r\n];\n\n//Pure data loaders\r\nconst loadBuffers = ({ basePath, gltf, glbBuffers }) => parallel(Infinity, gltf.buffers.map((buffer, bufferIndex) => glbBuffers !== undefined && bufferIndex < glbBuffers.length\r\n    ? Future.of(glbBuffers[bufferIndex].slice(0, buffer.byteLength))\r\n    : buffer.uri.indexOf(\"data:\") === 0\r\n        ? fetchArrayBufferUrl(buffer.uri)\r\n        : fetchArrayBufferUrl(basePath + buffer.uri)));\r\nconst loadImages = ({ basePath, gltf, buffers }) => {\r\n    const getImageBufferData = (bufferViewId) => {\r\n        const bufferView = gltf.bufferViews[bufferViewId];\r\n        const bufferId = bufferView.buffer;\r\n        const offset = bufferView.byteOffset === undefined ? 0 : bufferView.byteOffset;\r\n        return buffers[bufferId].slice(offset, offset + bufferView.byteLength);\r\n    };\r\n    //load texture data\r\n    return parallel(Infinity, !gltf.images || !gltf.images.length\r\n        ? []\r\n        : gltf.images.map(image => image.bufferView !== undefined\r\n            ? loadImageFromArrayBuffer({ data: getImageBufferData(image.bufferView), mimeType: image.mimeType })\r\n            : image.uri.indexOf(\"data:\") === 0\r\n                ? fetchImage(image.uri) //untested\r\n                : fetchImage(basePath + image.uri)));\r\n};\r\n//Tools for processing and loading data\r\nconst GLTF_PARSE_LoadDataAssets = ({ basePath, gltf, glbBuffers }) => GltfExtensions\r\n    .map(ext => ext.loadAssets)\r\n    .reduce((acc, fn) => (acc = acc.chain(coreData => fn({ gltf, coreData })), acc), loadBuffers({ basePath, gltf, glbBuffers })\r\n    .chain((buffers) => loadImages({ basePath, gltf, buffers })\r\n    .map(imageElements => ({\r\n    buffers, imageElements, extensions: {}\r\n}))));\r\nconst GLTF_PARSE_CreateData = ({ gltf, assets, renderer, config }) => {\r\n    prepWebGlRenderer(renderer);\r\n    const { imageElements, buffers } = assets;\r\n    const textures = GLTF_PARSE_createTextures({ renderer, gltf, imageElements });\r\n    const attributes = GLTF_PARSE_createAttributes({ gltf, buffers, renderer });\r\n    const animations = GLTF_PARSE_createAnimations({ gltf, buffers });\r\n    const shaders = new Map();\r\n    return GltfExtensions\r\n        .map(ext => ext.createData)\r\n        .reduce((acc, val) => (acc = val({ gltf, assets, renderer })(acc), acc), {\r\n        original: gltf,\r\n        animations,\r\n        attributes,\r\n        textures,\r\n        shaders,\r\n        initConfig: config,\r\n        extensions: {}\r\n    });\r\n};\n\n//https://stackoverflow.com/a/41798356/784519\r\nconst utf8ArrayToStr = (function () {\r\n    var charCache = new Array(128); // Preallocate the cache for the common single byte chars\r\n    var charFromCodePt = String.fromCodePoint || String.fromCharCode;\r\n    var result = [];\r\n    return function (array) {\r\n        var codePt, byte1;\r\n        var buffLen = array.length;\r\n        result.length = 0;\r\n        for (var i = 0; i < buffLen;) {\r\n            byte1 = array[i++];\r\n            if (byte1 <= 0x7F) {\r\n                codePt = byte1;\r\n            }\r\n            else if (byte1 <= 0xDF) {\r\n                codePt = ((byte1 & 0x1F) << 6) | (array[i++] & 0x3F);\r\n            }\r\n            else if (byte1 <= 0xEF) {\r\n                codePt = ((byte1 & 0x0F) << 12) | ((array[i++] & 0x3F) << 6) | (array[i++] & 0x3F);\r\n            }\r\n            else if (String.fromCodePoint) {\r\n                codePt = ((byte1 & 0x07) << 18) | ((array[i++] & 0x3F) << 12) | ((array[i++] & 0x3F) << 6) | (array[i++] & 0x3F);\r\n            }\r\n            else {\r\n                codePt = 63; // Cannot convert four byte code points, so use \"?\" instead\r\n                i += 3;\r\n            }\r\n            result.push(charCache[codePt] || (charCache[codePt] = charFromCodePt(codePt)));\r\n        }\r\n        return result.join('');\r\n    };\r\n})();\r\nconst getJsonFromArrayBuffer = (aBuffer) => {\r\n    const bytes = new Uint8Array(aBuffer);\r\n    const str = window[\"TextDecoder\"]\r\n        ? new TextDecoder('utf-8').decode(bytes)\r\n        : utf8ArrayToStr(bytes);\r\n    //console.log(str);\r\n    return JSON.parse(str);\r\n};\n\nconst getHeader = (aBuffer) => {\r\n    const dv = new DataView(aBuffer, 0, 12);\r\n    return {\r\n        magic: dv.getUint32(0, true),\r\n        version: dv.getUint32(4, true),\r\n        length: dv.getUint32(8, true)\r\n    };\r\n};\r\nconst getChunk = (offset) => (aBuffer) => {\r\n    const dv = new DataView(aBuffer, offset, 8);\r\n    const chunkLength = dv.getUint32(0, true);\r\n    const chunkType = dv.getUint32(4, true);\r\n    const chunkStart = offset + 8;\r\n    const chunkEnd = chunkStart + chunkLength;\r\n    const chunkData = aBuffer.slice(chunkStart, chunkEnd);\r\n    const result = [\r\n        (chunkType === 0x4E4F534A)\r\n            ? getJsonFromArrayBuffer(chunkData)\r\n            : (chunkType === 0x004E4942)\r\n                ? chunkData\r\n                : null,\r\n        chunkEnd\r\n    ];\r\n    if (result[0] === null) {\r\n        console.log(`unknown chunk type: ${chunkType}`);\r\n    }\r\n    return result;\r\n};\r\nconst asGlb = (aBuffer) => {\r\n    const [gltf, gltfEndOffset] = getChunk(12)(aBuffer);\r\n    const buffers = new Array();\r\n    let offset = gltfEndOffset;\r\n    while (offset < aBuffer.byteLength) {\r\n        const [bin, endOffset] = getChunk(offset)(aBuffer);\r\n        if (bin !== null) {\r\n            buffers.push(bin);\r\n        }\r\n        offset += endOffset;\r\n    }\r\n    return { gltf, glbBuffers: buffers };\r\n};\r\nconst GLTF_PARSE_isBinaryFile = (aBuffer) => getHeader(aBuffer).magic === 0x46546C67;\r\nconst GLTF_PARSE_getOriginalFromArrayBuffer = (aBuffer) => GLTF_PARSE_isBinaryFile(aBuffer)\r\n    ? asGlb(aBuffer)\r\n    : { gltf: getJsonFromArrayBuffer(aBuffer), glbBuffers: [] };\n\nlet _vaoIdCounter = 0;\r\nconst attributeShaderNameLookup = {\r\n    \"POSITION\": \"a_Position\",\r\n    \"NORMAL\": \"a_Normal\",\r\n    \"TANGENT\": \"a_Tangent\",\r\n    \"TEXCOORD_0\": \"a_UV\",\r\n    \"COLOR_0\": \"a_Color\",\r\n    \"JOINTS_0\": \"a_Skin_Joint\",\r\n    \"WEIGHTS_0\": \"a_Skin_Weight\"\r\n};\r\n//Sorting the attributes is important so that the dynamic shader\r\n//matches the correct location for each morph (e.g. morph_1 is position and location x, etc.)\r\nconst GLTF_PARSE_sortPrimitiveAttributeKeys = (keys) => keys.sort((a, b) => {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    const ORDER = [\"POSITION\", \"NORMAL\", \"TANGENT\", \"TEXCOOR_0\", \"COLOR_0\", \"JOINTS_0\", \"WEIGHTS_0\"];\r\n    const oa = ORDER.indexOf(a);\r\n    const ob = ORDER.indexOf(b);\r\n    return oa < ob ? -1 : oa > ob ? 1 : 0;\r\n});\r\nconst GLTF_PARSE_primitiveHasAttribute = (attributeName) => (originalPrimitive) => Object.keys(originalPrimitive.attributes).indexOf(attributeName) !== -1;\r\nconst GLTF_PARSE_getPrimitiveAttributeKeys = (originalPrimitive) => GLTF_PARSE_sortPrimitiveAttributeKeys(Object.keys(originalPrimitive.attributes));\r\nconst GLTF_PARSE_createPrimitiveAttributes = ({ renderer, originalPrimitive, data }) => {\r\n    const vao = { data: [] };\r\n    const accessorLookup = data.attributes.accessorLookup;\r\n    if (originalPrimitive.indices !== undefined) {\r\n        vao.elementBufferId = accessorLookup.get(originalPrimitive.indices).rendererBufferId;\r\n    }\r\n    const attributeKeys = GLTF_PARSE_getPrimitiveAttributeKeys(originalPrimitive);\r\n    attributeKeys.forEach((attributeKey) => {\r\n        const accessorId = originalPrimitive.attributes[attributeKey];\r\n        const attributeName = attributeShaderNameLookup[attributeKey];\r\n        if (!accessorLookup.has(accessorId)) {\r\n            throw new Error(\"bug here!\");\r\n        }\r\n        vao.data.push(Object.assign({ location: renderer.attributes.getLocationInRenderer(attributeName), bufferId: accessorLookup.get(accessorId).rendererBufferId }, accessorLookup.get(accessorId).strategy));\r\n    });\r\n    const { targets } = originalPrimitive;\r\n    if (targets) {\r\n        let morphIndex = 0;\r\n        targets.forEach(target => {\r\n            GLTF_PARSE_sortPrimitiveAttributeKeys(Object.keys(target)).forEach(attributeKey => {\r\n                const accessorId = target[attributeKey];\r\n                const aMorph = `a_Morph_${morphIndex++}`;\r\n                //console.log(aMorph,  data.accessors.get(accessorId).strategy.offset);\r\n                vao.data.push(Object.assign({ location: renderer.attributes.getLocationInRenderer(aMorph), bufferId: accessorLookup.get(accessorId).rendererBufferId }, accessorLookup.get(accessorId).strategy));\r\n            });\r\n        });\r\n    }\r\n    //vao.data.forEach(({attributeName}) => console.log(attributeName, shader.attributes.getLocation(attributeName)));\r\n    const vaoId = _vaoIdCounter++;\r\n    const sym = Symbol();\r\n    data.attributes.vaoIdLookup.set(vaoId, sym);\r\n    renderer.vertexArrays.assign(sym)(vao);\r\n    return vaoId;\r\n};\n\nconst GLTF_PARSE_getPrimitiveDrawing = ({ originalPrimitive, data }) => {\r\n    const _primitive = {\r\n        drawKind: (originalPrimitive.indices !== undefined) ? GltfPrimitiveDrawKind.ELEMENTS : GltfPrimitiveDrawKind.ARRAY,\r\n        drawMode: originalPrimitive.mode ? originalPrimitive.mode : WebGlConstants.TRIANGLES\r\n    };\r\n    if (_primitive.drawKind === GltfPrimitiveDrawKind.ELEMENTS) {\r\n        _primitive.elementsId = originalPrimitive.indices;\r\n    }\r\n    else {\r\n        const attributeKeys = GLTF_PARSE_getPrimitiveAttributeKeys(originalPrimitive);\r\n        _primitive.arrayCount = data.original.accessors[originalPrimitive.attributes[attributeKeys[0]]].count;\r\n    }\r\n    return _primitive;\r\n};\n\nconst GLTF_PARSE_createMaterialForPrimitive = ({ gltf, materialId, data }) => {\r\n    const _m = gltf.materials[materialId];\r\n    const material = {};\r\n    material.metallicRoughnessValues = Float64Array.from([1.0, 1.0]);\r\n    material.baseColorFactor = Float64Array.from([1.0, 1.0, 1.0, 1.0]);\r\n    if (_m.pbrMetallicRoughness) {\r\n        if (_m.pbrMetallicRoughness.metallicFactor !== undefined) {\r\n            material.metallicRoughnessValues[0] = _m.pbrMetallicRoughness.metallicFactor;\r\n        }\r\n        if (_m.pbrMetallicRoughness.roughnessFactor !== undefined) {\r\n            material.metallicRoughnessValues[1] = _m.pbrMetallicRoughness.roughnessFactor;\r\n        }\r\n        if (_m.pbrMetallicRoughness.baseColorFactor !== undefined) {\r\n            material.baseColorFactor = Float64Array.from(_m.pbrMetallicRoughness.baseColorFactor);\r\n        }\r\n        if (_m.pbrMetallicRoughness.baseColorTexture !== undefined) {\r\n            material.baseColorSamplerIndex = _m.pbrMetallicRoughness.baseColorTexture.index;\r\n        }\r\n        if (_m.pbrMetallicRoughness.metallicRoughnessTexture !== undefined) {\r\n            material.metallicRoughnessSamplerIndex = _m.pbrMetallicRoughness.metallicRoughnessTexture.index;\r\n        }\r\n    }\r\n    if (_m.normalTexture !== undefined) {\r\n        const scale = _m.normalTexture.scale !== undefined ? _m.normalTexture.scale : 1.0;\r\n        material.normal = {\r\n            scale,\r\n            samplerIndex: _m.normalTexture.index\r\n        };\r\n    }\r\n    if (_m.occlusionTexture !== undefined) {\r\n        const strength = _m.occlusionTexture.strength !== undefined ? _m.occlusionTexture.strength : 1.0;\r\n        material.occlusion = {\r\n            strength,\r\n            samplerIndex: _m.occlusionTexture.index\r\n        };\r\n    }\r\n    if (_m.emissiveTexture !== undefined) {\r\n        material.emissiveSamplerIndex = _m.emissiveTexture.index;\r\n    }\r\n    if (_m.emissiveFactor !== undefined) {\r\n        material.emissiveFactor = Float64Array.from(_m.emissiveFactor);\r\n    }\r\n    if (_m.alphaMode) {\r\n        switch (_m.alphaMode) {\r\n            case \"BLEND\":\r\n                material.alphaMode = GltfMaterialAlphaMode.BLEND;\r\n                break;\r\n            case \"MASK\":\r\n                material.alphaMode = GltfMaterialAlphaMode.MASK;\r\n                break;\r\n            default:\r\n                material.alphaMode = GltfMaterialAlphaMode.OPAQUE;\r\n                break;\r\n        }\r\n    }\r\n    material.doubleSided = _m.doubleSided ? true : false;\r\n    material.alphaCutoff = _m.alphaCutoff === undefined ? .5 : _m.alphaCutoff;\r\n    return material;\r\n};\n\n//These need to be called via bridge/setup\r\nconst GLTF_PARSE_getInitialShaderConfig_Primitive = (data) => (originalIds) => (primitive) => GltfExtensions\r\n    .map(ext => ext.initialShaderConfig_Primitive)\r\n    .reduce((acc, val) => (acc = val(data)(originalIds)(primitive)(acc), acc), getCoreInitialShaderConfig_Primitive(data)(originalIds)(primitive));\r\nconst GLTF_PARSE_getInitialShaderConfig_Scene = (data) => (scene) => GltfExtensions\r\n    .map(ext => ext.initialShaderConfig_Scene)\r\n    .reduce((acc, val) => (acc = val(data)(scene)(acc), acc), {});\r\nconst getCoreInitialShaderConfig_Primitive = (data) => (originalIds) => (primitive) => {\r\n    const gltf = data.original;\r\n    const originalNode = data.original.nodes[originalIds.nodeId];\r\n    const originalPrimitive = data.original.meshes[originalIds.meshId].primitives[originalIds.primitiveId];\r\n    const hasAttribute = (originalPrimitive) => (attr) => Object.keys(originalPrimitive.attributes).indexOf(attr) !== -1;\r\n    const material = primitive.material;\r\n    let nMorphWeights = 0;\r\n    let nPositionMorphs = 0;\r\n    let nNormalMorphs = 0;\r\n    let nTangentMorphs = 0;\r\n    let nSkinJoints = 0;\r\n    if (originalNode.skin !== undefined) {\r\n        const skin = data.original.skins[originalNode.skin];\r\n        nSkinJoints = skin.joints.length;\r\n    }\r\n    if (originalPrimitive.targets) {\r\n        originalPrimitive.targets.forEach(target => {\r\n            GLTF_PARSE_sortPrimitiveAttributeKeys(Object.keys(target)).forEach(key => {\r\n                switch (key) {\r\n                    case \"POSITION\":\r\n                        nPositionMorphs++;\r\n                        break;\r\n                    case \"NORMAL\":\r\n                        nNormalMorphs++;\r\n                        break;\r\n                    case \"TANGENT\":\r\n                        nTangentMorphs++;\r\n                        break;\r\n                    default: console.warn(\"unknown...\", key);\r\n                }\r\n            });\r\n            nMorphWeights++;\r\n        });\r\n    }\r\n    const shaderConfig = {\r\n        nMorphWeights,\r\n        nPositionMorphs,\r\n        nNormalMorphs,\r\n        nTangentMorphs,\r\n        nSkinJoints,\r\n        alphaMode: (material && material.alphaMode) ? material.alphaMode : GltfMaterialAlphaMode.OPAQUE,\r\n        hasNormalAttributes: hasAttribute(originalPrimitive)(\"NORMAL\"),\r\n        hasTangentAttributes: hasAttribute(originalPrimitive)(\"TANGENT\"),\r\n        hasUvAttributes: hasAttribute(originalPrimitive)(\"TEXCOORD_0\"),\r\n        hasColorAttributes: hasAttribute(originalPrimitive)(\"COLOR_0\"),\r\n        hasBaseColorMap: material && material.baseColorSamplerIndex !== undefined,\r\n        hasNormalMap: material && material.normal !== undefined,\r\n        hasEmissiveMap: material && material.emissiveSamplerIndex !== undefined,\r\n        hasMetalRoughnessMap: material && material.metallicRoughnessSamplerIndex !== undefined,\r\n        hasOcclusionMap: material && material.occlusion !== undefined,\r\n        manualSRGB: data.initConfig.manualSRGB === true,\r\n        fastSRGB: data.initConfig.fastSRGB === true,\r\n    };\r\n    return shaderConfig;\r\n};\n\nconst GLTF_PARSE_createPrimitives = ({ renderer, data }) => {\r\n    const gltf = data.original;\r\n    const meshPrimitives = new Map();\r\n    if (gltf.nodes === undefined || gltf.nodes === null) {\r\n        return meshPrimitives;\r\n    }\r\n    gltf.nodes\r\n        .map((node, idx) => [node, idx])\r\n        .filter(([node, idx]) => node.mesh !== undefined && node.mesh !== null)\r\n        .forEach(([node, nodeId]) => meshPrimitives.set(node.mesh, gltf.meshes[node.mesh].primitives.map((originalPrimitive, primitiveIdx) => {\r\n        const mesh = gltf.meshes[node.mesh];\r\n        const primitive = Object.assign({ vaoId: GLTF_PARSE_createPrimitiveAttributes({ renderer, originalPrimitive, data }) }, GLTF_PARSE_getPrimitiveDrawing({ originalPrimitive, data }));\r\n        if (originalPrimitive.material !== undefined) {\r\n            primitive.material = GLTF_PARSE_createMaterialForPrimitive({ gltf, materialId: originalPrimitive.material, data });\r\n        }\r\n        primitive.shaderConfig =\r\n            GLTF_PARSE_getInitialShaderConfig_Primitive(data)({ nodeId: nodeId, meshId: node.mesh, primitiveId: primitiveIdx })(primitive);\r\n        return primitive;\r\n    })));\r\n    return meshPrimitives;\r\n};\n\nconst GLTF_PARSE_createScene = ({ renderer, data, allNodes }) => (camera) => (sceneNumber) => {\r\n    let nodes = [];\r\n    if (sceneNumber >= 0 && data.original.scenes[sceneNumber]) {\r\n        const sceneList = data.original.scenes[sceneNumber].nodes;\r\n        forEachNodes(node => {\r\n            if (sceneList.indexOf(node.originalNodeId) !== -1) {\r\n                nodes.push(node);\r\n            }\r\n        })(allNodes);\r\n    }\r\n    else {\r\n        nodes = allNodes;\r\n        console.warn(\"no scene specified! Expect duplicate nodes...\");\r\n    }\r\n    const originalScene = sceneNumber >= 0\r\n        ? data.original.scenes[sceneNumber]\r\n        : {\r\n            nodes: data.original.nodes.map((node, idx) => idx)\r\n        };\r\n    //const nodes =_allNodes.filter((node, idx) => originalScene.nodes.indexOf(idx) !== -1);\r\n    const scene = GltfExtensions\r\n        .map(ext => ext.createScene)\r\n        .reduce((acc, val) => acc = val(data.original)(originalScene)(acc), {\r\n        camera,\r\n        nodes: updateNodeListTransforms({\r\n            updateLocal: true,\r\n            updateModel: true,\r\n            updateView: true,\r\n            updateLightDirection: true,\r\n            camera,\r\n        })(null)(nodes)\r\n    });\r\n    //workaround read-only here\r\n    scene.shaderConfig = GLTF_PARSE_getInitialShaderConfig_Scene(data)(scene);\r\n    return scene;\r\n};\n\nconst GLTF_PARSE_getCameraSettings = (originalCamera) => originalCamera.type === \"orthographic\"\r\n    ? {\r\n        kind: CameraKind.ORTHOGRAPHIC,\r\n        xmag: originalCamera.orthographic.xmag,\r\n        ymag: originalCamera.orthographic.ymag,\r\n        znear: originalCamera.orthographic.znear,\r\n        zfar: originalCamera.orthographic.zfar\r\n    }\r\n    : {\r\n        kind: CameraKind.PERSPECTIVE,\r\n        aspectRatio: originalCamera.perspective.aspectRatio,\r\n        yfov: originalCamera.perspective.yfov,\r\n        znear: originalCamera.perspective.znear,\r\n        zfar: originalCamera.perspective.zfar,\r\n    };\n\nconst GLTF_PARSE_createSkins = ({ gltf, buffers }) => {\r\n    const skins = new Map();\r\n    if (!gltf.skins || !gltf.skins.length) {\r\n        return skins;\r\n    }\r\n    //From the spec, this is guaranteed to be from a vec4 accessor and a series of mat4 data\r\n    const splitMatrix = (numbers) => {\r\n        const ret = new Array();\r\n        for (let idx = 0; idx < numbers.length;) {\r\n            ret.push(numbers.slice(idx, idx + 16));\r\n            idx += 16;\r\n        }\r\n        return ret;\r\n    };\r\n    gltf.skins.forEach((originalSkin, skinId) => {\r\n        const inverseBindMatrices = originalSkin.inverseBindMatrices\r\n            ? splitMatrix(GLTF_PARSE_getAccessorTypedData({\r\n                gltf,\r\n                buffers,\r\n                info: GLTF_PARSE_getAccessorDataInfo({ gltf, accessorId: originalSkin.inverseBindMatrices })\r\n            }))\r\n            : originalSkin.joints.map(createMat4);\r\n        if (inverseBindMatrices.length !== originalSkin.joints.length) {\r\n            throw new Error(\"inverse bind matrices mismatch!\");\r\n        }\r\n        let skeletonRootId;\r\n        const skinData = {\r\n            joints: originalSkin.joints.map((originalNodeId, idx) => {\r\n                const joint = {\r\n                    originalNodeId,\r\n                    inverseBindMatrix: inverseBindMatrices[idx]\r\n                };\r\n                if (originalSkin.skeleton !== undefined && originalSkin.skeleton === originalNodeId) {\r\n                    skeletonRootId = originalNodeId;\r\n                }\r\n                return joint;\r\n            })\r\n        };\r\n        if (skeletonRootId !== undefined) {\r\n            skinData.skeletonRootId = skeletonRootId;\r\n        }\r\n        skins.set(skinId, skinData);\r\n    });\r\n    return skins;\r\n};\n\n/*\r\n * All of the nodes are parsed in place as though they could be any root\r\n * Technically this is extra needless computation, but it makes the code clearer\r\n * Also, doing it this way allows for dynamic scene mixtures :D\r\n *\r\n * Since it's only on init, the cpu processing shouldn't matter much\r\n * Nodes are by definition lightweight, it's no biggie in terms of memory either\r\n * However, they _should_ be culled via GltfBridge.getOriginalScene(), otherwise dups will show\r\n */\r\nconst GLTF_PARSE_getNodes = ({ gltf, primitives, data, assets }) => {\r\n    const skinLookup = GLTF_PARSE_createSkins({ gltf, buffers: assets.buffers });\r\n    const getGltfNode = (parentModelMatrix) => (originalNodeId) => (node) => {\r\n        const baseNode = {\r\n            originalNodeId,\r\n            kind: node.mesh !== undefined && primitives.has(node.mesh) && primitives.get(node.mesh).length\r\n                ? GltfNodeKind.MESH\r\n                : node.camera !== undefined\r\n                    ? NodeKind.CAMERA\r\n                    : undefined,\r\n        };\r\n        const trs = node.matrix ? getTrsFromMatrix(Float64Array.from(node.matrix)) : getTrs(node);\r\n        const localMatrix = node.matrix ? new Float64Array(node.matrix) : getMatrixFromTrs(trs);\r\n        const modelMatrix = getModelMatrix(parentModelMatrix)(localMatrix);\r\n        baseNode.transform = { trs, localMatrix, modelMatrix };\r\n        const hasNormals = baseNode.kind !== GltfNodeKind.MESH\r\n            ? false\r\n            : gltf.meshes[node.mesh].primitives.some(p => GLTF_PARSE_primitiveHasAttribute(\"NORMAL\")(p));\r\n        if (hasNormals) {\r\n            baseNode.transform.normalMatrix = getNormalMatrix(modelMatrix);\r\n        }\r\n        if (baseNode.kind === GltfNodeKind.MESH) {\r\n            baseNode.primitives = primitives.get(node.mesh);\r\n            if (node.skin !== undefined) {\r\n                const skinData = skinLookup.get(node.skin);\r\n                baseNode.skin = {\r\n                    skinId: node.skin,\r\n                    joints: skinData.joints.slice()\r\n                };\r\n                if (skinData.skeletonRootId !== undefined) {\r\n                    baseNode.skin.skeletonRootId = skinData.skeletonRootId;\r\n                }\r\n            }\r\n            const morphWeights = node.weights\r\n                ? Float64Array.from(node.weights)\r\n                : gltf.meshes[node.mesh].weights\r\n                    ? Float64Array.from(gltf.meshes[node.mesh].weights)\r\n                    : undefined;\r\n            if (morphWeights) {\r\n                baseNode.morphWeights = morphWeights;\r\n            }\r\n        }\r\n        else if (baseNode.kind === NodeKind.CAMERA) {\r\n            baseNode.camera = {\r\n                //the actual camera settings depend on view and potentially canvas\r\n                //so this is just partial\r\n                settings: GLTF_PARSE_getCameraSettings(gltf.cameras[node.camera])\r\n            };\r\n            baseNode.cameraIndex = node.camera;\r\n        }\r\n        const finalNode = GltfExtensions\r\n            .map(ext => ext.createNode)\r\n            .reduce((acc, val) => (acc = val(gltf)(node)(acc), acc), baseNode);\r\n        return !node.children\r\n            ? finalNode\r\n            : Object.assign({}, finalNode, { children: node.children.map(idx => getGltfNode(modelMatrix)(idx)(gltf.nodes[idx])) });\r\n    };\r\n    return GLTF_PARSE_addAnimationIds({\r\n        gltf,\r\n        nodes: gltf.nodes\r\n            .map((node, idx) => getGltfNode(null)(idx)(node))\r\n    });\r\n};\r\nfunction getTrs(node) {\r\n    const trs = {\r\n        translation: Float64Array.from([0.0, 0.0, 0.0]),\r\n        rotation: Float64Array.from([0.0, 0.0, 0.0, 1.0]),\r\n        scale: Float64Array.from([1.0, 1.0, 1.0])\r\n    };\r\n    Object.keys(trs).forEach(prop => {\r\n        const nodeTrsProp = node[prop];\r\n        if (nodeTrsProp) {\r\n            trs[prop] = nodeTrsProp;\r\n        }\r\n    });\r\n    return trs;\r\n}\n\nvar UNIFORM_TYPE;\r\n(function (UNIFORM_TYPE) {\r\n    UNIFORM_TYPE[UNIFORM_TYPE[\"FLOAT\"] = 0] = \"FLOAT\";\r\n    UNIFORM_TYPE[UNIFORM_TYPE[\"INT\"] = 1] = \"INT\";\r\n})(UNIFORM_TYPE || (UNIFORM_TYPE = {}));\r\nconst createUniforms = ({ renderer, activateShader }) => {\r\n    const { gl } = renderer;\r\n    const cache = {\r\n        uniformLocations: new Map(),\r\n        uniformValues: new Map(),\r\n        uniformSingleValues: new Map(),\r\n        uniformMatrixTranspose: new Map()\r\n    };\r\n    const getLocation = (uName) => {\r\n        const { program } = activateShader();\r\n        if (!cache.uniformLocations.has(uName)) {\r\n            cache.uniformLocations.set(uName, gl.getUniformLocation(program, uName));\r\n        }\r\n        return cache.uniformLocations.get(uName);\r\n    };\r\n    const validLocation = (loc) => (loc !== null && loc !== undefined && loc != -1);\r\n    const hasLocation = (uName) => validLocation(getLocation(uName));\r\n    const _isEqual = (uName) => (values) => {\r\n        if (!cache.uniformValues.has(uName)) {\r\n            return false;\r\n        }\r\n        const xs = cache.uniformValues.get(uName);\r\n        if (xs.length !== values.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < xs.length; i++) {\r\n            if (xs[i] !== values[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    const _assignCacheValues = (uType) => (uName) => (values) => {\r\n        //Must make a copy each time for two reasons:\r\n        //1. Otherwise it could be referencing the same object in subsequent calls\r\n        //2. Normalizing to 32-bit values\r\n        //However - the cache is local only, so it's only allocating the first time (subsequent is just writing to mutable space)\r\n        if (!cache.uniformValues.has(uName)) {\r\n            switch (uType) {\r\n                case UNIFORM_TYPE.FLOAT:\r\n                    cache.uniformValues.set(uName, new Float32Array(values.length));\r\n                    break;\r\n                case UNIFORM_TYPE.INT:\r\n                    cache.uniformValues.set(uName, new Int32Array(values.length));\r\n                    break;\r\n            }\r\n            return;\r\n        }\r\n        const target = cache.uniformValues.get(uName);\r\n        for (let idx = 0; idx < values.length; idx++) {\r\n            target[idx] = values[idx];\r\n        }\r\n    };\r\n    const _setSingleValue = (setterFn) => (uName) => (value) => {\r\n        if (!cache.uniformSingleValues.has(uName) || cache.uniformSingleValues.get(uName) !== value) {\r\n            cache.uniformSingleValues.set(uName, value);\r\n            const loc = getLocation(uName);\r\n            if (validLocation(loc)) {\r\n                setterFn(loc)(value); //for single values it doesn't get converted\r\n            }\r\n        }\r\n    };\r\n    const _setValues = (uType) => (setterFn) => (uName) => (values) => {\r\n        if (!_isEqual(uName)(values)) {\r\n            _assignCacheValues(uType)(uName)(values);\r\n            const loc = getLocation(uName);\r\n            if (validLocation(loc)) {\r\n                setterFn(loc)(cache.uniformValues.get(uName)); //for arrays it needs to be grabbed from cache which set the appropriate type\r\n            }\r\n        }\r\n    };\r\n    const _setMatrixValues = (uType) => (setterFn) => (uName) => (transpose) => (values) => {\r\n        if (!cache.uniformMatrixTranspose.has(uName) || cache.uniformMatrixTranspose.get(uName) !== transpose || !_isEqual(uName)(values)) {\r\n            _assignCacheValues(uType)(uName)(values);\r\n            cache.uniformMatrixTranspose.set(uName, transpose);\r\n            const loc = getLocation(uName);\r\n            if (validLocation(loc)) {\r\n                setterFn(loc)(transpose)(cache.uniformValues.get(uName));\r\n            }\r\n        }\r\n    };\r\n    const setters = {\r\n        uniform1f: _setSingleValue(loc => v => gl.uniform1f(loc, v)),\r\n        uniform1fv: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform1fv(loc, v)),\r\n        uniform1i: _setSingleValue(loc => v => gl.uniform1i(loc, v)),\r\n        uniform1iv: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform1iv(loc, v)),\r\n        uniform2f: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform2f(loc, v[0], v[1])),\r\n        uniform2fv: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform2fv(loc, v)),\r\n        uniform2i: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform2i(loc, v[0], v[1])),\r\n        uniform2iv: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform2iv(loc, v)),\r\n        uniform3f: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform3f(loc, v[0], v[1], v[2])),\r\n        uniform3fv: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform3fv(loc, v)),\r\n        uniform3i: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform3i(loc, v[0], v[1], v[2])),\r\n        uniform3iv: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform3iv(loc, v)),\r\n        uniform4f: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform4f(loc, v[0], v[1], v[2], v[3])),\r\n        uniform4fv: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform4fv(loc, v)),\r\n        uniform4i: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform4i(loc, v[0], v[1], v[2], v[3])),\r\n        uniform4iv: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform4iv(loc, v)),\r\n        uniformMatrix2fv: _setMatrixValues(UNIFORM_TYPE.FLOAT)(loc => t => v => gl.uniformMatrix2fv(loc, t, v)),\r\n        uniformMatrix3fv: _setMatrixValues(UNIFORM_TYPE.FLOAT)(loc => t => v => gl.uniformMatrix3fv(loc, t, v)),\r\n        uniformMatrix4fv: _setMatrixValues(UNIFORM_TYPE.FLOAT)(loc => t => v => gl.uniformMatrix4fv(loc, t, v)),\r\n    };\r\n    return {\r\n        cache,\r\n        setters,\r\n        getLocation,\r\n        validLocation,\r\n        hasLocation\r\n    };\r\n};\n\n//the \"any\" here is actually WebGlShader but defining it as such would cause a circular reference\r\nlet current;\r\nconst shaders = new Map();\r\nconst _compileShader = ({ renderer, source }) => {\r\n    let vShader;\r\n    let fShader;\r\n    const { gl } = renderer;\r\n    const program = gl.createProgram();\r\n    const dispose = () => {\r\n        if (vShader !== undefined && (vShader instanceof WebGLShader)) {\r\n            gl.deleteShader(vShader);\r\n        }\r\n        if (fShader !== undefined && (fShader instanceof WebGLShader)) {\r\n            gl.deleteShader(fShader);\r\n        }\r\n        gl.deleteProgram(program);\r\n    };\r\n    const getShaderName = (shaderType) => shaderType === gl.VERTEX_SHADER ? \"vertex\" : \"fragment\";\r\n    const loadShader = (shaderType) => (sourceText) => {\r\n        const shader = gl.createShader(shaderType);\r\n        gl.shaderSource(shader, sourceText);\r\n        gl.compileShader(shader);\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            const errorMessage = `${getShaderName(shaderType)} error: ` + gl.getShaderInfoLog(shader);\r\n            throw new Error(errorMessage); //this _should_ be an exception\r\n        }\r\n        gl.attachShader(program, shader);\r\n        return shader;\r\n    };\r\n    vShader = loadShader(gl.VERTEX_SHADER)(source.vertex);\r\n    if (vShader instanceof Error) {\r\n        dispose();\r\n        return vShader;\r\n    }\r\n    fShader = loadShader(gl.FRAGMENT_SHADER)(source.fragment);\r\n    if (fShader instanceof Error) {\r\n        dispose();\r\n        return fShader;\r\n    }\r\n    let location = 0;\r\n    renderer.attributes.globalLocations.forEach(aName => {\r\n        gl.bindAttribLocation(program, location, aName);\r\n        location++;\r\n    });\r\n    gl.linkProgram(program);\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        dispose();\r\n        return new Error('Unable to initialize the shader program: ' + gl.getProgramInfoLog(program));\r\n    }\r\n    return program;\r\n};\r\nconst _activateShader = (shaderId) => {\r\n    if (!current || current.shaderId !== shaderId) {\r\n        current = shaders.get(shaderId);\r\n        current.gl.useProgram(current.program);\r\n    }\r\n    return current;\r\n};\r\nconst activateShader = (shaderId) => _activateShader(shaderId);\r\nconst createShader = ({ renderer, shaderId, source }) => {\r\n    const program = _compileShader({ source, renderer });\r\n    const shader = {\r\n        gl: renderer.gl,\r\n        shaderId,\r\n        program,\r\n        uniforms: createUniforms({ renderer, activateShader: () => _activateShader(shaderId) }),\r\n    };\r\n    shaders.set(shaderId, shader);\r\n    return shader;\r\n};\n\nconst createRendererThunk = (thunk) => () => {\r\n    const { renderer, data, node, primitive, lightList, scene, shader, skinMatrices } = thunk;\r\n    const { camera } = scene;\r\n    const { gl } = renderer;\r\n    const gltf = data.original;\r\n    const { material, drawMode } = primitive;\r\n    const { uniforms, shaderId } = shader;\r\n    const { uniform1i, uniform1f, uniform1fv, uniform1iv, uniform2fv, uniform3fv, uniform4fv, uniformMatrix4fv } = uniforms.setters;\r\n    const vaoId = data.attributes.vaoIdLookup.get(primitive.vaoId);\r\n    let samplerIndex = 0;\r\n    activateShader(shaderId);\r\n    if (material && material.doubleSided) {\r\n        renderer.glToggle(WebGlConstants.CULL_FACE)(false);\r\n    }\r\n    else {\r\n        renderer.glToggle(WebGlConstants.CULL_FACE)(true);\r\n    }\r\n    /*\r\n        Set the IBL uniforms\r\n    */\r\n    if (scene.shaderConfig.ibl) {\r\n        renderer.switchTexture(samplerIndex)(data.extensions.ibl.brdf);\r\n        uniform1i(\"u_brdfLUT\")(samplerIndex++);\r\n        if (data.extensions.ibl.cubeMaps.diffuse) {\r\n            renderer.switchCubeTexture(samplerIndex)(data.extensions.ibl.cubeMaps.diffuse);\r\n            uniform1i(\"u_DiffuseEnvSampler\")(samplerIndex++);\r\n        }\r\n        if (data.extensions.ibl.cubeMaps.specular) {\r\n            renderer.switchCubeTexture(samplerIndex)(data.extensions.ibl.cubeMaps.specular);\r\n            uniform1i(\"u_SpecularEnvSampler\")(samplerIndex++);\r\n        }\r\n        //this is actually just used in fragment shader (e.g. not for transforms), but it's required\r\n        uniform3fv(\"u_Camera\")(camera.position);\r\n    }\r\n    /*\r\n     * Set the node-based lighting uniforms\r\n    */\r\n    if (lightList) {\r\n        if (lightList.directional) {\r\n            //console.log(lightList.directional.direction);\r\n            uniform3fv(\"u_Light_Directional_Direction\")(lightList.directional.direction);\r\n            uniform3fv(\"u_Light_Directional_Color\")(lightList.directional.color);\r\n            uniform1fv(\"u_Light_Directional_Intensity\")(lightList.directional.intensity);\r\n        }\r\n        if (lightList.point) {\r\n            uniform3fv(\"u_Light_Point_Position\")(lightList.point.position);\r\n            uniform3fv(\"u_Light_Point_Color\")(lightList.point.color);\r\n            uniform1fv(\"u_Light_Point_Intensity\")(lightList.point.intensity);\r\n        }\r\n        if (lightList.spot) {\r\n            uniform3fv(\"u_Light_Spot_Position\")(lightList.spot.position);\r\n            uniform3fv(\"u_Light_Spot_Direction\")(lightList.spot.direction);\r\n            uniform1fv(\"u_Light_Spot_AngleScale\")(lightList.spot.angleScale);\r\n            uniform1fv(\"u_Light_Spot_AngleOffset\")(lightList.spot.angleOffset);\r\n            uniform3fv(\"u_Light_Spot_Color\")(lightList.spot.color);\r\n            uniform1fv(\"u_Light_Spot_Intensity\")(lightList.spot.intensity);\r\n        }\r\n    }\r\n    /*\r\n      Set the transform uniforms\r\n    */\r\n    if (skinMatrices) {\r\n        uniformMatrix4fv(\"u_Skin_Matrices\")(false)(skinMatrices);\r\n    }\r\n    uniformMatrix4fv(\"u_MVPMatrix\")(false)(node.transform.modelViewProjectionMatrix);\r\n    uniformMatrix4fv(\"u_ModelMatrix\")(false)(node.transform.modelMatrix);\r\n    if (node.transform.normalMatrix) {\r\n        uniformMatrix4fv(\"u_NormalMatrix\")(false)(node.transform.normalMatrix);\r\n    }\r\n    /*\r\n      Set the morph targets\r\n    */\r\n    //console.log(uniforms.getLocation(\"u_MorphWeights\"));\r\n    if (node.morphWeights) {\r\n        uniform1fv(\"u_MorphWeights\")(node.morphWeights);\r\n    }\r\n    /*\r\n      Set the material uniforms\r\n    */\r\n    const assignMeshTexture = (uName) => (textureInfo) => {\r\n        if (typeof textureInfo === \"number\") {\r\n            renderer.switchTexture(samplerIndex)(data.textures.get(textureInfo));\r\n        }\r\n        else {\r\n            renderer.switchTexture(samplerIndex)(textureInfo);\r\n        }\r\n        uniform1i(uName)(samplerIndex++);\r\n    };\r\n    if (material) {\r\n        uniform2fv(\"u_MetallicRoughnessValues\")(material.metallicRoughnessValues);\r\n        uniform4fv(\"u_BaseColorFactor\")(material.baseColorFactor);\r\n        if (material.baseColorSamplerIndex !== undefined) {\r\n            assignMeshTexture(\"u_BaseColorSampler\")(material.baseColorSamplerIndex);\r\n        }\r\n        if (material.metallicRoughnessSamplerIndex !== undefined) {\r\n            assignMeshTexture(\"u_MetallicRoughnessSampler\")(material.metallicRoughnessSamplerIndex);\r\n        }\r\n        if (material.normal !== undefined) {\r\n            uniform1f(\"u_NormalScale\")(material.normal.scale);\r\n            assignMeshTexture(\"u_NormalSampler\")(material.normal.samplerIndex);\r\n        }\r\n        if (material.occlusion !== undefined) {\r\n            uniform1f(\"u_OcclusionStrength\")(material.occlusion.strength);\r\n            assignMeshTexture(\"u_OcclusionSampler\")(material.occlusion.samplerIndex);\r\n        }\r\n        if (material.emissiveSamplerIndex !== undefined) {\r\n            assignMeshTexture(\"u_EmissiveSampler\")(material.emissiveSamplerIndex);\r\n        }\r\n        if (material.emissiveFactor !== undefined) {\r\n            uniform3fv(\"u_EmissiveFactor\")(material.emissiveFactor);\r\n        }\r\n        if (material.alphaMode === GltfMaterialAlphaMode.MASK) {\r\n            const alphaCutoff = (material.alphaMode === GltfMaterialAlphaMode.MASK)\r\n                ? material.alphaCutoff\r\n                : 1.0;\r\n            uniform1f(\"u_AlphaCutoff\")(alphaCutoff);\r\n        }\r\n    }\r\n    /*\r\n        Draw\r\n    */\r\n    renderer.vertexArrays.activate(vaoId);\r\n    if (primitive.drawKind === GltfPrimitiveDrawKind.ELEMENTS) {\r\n        const elementsAccessor = gltf.accessors[primitive.elementsId];\r\n        //console.log(`gl.drawElements(${drawMode}, ${elementsAccessor.count}, ${elementsAccessor.componentType}, ${elementsAccessor.byteOffset || 0});`)\r\n        gl.drawElements(drawMode, elementsAccessor.count, elementsAccessor.componentType, elementsAccessor.byteOffset || 0);\r\n    }\r\n    else {\r\n        gl.drawArrays(drawMode, 0, primitive.arrayCount);\r\n    }\r\n};\n\n//TODO - speed has been optimized but need to test thoroughly for correctness (was roughly tested)\r\n//https://stackoverflow.com/questions/17398578/hash-algorithm-for-variable-size-boolean-array?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa\r\nconst baseArray = new Uint8Array(18);\r\nconst morphsArray = new Uint8Array(30);\r\nconst skinArray = new Uint8Array(30);\r\nconst lightsArray = new Uint8Array(30);\r\nconst hashBooleans32 = (xs) => {\r\n    let h = (1 << xs.length);\r\n    for (let i = 0; i < xs.length; i++) {\r\n        h = h | ((xs[i]) << (xs.length - i - 1));\r\n    }\r\n    return h;\r\n};\r\nconst getShaderHash = (sceneConfig) => (primitiveConfig) => {\r\n    baseArray.fill(0);\r\n    morphsArray.fill(0);\r\n    skinArray.fill(0);\r\n    lightsArray.fill(0);\r\n    if (primitiveConfig.hasNormalAttributes) {\r\n        baseArray[0] = 1;\r\n    }\r\n    if (primitiveConfig.hasTangentAttributes) {\r\n        baseArray[1] = 1;\r\n    }\r\n    if (primitiveConfig.hasUvAttributes) {\r\n        baseArray[2] = 1;\r\n    }\r\n    if (primitiveConfig.hasColorAttributes) {\r\n        baseArray[3] = 1;\r\n    }\r\n    if (primitiveConfig.hasBaseColorMap) {\r\n        baseArray[4] = 1;\r\n    }\r\n    if (primitiveConfig.hasNormalMap) {\r\n        baseArray[5] = 1;\r\n    }\r\n    if (primitiveConfig.hasEmissiveMap) {\r\n        baseArray[6] = 1;\r\n    }\r\n    if (primitiveConfig.hasMetalRoughnessMap) {\r\n        baseArray[7] = 1;\r\n    }\r\n    if (primitiveConfig.hasOcclusionMap) {\r\n        baseArray[8] = 1;\r\n    }\r\n    if (primitiveConfig.manualSRGB) {\r\n        baseArray[9] = 1;\r\n    }\r\n    if (primitiveConfig.fastSRGB) {\r\n        baseArray[10] = 1;\r\n    }\r\n    baseArray[11] = primitiveConfig.alphaMode === GltfMaterialAlphaMode.BLEND ? 0 : 1;\r\n    baseArray[12] = primitiveConfig.alphaMode === GltfMaterialAlphaMode.MASK ? 0 : 1;\r\n    baseArray[13] = primitiveConfig.alphaMode === GltfMaterialAlphaMode.OPAQUE ? 0 : 1;\r\n    if (sceneConfig.ibl) {\r\n        baseArray[14] = 1;\r\n        if (sceneConfig.ibl.useLod) {\r\n            baseArray[15] = 1;\r\n        }\r\n    }\r\n    if (sceneConfig.unlit) {\r\n        baseArray[16] = 1;\r\n    }\r\n    if (sceneConfig.lights) {\r\n        baseArray[17] = 1;\r\n        //Light instances get their own array - 10 * 3 = 30 possibilities\r\n        for (let i = 0; i < sceneConfig.lights.nDirectionalLights; i++) {\r\n            lightsArray[i] = 1;\r\n        }\r\n        for (let i = 0; i < sceneConfig.lights.nPointLights; i++) {\r\n            lightsArray[10 + i] = 1;\r\n        }\r\n        for (let i = 0; i < sceneConfig.lights.nSpotLights; i++) {\r\n            lightsArray[20 + i] = 1;\r\n        }\r\n    }\r\n    for (let i = 0; i < primitiveConfig.nPositionMorphs; i++) {\r\n    }\r\n    for (let i = 0; i < primitiveConfig.nNormalMorphs; i++) {\r\n    }\r\n    for (let i = 0; i < primitiveConfig.nTangentMorphs; i++) {\r\n    }\r\n    for (let i = 0; i < primitiveConfig.nMorphWeights; i++) {\r\n    }\r\n    for (let i = 0; i < primitiveConfig.nSkinJoints; i++) {\r\n        skinArray[i] = 1;\r\n    }\r\n    const shaderKey = hashBooleans32(baseArray).toString();\r\n    \"-\" + hashBooleans32(morphsArray).toString()\r\n        + \"-\" + hashBooleans32(skinArray).toString()\r\n        + \"-\" + hashBooleans32(lightsArray).toString();\r\n    return shaderKey;\r\n};\r\n/*\r\nconst _lookup = new Map();\r\nconst FINAL = Symbol();\r\n\nexport const getShaderSymbol = (config:GltfShaderConfig):Symbol => {\r\n\n    let lookup = _lookup;\r\n\n    const setLookup = key => {\r\n        if(!lookup.has(key)) {\r\n            lookup.set(key, new Map());\r\n        }\r\n\n        lookup = lookup.get(key);\r\n    }\r\n    \n\n    setLookup(config.hasNormalAttributes);\r\n    setLookup(config.hasTangentAttributes);\r\n    setLookup(config.hasUvAttributes);\r\n    setLookup(config.hasColorAttributes);\r\n    setLookup(config.hasBaseColorMap);\r\n    setLookup(config.hasNormalMap);\r\n    setLookup(config.hasEmissiveMap);\r\n    setLookup(config.hasMetalRoughnessMap);\r\n    setLookup(config.hasOcclusionMap);\r\n    setLookup(config.manualSRGB);\r\n    setLookup(config.fastSRGB);\r\n    if(config.extensions.ibl) {\r\n        setLookup(true);\r\n        setLookup(config.extensions.ibl.useLod);\r\n    } else {\r\n        setLookup(false);\r\n    }\r\n\n    setLookup(config.extensions.unlit ? true : false);\r\n\n    if(config.extensions.lights) {\r\n        setLookup(true);\r\n\n        setLookup(config.extensions.lights.hasAmbient);\r\n        setLookup(config.extensions.lights.nDirectionalLights);\r\n        setLookup(config.extensions.lights.nPointLights);\r\n        setLookup(config.extensions.lights.nSpotLights);\r\n    } else {\r\n        setLookup(false);\r\n    }\r\n\n    setLookup(config.nPositionMorphs);\r\n    setLookup(config.nNormalMorphs);\r\n    setLookup(config.nTangentMorphs);\r\n    setLookup(config.nMorphWeights);\r\n    setLookup(config.nSkinJoints);\r\n   \n    if(!lookup.has(FINAL)) {\r\n        lookup.set(FINAL, Symbol());\r\n    }\r\n\n    return lookup.get(FINAL);\r\n\n}\r\n*/\n\nvar vertexShaderSource = \"precision highp float;\\nprecision highp int;\\n\\n%MORPH_VARS%\\n\\n#ifdef HAS_SKIN\\nattribute vec4 a_Skin_Joint;\\nattribute vec4 a_Skin_Weight;\\nuniform mat4 u_Skin_Matrices[%SKIN_JOINT_COUNT%];\\n#endif\\n\\nattribute vec4 a_Position;\\n#ifdef HAS_NORMALS\\nattribute vec4 a_Normal;\\n#endif\\n#ifdef HAS_TANGENTS\\nattribute vec4 a_Tangent;\\n#endif\\n#ifdef HAS_UV\\nattribute vec2 a_UV;\\n#endif\\n#ifdef HAS_COLOR\\nattribute vec4 a_Color;\\nvarying vec4 v_Color;\\n#endif\\n\\nuniform mat4 u_MVPMatrix;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_NormalMatrix;\\n\\nvarying vec3 v_Position;\\nvarying vec2 v_UV;\\n\\n#ifdef HAS_NORMALS\\n#ifdef HAS_TANGENTS\\nvarying mat3 v_TBN;\\n#else\\nvarying vec3 v_Normal;\\n#endif\\n#endif\\n\\n\\nvoid main()\\n{\\n\\n  \\n\\n  vec4 m_Position = a_Position;\\n  #ifdef HAS_NORMALS\\n    vec4 m_Normal = a_Normal;\\n  #endif\\n  #ifdef HAS_TANGENTS\\n    vec4 m_Tangent = a_Tangent;\\n  #endif\\n\\n#ifdef HAS_SKIN\\n    mat4 skinMat = a_Skin_Weight[0] * u_Skin_Matrices[int(a_Skin_Joint[0])]\\n        +   a_Skin_Weight[1] * u_Skin_Matrices[int(a_Skin_Joint[1])]\\n        +   a_Skin_Weight[2] * u_Skin_Matrices[int(a_Skin_Joint[2])]\\n        +   a_Skin_Weight[3] * u_Skin_Matrices[int(a_Skin_Joint[3])];\\n\\n    m_Position = skinMat * m_Position;\\n#endif\\n    %MORPH_FUNCS%\\n\\n\\n  \\n  vec4 pos = u_ModelMatrix * m_Position;\\n  v_Position = vec3(pos.xyz) / pos.w;\\n\\n  #ifdef HAS_NORMALS\\n  #ifdef HAS_TANGENTS\\n  vec3 normalW = normalize(vec3(u_NormalMatrix * vec4(m_Normal.xyz, 0.0)));\\n  vec3 tangentW = normalize(vec3(u_ModelMatrix * vec4(m_Tangent.xyz, 0.0)));\\n  vec3 bitangentW = cross(normalW, tangentW) * m_Tangent.w;\\n  v_TBN = mat3(tangentW, bitangentW, normalW);\\n  #else // HAS_TANGENTS != 1\\n  v_Normal = normalize(vec3(u_ModelMatrix * vec4(m_Normal.xyz, 0.0)));\\n  #endif\\n  #endif\\n\\n  #ifdef HAS_UV\\n  v_UV = a_UV;\\n  #else\\n  v_UV = vec2(0.,0.);\\n  #endif\\n\\n    #ifdef HAS_COLOR\\n    v_Color = a_Color;\\n    #endif\\n\\n\\n  gl_Position = u_MVPMatrix * m_Position; // needs w for proper perspective correction\\n}\\n\\n\";\n\nvar fragmentShaderSource = \"//\\n// This fragment shader defines a reference implementation for Physically Based Shading of\\n// a microfacet surface material defined by a glTF model.\\n//\\n// References:\\n// [1] Real Shading in Unreal Engine 4\\n//     http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\\n// [2] Physically Based Shading at Disney\\n//     http://blog.selfshadow.com/publications/s2012-shading-course/burley/s2012_pbs_disney_brdf_notes_v3.pdf\\n// [3] README.md - Environment Maps\\n//     https://github.com/KhronosGroup/glTF-WebGL-PBR/#environment-maps\\n// [4] \\\"An Inexpensive BRDF Model for Physically based Rendering\\\" by Christophe Schlick\\n//     https://www.cs.virginia.edu/~jdl/bib/appearance/analytic%20models/schlick94b.pdf\\n\\n///////////////////////////////\\n// Quality settings \\n///////////////////////////////\\n\\nprecision highp float;\\nprecision highp int;\\n\\n///////////////////////////////\\n// Extensions \\n///////////////////////////////\\n\\n#extension GL_EXT_shader_texture_lod: enable\\n#extension GL_OES_standard_derivatives : enable\\n\\n///////////////////////////////\\n// Structs \\n///////////////////////////////\\n\\nstruct Fragment \\n{\\n    vec3 normal; // fragment normal\\n    vec3 vectorToCamera; //normalized vector from surface point to camera\\n    vec3 reflection; //reflection vector\\n    float NdotV; // cos angle between normal and view direction\\n};\\n\\nstruct Pbr \\n{\\n    vec4 baseColor;\\n    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)\\n    float metalness;              // metallic value at the surface\\n    vec3 reflectance0;            // full reflectance color (normal incidence angle)\\n    vec3 reflectance90;           // reflectance color at grazing angle\\n    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])\\n    vec3 diffuseColor;            // color contribution from diffuse lighting\\n    vec3 specularColor;           // color contribution from specular lighting\\n};\\n\\nstruct Light\\n{\\n    float NdotL;                  // cos angle between normal and light direction\\n    float NdotH;                  // cos angle between normal and half vector\\n    float LdotH;                  // cos angle between light direction and half vector\\n    float VdotH;                  // cos angle between view direction and half vector\\n    vec3 color;                   // attenuated color\\n};\\n\\n///////////////////////////////\\n// Constants \\n///////////////////////////////\\n\\nconst float M_PI = 3.141592653589793;\\nconst float c_MinRoughness = 0.04;\\n\\n\\n///////////////////////////////\\n// Uniforms and Attributes \\n///////////////////////////////\\n\\n#ifdef USE_PUNCTUAL_LIGHTS\\n%PUNCTUAL_LIGHTS_VARS%\\n#endif\\n\\n#ifdef USE_IBL\\nuniform samplerCube u_DiffuseEnvSampler;\\nuniform samplerCube u_SpecularEnvSampler;\\nuniform sampler2D u_brdfLUT;\\n#endif\\n\\n#ifdef HAS_BASECOLORMAP\\nuniform sampler2D u_BaseColorSampler;\\nuniform float u_AlphaCutoff; \\n#endif\\n#ifdef HAS_NORMALMAP\\nuniform sampler2D u_NormalSampler;\\nuniform float u_NormalScale;\\n#endif\\n#ifdef HAS_EMISSIVEMAP\\nuniform sampler2D u_EmissiveSampler;\\nuniform vec3 u_EmissiveFactor;\\n#endif\\n#ifdef HAS_METALROUGHNESSMAP\\nuniform sampler2D u_MetallicRoughnessSampler;\\n#endif\\n#ifdef HAS_OCCLUSIONMAP\\nuniform sampler2D u_OcclusionSampler;\\nuniform float u_OcclusionStrength;\\n#endif\\n\\n#ifdef HAS_COLOR\\nvarying vec4 v_Color;\\n#endif\\n\\nuniform vec2 u_MetallicRoughnessValues;\\nuniform vec4 u_BaseColorFactor;\\n\\nuniform vec3 u_Camera;\\n\\n\\n///////////////////////////////\\n// Varyings \\n///////////////////////////////\\n\\nvarying vec3 v_Position;\\n\\nvarying vec2 v_UV;\\n\\n#ifdef HAS_NORMALS\\n#ifdef HAS_TANGENTS\\nvarying mat3 v_TBN;\\n#else\\nvarying vec3 v_Normal;\\n#endif\\n#endif\\n\\n///////////////////////////////\\n// Pure functions\\n///////////////////////////////\\n\\n// Convert color space\\nvec4 SRGBtoLINEAR(vec4 srgbIn)\\n{\\n    #ifdef MANUAL_SRGB\\n        #ifdef SRGB_FAST_APPROXIMATION\\n            vec3 linOut = pow(srgbIn.xyz,vec3(2.2));\\n        #else //SRGB_FAST_APPROXIMATION\\n            vec3 bLess = step(vec3(0.04045),srgbIn.xyz);\\n            vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );\\n        #endif //SRGB_FAST_APPROXIMATION\\n        \\n        return vec4(linOut,srgbIn.w);\\n    #else //MANUAL_SRGB\\n        return srgbIn;\\n    #endif //MANUAL_SRGB\\n}\\n\\n\\n// Basic Lambertian diffuse\\n// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog\\n// See also [1], Equation 1\\nvec3 diffuse(Pbr pbr, Fragment fragment, Light light)\\n{\\n    return pbr.diffuseColor / M_PI;\\n}\\n\\n// The following equation models the Fresnel reflectance term of the spec equation (aka F())\\n// Implementation of fresnel from [4], Equation 15\\nvec3 specularReflection(Pbr pbr, Fragment fragment, Light light)\\n{\\n    return pbr.reflectance0 + (pbr.reflectance90 - pbr.reflectance0) * pow(clamp(1.0 - light.VdotH, 0.0, 1.0), 5.0);\\n}\\n\\n// This calculates the specular geometric attenuation (aka G()),\\n// where rougher material will reflect less light back to the viewer.\\n// This implementation is based on [1] Equation 4, and we adopt their modifications to\\n// alphaRoughness as input as originally proposed in [2].\\nfloat geometricOcclusion(Pbr pbr, Fragment fragment, Light light)\\n{\\n    float NdotL = light.NdotL;\\n    float NdotV = fragment.NdotV;\\n    float r = pbr.alphaRoughness;\\n\\n    float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));\\n    float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));\\n    return attenuationL * attenuationV;\\n}\\n\\n// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())\\n// Implementation from \\\"Average Irregularity Representation of a Roughened Surface for Ray Reflection\\\" by T. S. Trowbridge, and K. P. Reitz\\n// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.\\nfloat microfacetDistribution(Pbr pbr, Fragment fragment, Light light)\\n{\\n    float roughnessSq = pbr.alphaRoughness * pbr.alphaRoughness;\\n    float f = (light.NdotH * roughnessSq - light.NdotH) * light.NdotH + 1.0;\\n    return roughnessSq / (M_PI * f * f);\\n}\\n\\n///////////////////////////////\\n// Data functions\\n///////////////////////////////\\n\\n\\n// Get the PBR info from uniforms and attributes\\nPbr getPbr() {\\n    // Metallic and Roughness material properties are packed together\\n    // In glTF, these factors can be specified by fixed scalar values\\n    // or from a metallic-roughness map\\n    float perceptualRoughness = u_MetallicRoughnessValues.y;\\n    float metallic = u_MetallicRoughnessValues.x;\\n    #ifdef HAS_METALROUGHNESSMAP\\n    // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.\\n    // This layout intentionally reserves the 'r' channel for (optional) occlusion map data\\n    vec4 mrSample = texture2D(u_MetallicRoughnessSampler, v_UV);\\n    perceptualRoughness = mrSample.g * perceptualRoughness;\\n    metallic = mrSample.b * metallic;\\n    #endif\\n    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);\\n    metallic = clamp(metallic, 0.0, 1.0);\\n    // Roughness is authored as perceptual roughness; as is convention,\\n    // convert to material roughness by squaring the perceptual roughness [2].\\n    float alphaRoughness = perceptualRoughness * perceptualRoughness;\\n\\n    // The albedo may be defined from a base texture or a flat color\\n    #ifdef HAS_BASECOLORMAP\\n    vec4 textureColor = texture2D(u_BaseColorSampler, v_UV);\\n    vec4 baseColor = SRGBtoLINEAR(textureColor) * u_BaseColorFactor;\\n    #else\\n    vec4 baseColor = u_BaseColorFactor;\\n    #endif\\n\\n    #ifdef HAS_ALPHA_CUTOFF\\n    if(baseColor.a < u_AlphaCutoff) {\\n        discard;\\n    }\\n\\n    #endif\\n\\n    #ifndef HAS_ALPHA_BLEND\\n    baseColor.a = 1.0;\\n    #endif\\n\\n    vec3 f0 = vec3(0.04);\\n    #ifdef HAS_COLOR\\n    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0) * SRGBtoLINEAR(v_Color).rgb;\\n    diffuseColor *= 1.0 - metallic;\\n    #else\\n    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);\\n    diffuseColor *= 1.0 - metallic;\\n    #endif\\n    vec3 specularColor = mix(f0, baseColor.rgb, metallic);\\n\\n    // Compute reflectance.\\n    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\\n\\n    // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.\\n    // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.\\n    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);\\n    vec3 specularEnvironmentR0 = specularColor.rgb;\\n    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;\\n\\n    return Pbr(\\n            baseColor,\\n            perceptualRoughness,\\n            metallic,\\n            specularEnvironmentR0,\\n            specularEnvironmentR90,\\n            alphaRoughness,\\n            diffuseColor,\\n            specularColor\\n    );\\n}\\n\\n// Find the normal for this fragment, pulling either from a predefined normal map\\n// or from the interpolated mesh normal and tangent attributes.\\n// used only by getFragment()\\nvec3 getNormal()\\n{\\n    // Retrieve the tangent space matrix\\n    #ifndef HAS_TANGENTS\\n    vec3 pos_dx = dFdx(v_Position);\\n    vec3 pos_dy = dFdy(v_Position);\\n    vec3 tex_dx = dFdx(vec3(v_UV, 0.0));\\n    vec3 tex_dy = dFdy(vec3(v_UV, 0.0));\\n    vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\\n\\n    #ifdef HAS_NORMALS\\n    vec3 ng = normalize(v_Normal);\\n    #else\\n    vec3 ng = cross(pos_dx, pos_dy);\\n    #endif\\n\\n    t = normalize(t - ng * dot(ng, t));\\n    vec3 b = normalize(cross(ng, t));\\n    mat3 tbn = mat3(t, b, ng);\\n    #else // HAS_TANGENTS\\n    mat3 tbn = v_TBN;\\n    #endif\\n\\n    #ifdef HAS_NORMALMAP\\n    vec3 n = texture2D(u_NormalSampler, v_UV).rgb;\\n    n = normalize(tbn * ((2.0 * n - 1.0) * vec3(u_NormalScale, u_NormalScale, 1.0)));\\n    #else\\n    // The tbn matrix is linearly interpolated, so we need to re-normalize\\n    vec3 n = normalize(tbn[2].xyz);\\n    #endif\\n\\n    return n;\\n}\\n\\n//Get Fragment info\\nFragment getFragment() {\\n    vec3 normal = getNormal();\\n    vec3 vectorToCamera = normalize(u_Camera - v_Position); \\n    vec3 reflection = -normalize(reflect(vectorToCamera, normal));\\n    float NdotV = abs(dot(normal, vectorToCamera)) + 0.001;\\n    return Fragment(normal, vectorToCamera, reflection, NdotV);\\n}\\n\\n#ifdef USE_PUNCTUAL_LIGHTS\\n//Directional light based on normal and dynamic light info\\nLight getDirectionalLight(Fragment fragment, vec3 lightDirection, vec3 color, float intensity) {\\n    vec3 N = fragment.normal;\\n    vec3 V = fragment.vectorToCamera;\\n    float NdotV = fragment.NdotV;\\n\\n    vec3 L = -normalize(lightDirection);   // Light Direction\\n    vec3 H = normalize(L+V);                          // Half vector between both l and v\\n\\n    float NdotL = clamp(dot(N, L), 0.001, 1.0);\\n    float NdotH = clamp(dot(N, H), 0.0, 1.0);\\n    float LdotH = clamp(dot(L, H), 0.0, 1.0);\\n    float VdotH = clamp(dot(V, H), 0.0, 1.0);\\n\\n    return Light(\\n        NdotL,\\n        NdotH,\\n        LdotH,\\n        VdotH,\\n        color * intensity\\n    );\\n}\\n\\n//Point light\\nLight getPointLight(Fragment fragment, vec3 lightPosition, vec3 color, float intensity) {\\n\\n    vec3 N = fragment.normal;\\n    vec3 V = fragment.vectorToCamera;\\n    float NdotV = fragment.NdotV;\\n\\n    vec3 L = normalize(lightPosition - v_Position);   // Light Direction \\n    vec3 H = normalize(L+V);                          // Half vector between both l and v\\n\\n    float NdotL = clamp(dot(N, L), 0.001, 1.0);\\n    float NdotH = clamp(dot(N, H), 0.0, 1.0);\\n    float LdotH = clamp(dot(L, H), 0.0, 1.0);\\n    float VdotH = clamp(dot(V, H), 0.0, 1.0);\\n\\n    float distance    = length(lightPosition - v_Position);\\n    float attenuation = 1.0 / (distance * distance);\\n\\n    Light light = Light(\\n        NdotL,\\n        NdotH,\\n        LdotH,\\n        VdotH,\\n        color * intensity * attenuation\\n    );\\n\\n    return light;\\n}\\n\\n\\n//Spot light\\nLight getSpotLight(Fragment fragment, vec3 lightPosition, vec3 lightDirection, float lightAngleScale, float lightAngleOffset, vec3 color, float intensity) {\\n\\n    vec3 N = fragment.normal;\\n    vec3 V = fragment.vectorToCamera;\\n    float NdotV = fragment.NdotV;\\n\\n    vec3 L = normalize(lightPosition - v_Position);   // Light Direction \\n    vec3 H = normalize(L+V);                          // Half vector between both l and v\\n\\n    float NdotL = clamp(dot(N, L), 0.001, 1.0);\\n    float NdotH = clamp(dot(N, H), 0.0, 1.0);\\n    float LdotH = clamp(dot(L, H), 0.0, 1.0);\\n    float VdotH = clamp(dot(V, H), 0.0, 1.0);\\n\\n    float distance    = length(lightPosition - v_Position);\\n    float attenuation = 1.0 / (distance * distance);\\n\\n    float cd = dot(lightDirection, V);\\n    float coneAttentuation = clamp(cd * lightAngleScale + lightAngleOffset, 0.0, 1.0);\\n    coneAttentuation *= coneAttentuation;   \\n    attenuation = attenuation * coneAttentuation;\\n\\n    Light light = Light(\\n        NdotL,\\n        NdotH,\\n        LdotH,\\n        VdotH,\\n        color * intensity * attenuation\\n    );\\n\\n    return light;\\n}\\n#endif\\n\\n// Calculation of the lighting contribution from an optional Image Based Light source.\\n// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].\\n// See our README.md on Environment Maps [3] for additional discussion.\\n#ifdef USE_IBL\\nvec3 getIBLContribution(Pbr pbr, Fragment fragment)\\n{\\n    float mipCount = 9.0; // resolution of 512x512\\n    float lod = (pbr.perceptualRoughness * mipCount);\\n    // retrieve a scale and bias to F0. See [1], Figure 3\\n    \\n    vec3 brdf = SRGBtoLINEAR(texture2D(u_brdfLUT, vec2(fragment.NdotV, 1.0 - pbr.perceptualRoughness))).rgb;\\n    vec3 diffuseLight = SRGBtoLINEAR(textureCube(u_DiffuseEnvSampler, fragment.normal)).rgb;\\n    \\n\\n    #ifdef USE_TEX_LOD\\n    vec3 specularLight = SRGBtoLINEAR(textureCubeLodEXT(u_SpecularEnvSampler, fragment.reflection, lod)).rgb;\\n    #else\\n    vec3 specularLight = SRGBtoLINEAR(textureCube(u_SpecularEnvSampler, fragment.reflection)).rgb;\\n    #endif\\n\\n    vec3 diffuse = diffuseLight * pbr.diffuseColor;\\n    vec3 specular = specularLight * (pbr.specularColor * brdf.x + brdf.y);\\n\\n    return diffuse + specular;\\n}\\n#endif\\n\\n\\nvec3 getColor(Pbr pbr, Fragment fragment, Light light) {\\n\\n    // Calculate the shading terms for the microfacet specular shading model\\n    vec3 F = specularReflection(pbr, fragment, light);\\n    float G = geometricOcclusion(pbr, fragment, light);\\n    float D = microfacetDistribution(pbr, fragment, light);\\n\\n    // Calculation of analytical lighting contribution\\n    vec3 diffuseContrib = (1.0 - F) * diffuse(pbr, fragment, light);\\n    vec3 specContrib = F * G * D / (4.0 * light.NdotL * fragment.NdotV);\\n    // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)\\n    vec3 color = light.NdotL * light.color * (diffuseContrib + specContrib);\\n    \\n\\n    return color;\\n}\\n\\nvoid main()\\n{\\n    Pbr pbr = getPbr();\\n    Fragment fragment = getFragment();\\n\\n    vec3 color = vec3(0.0, 0.0, 0.0);\\n    Light light;\\n    #ifdef USE_PUNCTUAL_LIGHTS\\n        //Actual implementation will dynamically write the code here\\n        %PUNCTUAL_LIGHTS_FUNCS%\\n\\n    /*\\n         light = getDirectionalLight(\\n                    fragment,\\n                    vec3(0,0,-1),\\n                    vec3(1.0, 1.0, 1.0),\\n                    100.0\\n        );\\n\\n        color += getColor(pbr, fragment, light);\\n      */  \\n        //Manual example\\n        /*\\n        light = getDirectionalLight(\\n                    fragment,\\n                    vec3(-1,-1,-1),\\n                    vec3(1.0, 0, 1.0),\\n                    3.0\\n        );\\n\\n        color += getColor(pbr, fragment, light);\\n        light = getPointLight(\\n                    fragment,\\n                    vec3(-3,3,3),\\n                    vec3(1.0, 1.0, 1.0),\\n                    100.0\\n        );\\n\\n        color += getColor(pbr, fragment, light);\\n        */\\n    #endif\\n\\n    #ifdef USE_IBL\\n        // Calculate lighting contribution from image based lighting source (IBL)\\n        color += getIBLContribution(pbr, fragment);\\n    #endif\\n\\n    // Apply optional PBR terms for additional (optional) shading\\n    #ifdef HAS_OCCLUSIONMAP\\n    float ao = texture2D(u_OcclusionSampler, v_UV).r;\\n    color = mix(color, color * ao, u_OcclusionStrength);\\n    #endif\\n\\n    #ifdef HAS_EMISSIVEMAP\\n    vec3 emissive = SRGBtoLINEAR(texture2D(u_EmissiveSampler, v_UV)).rgb * u_EmissiveFactor;\\n    color += emissive;\\n    #endif\\n\\n\\n    \\n    gl_FragColor = vec4(pow(color,vec3(1.0/2.2)), pbr.baseColor.a);\\n}\\n\";\n\n//import unlitFragmentShader from \"./Gltf-Unlit-Shader-Fragment.glsl\";\r\nconst updateRuntimeShaderConfig_Primitive = (scene) => (primitive) => {\r\n    const shaderConfig = GltfExtensions\r\n        .map(ext => ext.runtimeShaderConfig_Primitive)\r\n        .reduce((acc, val) => (acc = val(scene)(primitive)(acc), acc), primitive.shaderConfig);\r\n    return Object.assign({}, primitive, { shaderConfig });\r\n};\r\nconst updateRuntimeShaderConfig_Scene = (scene) => {\r\n    const shaderConfig = GltfExtensions\r\n        .map(ext => ext.runtimeShaderConfig_Scene)\r\n        .reduce((acc, val) => (acc = val(scene)(acc), acc), scene.shaderConfig);\r\n    return Object.assign({}, scene, { shaderConfig });\r\n};\r\nconst getOrGenerateShader = ({ renderer, data }) => (scene) => {\r\n    const getHashForScene = getShaderHash(scene.shaderConfig);\r\n    return (primitive) => {\r\n        const shaderHash = getHashForScene(primitive.shaderConfig);\r\n        if (!data.shaders.has(shaderHash)) {\r\n            const source = getShaderSource$2(data)(scene.shaderConfig)(primitive.shaderConfig);\r\n            const shader = createShader({\r\n                shaderId: Symbol(),\r\n                renderer,\r\n                source,\r\n            });\r\n            data.shaders.set(shaderHash, shader);\r\n            console.log(`new shader compiled`, shaderHash);\r\n        }\r\n        const shader = data.shaders.get(shaderHash);\r\n        return shader;\r\n    };\r\n};\r\nconst getShaderSource$2 = (data) => (sceneShaderConfig) => (primitiveShaderConfig) => GltfExtensions\r\n    .map(ext => ext.getShaderSource)\r\n    .reduce((acc, val) => (acc = val(data)(sceneShaderConfig)(primitiveShaderConfig)(acc), acc), getCoreShaderSource(data)(sceneShaderConfig)(primitiveShaderConfig));\r\nconst getCoreShaderSource = (data) => (sceneShaderConfig) => (primitiveShaderConfig) => {\r\n    const gltf = data.original;\r\n    const defines = [];\r\n    if (primitiveShaderConfig.hasNormalAttributes) {\r\n        defines.push(\"HAS_NORMALS\");\r\n    }\r\n    if (primitiveShaderConfig.hasTangentAttributes) {\r\n        defines.push(\"HAS_TANGENTS\");\r\n    }\r\n    if (primitiveShaderConfig.hasUvAttributes) {\r\n        defines.push(\"HAS_UV\");\r\n    }\r\n    if (primitiveShaderConfig.hasColorAttributes) {\r\n        defines.push(\"HAS_COLOR\");\r\n    }\r\n    if (primitiveShaderConfig.hasBaseColorMap) {\r\n        defines.push(\"HAS_BASECOLORMAP\");\r\n    }\r\n    if (primitiveShaderConfig.hasNormalMap) {\r\n        defines.push(\"HAS_NORMALMAP\");\r\n    }\r\n    if (primitiveShaderConfig.hasEmissiveMap) {\r\n        defines.push(\"HAS_EMISSIVEMAP\");\r\n    }\r\n    if (primitiveShaderConfig.hasMetalRoughnessMap) {\r\n        defines.push(\"HAS_METALROUGHNESSMAP\");\r\n    }\r\n    if (primitiveShaderConfig.hasOcclusionMap) {\r\n        defines.push(\"HAS_OCCLUSIONMAP\");\r\n    }\r\n    if (primitiveShaderConfig.manualSRGB) {\r\n        defines.push(\"MANUAL_SRGB\");\r\n    }\r\n    if (primitiveShaderConfig.fastSRGB) {\r\n        defines.push(\"SRGB_FAST_APPROXIMATION\");\r\n    }\r\n    if (primitiveShaderConfig.nSkinJoints) {\r\n        defines.push(\"HAS_SKIN\");\r\n    }\r\n    switch (primitiveShaderConfig.alphaMode) {\r\n        case GltfMaterialAlphaMode.MASK:\r\n            defines.push(\"HAS_ALPHA_CUTOFF\");\r\n            break;\r\n        case GltfMaterialAlphaMode.BLEND:\r\n            defines.push(\"HAS_ALPHA_BLEND\");\r\n            break;\r\n    }\r\n    const defineString = defines.map(value => `#define ${value} 1\\n`).join('');\r\n    const vertex = getCoreVertexShader(data)(sceneShaderConfig)(primitiveShaderConfig)(defineString + vertexShaderSource);\r\n    const fragment = defineString + fragmentShaderSource;\r\n    return { vertex, fragment };\r\n};\r\nconst getCoreVertexShader = (data) => (sceneShaderConfig) => (primitiveShaderConfig) => (vs) => {\r\n    let MORPH_VARS = '';\r\n    let MORPH_FUNCS = '';\r\n    let morphIndex = 0;\r\n    let weightIndex = 0;\r\n    const createMorphs = (nMorphs) => (aTarget) => {\r\n        for (let i = 0; i < nMorphs; i++) {\r\n            const aMorph = `a_Morph_${morphIndex}`;\r\n            MORPH_VARS += `attribute vec4 ${aMorph};\\n`;\r\n            MORPH_FUNCS += `${aTarget} += (u_MorphWeights[${weightIndex}] * ${aMorph});\\n`;\r\n            morphIndex++;\r\n        }\r\n        weightIndex++;\r\n    };\r\n    if (primitiveShaderConfig.nPositionMorphs) {\r\n        createMorphs(primitiveShaderConfig.nPositionMorphs)(\"m_Position\");\r\n    }\r\n    if (primitiveShaderConfig.nNormalMorphs) {\r\n        createMorphs(primitiveShaderConfig.nPositionMorphs)(\"m_Normal\");\r\n    }\r\n    if (primitiveShaderConfig.nTangentMorphs) {\r\n        createMorphs(primitiveShaderConfig.nPositionMorphs)(\"m_Tangent\");\r\n    }\r\n    if (weightIndex) {\r\n        MORPH_VARS += `uniform float u_MorphWeights[${weightIndex}];\\n`;\r\n    }\r\n    let SKIN_JOINT_COUNT = '';\r\n    if (primitiveShaderConfig.nSkinJoints) {\r\n        SKIN_JOINT_COUNT = primitiveShaderConfig.nSkinJoints.toString();\r\n    }\r\n    return vs\r\n        .replace(\"%MORPH_VARS%\", MORPH_VARS)\r\n        .replace(\"%MORPH_FUNCS%\", MORPH_FUNCS)\r\n        .replace(\"%SKIN_JOINT_COUNT%\", SKIN_JOINT_COUNT);\r\n};\n\nconst _scratchVec3 = new Float64Array(3);\r\nconst _cacheLights = {\r\n    directional: [undefined],\r\n    point: [undefined],\r\n    spot: [undefined]\r\n};\r\nfor (let i = 1; i < GltfLights_MAX; i++) {\r\n    _cacheLights.directional.push({\r\n        direction: new Float32Array(i * 3),\r\n        color: new Float32Array(i * 3),\r\n        intensity: new Float32Array(i),\r\n    });\r\n    _cacheLights.point.push({\r\n        position: new Float32Array(i * 3),\r\n        color: new Float32Array(i * 3),\r\n        intensity: new Float32Array(i),\r\n    });\r\n    _cacheLights.spot.push({\r\n        position: new Float32Array(i * 3),\r\n        direction: new Float32Array(i * 3),\r\n        color: new Float32Array(i * 3),\r\n        intensity: new Float32Array(i),\r\n        angleScale: new Float32Array(i),\r\n        angleOffset: new Float32Array(i),\r\n    });\r\n}\r\nconst getLightList = (scene) => {\r\n    const cache = {\r\n        directional: _cacheLights.directional[scene.shaderConfig.lights.nDirectionalLights],\r\n        point: _cacheLights.point[scene.shaderConfig.lights.nPointLights],\r\n        spot: _cacheLights.spot[scene.shaderConfig.lights.nSpotLights]\r\n    };\r\n    if (cache.directional) {\r\n        cache.directional.offset = 0;\r\n    }\r\n    if (cache.point) {\r\n        cache.point.offset = 0;\r\n    }\r\n    if (cache.spot) {\r\n        cache.spot.offset = 0;\r\n    }\r\n    return cache;\r\n};\r\nconst renderScene = (renderer) => (data) => (scene) => {\r\n    const shaderGroupByAlpha = new Map();\r\n    const renderThunksByShader = new Map();\r\n    const meshList = new Array();\r\n    const lightList = scene.shaderConfig.lights\r\n        ? getLightList(scene)\r\n        : undefined;\r\n    forEachNodes((node) => {\r\n        if (node.kind === GltfNodeKind.MESH\r\n            && node.transform\r\n            && node.transform.modelViewProjectionMatrix ? true : false) {\r\n            meshList.push(node);\r\n        }\r\n        else if (node.kind === NodeKind.LIGHT) {\r\n            const light = node.light;\r\n            const target = (() => {\r\n                switch (light.kind) {\r\n                    case LightKind.Directional:\r\n                        return lightList.directional;\r\n                    case LightKind.Point:\r\n                        return lightList.point;\r\n                    case LightKind.Spot:\r\n                        return lightList.spot;\r\n                }\r\n            })();\r\n            const color = light.color;\r\n            const intensity = light.intensity;\r\n            const position = light.kind === LightKind.Point || light.kind === LightKind.Spot\r\n                ? mat4.getTranslation(_scratchVec3, node.transform.modelMatrix)\r\n                : undefined;\r\n            //Is updated via node/transform updates\r\n            const direction = light.direction;\r\n            for (let i = 0; i < 3; i++) {\r\n                const offset = (target.offset * 3) + i;\r\n                if (position !== undefined) {\r\n                    target.position[offset] = position[i];\r\n                }\r\n                if (direction !== undefined) {\r\n                    target.direction[offset] = direction[i];\r\n                }\r\n                target.color[offset] = color[i];\r\n            }\r\n            if (light.kind === LightKind.Spot) {\r\n                target.angleScale[target.offset] = light.angleScale;\r\n                target.angleOffset[target.offset] = light.angleOffset;\r\n            }\r\n            target.intensity[target.offset] = intensity;\r\n            target.offset++;\r\n        }\r\n    })(scene.nodes);\r\n    /*console.log(\r\n        0, (scene.nodes[0] as GltfMeshNode).primitives[0].shaderConfig.hasColorAttributes,\r\n        1, (scene.nodes[1] as GltfMeshNode).primitives[0].shaderConfig.hasColorAttributes\r\n    );\r\n    */\r\n    meshList.forEach(node => {\r\n        let skinMatrices;\r\n        if (node.skin !== undefined && node.skin.skinMatrices) {\r\n            skinMatrices = node.skin.skinMatrices;\r\n        }\r\n        node.primitives.forEach(primitive => {\r\n            const shader = getOrGenerateShader({ renderer, data })(scene)(primitive);\r\n            if (!renderThunksByShader.has(shader.shaderId)) {\r\n                renderThunksByShader.set(shader.shaderId, []);\r\n            }\r\n            const shaderGroup = renderThunksByShader.get(shader.shaderId);\r\n            shaderGroup.push(createRendererThunk({\r\n                skinMatrices,\r\n                renderer,\r\n                data,\r\n                node,\r\n                primitive,\r\n                lightList,\r\n                scene,\r\n                shader\r\n            }));\r\n            if (!shaderGroupByAlpha.has(primitive.shaderConfig.alphaMode)) {\r\n                shaderGroupByAlpha.set(primitive.shaderConfig.alphaMode, new Set());\r\n            }\r\n            shaderGroupByAlpha.get(primitive.shaderConfig.alphaMode).add(shaderGroup);\r\n        });\r\n    });\r\n    //These are for _all_ gltf renders, but there might be another gl renderer between them so the flags need to be set\r\n    renderer.glToggle(WebGlConstants.BLEND)(false);\r\n    renderer.glToggle(WebGlConstants.DEPTH_TEST)(true);\r\n    //these are just random guesses looking at some common practices out in the wild\r\n    renderer.glDepthFunc(renderer.gl.LEQUAL);\r\n    renderer.glBlendFunc(renderer.gl.SRC_ALPHA)(renderer.gl.ONE_MINUS_SRC_ALPHA);\r\n    const render = _render(renderer)(shaderGroupByAlpha);\r\n    render(GltfMaterialAlphaMode.OPAQUE);\r\n    render(GltfMaterialAlphaMode.MASK);\r\n    render(GltfMaterialAlphaMode.BLEND);\r\n};\r\n//Render calls are sorted by alpha and then shader.\r\n//The thunks themselves will assign vaos\r\n//They are released by shader groupo\r\nconst _render = (renderer) => (shaderGroups) => (alphaMode) => {\r\n    if (shaderGroups.has(alphaMode)) {\r\n        if (alphaMode === GltfMaterialAlphaMode.BLEND) {\r\n            renderer.glToggle(WebGlConstants.BLEND)(true);\r\n        }\r\n        shaderGroups.get(alphaMode)\r\n            .forEach(xs => {\r\n            xs.forEach(fn => fn());\r\n        });\r\n    }\r\n};\n\nconst gltf_updateShaderConfigs = (scene) => {\r\n    scene = updateRuntimeShaderConfig_Scene(scene);\r\n    scene = Object.assign({}, scene, {\r\n        nodes: mapNodes(node => node.kind === GltfNodeKind.MESH\r\n            ? Object.assign({}, node, {\r\n                primitives: node.primitives.map(primitive => updateRuntimeShaderConfig_Primitive(scene)(primitive))\r\n            })\r\n            : node)(scene.nodes)\r\n    });\r\n    return scene;\r\n};\n\nconst gltf_load = ({ renderer, path, config, mapper }) => {\r\n    const bridge = createGltfBridge(renderer);\r\n    return bridge\r\n        .loadFile(path)\r\n        .chain(({ gltf, glbBuffers }) => {\r\n        gltf = mapper ? mapper(gltf) : gltf;\r\n        return bridge.loadAssets({ gltf, glbBuffers, basePath: getBasePath(path) })\r\n            .map(assets => ({ gltf, config, assets }));\r\n    })\r\n        .map(bridge.start)\r\n        .map(() => bridge);\r\n};\r\nfunction createGltfBridge(renderer) {\r\n    const exports = {};\r\n    let _allNodes;\r\n    let _data;\r\n    const loadFile = (path) => fetchArrayBufferUrl(path).map(GLTF_PARSE_getOriginalFromArrayBuffer);\r\n    const loadAssets = ({ gltf, basePath, glbBuffers }) => GLTF_PARSE_LoadDataAssets({ basePath: basePath ? basePath : \"\", gltf, glbBuffers });\r\n    const start = ({ gltf, assets, config }) => {\r\n        const data = GLTF_PARSE_CreateData({\r\n            gltf,\r\n            renderer,\r\n            assets,\r\n            config: config === undefined ? getDefaultInitConfig() : config\r\n        });\r\n        const primitives = GLTF_PARSE_createPrimitives({ renderer, data });\r\n        _data = data;\r\n        _allNodes = GLTF_PARSE_getNodes({ gltf, primitives, data, assets });\r\n    };\r\n    const renderScene$$1 = (scene) => {\r\n        renderScene(renderer)(_data)(scene);\r\n    };\r\n    const getOriginalScene = (camera) => (sceneNumber) => {\r\n        //First time is mandatory - after that it's up to the caller\r\n        const scene = gltf_updateShaderConfigs(GLTF_PARSE_createScene({\r\n            renderer,\r\n            data: _data,\r\n            allNodes: _allNodes\r\n        })(camera)(sceneNumber));\r\n        return scene;\r\n    };\r\n    const getCameraNode = (index) => {\r\n        const node = findNode(node => node.kind === NodeKind.CAMERA && node.cameraIndex === index)(_allNodes);\r\n        if (!node) {\r\n            return undefined;\r\n        }\r\n        const camera = setCameraPositionFromTransform(node.transform)(setCameraViewFromTransform(node.transform)(setCameraProjectionFromSettings(Object.assign({}, node.camera.settings, { canvas: renderer.canvas }))(Object.assign({}, node.camera))));\r\n        return Object.assign({}, node, { camera });\r\n    };\r\n    const bridge = {\r\n        renderer,\r\n        getAllNodes: () => _allNodes,\r\n        getData: () => _data,\r\n        getOriginalScene,\r\n        getCameraNode,\r\n        loadFile,\r\n        loadAssets,\r\n        start,\r\n        renderScene: renderScene$$1,\r\n    };\r\n    Object.assign(exports, bridge);\r\n    return exports;\r\n}\n\nconst gltf_updateNodeTransforms = (opts) => (nodes) => {\r\n    const updatedNodes = updateNodeListTransforms(opts)(null)(nodes);\r\n    return mapNodes(gltf_setJointTransforms(updatedNodes))(updatedNodes);\r\n};\r\nconst gltf_findNodeByOriginalId = (id) => (nodeOrNodes) => findNode((node) => node.originalNodeId === id)(nodeOrNodes);\r\nconst gltf_setJointTransforms = (fullTree) => (node) => {\r\n    if (node.kind === GltfNodeKind.MESH && node.skin) {\r\n        const jointList = getJointList(fullTree)(node);\r\n        const getSkeletonRootTransform = (id) => {\r\n            const joint = jointList.find(j => j.originalNodeId === id);\r\n            if (joint) {\r\n                return joint.transform;\r\n            }\r\n            return gltf_findNodeByOriginalId(id)(fullTree).transform;\r\n        };\r\n        let pos = 0;\r\n        //see https://github.com/KhronosGroup/glTF-Tutorials/issues/17\r\n        const inverseRootMatrix = mat4.invert(mat4.create(), node.skin.skeletonRootId === undefined\r\n            ? node.transform.modelMatrix\r\n            : getSkeletonRootTransform(node.skin.skeletonRootId).modelMatrix);\r\n        const skinMatrices = jointList.reduce((acc, joint) => {\r\n            const jMat = mat4.create();\r\n            mat4.multiply(jMat, joint.transform.modelMatrix, joint.inverseBindMatrix);\r\n            if (inverseRootMatrix) {\r\n                mat4.multiply(jMat, inverseRootMatrix, jMat);\r\n            }\r\n            //Needs to flatten for uploading to webgl\r\n            for (let i = 0; i < jMat.length; i++) {\r\n                acc[pos++] = jMat[i];\r\n            }\r\n            return acc;\r\n        }, new Float32Array(node.skin.joints.length * 16));\r\n        return Object.assign({}, node, {\r\n            skin: Object.assign({}, node.skin, {\r\n                skinMatrices\r\n            })\r\n        });\r\n    }\r\n    return node;\r\n};\r\nconst getJointList = (fullTree) => (meshNode) => {\r\n    const jointIds = new Map();\r\n    const jointList = meshNode.skin.joints.map((joint, index) => {\r\n        jointIds.set(joint.originalNodeId, index);\r\n        return {\r\n            originalNodeId: joint.originalNodeId,\r\n            inverseBindMatrix: joint.inverseBindMatrix\r\n        };\r\n    });\r\n    someNodes((node) => {\r\n        if (jointIds.has(node.originalNodeId)) {\r\n            const index = jointIds.get(node.originalNodeId);\r\n            jointList[index].transform = node.transform;\r\n            jointIds.delete(node.originalNodeId);\r\n            if (!jointIds.size) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    })(fullTree);\r\n    return jointList;\r\n};\n\n//This can be used from a worker thread\r\n//The inner functions could also be called separately for more control\r\n//TODO - Would be nice to create an optimised version that doesn't traverse the whole tree 3 times\r\nconst gltf_updateScene = (animate) => (frameTs) => (scene) => gltf_updateShaderConfigs(Object.assign({}, scene, {\r\n    nodes: gltf_updateNodeTransforms({\r\n        updateLocal: true,\r\n        updateModel: true,\r\n        updateView: true,\r\n        updateLightDirection: true,\r\n        camera: scene.camera\r\n    })(animate(frameTs)(scene.nodes))\r\n}));\n\nconst createAttributes = ({ gl, buffers }) => {\r\n    let currentBuffer;\r\n    let currentTarget;\r\n    const globalLocations = new Set();\r\n    const _perShaderCache = new Map();\r\n    const _globalCache = new Map();\r\n    const getLocationInShader = (program) => (aName) => {\r\n        if (!_perShaderCache.has(program)) {\r\n            _perShaderCache.set(program, new Map());\r\n        }\r\n        const cache = _perShaderCache.get(program);\r\n        if (!cache.has(aName)) {\r\n            cache.set(aName, gl.getAttribLocation(program, aName));\r\n        }\r\n        return cache.get(aName);\r\n    };\r\n    const getLocationInRenderer = (aName) => {\r\n        if (!_globalCache.has(aName)) {\r\n            //For-of wasn't working across typescript and things...\r\n            //This is a little ugly but it's totally fine since it's only on init\r\n            //And by far most use-cases will be a cache hit\r\n            let idx = 0;\r\n            globalLocations.forEach(val => {\r\n                if (!_globalCache.has(val)) {\r\n                    _globalCache.set(val, idx);\r\n                }\r\n                idx++;\r\n            });\r\n        }\r\n        return _globalCache.get(aName);\r\n    };\r\n    const activateElements = (bufferId) => {\r\n        const info = buffers.get(bufferId);\r\n        if (currentBuffer !== bufferId || currentTarget !== info.target) {\r\n            gl.bindBuffer(info.target, info.buffer);\r\n            currentBuffer = bufferId;\r\n            currentTarget = info.target;\r\n        }\r\n    };\r\n    const activateData = (location) => (bufferId) => (opts) => {\r\n        activateElements(bufferId); //isn't really elements here, but nicer than having a superfluous alias\r\n        gl.vertexAttribPointer(location, opts.size, opts.type, opts.normalized === undefined ? false : opts.normalized, opts.stride === undefined ? 0 : opts.stride, opts.offset === undefined ? 0 : opts.offset);\r\n        gl.enableVertexAttribArray(location);\r\n    };\r\n    return { globalLocations, getLocationInShader, getLocationInRenderer, activateElements, activateData };\r\n};\n\nconst createWebGlBuffers = (gl) => {\r\n    const infoMap = new Map();\r\n    const bind = (sym) => {\r\n        const info = infoMap.get(sym);\r\n        gl.bindBuffer(info.target, info.buffer);\r\n    };\r\n    const assign = (sym) => (bData) => {\r\n        const info = infoMap.has(sym)\r\n            ? infoMap.get(sym)\r\n            : { buffer: gl.createBuffer() };\r\n        info.data = bData.data;\r\n        info.target = bData.target;\r\n        info.usagePattern = bData.usagePattern;\r\n        infoMap.set(sym, info);\r\n        bind(sym);\r\n        //typecasting to any since coercion into TypedArray for webgl2 is responsibility of caller\r\n        gl.bufferData(info.target, info.data, info.usagePattern);\r\n    };\r\n    const get = (sym) => infoMap.get(sym);\r\n    return { assign, get, bind };\r\n};\n\n//This hasn't been tested in a while and isn't managed by the renderer anymore\r\n//See the old usage here: https://github.com/dakom/state-scenegraph/blob/master/src/lib/renderer/Renderer-WebGl.ts\r\n//Though it can still be used generally, probably, and it might be helpful to keep the code here :)\r\nconst makeFramebufferPicker = (gl) => ({ width, height }) => {\r\n    //setup a texture to store colors\r\n    const texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n    //setup a renderbuffer to store depth info\r\n    const renderBuffer = gl.createRenderbuffer();\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\r\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\r\n    //setup a framebuffer for offscreen rendering\r\n    const frameBuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderBuffer);\r\n    //unbind everything\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    //exported utils\r\n    const bind = () => gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    const unbind = () => gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    const readPixel = ({ x, y }) => {\r\n        const readout = new Uint8Array(4);\r\n        bind();\r\n        gl.readPixels(x, y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, readout);\r\n        unbind();\r\n        return readout;\r\n    };\r\n    const clear = (bits) => {\r\n        bind();\r\n        gl.clear(bits);\r\n        unbind();\r\n    };\r\n    const dispose = () => {\r\n        unbind();\r\n        gl.deleteFramebuffer(frameBuffer);\r\n        gl.deleteRenderbuffer(renderBuffer);\r\n        gl.deleteTexture(texture);\r\n    };\r\n    return {\r\n        bind: bind,\r\n        unbind: unbind,\r\n        readPixel: readPixel,\r\n        dispose: dispose,\r\n        clear: clear\r\n    };\r\n};\n\nconst createVertexArrays = ({ getExtension, gl, version, buffers }) => {\r\n    const _cache = new Map();\r\n    let currentSym;\r\n    const _create = () => {\r\n        if (version === 1) {\r\n            return getExtension(\"OES_vertex_array_object\").createVertexArrayOES();\r\n        }\r\n        else {\r\n            return gl.createVertexArray();\r\n        }\r\n    };\r\n    const _bind = (target) => {\r\n        if (version === 1) {\r\n            return getExtension(\"OES_vertex_array_object\").bindVertexArrayOES(target);\r\n        }\r\n        else {\r\n            return gl.bindVertexArray(target);\r\n        }\r\n    };\r\n    const _activate = (force) => (sym) => {\r\n        if (!force && currentSym === sym) {\r\n            return;\r\n        }\r\n        currentSym = sym;\r\n        if (!_cache.has(sym)) {\r\n            _cache.set(sym, _create());\r\n        }\r\n        _bind(_cache.get(sym));\r\n    };\r\n    const assign = (sym) => (v) => {\r\n        _activate(true)(sym);\r\n        if (v.elementBufferId) {\r\n            buffers.bind(v.elementBufferId);\r\n        }\r\n        v.data.forEach(({ location, usagePattern, bufferId, size, type, normalized, stride, offset }) => {\r\n            const bufferInfo = buffers.get(bufferId);\r\n            //there's no cache checks in the case of VAO - the set as a whole is toggled on/off\r\n            buffers.bind(bufferId);\r\n            gl.vertexAttribPointer(location, size, type, normalized === undefined ? false : normalized, stride === undefined ? 0 : stride, offset === undefined ? 0 : offset);\r\n            gl.enableVertexAttribArray(location);\r\n        });\r\n        release();\r\n    };\r\n    const release = () => {\r\n        if (currentSym !== null) {\r\n            currentSym = null;\r\n            _bind(null);\r\n        }\r\n    };\r\n    return { activate: _activate(false), release, assign };\r\n};\r\n/*\r\nexport const createVertexArraysForRenderer = (renderer:WebGlRenderer) =>\r\n    createVertexArrays({renderer, getAttributeLocation: renderer.getGlobalAttributeLocation});\r\n\nexport const createVertexArraysForShader = ({renderer, shader}:{renderer:WebGlRenderer, shader:WebGlShader}) =>\r\n    createVertexArrays({renderer, getAttributeLocation: shader.attributes.getLocation})\r\n    */\n\nconst getVersionString = (gl) => gl.getParameter(WebGlConstants.VERSION);\r\nconst _isNumber = (chr) => {\r\n    switch (chr) {\r\n        case '0':\r\n        case '1':\r\n        case '2':\r\n        case '3':\r\n        case '4':\r\n        case '5':\r\n        case '6':\r\n        case '7':\r\n        case '8':\r\n        case '9':\r\n            return true;\r\n    }\r\n    return false;\r\n};\r\nconst getMajorVersion = (gl) => {\r\n    const str = getVersionString(gl);\r\n    let numberString = '';\r\n    for (let i = 0; i < str.length; i++) {\r\n        const chr = str.charAt(i);\r\n        if (_isNumber(chr)) {\r\n            numberString += chr;\r\n        }\r\n        else {\r\n            if (numberString.length) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return parseInt(numberString, 10);\r\n};\n\nconst createWebGlRenderer = (opts) => {\r\n    const { canvas, contextAttributes } = opts;\r\n    const gl = (() => {\r\n        if (opts.gl !== undefined) {\r\n            return opts.gl;\r\n        }\r\n        let _gl;\r\n        if (opts.version === undefined || opts.version === 2) {\r\n            try {\r\n                _gl = canvas.getContext(\"webgl2\", contextAttributes);\r\n            }\r\n            catch (e) {\r\n                _gl = undefined;\r\n            }\r\n            if (!_gl) {\r\n                console.warn(\"Failed to initialize webgl2, trying webgl1 as a fallback...\");\r\n            }\r\n            else {\r\n                return _gl;\r\n            }\r\n        }\r\n        try {\r\n            _gl = canvas.getContext(\"webgl\", contextAttributes) || canvas.getContext(\"experimental-webgl\", contextAttributes);\r\n        }\r\n        catch (e) {\r\n            _gl = undefined;\r\n        }\r\n        if (!_gl) {\r\n            console.warn(\"Unable to initialize webgl1\");\r\n        }\r\n        return _gl;\r\n    })();\r\n    const version = getMajorVersion(gl);\r\n    const lastScreenSize = {\r\n        width: NaN,\r\n        height: NaN\r\n    };\r\n    const resize = ({ width, height }) => {\r\n        if (lastScreenSize.width !== width || lastScreenSize.height !== height) {\r\n            canvas.setAttribute('width', width.toString());\r\n            canvas.setAttribute('height', height.toString());\r\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n            lastScreenSize.width = width;\r\n            lastScreenSize.height = height;\r\n        }\r\n    };\r\n    const flagMap = new Map();\r\n    const glToggle = (setting) => (flag) => {\r\n        if (!flagMap.has(setting) || flagMap.get(setting) !== flag) {\r\n            flagMap.set(setting, flag);\r\n            if (flag) {\r\n                gl.enable(setting);\r\n            }\r\n            else {\r\n                gl.disable(setting);\r\n            }\r\n        }\r\n    };\r\n    const buffers = createWebGlBuffers(gl);\r\n    const extensionMap = new Map();\r\n    const getExtension = (extName) => {\r\n        if (!extensionMap.has(extName)) {\r\n            const ext = gl.getExtension(extName);\r\n            if (!ext) {\r\n                console.warn(\"Could not create extension\", extName);\r\n            }\r\n            extensionMap.set(extName, ext);\r\n        }\r\n        return extensionMap.get(extName);\r\n    };\r\n    let depthFunc;\r\n    const glDepthFunc = (func) => {\r\n        if (func !== depthFunc) {\r\n            gl.depthFunc(func);\r\n            depthFunc = func;\r\n        }\r\n    };\r\n    let _sFactor, _dFactor;\r\n    const glBlendFunc = (sFactor) => (dFactor) => {\r\n        if (sFactor !== _sFactor || dFactor !== _dFactor) {\r\n            gl.blendFunc(sFactor, dFactor);\r\n            _sFactor = sFactor;\r\n            _dFactor = dFactor;\r\n        }\r\n    };\r\n    const textureSwitcher = createTextureSwitcher(gl);\r\n    const attributes = createAttributes({\r\n        gl,\r\n        buffers,\r\n    });\r\n    const vertexArrays = createVertexArrays({\r\n        getExtension,\r\n        gl,\r\n        version,\r\n        buffers\r\n    });\r\n    return Object.assign({ resize,\r\n        canvas,\r\n        gl,\r\n        buffers,\r\n        attributes,\r\n        vertexArrays }, textureSwitcher, { glToggle,\r\n        glDepthFunc,\r\n        glBlendFunc,\r\n        getExtension,\r\n        version, extras: {} });\r\n};\n\nexport { GltfAnimationTargetPath, GltfAnimationInterpolation, GltfMaterialAlphaMode, GltfNodeKind, GltfPrimitiveDrawKind, GltfIblExtensionName, GltfLightsExtensionName, GltfLights_MAX, GltfUnlitExtensionName, CameraKind, NodeKind, LightKind, WebGlConstants, createVec2, createVec4, createVec3, createMat4, createQuat, createFill, createIdentityTransform, createTransform, getTrsFromMatrix, getMatrixFromTrs, getModelMatrix, getNormalMatrix, getViewMatrices, updateTransform, rotateVectorByMatrix, getOrthographicProjection, getPerspectiveProjection, getCameraProjection, getCameraView, getCameraPosition, setCameraViewFromTransform, setCameraPositionFromTransform, setCameraProjectionFromSettings, filterNodeDeep, filterNodesDeep, forEachNodes, forEachNode, someNodes, someNode, countNodes, findNode, mapNode, mapNodeWithParent, mapNodesWithParent, mapNodes, updateNodeTransforms, updateNodeListTransforms, getLightDirectionFromMatrix, gltf_setAnimationTime, gltf_createAnimator, gltf_load, gltf_updateNodeTransforms, gltf_findNodeByOriginalId, gltf_setJointTransforms, gltf_updateScene, gltf_updateShaderConfigs, createAttributes, createWebGlBuffers, makeFramebufferPicker, createWebGlRenderer, activateShader, createShader, createTextureSwitcher, createTextureFromTarget, createCubeTextureFromTarget, textureSetterSimple, createSimpleTextureFromTarget, createUniforms, getVersionString, getMajorVersion, createVertexArrays };\n//# sourceMappingURL=lib.esm.js.map\n","import { create, env } from 'sanctuary';\nimport { Future } from 'fluture';\n\nvar checkTypes = false; //process.env.BUILD_TYPE !== 'build';\r\nvar S = create({ checkTypes: checkTypes, env: env });\n\nvar isNil = function (x) { return x == undefined || x == null; };\r\nvar getDomUrl = function (url) {\r\n    var ctor = window.URL || window.webkitURL || window;\r\n    return new ctor(url);\r\n};\r\nvar sameOrigin = function (url) {\r\n    return url.indexOf(\"http://\") !== -1 || url.indexOf(\"https://\") !== -1\r\n        ? (getDomUrl(url).origin === window.location.origin)\r\n        : true;\r\n};\n\nvar ImageLoader = function (_a) {\r\n    var url = _a.url, crossOrigin = _a.crossOrigin;\r\n    return Future(function (reject, resolve) {\r\n        var img = new Image();\r\n        img.addEventListener(\"load\", function () { return resolve(img); });\r\n        img.addEventListener(\"error\", reject);\r\n        S.map(function (x) { return img.crossOrigin = x; })(crossOrigin);\r\n        img.src = url;\r\n    });\r\n};\r\nvar fetchImage = function (url) { return ImageLoader({ url: url, crossOrigin: !sameOrigin(url) ? S.Just(\"anonymous\") : S.Nothing }); };\r\nvar loadImageFromUrl = fetchImage; //an alias\r\nvar loadImageFromArrayBuffer = function (_a) {\r\n    var data = _a.data, mimeType = _a.mimeType;\r\n    return Future(function (reject, resolve) {\r\n        var img = new Image();\r\n        img.addEventListener(\"load\", function () { return resolve(img); });\r\n        img.addEventListener(\"error\", reject);\r\n        var arrayBufferView = new Uint8Array(data);\r\n        var blob = new Blob([arrayBufferView], { type: mimeType });\r\n        var urlCreator = window.URL || window.webkitURL;\r\n        img.src = urlCreator.createObjectURL(blob);\r\n    });\r\n};\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nvar __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n};\n\nvar makeQuery = function (args) {\r\n    var query = '';\r\n    if (!isNil(args)) {\r\n        for (var key in args) {\r\n            if (args.hasOwnProperty(key) && !isNil(args[key])) {\r\n                if (query !== '') {\r\n                    query += '&';\r\n                }\r\n                query += key + \"=\" + encodeURIComponent(args[key]);\r\n            }\r\n        }\r\n    }\r\n    return query;\r\n};\r\nvar XhrLoader = function (endpoint) { return function (options) { return Future(function (reject, resolve) {\r\n    var opts = __assign({ method: \"GET\" }, options);\r\n    var xhr = opts.xhr !== undefined\r\n        ? opts.xhr\r\n        : new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState === xhr.DONE) {\r\n            if (!xhr.status) {\r\n                return; //was cancelled\r\n            }\r\n            if (xhr.status !== 200) {\r\n                reject(xhr);\r\n            }\r\n            else {\r\n                resolve(xhr);\r\n            }\r\n        }\r\n    };\r\n    var query = ((opts.requestType === \"form\" || opts.requestType === \"query\") && opts.data !== null)\r\n        ? makeQuery(opts.data)\r\n        : \"\";\r\n    var url = (opts.requestType === \"query\" && query !== \"\")\r\n        ? endpoint + \"?\" + query\r\n        : endpoint;\r\n    xhr.open(opts.method, url);\r\n    xhr.responseType = opts.responseType;\r\n    if (opts.withCredentials !== undefined) {\r\n        xhr.withCredentials = opts.withCredentials;\r\n    }\r\n    if (opts.headers !== undefined) {\r\n        opts.headers.forEach(function (_a) {\r\n            var key = _a[0], val = _a[1];\r\n            xhr.setRequestHeader(key, val);\r\n        });\r\n    }\r\n    if (opts.requestType === \"form\" && query !== \"\") {\r\n        xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n        //Not actually allowed by spec, so commenting out.. browser will calculate automatically\r\n        //xhr.setRequestHeader(\"Content-length\", requestData.length);\r\n        xhr.send(query);\r\n    }\r\n    else if (!isNil(opts.data)) {\r\n        xhr.send(opts.data);\r\n    }\r\n    else {\r\n        xhr.send();\r\n    }\r\n    return function () { return xhr.abort(); };\r\n}); }; };\r\n//generics for simplifying fetch style requests\r\n//The base function is \"fletch\" - but after that it's all \"fetch*\"\r\nvar fletch = function (endpoint) { return function (options) {\r\n    return XhrLoader(endpoint)(options).map(function (xhr) { return xhr.response; });\r\n}; };\r\nvar fetchUrl = function (endpoint) {\r\n    return fletch(endpoint)(null);\r\n};\r\n//internal helpers to keep things DRY\r\nvar _fetchOverride = function (responseType) { return function (endpoint) { return function (options) {\r\n    return fletch(endpoint)(__assign({}, options, { responseType: responseType }));\r\n}; }; };\r\nvar _fetchUrlOverride = function (responseType) { return function (endpoint) {\r\n    return fletch(endpoint)({ responseType: responseType });\r\n}; };\r\n//Fetches the specific data. Overrides the responseType, but otherwise all Xhr settings are allowed\r\nvar fetchArrayBuffer = _fetchOverride(\"arraybuffer\");\r\nvar fetchText = _fetchOverride(\"text\");\r\nvar fetchBlob = _fetchOverride(\"blob\");\r\nvar fetchXml = _fetchOverride(\"document\");\r\n//Json will use query as default here since it's the typical case here (and can still be overridden)\r\nvar fetchJson = function (endpoint) { return function (options) { return _fetchOverride(\"json\")(endpoint)(__assign({ requestType: \"query\" }, options)); }; };\r\n//wrapper over fletch for cases it's just the url\r\n//Same as fetch* but without any Xhr options (simple url get)\r\nvar fetchArrayBufferUrl = _fetchUrlOverride(\"arraybuffer\");\r\nvar fetchJsonUrl = _fetchUrlOverride(\"json\");\r\nvar fetchTextUrl = _fetchUrlOverride(\"text\");\r\nvar fetchBlobUrl = _fetchUrlOverride(\"blob\");\r\nvar fetchXmlUrl = _fetchUrlOverride(\"document\");\n\nvar BlobLoader = function (read) { return function (blob) { return Future(function (reject, resolve) {\r\n    var fileReader = new FileReader();\r\n    fileReader.onload = function () { return resolve(fileReader.result); };\r\n    fileReader.onerror = function (err) { return reject(err); };\r\n    read([fileReader, blob]);\r\n    return function () { return fileReader.abort(); };\r\n}); }; };\r\nvar loadBlobAsArrayBuffer = BlobLoader(function (_a) {\r\n    var fileReader = _a[0], blob = _a[1];\r\n    return fileReader.readAsArrayBuffer(blob);\r\n});\r\nvar loadBlobAsDataUrl = BlobLoader(function (_a) {\r\n    var fileReader = _a[0], blob = _a[1];\r\n    return fileReader.readAsDataURL(blob);\r\n});\r\nvar loadblobAsText = BlobLoader(function (_a) {\r\n    var fileReader = _a[0], blob = _a[1];\r\n    return fileReader.readAsText(blob);\r\n});\n\nvar loadAudioBuffer = function (ctx) { return function (data) { return Future(function (reject, resolve) {\r\n    ctx.decodeAudioData(data, resolve, reject);\r\n}); }; };\n\nvar VideoPlayer = function (_a) {\r\n    var url = _a.url, crossOrigin = _a.crossOrigin;\r\n    return Future(function (reject, resolve) {\r\n        var playing = false;\r\n        var timeupdate = false;\r\n        var video = document.createElement('video');\r\n        video.autoplay = true;\r\n        video.muted = true;\r\n        video.loop = true;\r\n        S.map(function (x) { return video.crossOrigin = x; })(crossOrigin);\r\n        var checkReady = function () {\r\n            if (playing && timeupdate) {\r\n                resolve(video);\r\n            }\r\n        };\r\n        video.addEventListener('playing', function () {\r\n            playing = true;\r\n            checkReady();\r\n        }, true);\r\n        video.addEventListener('timeupdate', function () {\r\n            timeupdate = true;\r\n            checkReady();\r\n        }, true);\r\n        video.src = url;\r\n        video.play();\r\n    });\r\n};\r\nvar playVideo = function (url) { return VideoPlayer({ url: url, crossOrigin: !sameOrigin(url) ? S.Just(\"anonymous\") : S.Nothing }); };\n\nexport { ImageLoader, fetchImage, loadImageFromUrl, loadImageFromArrayBuffer, XhrLoader, fletch, fetchUrl, fetchArrayBuffer, fetchText, fetchBlob, fetchXml, fetchJson, fetchArrayBufferUrl, fetchJsonUrl, fetchTextUrl, fetchBlobUrl, fetchXmlUrl, BlobLoader, loadBlobAsArrayBuffer, loadBlobAsDataUrl, loadblobAsText, loadAudioBuffer, VideoPlayer, playVideo };\n//# sourceMappingURL=lib.esm.js.map\n","var id = function id(x) {\n  return x;\n};\n\n//\n\nvar defineNameU = /*#__PURE__*/function () {\n  var _defineNameU = function _defineNameU(fn, value) {\n    return Object.defineProperty(fn, 'name', { value: value });\n  };\n  try {\n    return _defineNameU(_defineNameU, _defineNameU.name.slice(1));\n  } catch (_) {\n    return function (fn, _) {\n      return fn;\n    };\n  }\n}();\n\nvar copyName = process.env.NODE_ENV === 'production' ? function (f) {\n  return f;\n} : function (to, from) {\n  return defineNameU(to, from.name);\n};\n\nvar withName = process.env.NODE_ENV === 'production' ? id : function (ary) {\n  return function (fn) {\n    return copyName(ary(fn), fn);\n  };\n};\n\nvar ary1of2 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1) {\n    return arguments.length < 2 ? fn(x0) : fn(x0)(x1);\n  };\n});\n\nvar ary2of2 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1) {\n    return arguments.length < 2 ? copyName(function (x1) {\n      return fn(x0, x1);\n    }, fn) : fn(x0, x1);\n  };\n});\n\nvar ary1of3 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1, x2) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return curryN(2, fn(x0));\n      case 2:\n        return curryN(2, fn(x0))(x1);\n      default:\n        return curryN(2, fn(x0))(x1, x2);\n    }\n  };\n});\n\nvar ary2of3 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1, x2) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return ary1of2(copyName(function (x1) {\n          return fn(x0, x1);\n        }, fn));\n      case 2:\n        return fn(x0, x1);\n      default:\n        return fn(x0, x1)(x2);\n    }\n  };\n});\n\nvar ary3of3 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1, x2) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return ary2of2(copyName(function (x1, x2) {\n          return fn(x0, x1, x2);\n        }, fn));\n      case 2:\n        return copyName(function (x2) {\n          return fn(x0, x1, x2);\n        }, fn);\n      default:\n        return fn(x0, x1, x2);\n    }\n  };\n});\n\nvar ary1of4 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1, x2, x3) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return curryN(3, fn(x0));\n      case 2:\n        return curryN(3, fn(x0))(x1);\n      case 3:\n        return curryN(3, fn(x0))(x1, x2);\n      default:\n        return curryN(3, fn(x0))(x1, x2, x3);\n    }\n  };\n});\n\nvar ary2of4 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1, x2, x3) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return ary1of3(copyName(function (x1) {\n          return fn(x0, x1);\n        }, fn));\n      case 2:\n        return curryN(2, fn(x0, x1));\n      case 3:\n        return curryN(2, fn(x0, x1))(x2);\n      default:\n        return curryN(2, fn(x0, x1))(x2, x3);\n    }\n  };\n});\n\nvar ary3of4 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1, x2, x3) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return ary2of3(copyName(function (x1, x2) {\n          return fn(x0, x1, x2);\n        }, fn));\n      case 2:\n        return ary1of2(copyName(function (x2) {\n          return fn(x0, x1, x2);\n        }, fn));\n      case 3:\n        return fn(x0, x1, x2);\n      default:\n        return fn(x0, x1, x2)(x3);\n    }\n  };\n});\n\nvar ary4of4 = /*#__PURE__*/withName(function (fn) {\n  return function (x0, x1, x2, x3) {\n    switch (arguments.length) {\n      case 0:\n      case 1:\n        return ary3of3(copyName(function (x1, x2, x3) {\n          return fn(x0, x1, x2, x3);\n        }, fn));\n      case 2:\n        return ary2of2(copyName(function (x2, x3) {\n          return fn(x0, x1, x2, x3);\n        }, fn));\n      case 3:\n        return copyName(function (x3) {\n          return fn(x0, x1, x2, x3);\n        }, fn);\n      default:\n        return fn(x0, x1, x2, x3);\n    }\n  };\n});\n\nvar ary0of0 = function ary0of0(fn) {\n  return fn.length === 0 ? fn : copyName(function () {\n    return fn();\n  }, fn);\n};\nvar ary1of1 = function ary1of1(fn) {\n  return fn.length === 1 ? fn : copyName(function (x) {\n    return fn(x);\n  }, fn);\n};\n\nvar C = [[ary0of0], [ary1of1, ary1of1], [void 0, ary1of2, ary2of2], [void 0, ary1of3, ary2of3, ary3of3], [void 0, ary1of4, ary2of4, ary3of4, ary4of4]];\n\nvar curryN = function curryN(n, f) {\n  return C[n][Math.min(n, f.length)](f);\n};\nvar arityN = function arityN(n, f) {\n  return C[n][n](f);\n};\nvar curry = function curry(f) {\n  return arityN(f.length, f);\n};\n\n//\n\nvar assign = Object.assign;\n\nvar toObject = function toObject(x) {\n  return assign({}, x);\n};\n\n//\n\nvar always = function always(x) {\n  return function (_) {\n    return x;\n  };\n};\nvar applyU = function applyU(x2y, x) {\n  return x2y(x);\n};\nvar sndU = function sndU(_, y) {\n  return y;\n};\n\n//\n\nvar freeze = function freeze(x) {\n  return x && Object.freeze(x);\n};\n\nvar array0 = /*#__PURE__*/freeze([]);\nvar object0 = /*#__PURE__*/freeze({});\n\n//\n\nvar isDefined = function isDefined(x) {\n  return void 0 !== x;\n};\n\n//\n\nvar hasU = function hasU(p, x) {\n  return Object.prototype.hasOwnProperty.call(x, p);\n};\n\n//\n\nvar prototypeOf = function prototypeOf(x) {\n  return null == x ? x : Object.getPrototypeOf(x);\n};\n\nvar constructorOf = function constructorOf(x) {\n  return null == x ? x : (hasU('constructor', x) ? prototypeOf(x) : x).constructor;\n};\n\n//\n\nvar isFunction = function isFunction(x) {\n  return typeof x === 'function';\n};\nvar isString = function isString(x) {\n  return typeof x === 'string';\n};\nvar isNumber = function isNumber(x) {\n  return typeof x === 'number';\n};\n\nvar isArray = Array.isArray;\n\nvar object = /*#__PURE__*/prototypeOf({});\nvar isObject = function isObject(x) {\n  return null != x && typeof x === 'object' && (hasU('constructor', x) ? prototypeOf(x) === object : x.constructor === Object);\n};\n\n//\n\nfunction pipe2U(fn1, fn2) {\n  var n = fn1.length;\n  return n === 1 ? function (x) {\n    return fn2(fn1(x));\n  } : arityN(n, function () {\n    return fn2(fn1.apply(undefined, arguments));\n  });\n}\n\nvar compose2U = function compose2U(fn1, fn2) {\n  return pipe2U(fn2, fn1);\n};\n\n//\n\nfunction seq(x) {\n  for (var _len = arguments.length, fns = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    fns[_key - 1] = arguments[_key];\n  }\n\n  for (var i = 0, n = fns.length; i < n; ++i) {\n    x = fns[i](x);\n  }return x;\n}\n\nfunction seqPartial(x) {\n  for (var _len2 = arguments.length, fns = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    fns[_key2 - 1] = arguments[_key2];\n  }\n\n  for (var i = 0, n = fns.length; isDefined(x) && i < n; ++i) {\n    x = fns[i](x);\n  }return x;\n}\n\n//\n\nvar identicalU = function identicalU(a, b) {\n  return a === b && (a !== 0 || 1 / a === 1 / b) || a !== a && b !== b;\n};\n\n//\n\nfunction whereEqU(t, o) {\n  for (var k in t) {\n    var bk = o[k];\n    if (!isDefined(bk) && !hasU(k, o) || !acyclicEqualsU(t[k], bk)) return false;\n  }\n  return true;\n}\n\n//\n\nfunction hasKeysOfU(t, o) {\n  for (var k in t) {\n    if (!hasU(k, o)) return false;\n  }return true;\n}\n\n//\n\nvar acyclicEqualsObject = function acyclicEqualsObject(a, b) {\n  return whereEqU(a, b) && hasKeysOfU(b, a);\n};\n\nfunction acyclicEqualsArray(a, b) {\n  var n = a.length;\n  if (n !== b.length) return false;\n  for (var i = 0; i < n; ++i) {\n    if (!acyclicEqualsU(a[i], b[i])) return false;\n  }return true;\n}\n\nfunction acyclicEqualsU(a, b) {\n  if (identicalU(a, b)) return true;\n  if (!a || !b) return false;\n  var c = constructorOf(a);\n  if (c !== constructorOf(b)) return false;\n  switch (c) {\n    case Array:\n      return acyclicEqualsArray(a, b);\n    case Object:\n      return acyclicEqualsObject(a, b);\n    default:\n      return isFunction(a.equals) && a.equals(b);\n  }\n}\n\n//\n\nfunction unzipObjIntoU(o, ks, vs) {\n  for (var k in o) {\n    if (ks) ks.push(k);\n    if (vs) vs.push(o[k]);\n  }\n}\n\nfunction keys(o) {\n  if (o instanceof Object) {\n    if (isObject(o)) {\n      var ks = [];\n      unzipObjIntoU(o, ks, 0);\n      return ks;\n    } else {\n      return Object.keys(o);\n    }\n  }\n}\n\nfunction values(o) {\n  if (o instanceof Object) {\n    if (isObject(o)) {\n      var vs = [];\n      unzipObjIntoU(o, 0, vs);\n      return vs;\n    } else {\n      var xs = Object.keys(o),\n          n = xs.length;\n      for (var i = 0; i < n; ++i) {\n        xs[i] = o[xs[i]];\n      }return xs;\n    }\n  }\n}\n\n//\n\nfunction assocPartialU(k, v, o) {\n  var r = {};\n  if (o instanceof Object) {\n    if (!isObject(o)) o = toObject(o);\n    for (var l in o) {\n      if (l !== k) {\n        r[l] = o[l];\n      } else {\n        r[k] = v;\n        k = void 0;\n      }\n    }\n  }\n  if (isDefined(k)) r[k] = v;\n  return r;\n}\n\nfunction dissocPartialU(k, o) {\n  var r = void 0;\n  if (o instanceof Object) {\n    if (!isObject(o)) o = toObject(o);\n    for (var l in o) {\n      if (l !== k) {\n        if (!r) r = {};\n        r[l] = o[l];\n      } else {\n        k = void 0;\n      }\n    }\n  }\n  return r;\n}\n\n//\n\nvar inherit = function inherit(Derived, Base, protos, statics) {\n  return assign(Derived.prototype = Object.create(Base.prototype), protos).constructor = assign(Derived, statics);\n};\n\nexport { id, defineNameU, curryN, arityN, curry, assign, toObject, always, applyU, sndU, freeze, array0, object0, isDefined, hasU, prototypeOf, constructorOf, isFunction, isString, isNumber, isArray, isObject, pipe2U, compose2U, seq, seqPartial, identicalU, whereEqU, hasKeysOfU, acyclicEqualsObject, acyclicEqualsU, unzipObjIntoU, keys, values, assocPartialU, dissocPartialU, inherit };\n","import { defineNameU, isString, isFunction, isArray, freeze, isObject, acyclicEqualsU, array0, object0, sndU, always, curry, curryN, assocPartialU, dissocPartialU, isNumber, constructorOf, toObject, applyU, isDefined, keys, hasU, arityN, id, assign } from 'infestines';\n\nvar addU = function addU(x, y) {\n  return x + y;\n};\nvar multiplyU = function multiplyU(x, y) {\n  return x * y;\n};\n\nvar add = /*#__PURE__*/curry(addU);\nvar multiply = /*#__PURE__*/curry(multiplyU);\n\nvar divideBy = /*#__PURE__*/curry(function (d, n) {\n  return n / d;\n});\n\nvar negate = function negate(x) {\n  return -x;\n};\n\nvar ltU = function ltU(x, y) {\n  return x < y;\n};\nvar gtU = function gtU(x, y) {\n  return x > y;\n};\n\nvar isInstanceOf = /*#__PURE__*/curry(function (Class, x) {\n  return x instanceof Class;\n});\n\nvar create = Object.create;\nvar protoless = function protoless(o) {\n  return assign(create(null), o);\n};\nvar protoless0 = /*#__PURE__*/freeze( /*#__PURE__*/protoless(object0));\n\nvar replace = /*#__PURE__*/curry(function (p, r, s) {\n  return s.replace(p, r);\n});\n\nvar dep = function dep(xs2xsyC) {\n  return function (xsy) {\n    return arityN(xsy.length, defineNameU(function () {\n      return xs2xsyC.apply(undefined, arguments)(xsy).apply(undefined, arguments);\n    }, xsy.name));\n  };\n};\n\nvar fn = function fn(xsC, yC) {\n  return function (xsy) {\n    return arityN(xsy.length, defineNameU(function () {\n      for (var _len = arguments.length, xs = Array(_len), _key = 0; _key < _len; _key++) {\n        xs[_key] = arguments[_key];\n      }\n\n      return yC(xsy.apply(null, xsC(xs)));\n    }, xsy.name));\n  };\n};\n\nvar res = function res(yC) {\n  return fn(id, yC);\n};\n\nvar args = function args(xsC) {\n  return fn(xsC, id);\n};\n\nvar nth = function nth(i, xC) {\n  return function (xs) {\n    var ys = xs.slice(0);\n    ys[i] = xC(ys[i]);\n    return ys;\n  };\n};\n\nvar par = function par(i, xC) {\n  return args(nth(i, xC));\n};\n\nvar and = function and() {\n  for (var _len2 = arguments.length, xCs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    xCs[_key2] = arguments[_key2];\n  }\n\n  return function (x) {\n    for (var i = 0, n = xCs.length; i < n; ++i) {\n      x = xCs[i](x);\n    }return x;\n  };\n};\n\nvar or = function or() {\n  for (var _len3 = arguments.length, xCs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    xCs[_key3] = arguments[_key3];\n  }\n\n  return function (x) {\n    var es = null;\n    for (var i = 0, n = xCs.length; i < n; ++i) {\n      try {\n        return xCs[i](x);\n      } catch (e) {\n        es = e;\n      }\n    }\n    throw es;\n  };\n};\n\nvar ef = function ef(xE) {\n  return defineNameU(function (x) {\n    xE(x);\n    return x;\n  }, xE.name);\n};\n\nvar tup = function tup() {\n  for (var _len4 = arguments.length, xCs = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    xCs[_key4] = arguments[_key4];\n  }\n\n  return function (xs) {\n    if (xs.length !== xCs.length) throw Error('Expected array of ' + xCs.length + ' elements, but got ' + xs.length);\n    return and.apply(null, xCs.map(function (xC, i) {\n      return nth(i, xC);\n    }))(xs);\n  };\n};\n\nvar arr = function arr(xC) {\n  return function (xs) {\n    return xs.map(xC);\n  };\n};\n\n//\n\nvar id$1 = function id$$1(x) {\n  return x;\n};\n\nvar setName = process.env.NODE_ENV === 'production' ? function (x) {\n  return x;\n} : function (to, name) {\n  return defineNameU(to, name);\n};\n\nvar copyName = process.env.NODE_ENV === 'production' ? function (x) {\n  return x;\n} : function (to, from) {\n  return defineNameU(to, from.name);\n};\n\nvar toRegExpU = function toRegExpU(str, flags) {\n  return isString(str) ? new RegExp(replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&', str), flags) : str;\n};\n\n//\n\nvar returnAsync = function returnAsync(x) {\n  return Promise.resolve(x);\n};\n\nvar chainAsync = function chainAsync(xyP, xP) {\n  return null != xP && isFunction(xP.then) ? xP.then(xyP) : xyP(xP);\n};\n\n//\n\nvar toStringPartial = function toStringPartial(x) {\n  return void 0 !== x ? String(x) : '';\n};\n\nvar sliceIndex = function sliceIndex(m, l, d, i) {\n  return void 0 !== i ? Math.min(Math.max(m, i < 0 ? l + i : i), l) : d;\n};\n\nvar cpair = function cpair(xs) {\n  return function (x) {\n    return [x, xs];\n  };\n};\n\nvar unto = function unto(c) {\n  return function (x) {\n    return void 0 !== x ? x : c;\n  };\n};\nvar unto0 = /*#__PURE__*/unto(0);\n\nvar notPartial = function complement(x) {\n  return void 0 !== x ? !x : x;\n};\n\nvar singletonPartial = function singletonPartial(x) {\n  return void 0 !== x ? [x] : x;\n};\n\nvar expect = function expect(p, f) {\n  return copyName(function (x) {\n    return p(x) ? f(x) : void 0;\n  }, f);\n};\n\nfunction deepFreeze(x) {\n  if (isArray(x)) {\n    x.forEach(deepFreeze);\n    freeze(x);\n  } else if (isObject(x)) {\n    for (var k in x) {\n      deepFreeze(x[k]);\n    }freeze(x);\n  }\n  return x;\n}\n\nfunction freezeArrayOfObjects(xs) {\n  xs.forEach(freeze);\n  return freeze(xs);\n}\n\nfunction freezeObjectOfObjects(xs) {\n  if (xs) for (var k in xs) {\n    freeze(xs[k]);\n  }return freeze(xs);\n}\n\nvar isArrayOrPrimitive = function isArrayOrPrimitive(x) {\n  return !(x instanceof Object) || isArray(x);\n};\n\nvar rev = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freeze))(function reverse(xs) {\n  if (seemsArrayLike(xs)) {\n    var n = xs.length;\n    var ys = Array(n);\n    var i = 0;\n    while (n) {\n      ys[i++] = xs[--n];\n    }return ys;\n  }\n});\n\n//\n\nvar isEmptyArrayStringOrObject = function isEmptyArrayStringOrObject(x) {\n  return acyclicEqualsU(array0, x) || acyclicEqualsU(object0, x) || x === '';\n};\n\nvar warnEmpty = function warnEmpty(o, v, f) {\n  var msg = '`' + f + '(' + JSON.stringify(v) + ')` is likely unnecessary, because combinators no longer remove empty arrays, objects, or strings by default.  See CHANGELOG for more information.';\n  return function (x) {\n    if (acyclicEqualsU(v, x)) warn(o, msg);\n    return x;\n  };\n};\n\n//\n\nvar mapPartialIndexU = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function (xi2y, xs, skip) {\n    var ys = fn$$1(xi2y, xs, skip);\n    if (xs !== ys) freeze(ys);\n    return ys;\n  };\n})(function (xi2y, xs, skip) {\n  var n = xs.length;\n  var ys = Array(n);\n  var j = 0;\n  var same = true;\n  for (var i = 0; i < n; ++i) {\n    var x = xs[i];\n    var y = xi2y(x, i);\n    if (skip !== y) {\n      ys[j++] = y;\n      if (same) same = x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;\n    }\n  }\n  if (j !== n) {\n    ys.length = j;\n    return ys;\n  } else if (same) {\n    return xs;\n  } else {\n    return ys;\n  }\n});\n\nvar mapIfArrayLike = function mapIfArrayLike(xi2y, xs) {\n  return seemsArrayLike(xs) ? mapPartialIndexU(xi2y, xs, void 0) : void 0;\n};\n\nvar copyToFrom = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function (ys, k, xs, i, j) {\n    return ys.length === k + j - i ? freeze(fn$$1(ys, k, xs, i, j)) : fn$$1(ys, k, xs, i, j);\n  };\n})(function (ys, k, xs, i, j) {\n  while (i < j) {\n    ys[k++] = xs[i++];\n  }return ys;\n});\n\n//\n\nfunction selectInArrayLike(xi2v, xs) {\n  for (var i = 0, n = xs.length; i < n; ++i) {\n    var v = xi2v(xs[i], i);\n    if (void 0 !== v) return v;\n  }\n}\n\n//\n\nvar Select = {\n  map: sndU,\n  of: function of() {},\n  ap: function ap(l, r) {\n    return void 0 !== l ? l : r;\n  }\n};\n\nvar ConcatOf = function ConcatOf(ap, empty) {\n  return { map: sndU, ap: ap, of: always(empty) };\n};\n\nvar Sum = /*#__PURE__*/ConcatOf(addU, 0);\n\nvar mumBy = function mumBy(ord) {\n  return curry(function mumBy(xi2y, t, s) {\n    var minX = void 0;\n    var minY = void 0;\n    traverseU(Select, function (x, i) {\n      var y = xi2y(x, i);\n      if (void 0 !== y && (void 0 === minY || ord(y, minY))) {\n        minX = x;\n        minY = y;\n      }\n    }, t, s);\n    return minX;\n  });\n};\n\n//\n\nvar traverseU = function traverse(C, xi2yC, t, s) {\n  return toFunction(t)(s, void 0, C, xi2yC);\n};\n\n//\n\nvar expectedOptic = 'Expecting an optic';\nvar opticIsEither = 'An optic can be either\\n- a string,\\n- a non-negative integer,\\n- a quaternary optic function,\\n- an ordinary unary or binary function, or\\n- an array of optics.\\nSee documentation of `toFunction` and `compose` for details.';\nvar header = 'partial.lenses: ';\n\nfunction warn(f, m) {\n  if (!f.warned) {\n    f.warned = 1;\n    console.warn(header + m);\n  }\n}\n\nfunction errorGiven(m, o, e) {\n  m = header + m + '.';\n  e = e ? '\\n' + e : '';\n  console.error(m, 'Given:', o, e);\n  throw Error(m + e);\n}\n\nvar reqIndex = function index(x) {\n  if (!Number.isInteger(x) || x < 0) errorGiven('`index` expects a non-negative integer', x);\n};\n\nfunction reqFunction(o) {\n  if (!(isFunction(o) && (o.length === 4 || o.length <= 2))) errorGiven(expectedOptic, o, opticIsEither);\n}\n\nfunction reqFn(x) {\n  if (!isFunction(x)) errorGiven('Expected a function', x);\n}\n\nfunction reqArray(o) {\n  if (!isArray(o)) errorGiven(expectedOptic, o, opticIsEither);\n}\n\nfunction reqOptic(o) {\n  switch (typeof o) {\n    case 'string':\n      break;\n    case 'number':\n      reqIndex(o);\n      break;\n    case 'object':\n      reqArray(o);\n      for (var i = 0, n = o.length; i < n; ++i) {\n        reqOptic(o[i]);\n      }break;\n    default:\n      reqFunction(o);\n      break;\n  }\n}\n\n//\n\nvar reqString = function reqString(msg) {\n  return function (x) {\n    if (!isString(x)) errorGiven(msg, x);\n  };\n};\n\nvar reqMaybeArray = function reqMaybeArray(msg) {\n  return function (zs) {\n    if (!(void 0 === zs || seemsArrayLike(zs))) errorGiven(msg, zs);\n  };\n};\n\n//\n\nvar reqApplicative = function reqApplicative(name, arg) {\n  return function (C) {\n    if (!C.of) errorGiven('`' + name + (arg ? '(' + arg + ')' : '') + '` requires an applicative', C, 'Note that you cannot `get` a traversal. Perhaps you wanted to `collect` it?');\n  };\n};\n\nvar reqMonad = function reqMonad(name) {\n  return function (C) {\n    if (!C.chain) errorGiven('`' + name + '` requires a monad', C, 'Note that you can only `modify`, `remove`, `set`, and `traverse` a transform.');\n  };\n};\n\n//\n\nvar mkTraverse = function mkTraverse(after, toC) {\n  return curryN(4, copyName(function (xi2yC, m) {\n    return m = toC(m), function (t, s) {\n      return after(traverseU(m, xi2yC, t, s));\n    };\n  }, toC));\n};\n\n//\n\nvar consExcept = function consExcept(skip) {\n  return function (t) {\n    return function (h) {\n      return skip !== h ? [h, t] : t;\n    };\n  };\n};\n\nvar pushTo = function pushTo(n, xs) {\n  while (consExcept !== n) {\n    xs.push(n[0]);\n    n = n[1];\n  }\n  return xs;\n};\n\nvar consTo = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freeze))(function (n) {\n  return pushTo(n, []).reverse();\n});\n\nfunction traversePartialIndex(A, xi2yA, xs, skip) {\n  var map = A.map,\n      ap = A.ap;\n\n  var xsA = A.of(consExcept);\n  var n = xs.length;\n  if (map === sndU) {\n    for (var i = 0; i < n; ++i) {\n      xsA = ap(xsA, xi2yA(xs[i], i));\n    }return xsA;\n  } else {\n    var cons = consExcept(skip);\n    for (var _i2 = 0; _i2 < n; ++_i2) {\n      xsA = ap(map(cons, xsA), xi2yA(xs[_i2], _i2));\n    }return map(consTo, xsA);\n  }\n}\n\n//\n\nvar ConstantLog = {\n  map: function map(f, _ref) {\n    var m = _ref.m,\n        p = _ref.p,\n        c = _ref.c;\n    return { m: '%O <= ' + m, p: [f(p[0]), p], c: c };\n  }\n};\nvar getLogFn = function getLogFn(x) {\n  return { m: '%O', p: [x, consExcept], c: x };\n};\n\n//\n\nvar lensFrom = function lensFrom(get, set) {\n  return function (i) {\n    return function (x, _i, F, xi2yF) {\n      return F.map(function (v) {\n        return set(i, v, x);\n      }, xi2yF(get(i, x), i));\n    };\n  };\n};\n\n//\n\nvar getProp = function getProp(k, o) {\n  return o instanceof Object ? o[k] : void 0;\n};\n\nvar setProp = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freeze))(function (k, v, o) {\n  return void 0 !== v ? assocPartialU(k, v, o) : dissocPartialU(k, o) || object0;\n});\n\nvar funProp = /*#__PURE__*/lensFrom(getProp, setProp);\n\n//\n\nvar getIndex = function getIndex(i, xs) {\n  return seemsArrayLike(xs) ? xs[i] : void 0;\n};\n\nvar setIndex = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : fn(nth(0, ef(reqIndex)), freeze))(function (i, x, xs) {\n  if (!seemsArrayLike(xs)) xs = '';\n  var n = xs.length;\n  if (void 0 !== x) {\n    var m = Math.max(i + 1, n);\n    var ys = Array(m);\n    for (var j = 0; j < m; ++j) {\n      ys[j] = xs[j];\n    }ys[i] = x;\n    return ys;\n  } else {\n    if (n <= i) return copyToFrom(Array(n), 0, xs, 0, n);\n    var _ys = Array(n - 1);\n    for (var _j = 0; _j < i; ++_j) {\n      _ys[_j] = xs[_j];\n    }for (var _j2 = i + 1; _j2 < n; ++_j2) {\n      _ys[_j2 - 1] = xs[_j2];\n    }return _ys;\n  }\n});\n\nvar funIndex = /*#__PURE__*/lensFrom(getIndex, setIndex);\n\n//\n\nvar composedMiddle = function composedMiddle(o, r) {\n  return function (F, xi2yF) {\n    return xi2yF = r(F, xi2yF), function (x, i) {\n      return o(x, i, F, xi2yF);\n    };\n  };\n};\n\nfunction composed(oi0, os) {\n  var n = os.length - oi0;\n  if (n < 2) {\n    return n ? toFunction(os[oi0]) : identity;\n  } else {\n    var _last = toFunction(os[oi0 + --n]);\n    var r = function r(F, xi2yF) {\n      return function (x, i) {\n        return _last(x, i, F, xi2yF);\n      };\n    };\n    while (--n) {\n      r = composedMiddle(toFunction(os[oi0 + n]), r);\n    }var _first = toFunction(os[oi0]);\n    return function (x, i, F, xi2yF) {\n      return _first(x, i, F, r(F, xi2yF));\n    };\n  }\n}\n\nvar setU = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(0, ef(reqOptic)))(function set(o, x, s) {\n  switch (typeof o) {\n    case 'string':\n      return setProp(o, x, s);\n    case 'number':\n      return setIndex(o, x, s);\n    case 'object':\n      return modifyComposed(o, 0, s, x);\n    default:\n      return o.length === 4 ? o(s, void 0, Identity, always(x)) : s;\n  }\n});\n\nvar modifyU = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(0, ef(reqOptic)))(function modify(o, xi2x, s) {\n  switch (typeof o) {\n    case 'string':\n      return setProp(o, xi2x(getProp(o, s), o), s);\n    case 'number':\n      return setIndex(o, xi2x(getIndex(o, s), o), s);\n    case 'object':\n      return modifyComposed(o, xi2x, s);\n    default:\n      return o.length === 4 ? o(s, void 0, Identity, xi2x) : (xi2x(o(s, void 0), void 0), s);\n  }\n});\n\nvar modifyAsyncU = function modifyAsyncU(o, f, s) {\n  return returnAsync(toFunction(o)(s, void 0, IdentityAsync, f));\n};\n\nfunction makeIx(i) {\n  var ix = function ix(s, j) {\n    return ix.v = j, s;\n  };\n  ix.v = i;\n  return ix;\n}\n\nfunction getNestedU(l, s, j, ix) {\n  for (var n = l.length, o; j < n; ++j) {\n    switch (typeof (o = l[j])) {\n      case 'string':\n        s = getProp(ix.v = o, s);\n        break;\n      case 'number':\n        s = getIndex(ix.v = o, s);\n        break;\n      case 'object':\n        s = getNestedU(o, s, 0, ix);\n        break;\n      default:\n        s = o(s, ix.v, Constant, ix);\n    }\n  }return s;\n}\n\nvar getU = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(0, ef(reqOptic)))(function (l, s) {\n  switch (typeof l) {\n    case 'string':\n      return getProp(l, s);\n    case 'number':\n      return getIndex(l, s);\n    case 'object':\n      for (var i = 0, n = l.length, o; i < n; ++i) {\n        switch (typeof (o = l[i])) {\n          case 'string':\n            s = getProp(o, s);\n            break;\n          case 'number':\n            s = getIndex(o, s);\n            break;\n          default:\n            return getNestedU(l, s, i, makeIx(l[i - 1]));\n        }\n      }return s;\n    default:\n      return l(s, void 0, Constant, id$1);\n  }\n});\n\nfunction modifyComposed(os, xi2y, x, y) {\n  var n = os.length;\n  var xs = Array(n);\n  for (var i = 0, o; i < n; ++i) {\n    xs[i] = x;\n    switch (typeof (o = os[i])) {\n      case 'string':\n        x = getProp(o, x);\n        break;\n      case 'number':\n        x = getIndex(o, x);\n        break;\n      default:\n        x = composed(i, os)(x, os[i - 1], Identity, xi2y || always(y));\n        n = i;\n        break;\n    }\n  }\n  if (n === os.length) x = xi2y ? xi2y(x, os[n - 1]) : y;\n  for (var _o; 0 <= --n;) {\n    x = isString(_o = os[n]) ? setProp(_o, x, xs[n]) : setIndex(_o, x, xs[n]);\n  }return x;\n}\n\n//\n\nvar lensU = function lens(get, set) {\n  return copyName(function (x, i, F, xi2yF) {\n    return F.map(function (y) {\n      return set(y, x, i);\n    }, xi2yF(get(x, i), i));\n  }, get);\n};\n\nvar isoU = function iso(bwd, fwd) {\n  return copyName(function (x, i, F, xi2yF) {\n    return F.map(fwd, xi2yF(bwd(x), i));\n  }, bwd);\n};\n\nvar stringIsoU = function stringIsoU(bwd, fwd) {\n  return isoU(expect(isString, bwd), expect(isString, fwd));\n};\n\nvar numberIsoU = function numberIsoU(bwd, fwd) {\n  return isoU(expect(isNumber, bwd), expect(isNumber, fwd));\n};\n\n//\n\nvar getPick = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freeze))(function (template, x) {\n  var r = void 0;\n  for (var k in template) {\n    var t = template[k];\n    var v = isObject(t) ? getPick(t, x) : getU(t, x);\n    if (void 0 !== v) {\n      if (!r) r = {};\n      r[k] = v;\n    }\n  }\n  return r;\n});\n\nvar reqTemplate = function reqTemplate(name) {\n  return function (template) {\n    if (!isObject(template)) errorGiven('`' + name + '` expects a plain Object template', template);\n  };\n};\n\nvar reqObject = function reqObject(msg) {\n  return function (value) {\n    if (!(void 0 === value || value instanceof Object)) errorGiven(msg, value);\n  };\n};\n\nvar setPick = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(1, ef(reqObject('`pick` must be set with undefined or an object'))))(function (template, value, x) {\n  for (var k in template) {\n    var v = value && value[k];\n    var t = template[k];\n    x = isObject(t) ? setPick(t, v, x) : setU(t, v, x);\n  }\n  return x;\n});\n\n//\n\nvar toObject$1 = function toObject$$1(x) {\n  return constructorOf(x) !== Object ? toObject(x) : x;\n};\n\n//\n\nvar identity = function identity(x, i, _F, xi2yF) {\n  return xi2yF(x, i);\n};\n\n//\n\nvar branchAssemble = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(res(freeze)))(function (ks) {\n  return function (xs) {\n    var r = {};\n    var i = ks.length;\n    while (i--) {\n      var v = xs[0];\n      if (void 0 !== v) {\n        r[ks[i]] = v;\n      }\n      xs = xs[1];\n    }\n    return r;\n  };\n});\n\nvar branchOr1LevelIdentity = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function (otherwise, k2o, xO, x, A, xi2yA) {\n    var y = fn$$1(otherwise, k2o, xO, x, A, xi2yA);\n    if (x !== y) freeze(y);\n    return y;\n  };\n})(function (otherwise, k2o, xO, x, A, xi2yA) {\n  var written = void 0;\n  var same = true;\n  var r = {};\n  for (var k in k2o) {\n    written = 1;\n    var _x2 = xO[k];\n    var y = k2o[k](_x2, k, A, xi2yA);\n    if (void 0 !== y) {\n      r[k] = y;\n      if (same) same = _x2 === y && (_x2 !== 0 || 1 / _x2 === 1 / y) || _x2 !== _x2 && y !== y;\n    } else {\n      same = false;\n    }\n  }\n  var t = written;\n  for (var _k in xO) {\n    if (void 0 === (t && k2o[_k])) {\n      written = 1;\n      var _x3 = xO[_k];\n      var _y = otherwise(_x3, _k, A, xi2yA);\n      if (void 0 !== _y) {\n        r[_k] = _y;\n        if (same) same = _x3 === _y && (_x3 !== 0 || 1 / _x3 === 1 / _y) || _x3 !== _x3 && _y !== _y;\n      } else {\n        same = false;\n      }\n    }\n  }\n  return written ? same && xO === x ? x : r : x;\n});\n\nvar branchOr1Level = function branchOr1Level(otherwise, k2o) {\n  return function (x, _i, A, xi2yA) {\n    var xO = x instanceof Object ? toObject$1(x) : object0;\n\n    if (Identity === A) {\n      return branchOr1LevelIdentity(otherwise, k2o, xO, x, A, xi2yA);\n    } else if (Select === A) {\n      for (var k in k2o) {\n        var y = k2o[k](xO[k], k, A, xi2yA);\n        if (void 0 !== y) return y;\n      }\n      for (var _k2 in xO) {\n        if (void 0 === k2o[_k2]) {\n          var _y2 = otherwise(xO[_k2], _k2, A, xi2yA);\n          if (void 0 !== _y2) return _y2;\n        }\n      }\n    } else {\n      var map = A.map,\n          ap = A.ap,\n          of = A.of;\n\n      var xsA = of(cpair);\n      var ks = [];\n      for (var _k3 in k2o) {\n        ks.push(_k3);\n        xsA = ap(map(cpair, xsA), k2o[_k3](xO[_k3], _k3, A, xi2yA));\n      }\n      var t = ks.length ? true : void 0;\n      for (var _k4 in xO) {\n        if (void 0 === (t && k2o[_k4])) {\n          ks.push(_k4);\n          xsA = ap(map(cpair, xsA), otherwise(xO[_k4], _k4, A, xi2yA));\n        }\n      }\n      return ks.length ? map(branchAssemble(ks), xsA) : of(x);\n    }\n  };\n};\n\nfunction branchOrU(otherwise, template) {\n  var k2o = create(null);\n  for (var k in template) {\n    var v = template[k];\n    k2o[k] = isObject(v) ? branchOrU(otherwise, v) : toFunction(v);\n  }\n  return branchOr1Level(otherwise, k2o);\n}\n\nvar replaced = function replaced(inn, out, x) {\n  return acyclicEqualsU(x, inn) ? out : x;\n};\n\nfunction findIndexHint(hint, xi2b, xs) {\n  var u = hint.hint;\n  var n = xs.length;\n  if (n <= u) u = n - 1;\n  if (u < 0) u = 0;\n  var d = u - 1;\n  for (; 0 <= d && u < n; ++u, --d) {\n    if (xi2b(xs[u], u, hint)) return u;\n    if (xi2b(xs[d], d, hint)) return d;\n  }\n  for (; u < n; ++u) {\n    if (xi2b(xs[u], u, hint)) return u;\n  }for (; 0 <= d; --d) {\n    if (xi2b(xs[d], d, hint)) return d;\n  }return n;\n}\n\nvar partitionIntoIndex = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : dep(function (_xi2b, _xs, ts, fs) {\n  return res(ef(function () {\n    freeze(ts);\n    freeze(fs);\n  }));\n}))(function (xi2b, xs, ts, fs) {\n  for (var i = 0, n = xs.length, x; i < n; ++i) {\n    (xi2b(x = xs[i], i) ? ts : fs).push(x);\n  }\n});\n\nvar fromReader = function fromReader(wi2x) {\n  return copyName(function (w, i, F, xi2yF) {\n    return F.map(always(w), xi2yF(wi2x(w, i), i));\n  }, wi2x);\n};\n\n//\n\nvar reValue = function reValue(m) {\n  return m[0];\n};\nvar reIndex = function reIndex(m) {\n  return m.index;\n};\nvar reLastIndex = function reLastIndex(m) {\n  return reIndex(m) + m[0].length;\n};\n\nvar reNext = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function (m, re) {\n    var res$$1 = fn$$1(m, re);\n    if ('' === res$$1) warn(reNext, '`matches(' + re + ')` traversal terminated due to empty match.  `matches` traversal shouldn\\'t be used with regular expressions that can produce empty matches.');\n    return res$$1;\n  };\n})(function (m, re) {\n  var lastIndex = re.lastIndex;\n  re.lastIndex = reLastIndex(m);\n  var n = re.exec(m.input);\n  re.lastIndex = lastIndex;\n  return n && n[0] && n;\n});\n\n//\n\nvar iterCollect = function iterCollect(s) {\n  return function (xs) {\n    return function (x) {\n      return [s, x, xs];\n    };\n  };\n};\n\nvar iterToArray = function iterToArray(xs) {\n  var ys = [];\n  while (iterCollect !== xs) {\n    ys.push(xs[0], xs[1]);\n    xs = xs[2];\n  }\n  return ys;\n};\n\nfunction iterSelect(xi2y, t, s) {\n  while (s = reNext(s, t)) {\n    var y = xi2y(reValue(s), reIndex(s));\n    if (void 0 !== y) return y;\n  }\n}\n\nfunction iterEager(map, ap, of, xi2yA, t, s) {\n  var r = of(iterCollect);\n  while (s = reNext(s, t)) {\n    r = ap(ap(map(iterCollect, of(s)), r), xi2yA(reValue(s), reIndex(s)));\n  }return r;\n}\n\n//\n\nvar keyed = /*#__PURE__*/isoU( /*#__PURE__*/expect( /*#__PURE__*/isInstanceOf(Object), /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freezeArrayOfObjects))(function keyed(x) {\n  x = toObject$1(x);\n  var es = [];\n  for (var key in x) {\n    es.push([key, x[key]]);\n  }return es;\n})), /*#__PURE__*/expect(isArray, /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freeze))(function (es) {\n  var o = {};\n  for (var i = 0, n = es.length; i < n; ++i) {\n    var entry = es[i];\n    if (entry.length === 2) o[entry[0]] = entry[1];\n  }\n  return o;\n})));\n\n//\n\nvar matchesJoin = function matchesJoin(input) {\n  return function (matchesIn) {\n    var result = '';\n    var lastIndex = 0;\n    var matches = iterToArray(matchesIn);\n    var n = matches.length;\n    for (var j = n - 2; j !== -2; j += -2) {\n      var m = matches[j];\n      result += input.slice(lastIndex, reIndex(m));\n      var s = matches[j + 1];\n      if (void 0 !== s) result += s;\n      lastIndex = reLastIndex(m);\n    }\n\n    result += input.slice(lastIndex);\n    return result;\n  };\n};\n\n//\n\nvar disjointBwd = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freezeObjectOfObjects))(function (groupOf, x) {\n  if (x instanceof Object) {\n    var y = {};\n    x = toObject$1(x);\n    for (var key in x) {\n      var group = groupOf(key);\n      var g = y[group];\n      if (undefined === g) y[group] = g = {};\n      g[key] = x[key];\n    }\n    return y;\n  }\n});\n\nvar disjointFwd = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(res(freeze)))(function (groupOf) {\n  return function (y) {\n    if (y instanceof Object) {\n      var x = {};\n      y = toObject$1(y);\n      for (var group in y) {\n        var g = y[group];\n        if (g instanceof Object) {\n          g = toObject$1(g);\n          for (var key in g) {\n            if (groupOf(key) === group) {\n              x[key] = g[key];\n            }\n          }\n        }\n      }\n      return x;\n    }\n  };\n});\n\n//\n\nvar eitherU = function eitherU(t, e) {\n  return function either(c) {\n    return function either(x, i, C, xi2yC) {\n      return (c(x, i) ? t : e)(x, i, C, xi2yC);\n    };\n  };\n};\n\nvar orElseU = function orElse(back, prim) {\n  prim = toFunction(prim);\n  back = toFunction(back);\n  return function orElse(x, i, C, xi2yC) {\n    return (isDefined$1(prim, x) ? prim : back)(x, i, C, xi2yC);\n  };\n};\n\nfunction zeroOp(y, i, C, xi2yC, x) {\n  var of = C.of;\n  return of ? of(y) : C.map(always(y), xi2yC(x, i));\n}\n\n//\n\nvar elemsI = function elemsI(xs, _i, A, xi2yA) {\n  return A === Identity ? mapPartialIndexU(xi2yA, xs, void 0) : A === Select ? selectInArrayLike(xi2yA, xs) : traversePartialIndex(A, xi2yA, xs, void 0);\n};\n\n//\n\nvar seq2U = function seq2U(l, r) {\n  return function (x, i, M, xi2yM) {\n    return M.chain(function (x) {\n      return r(x, i, M, xi2yM);\n    }, l(x, i, M, xi2yM));\n  };\n};\n\n//\n\nvar pickInAux = function pickInAux(t, k) {\n  return [k, pickIn(t)];\n};\n\n//\n\nvar condOfDefault = /*#__PURE__*/always(zeroOp);\nvar condOfCase = function condOfCase(p, o, r) {\n  return function (y, j) {\n    return p(y, j) ? o : r(y, j);\n  };\n};\n\n// Auxiliary\n\nvar seemsArrayLike = function seemsArrayLike(x) {\n  return x instanceof Object && (x = x.length, x === x >> 0 && 0 <= x) || isString(x);\n};\n\n// Internals\n\nvar Identity = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : freeze)({\n  map: applyU,\n  of: id$1,\n  ap: applyU,\n  chain: applyU\n});\n\nvar IdentityAsync = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : freeze)({\n  map: chainAsync,\n  ap: function ap(xyP, xP) {\n    return chainAsync(function (xP) {\n      return chainAsync(function (xyP) {\n        return xyP(xP);\n      }, xyP);\n    }, xP);\n  },\n  of: id$1,\n  chain: chainAsync\n});\n\nvar Constant = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : freeze)({\n  map: sndU\n});\n\nvar toFunction = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(0, ef(reqOptic)))(function toFunction(o) {\n  switch (typeof o) {\n    case 'string':\n      return funProp(o);\n    case 'number':\n      return funIndex(o);\n    case 'object':\n      return composed(0, o);\n    default:\n      return o.length === 4 ? o : fromReader(o);\n  }\n});\n\n// Operations on optics\n\nvar assign$1 = /*#__PURE__*/curry(function assign$$1(o, x, s) {\n  return setU([o, propsOf(x)], x, s);\n});\n\nvar modify = /*#__PURE__*/curry(modifyU);\n\nvar modifyAsync = /*#__PURE__*/curry(modifyAsyncU);\n\nvar remove = /*#__PURE__*/curry(function remove(o, s) {\n  return setU(o, void 0, s);\n});\n\nvar set = /*#__PURE__*/curry(setU);\n\nvar traverse = /*#__PURE__*/curry(traverseU);\n\n// Nesting\n\nfunction compose() {\n  var n = arguments.length;\n  if (n < 2) {\n    return n ? arguments[0] : identity;\n  } else {\n    var os = Array(n);\n    while (n--) {\n      os[n] = arguments[n];\n    }return os;\n  }\n}\n\nfunction flat() {\n  var r = [flatten];\n  for (var i = 0, n = arguments.length; i < n; ++i) {\n    r.push(arguments[i], flatten);\n  }return r;\n}\n\n// Recursing\n\nfunction lazy(o2o) {\n  var _memo = function memo(x, i, C, xi2yC) {\n    return (_memo = toFunction(o2o(rec)))(x, i, C, xi2yC);\n  };\n  function rec(x, i, C, xi2yC) {\n    return _memo(x, i, C, xi2yC);\n  }\n  return rec;\n}\n\n// Adapting\n\nvar choices = function choices(o) {\n  for (var _len = arguments.length, os = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    os[_key - 1] = arguments[_key];\n  }\n\n  return os.length ? orElseU(os.reduceRight(orElseU), o) : o;\n};\n\nvar choose = function choose(xiM2o) {\n  return copyName(function (x, i, C, xi2yC) {\n    return toFunction(xiM2o(x, i))(x, i, C, xi2yC);\n  }, xiM2o);\n};\n\nvar cond = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function cond() {\n    var pair = tup(ef(reqFn), ef(reqOptic));\n\n    for (var _len2 = arguments.length, cs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      cs[_key2] = arguments[_key2];\n    }\n\n    arr(pair)(cs.slice(0, -1));\n    arr(or(tup(ef(reqOptic)), pair))(cs.slice(-1));\n    return fn$$1.apply(undefined, cs);\n  };\n})(function cond() {\n  var n = arguments.length;\n  var r = zero;\n  while (n--) {\n    var c = arguments[n];\n    r = c.length < 2 ? toFunction(c[0]) : eitherU(toFunction(c[1]), r)(c[0]);\n  }\n  return r;\n});\n\nvar condOf = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function condOf(of) {\n    var pair = tup(ef(reqFn), ef(reqOptic));\n\n    for (var _len3 = arguments.length, cs = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      cs[_key3 - 1] = arguments[_key3];\n    }\n\n    arr(pair)(cs.slice(0, -1));\n    arr(or(tup(ef(reqOptic)), pair))(cs.slice(-1));\n    return fn$$1.apply(undefined, [of].concat(cs));\n  };\n})(function condOf(of) {\n  of = toFunction(of);\n  var op = condOfDefault;\n  var n = arguments.length;\n  while (--n) {\n    var c = arguments[n];\n    op = c.length === 1 ? always(toFunction(c[0])) : condOfCase(c[0], toFunction(c[1]), op);\n  }\n  return function condOf(x, i, C, xi2yC) {\n    return of(x, i, Constant, op)(x, i, C, xi2yC);\n  };\n});\n\nvar ifElse = /*#__PURE__*/curry(function ifElse(c, t, e) {\n  return eitherU(toFunction(t), toFunction(e))(c);\n});\n\nvar iftes = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function iftes(_c, _t) {\n    warn(iftes, '`iftes` has been obsoleted.  Use `ifElse` or `cond` instead.  See CHANGELOG for details.');\n    return fn$$1.apply(null, arguments);\n  };\n})(function iftes(_c, _t) {\n  var n = arguments.length;\n  var r = n & 1 ? toFunction(arguments[--n]) : zero;\n  while (0 <= (n -= 2)) {\n    r = eitherU(toFunction(arguments[n + 1]), r)(arguments[n]);\n  }return r;\n});\n\nvar orElse = /*#__PURE__*/curry(orElseU);\n\n// Querying\n\nvar chain = /*#__PURE__*/curry(function chain(xi2yO, xO) {\n  return [xO, choose(function (xM, i) {\n    return void 0 !== xM ? xi2yO(xM, i) : zero;\n  })];\n});\n\nvar choice = function choice() {\n  for (var _len4 = arguments.length, os = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    os[_key4] = arguments[_key4];\n  }\n\n  return os.reduceRight(orElseU, zero);\n};\n\nvar unless = /*#__PURE__*/eitherU(zeroOp, identity);\n\nvar when = /*#__PURE__*/eitherU(identity, zeroOp);\n\nvar optional = /*#__PURE__*/when(isDefined);\n\nvar zero = function zero(x, i, C, xi2yC) {\n  return zeroOp(x, i, C, xi2yC);\n};\n\n// Indices\n\nvar mapIx = function mapIx(ix2j) {\n  return function mapIx(x, i, F, xj2yF) {\n    return xj2yF(x, ix2j(i, x));\n  };\n};\n\nvar setIx = function setIx(j) {\n  return function setIx(x, _i, _F, xj2yF) {\n    return xj2yF(x, j);\n  };\n};\n\nvar tieIx = /*#__PURE__*/curry(function tieIx(ij2k, o) {\n  o = toFunction(o);\n  return copyName(function (x, i, F, yk2zF) {\n    return o(x, i, F, function (y, j) {\n      return yk2zF(y, ij2k(j, i));\n    });\n  }, o);\n});\n\nvar joinIx = /*#__PURE__*/setName( /*#__PURE__*/tieIx(function (j, i) {\n  return void 0 !== i ? void 0 !== j ? [i, j] : i : j;\n}), 'joinIx');\n\nvar skipIx = /*#__PURE__*/setName( /*#__PURE__*/tieIx(sndU), 'skipIx');\n\n// Debugging\n\nfunction log() {\n  var show = curry(function log(dir, x) {\n    console.log.apply(console, copyToFrom([], 0, arguments, 0, arguments.length).concat([dir, x]));\n    return x;\n  });\n  return isoU(show('get'), show('set'));\n}\n\nvar getLog = /*#__PURE__*/curry(function getLog(l, s) {\n  var _traverseU = traverseU(ConstantLog, getLogFn, l, s),\n      m = _traverseU.m,\n      p = _traverseU.p,\n      c = _traverseU.c;\n\n  console.log.apply(console, pushTo(p, [m]));\n  return c;\n});\n\n// Operations on transforms\n\nvar transform = /*#__PURE__*/curry(function transform(o, s) {\n  return modifyU(o, id$1, s);\n});\n\nvar transformAsync = /*#__PURE__*/curry(function transformAsync(o, s) {\n  return modifyAsyncU(o, id$1, s);\n});\n\n// Sequencing\n\nvar seq = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function seq() {\n    return par(2, ef(reqMonad('seq')))(fn$$1.apply(undefined, arguments));\n  };\n})(function seq() {\n  var n = arguments.length;\n  var r = zero;\n  if (n) {\n    r = toFunction(arguments[--n]);\n    while (n) {\n      r = seq2U(toFunction(arguments[--n]), r);\n    }\n  }\n  return r;\n});\n\n// Transforming\n\nvar assignOp = function assignOp(x) {\n  return [propsOf(x), setOp(x)];\n};\n\nvar modifyOp = function modifyOp(xi2y) {\n  return function modifyOp(x, i, C, xi2yC) {\n    return zeroOp(x = xi2y(x, i), i, C, xi2yC, x);\n  };\n};\n\nvar setOp = function setOp(y) {\n  return function setOp(_x, i, C, xi2yC) {\n    return zeroOp(y, i, C, xi2yC, y);\n  };\n};\n\nvar removeOp = /*#__PURE__*/setOp();\n\n// Creating new traversals\n\nvar branchOr = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(1, ef(reqTemplate('branchOr'))))( /*#__PURE__*/curryN(2, function branchOr(otherwise) {\n  otherwise = toFunction(otherwise);\n  return function branchOr(template) {\n    return branchOrU(otherwise, template);\n  };\n}));\n\nvar branch = /*#__PURE__*/branchOr(zero);\n\nfunction branches() {\n  var n = arguments.length;\n  var template = {};\n  for (var i = 0; i < n; ++i) {\n    template[arguments[i]] = identity;\n  }return branch(template);\n}\n\n// Traversals and combinators\n\nvar elems = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(2, ef(reqApplicative('elems'))))(function elems(xs, i, A, xi2yA) {\n  return seemsArrayLike(xs) ? elemsI(xs, i, A, xi2yA) : A.of(xs);\n});\n\nvar elemsTotal = function elemsTotal(xs, i, A, xi2yA) {\n  return seemsArrayLike(xs) ? A === Identity ? mapPartialIndexU(xi2yA, xs, mapPartialIndexU) : A === Select ? selectInArrayLike(xi2yA, xs) : traversePartialIndex(A, xi2yA, xs, traversePartialIndex) : A.of(xs);\n};\n\nvar entries = /*#__PURE__*/setName( /*#__PURE__*/toFunction([keyed, elems]), 'entries');\n\nvar keys$1 = /*#__PURE__*/setName( /*#__PURE__*/toFunction([keyed, elems, 0]), 'keys');\n\nvar matches = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : dep(function (re) {\n  return re.global ? res(par(2, ef(reqApplicative('matches', re)))) : id$1;\n}))(function matches(re) {\n  return function matches(x, _i, C, xi2yC) {\n    if (isString(x)) {\n      var map = C.map;\n\n      if (re.global) {\n        var m0 = [''];\n        m0.input = x;\n        m0.index = 0;\n        if (Select === C) {\n          return iterSelect(xi2yC, re, m0);\n        } else {\n          var ap = C.ap,\n              of = C.of;\n\n          return map(matchesJoin(x), iterEager(map, ap, of, xi2yC, re, m0));\n        }\n      } else {\n        var m = x.match(re);\n        if (m) return map(function (y) {\n          return x.replace(re, void 0 !== y ? y : '');\n        }, xi2yC(m[0], reIndex(m)));\n      }\n    }\n    return zeroOp(x, void 0, C, xi2yC);\n  };\n});\n\nvar values = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(2, ef(reqApplicative('values'))))( /*#__PURE__*/setName( /*#__PURE__*/branchOr1Level(identity, protoless0), 'values'));\n\nvar children = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(2, ef(reqApplicative('children'))))(function children(x, i, C, xi2yC) {\n  return isArray(x) ? elemsI(x, i, C, xi2yC) : isObject(x) ? values(x, i, C, xi2yC) : C.of(x);\n});\n\nvar flatten = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(2, ef(reqApplicative('flatten'))))(function flatten(x, i, C, xi2yC) {\n  var rec = function rec(x, i) {\n    return isArray(x) ? elemsI(x, i, C, rec) : void 0 !== x ? xi2yC(x, i) : C.of(x);\n  };\n  return rec(x, i);\n});\n\nfunction query() {\n  var r = [];\n  for (var i = 0, n = arguments.length; i < n; ++i) {\n    var o = toFunction(arguments[i]);\n    r.push(satisfying(isDefined$1(o)), o);\n  }\n  return r;\n}\n\nvar satisfying = function satisfying(p) {\n  return function satisfying(x, i, C, xi2yC) {\n    var rec = function rec(x, i) {\n      return p(x, i) ? xi2yC(x, i) : children(x, i, C, rec);\n    };\n    return rec(x, i);\n  };\n};\n\nvar leafs = /*#__PURE__*/satisfying(function (x) {\n  return void 0 !== x && !isArray(x) && !isObject(x);\n});\n\n// Folds over traversals\n\nvar all = /*#__PURE__*/curry(function all(xi2b, t, s) {\n  return !traverseU(Select, function (x, i) {\n    if (!xi2b(x, i)) return true;\n  }, t, s);\n});\n\nvar and$1 = /*#__PURE__*/all(id$1);\n\nvar any = /*#__PURE__*/curry(function any(xi2b, t, s) {\n  return !!traverseU(Select, function (x, i) {\n    if (xi2b(x, i)) return true;\n  }, t, s);\n});\n\nvar collectAs = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? curry : res(freeze))(function collectAs(xi2y, t, s) {\n  var results = [];\n  traverseU(Select, function (x, i) {\n    var y = xi2y(x, i);\n    if (void 0 !== y) results.push(y);\n  }, t, s);\n  return results;\n});\n\nvar collect = /*#__PURE__*/collectAs(id$1);\n\nvar concatAs = /*#__PURE__*/mkTraverse(id$1, function concatAs(m) {\n  return ConcatOf(m.concat, m.empty());\n});\n\nvar concat = /*#__PURE__*/concatAs(id$1);\n\nvar countIf = /*#__PURE__*/curry(function countIf(p, t, s) {\n  return traverseU(Sum, function (x, i) {\n    return p(x, i) ? 1 : 0;\n  }, t, s);\n});\n\nvar count = /*#__PURE__*/countIf(isDefined);\n\nvar countsAs = /*#__PURE__*/curry(function countsAs(xi2k, t, s) {\n  var counts = new Map();\n  traverseU(Select, function (x, i) {\n    var k = xi2k(x, i);\n    var n = counts.get(k);\n    counts.set(k, void 0 !== n ? n + 1 : 1);\n  }, t, s);\n  return counts;\n});\n\nvar counts = /*#__PURE__*/countsAs(id$1);\n\nvar foldl = /*#__PURE__*/curry(function foldl(f, r, t, s) {\n  traverseU(Select, function (x, i) {\n    r = f(r, x, i);\n  }, t, s);\n  return r;\n});\n\nvar foldr = /*#__PURE__*/curry(function foldr(f, r, t, s) {\n  var is = [];\n  var xs = [];\n  traverseU(Select, function (x, i) {\n    xs.push(x);\n    is.push(i);\n  }, t, s);\n  for (var i = xs.length - 1; 0 <= i; --i) {\n    r = f(r, xs[i], is[i]);\n  }return r;\n});\n\nvar forEach = /*#__PURE__*/curry(function forEach(f, t, s) {\n  return traverseU(Select, function (x, i) {\n    f(x, i);\n  }, t, s);\n});\n\nvar forEachWith = /*#__PURE__*/curry(function forEachWith(newC, ef$$1, t, s) {\n  var c = newC();\n  traverseU(Select, function (x, i) {\n    ef$$1(c, x, i);\n  }, t, s);\n  return c;\n});\n\nvar isDefined$1 = /*#__PURE__*/curry(function isDefined$$1(t, s) {\n  return void 0 !== traverseU(Select, id$1, t, s);\n});\n\nvar isEmpty = /*#__PURE__*/curry(function isEmpty(t, s) {\n  return !traverseU(Select, always(true), t, s);\n});\n\nvar joinAs = /*#__PURE__*/mkTraverse(toStringPartial, /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(0, ef(reqString('`join` and `joinAs` expect a string delimiter'))))(function joinAs(d) {\n  return ConcatOf(function (x, y) {\n    return void 0 !== x ? void 0 !== y ? x + d + y : x : y;\n  });\n}));\n\nvar join = /*#__PURE__*/joinAs(id$1);\n\nvar maximumBy = /*#__PURE__*/mumBy(gtU);\n\nvar maximum = /*#__PURE__*/maximumBy(id$1);\n\nvar meanAs = /*#__PURE__*/curry(function meanAs(xi2y, t, s) {\n  var sum = 0;\n  var num = 0;\n  traverseU(Select, function (x, i) {\n    var y = xi2y(x, i);\n    if (void 0 !== y) {\n      num += 1;\n      sum += y;\n    }\n  }, t, s);\n  return sum / num;\n});\n\nvar mean = /*#__PURE__*/meanAs(id$1);\n\nvar minimumBy = /*#__PURE__*/mumBy(ltU);\n\nvar minimum = /*#__PURE__*/minimumBy(id$1);\n\nvar none = /*#__PURE__*/curry(function none(xi2b, t, s) {\n  return !traverseU(Select, function (x, i) {\n    if (xi2b(x, i)) return true;\n  }, t, s);\n});\n\nvar or$1 = /*#__PURE__*/any(id$1);\n\nvar productAs = /*#__PURE__*/traverse( /*#__PURE__*/ConcatOf(multiplyU, 1));\n\nvar product = /*#__PURE__*/productAs( /*#__PURE__*/unto(1));\n\nvar selectAs = /*#__PURE__*/traverse(Select);\n\nvar select = /*#__PURE__*/selectAs(id$1);\n\nvar sumAs = /*#__PURE__*/traverse(Sum);\n\nvar sum = /*#__PURE__*/sumAs(unto0);\n\n// Operations on lenses\n\nfunction get(l, s) {\n  return 1 < arguments.length ? getU(l, s) : function (s) {\n    return getU(l, s);\n  };\n}\n\n// Creating new lenses\n\nvar lens = /*#__PURE__*/curry(lensU);\n\nvar getter = function getter(get) {\n  return function (x, i, F, xi2yF) {\n    return xi2yF(get(x, i), i);\n  };\n};\n\nvar setter = /*#__PURE__*/lens(id$1);\n\nvar foldTraversalLens = /*#__PURE__*/curry(function foldTraversalLens(fold, traversal) {\n  return lensU(fold(traversal), set(traversal));\n});\n\n// Enforcing invariants\n\nfunction defaults(out) {\n  function o2u(x) {\n    return replaced(out, void 0, x);\n  }\n  return function defaults(x, i, F, xi2yF) {\n    return F.map(o2u, xi2yF(void 0 !== x ? x : out, i));\n  };\n}\n\nvar define = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function define(inn) {\n    var res$$1 = fn$$1(inn);\n    if (isEmptyArrayStringOrObject(inn)) return toFunction([isoU(warnEmpty(fn$$1, inn, 'define'), id$1), res$$1, isoU(id$1, warnEmpty(define, inn, 'define'))]);else return res$$1;\n  };\n})(function define(v) {\n  var untoV = unto(v);\n  return function define(x, i, F, xi2yF) {\n    return F.map(untoV, xi2yF(void 0 !== x ? x : v, i));\n  };\n});\n\nvar normalize = function normalize(xi2x) {\n  return [reread(xi2x), rewrite(xi2x)];\n};\n\nvar required = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function required(inn) {\n    var res$$1 = fn$$1(inn);\n    if (isEmptyArrayStringOrObject(inn)) return toFunction([res$$1, isoU(id$1, warnEmpty(required, inn, 'required'))]);else return res$$1;\n  };\n})(function required(inn) {\n  return replace$1(inn, void 0);\n});\n\nvar reread = function reread(xi2x) {\n  return function (x, i, _F, xi2yF) {\n    return xi2yF(void 0 !== x ? xi2x(x, i) : x, i);\n  };\n};\n\nvar rewrite = function rewrite(yi2y) {\n  return function (x, i, F, xi2yF) {\n    return F.map(function (y) {\n      return void 0 !== y ? yi2y(y, i) : y;\n    }, xi2yF(x, i));\n  };\n};\n\n// Lensing arrays\n\nfunction append(xs, _, F, xi2yF) {\n  var i = seemsArrayLike(xs) ? xs.length : 0;\n  return F.map(function (x) {\n    return setIndex(i, x, xs);\n  }, xi2yF(void 0, i));\n}\n\nvar filter = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(function (lens) {\n  return toFunction([lens, isoU(id$1, ef(reqMaybeArray('`filter` must be set with undefined or an array-like object')))]);\n}))(function filter(xi2b) {\n  return function filter(xs, i, F, xi2yF) {\n    var ts = void 0;\n    var fs = array0;\n    if (seemsArrayLike(xs)) partitionIntoIndex(xi2b, xs, ts = [], fs = []);\n    return F.map(function (ts) {\n      var tsN = ts ? ts.length : 0;\n      var fsN = fs.length;\n      var n = tsN + fsN;\n      return n === fsN ? fs : copyToFrom(copyToFrom(Array(n), 0, ts, 0, tsN), tsN, fs, 0, fsN);\n    }, xi2yF(ts, i));\n  };\n});\n\nfunction find(xih2b) {\n  var hint = arguments.length > 1 ? arguments[1] : { hint: 0 };\n  return function find(xs, _i, F, xi2yF) {\n    var ys = seemsArrayLike(xs) ? xs : '';\n    var i = hint.hint = findIndexHint(hint, xih2b, ys);\n    return F.map(function (v) {\n      return setIndex(i, v, ys);\n    }, xi2yF(ys[i], i));\n  };\n}\n\nfunction findWith(o) {\n  var oo = toFunction(o);\n  var p = isDefined$1(oo);\n  return [arguments.length > 1 ? find(p, arguments[1]) : find(p), oo];\n}\n\nvar first = 0;\n\nvar index = process.env.NODE_ENV !== 'production' ? /*#__PURE__*/ef(reqIndex) : id$1;\n\nvar last = /*#__PURE__*/choose(function last(maybeArray) {\n  return seemsArrayLike(maybeArray) && maybeArray.length ? maybeArray.length - 1 : 0;\n});\n\nvar prefix = function prefix(n) {\n  return slice(0, n);\n};\n\nvar slice = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? curry : res(function (lens) {\n  return toFunction([lens, isoU(id$1, ef(reqMaybeArray('`slice` must be set with undefined or an array-like object')))]);\n}))(function slice(begin, end) {\n  return function slice(xs, i, F, xsi2yF) {\n    var seems = seemsArrayLike(xs);\n    var xsN = seems && xs.length;\n    var b = sliceIndex(0, xsN, 0, begin);\n    var e = sliceIndex(b, xsN, xsN, end);\n    return F.map(function (zs) {\n      var zsN = zs ? zs.length : 0;\n      var bPzsN = b + zsN;\n      var n = xsN - e + bPzsN;\n      return copyToFrom(copyToFrom(copyToFrom(Array(n), 0, xs, 0, b), b, zs, 0, zsN), bPzsN, xs, e, xsN);\n    }, xsi2yF(seems ? copyToFrom(Array(Math.max(0, e - b)), 0, xs, b, e) : void 0, i));\n  };\n});\n\nvar suffix = function suffix(n) {\n  return slice(0 === n ? Infinity : !n ? 0 : -n, void 0);\n};\n\n// Lensing objects\n\nvar pickIn = function pickIn(t) {\n  return isObject(t) ? pick(modify(values, pickInAux, t)) : t;\n};\n\nvar prop = process.env.NODE_ENV === 'production' ? id$1 : function (x) {\n  if (!isString(x)) errorGiven('`prop` expects a string', x);\n  return x;\n};\n\nfunction props() {\n  var n = arguments.length;\n  var template = {};\n  for (var i = 0, k; i < n; ++i) {\n    template[k = arguments[i]] = k;\n  }return pick(template);\n}\n\nvar propsOf = function propsOf(o) {\n  return props.apply(null, keys(o));\n};\n\nfunction removable() {\n  for (var _len5 = arguments.length, ps = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    ps[_key5] = arguments[_key5];\n  }\n\n  function drop(y) {\n    if (!(y instanceof Object)) return y;\n    for (var i = 0, n = ps.length; i < n; ++i) {\n      if (hasU(ps[i], y)) return y;\n    }\n  }\n  return function (x, i, F, xi2yF) {\n    return F.map(drop, xi2yF(x, i));\n  };\n}\n\n// Providing defaults\n\nvar valueOr = function valueOr(v) {\n  return function (x, i, _F, xi2yF) {\n    return xi2yF(x != null ? x : v, i);\n  };\n};\n\n// Transforming data\n\nvar pick = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : par(0, ef(reqTemplate('pick'))))(function pick(template) {\n  return function (x, i, F, xi2yF) {\n    return F.map(function (v) {\n      return setPick(template, v, x);\n    }, xi2yF(getPick(template, x), i));\n  };\n});\n\nvar replace$1 = /*#__PURE__*/curry(function replace$$1(inn, out) {\n  function o2i(x) {\n    return replaced(out, inn, x);\n  }\n  return function replace$$1(x, i, F, xi2yF) {\n    return F.map(o2i, xi2yF(replaced(inn, out, x), i));\n  };\n});\n\n// Operations on isomorphisms\n\nfunction getInverse(o, s) {\n  return 1 < arguments.length ? setU(o, s, void 0) : function (s) {\n    return setU(o, s, void 0);\n  };\n}\n\n// Creating new isomorphisms\n\nvar iso = /*#__PURE__*/curry(isoU);\n\n// Isomorphism combinators\n\nvar array = function array(elem) {\n  var fwd = getInverse(elem);\n  var bwd = get(elem);\n  var mapFwd = function mapFwd(x) {\n    return mapIfArrayLike(fwd, x);\n  };\n  return function (x, i, F, xi2yF) {\n    return F.map(mapFwd, xi2yF(mapIfArrayLike(bwd, x), i));\n  };\n};\n\nvar inverse = function inverse(iso) {\n  return function (x, i, F, xi2yF) {\n    return F.map(function (x) {\n      return getU(iso, x);\n    }, xi2yF(setU(iso, x, void 0), i));\n  };\n};\n\n// Basic isomorphisms\n\nvar complement = /*#__PURE__*/isoU(notPartial, notPartial);\n\nvar is = function is(v) {\n  return isoU(function is(x) {\n    return acyclicEqualsU(v, x);\n  }, function (b) {\n    return true === b ? v : void 0;\n  });\n};\n\n// Array isomorphisms\n\nvar indexed = /*#__PURE__*/isoU( /*#__PURE__*/expect(seemsArrayLike, /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freezeArrayOfObjects))(function indexed(xs) {\n  var n = xs.length;\n  var xis = Array(n);\n  for (var i = 0; i < n; ++i) {\n    xis[i] = [i, xs[i]];\n  }return xis;\n})), /*#__PURE__*/expect(isArray, /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(freeze))(function (xis) {\n  var n = xis.length;\n  var xs = Array(n);\n  for (var i = 0; i < n; ++i) {\n    var xi = xis[i];\n    if (xi.length === 2) xs[xi[0]] = xi[1];\n  }\n  n = xs.length;\n  var j = 0;\n  for (var _i3 = 0; _i3 < n; ++_i3) {\n    var x = xs[_i3];\n    if (void 0 !== x) {\n      if (_i3 !== j) xs[j] = x;\n      ++j;\n    }\n  }\n  xs.length = j;\n  return xs;\n})));\n\nvar reverse = /*#__PURE__*/isoU(rev, rev);\n\nvar singleton = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (iso) {\n  return copyName(toFunction([isoU(id$1, freeze), iso]), iso);\n})(function singleton(x, i, F, xi2yF) {\n  return F.map(singletonPartial, xi2yF((x instanceof Object || isString(x)) && x.length === 1 ? x[0] : void 0, i));\n});\n\n// Object isomorphisms\n\nvar disjoint = function disjoint(groupOf) {\n  return function disjoint(x, i, F, xi2yF) {\n    var fwd = disjointFwd(groupOf);\n    return F.map(fwd, xi2yF(disjointBwd(groupOf, x), i));\n  };\n};\n\n// Standard isomorphisms\n\nvar uri = /*#__PURE__*/stringIsoU(decodeURI, encodeURI);\n\nvar uriComponent = /*#__PURE__*/stringIsoU(decodeURIComponent, encodeURIComponent);\n\nvar json = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : res(function (iso) {\n  return toFunction([iso, isoU(deepFreeze, id$1)]);\n}))(function json(options) {\n  var _ref2 = options || object0,\n      reviver = _ref2.reviver,\n      replacer = _ref2.replacer,\n      space = _ref2.space;\n\n  return isoU(expect(isString, function (text) {\n    return JSON.parse(text, reviver);\n  }), expect(isDefined, function (value) {\n    return JSON.stringify(value, replacer, space);\n  }));\n});\n\n// String isomorphisms\n\nvar dropPrefix = function dropPrefix(pfx) {\n  return stringIsoU(function dropPrefix(x) {\n    return x.startsWith(pfx) ? x.slice(pfx.length) : undefined;\n  }, function (x) {\n    return pfx + x;\n  });\n};\n\nvar dropSuffix = function dropSuffix(sfx) {\n  return stringIsoU(function dropSuffix(x) {\n    return x.endsWith(sfx) ? x.slice(0, x.length - sfx.length) : undefined;\n  }, function (x) {\n    return x + sfx;\n  });\n};\n\nvar replaces = /*#__PURE__*/curry(function replaces(i, o) {\n  return stringIsoU(replace(toRegExpU(i, 'g'), o), replace(toRegExpU(o, 'g'), i));\n});\n\nvar split = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function split(_sep) {\n    return toFunction([fn$$1.apply(null, arguments), isoU(freeze, id$1)]);\n  };\n})(function split(sep) {\n  var re = arguments.length > 1 ? arguments[1] : sep;\n  return isoU(expect(isString, function (x) {\n    return x.split(re);\n  }), expect(isArray, function (xs) {\n    return xs.join(sep);\n  }));\n});\n\nvar uncouple = /*#__PURE__*/(process.env.NODE_ENV === 'production' ? id$1 : function (fn$$1) {\n  return function uncouple(_sep) {\n    return toFunction([fn$$1.apply(null, arguments), isoU(freeze, id$1)]);\n  };\n})(function uncouple(sep) {\n  var re = toRegExpU(arguments.length > 1 ? arguments[1] : sep, '');\n  return isoU(expect(isString, function (x) {\n    var m = re.exec(x);\n    return m ? [x.slice(0, reIndex(m)), x.slice(reLastIndex(m))] : [x, ''];\n  }), function (kv) {\n    if (isArray(kv) && kv.length === 2) {\n      var k = kv[0];\n      var v = kv[1];\n      return v ? k + sep + v : k;\n    }\n  });\n});\n\n// Arithmetic isomorphisms\n\nvar add$1 = function add$$1(c) {\n  return numberIsoU(add(c), add(-c));\n};\nvar divide = function divide(c) {\n  return numberIsoU(divideBy(c), multiply(c));\n};\nvar multiply$1 = function multiply$$1(c) {\n  return numberIsoU(multiply(c), divideBy(c));\n};\nvar negate$1 = /*#__PURE__*/numberIsoU(negate, negate);\nvar subtract = function subtract(c) {\n  return numberIsoU(add(-c), add(c));\n};\n\n// Interop\n\nvar pointer = function pointer(s) {\n  if (s[0] === '#') s = getU(uriComponent, s);\n  var ts = s.split('/');\n  var n = ts.length;\n  for (var i = 1; i < n; ++i) {\n    var t = ts[i];\n    ts[i - 1] = /^(0|[1-9]\\d*)$/.test(t) ? ifElse(isArrayOrPrimitive, Number(t), t) : '-' === t ? ifElse(isArrayOrPrimitive, append, t) : t.replace('~1', '/').replace('~0', '~');\n  }\n  ts.length = n - 1;\n  return ts;\n};\n\nexport { seemsArrayLike, Identity, IdentityAsync, Constant, toFunction, assign$1 as assign, modify, modifyAsync, remove, set, traverse, compose, flat, lazy, choices, choose, cond, condOf, ifElse, iftes, orElse, chain, choice, unless, when, optional, zero, mapIx, setIx, tieIx, joinIx, skipIx, log, getLog, transform, transformAsync, seq, assignOp, modifyOp, setOp, removeOp, branchOr, branch, branches, elems, elemsTotal, entries, keys$1 as keys, matches, values, children, flatten, query, satisfying, leafs, all, and$1 as and, any, collectAs, collect, concatAs, concat, countIf, count, countsAs, counts, foldl, foldr, forEach, forEachWith, isDefined$1 as isDefined, isEmpty, joinAs, join, maximumBy, maximum, meanAs, mean, minimumBy, minimum, none, or$1 as or, productAs, product, selectAs, select, sumAs, sum, get, lens, getter, setter, foldTraversalLens, defaults, define, normalize, required, reread, rewrite, append, filter, find, findWith, first, index, last, prefix, slice, suffix, pickIn, prop, props, propsOf, removable, valueOr, pick, replace$1 as replace, getInverse, iso, array, inverse, complement, identity, is, indexed, reverse, singleton, disjoint, keyed, uri, uriComponent, json, dropPrefix, dropSuffix, replaces, split, uncouple, add$1 as add, divide, multiply$1 as multiply, negate$1 as negate, subtract, pointer };\n"],"sourceRoot":""}