{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/gl-matrix/src/gl-matrix/common.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat2.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat2d.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/mat4.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec3.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec4.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/quat.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/quat2.js","webpack:///./node_modules/gl-matrix/src/gl-matrix/vec2.js","webpack:///(webpack)/buildin/amd-options.js","webpack:///./node_modules/fluture/index.js","webpack:///./node_modules/sanctuary-show/index.js","webpack:///./node_modules/sanctuary-type-identifiers/index.js","webpack:///./node_modules/sanctuary-either/index.js","webpack:///./node_modules/util/util.js","webpack:///./node_modules/pure3d/dist/lib.esm.js","webpack:///./node_modules/fluture-loaders/dist/lib.esm.js","webpack:///./node_modules/sanctuary/index.js","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/sanctuary-type-classes/node_modules/sanctuary-type-identifiers/index.js","webpack:///./node_modules/sanctuary-def/index.js","webpack:///./node_modules/sanctuary-either/node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/sanctuary-either/node_modules/sanctuary-type-identifiers/index.js","webpack:///./node_modules/sanctuary-def/node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/sanctuary-def/node_modules/sanctuary-type-classes/node_modules/sanctuary-type-identifiers/index.js","webpack:///./node_modules/sanctuary-maybe/index.js","webpack:///./node_modules/sanctuary-maybe/node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/sanctuary-maybe/node_modules/sanctuary-type-identifiers/index.js","webpack:///./node_modules/sanctuary-pair/index.js","webpack:///./node_modules/sanctuary-pair/node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/sanctuary-pair/node_modules/sanctuary-type-identifiers/index.js","webpack:///./node_modules/sanctuary/node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/sanctuary/node_modules/sanctuary-type-classes/node_modules/sanctuary-type-identifiers/index.js","webpack:///./src/app/io/types/Worker-Types.ts","webpack:///./src/app/IO.ts","webpack:///./src/app/Worker.ts","webpack:///./node_modules/denque/index.js","webpack:///./node_modules/concurrify/index.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/util/support/isBufferBrowser.js","webpack:///./node_modules/inherits/inherits_browser.js","webpack:///./src/app/io/utils/Utils.ts","webpack:///./src/app/io/utils/flags/Flags.ts","webpack:///./src/app/io/utils/worker/Worker-Loader.ts","webpack:///./src/app/io/utils/datatypes/Maybe.ts","webpack:///./src/app/io/renderer/Renderer.ts","webpack:///./src/app/io/scene/Scene-Prep.ts","webpack:///./src/app/io/camera/Camera.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","h","y","g","v","E","T","b","A","M","R","S","N","O","I","F","L","x","C","P","w","U","B","j","D","k","V","G","H","q","X","W","z","$","Y","K","J","Z","Q","tt","nt","et","rt","ot","it","ut","at","st","ct","ft","lt","pt","ht","dt","yt","mt","u","_t","gt","vt","Et","Tt","bt","At","Mt","Rt","St","Nt","Ot","It","Ft","Lt","xt","Ct","Pt","wt","Ut","Bt","jt","Dt","kt","Vt","Gt","Ht","qt","Xt","Wt","zt","$t","a","Yt","Kt","Jt","Zt","Qt","tn","nn","en","rn","on","un","an","sn","cn","fn","ln","pn","hn","dn","yn","mn","_n","gn","vn","En","Tn","bn","An","Mn","Rn","Sn","Nn","On","In","Fn","Ln","xn","Cn","Pn","wn","Un","Bn","jn","Dn","kn","Vn","Gn","Hn","qn","Xn","Wn","zn","$n","Yn","Kn","Jn","Zn","Qn","te","ne","ee","re","oe","ie","ue","ae","se","ce","fe","le","pe","he","de","ye","me","_e","ge","ve","Ee","Te","be","Ae","Me","Re","Se","Ne","Oe","Ie","Fe","Le","xe","Ce","Pe","we","Ue","Be","je","De","ke","Ve","Ge","He","qe","Xe","We","ze","$e","Ye","Ke","Je","Ze","Qe","tr","nr","er","rr","or","ir","ur","ar","sr","cr","fr","lr","pr","hr","dr","yr","mr","_r","gr","vr","Er","f","Tr","br","Ar","Mr","Rr","Sr","Nr","Or","Ir","Fr","Lr","xr","Cr","Pr","wr","Ur","Br","jr","Dr","kr","Vr","Gr","Hr","qr","Xr","Wr","zr","$r","Yr","Kr","Jr","Zr","Qr","to","no","eo","ro","oo","io","uo","ao","so","co","fo","lo","po","ho","yo","mo","_o","go","vo","Eo","To","bo","Ao","Mo","Ro","So","No","Oo","Io","Fo","Lo","xo","Co","Po","wo","Uo","Bo","jo","Do","ko","Vo","Go","Ho","qo","Xo","Wo","zo","$o","Yo","Ko","Jo","Zo","Qo","ti","ni","ei","ri","oi","ii","ui","ai","si","ci","fi","li","pi","hi","di","yi","mi","_i","gi","vi","Ei","Ti","bi","Ai","Mi","Ri","Si","Ni","Oi","Ii","Fi","Li","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","equals","abs","max","out","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","sin","cos","mat2_scale","v0","v1","fromRotation","fromScaling","str","frob","sqrt","pow","LDU","add","subtract","exactEquals","mat2_equals","multiplyScalar","multiplyScalarAndAdd","scale","mul","sub","mat2d_create","mat2d_clone","mat2d_copy","mat2d_identity","mat2d_fromValues","tx","ty","mat2d_set","mat2d_invert","aa","ab","ac","ad","atx","aty","mat2d_determinant","mat2d_multiply","a4","a5","b4","b5","mat2d_rotate","mat2d_scale","translate","mat2d_fromRotation","mat2d_fromScaling","fromTranslation","mat2d_str","mat2d_frob","mat2d_add","mat2d_subtract","mat2d_multiplyScalar","mat2d_multiplyScalarAndAdd","mat2d_exactEquals","mat2d_equals","mat2d_mul","mat2d_sub","mat3_create","fromMat4","mat3_clone","mat3_copy","mat3_fromValues","m02","m12","m20","m21","m22","mat3_set","mat3_identity","mat3_transpose","a01","a02","a12","mat3_invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","mat3_adjoint","mat3_determinant","mat3_multiply","b00","b02","b10","b12","b20","b22","mat3_translate","mat3_rotate","mat3_scale","mat3_fromTranslation","mat3_fromRotation","mat3_fromScaling","fromMat2d","fromQuat","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","mat3_str","mat3_frob","mat3_add","mat3_subtract","mat3_multiplyScalar","mat3_multiplyScalarAndAdd","mat3_exactEquals","mat3_equals","a6","a7","a8","b6","b7","b8","mat3_mul","mat3_sub","mat4_create","mat4_clone","mat4_copy","mat4_fromValues","m03","m13","m23","m30","m31","m32","m33","mat4_set","mat4_identity","mat4_transpose","mat4_invert","mat4_adjoint","mat4_determinant","mat4_multiply","mat4_translate","mat4_scale","mat4_rotate","axis","len","rotateX","rotateY","rotateZ","mat4_fromTranslation","mat4_fromScaling","mat4_fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","mat4_fromQuat","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","mat4_str","mat4_frob","mat4_add","mat4_subtract","mat4_multiplyScalar","mat4_multiplyScalarAndAdd","mat4_exactEquals","mat4_equals","a9","a14","a15","b9","b13","b14","b15","mat4_mul","mat4_sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","forEach","vec","stride","offset","count","arg","length","vec4_create","vec4_clone","vec4_fromValues","vec4_copy","vec4_set","vec4_add","vec4_subtract","vec4_multiply","vec4_divide","vec4_ceil","vec4_floor","vec4_min","vec4_max","vec4_round","vec4_scale","vec4_scaleAndAdd","vec4_distance","vec4_squaredDistance","vec4_length","vec4_squaredLength","vec4_negate","vec4_inverse","vec4_normalize","vec4_dot","vec4_lerp","vec4_random","v2","v3","v4","s1","s2","vec4_transformMat4","vec4_transformQuat","ix","iy","iz","iw","vec4_str","vec4_exactEquals","vec4_equals","vec4_sub","vec4_mul","vec4_div","vec4_dist","vec4_sqrDist","vec4_len","vec4_sqrLen","vec4_forEach","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fRoot","fTrace","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","view","quat2_create","dq","quat2_clone","quat2_fromValues","w1","fromRotationTranslationValues","quat2_fromRotationTranslation","quat2_fromTranslation","quat2_fromRotation","quat2_fromMat4","outer","quat2_copy","quat2_identity","quat2_set","getReal","getDual","setReal","setDual","quat2_getTranslation","quat2_translate","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","quat2_rotateX","quat2_rotateY","quat2_rotateZ","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","quat2_add","quat2_multiply","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","quat2_mul","quat2_scale","quat2_dot","quat2_lerp","quat2_invert","sqlen","quat2_squaredLength","quat2_conjugate","quat2_length","quat2_len","quat2_sqrLen","quat2_normalize","a_dot_b","quat2_str","quat2_exactEquals","quat2_equals","vec2_create","vec2_clone","vec2_fromValues","vec2_copy","vec2_set","vec2_add","vec2_subtract","vec2_multiply","vec2_divide","vec2_ceil","vec2_floor","vec2_min","vec2_max","vec2_round","vec2_scale","vec2_scaleAndAdd","vec2_distance","vec2_squaredDistance","vec2_length","vec2_squaredLength","vec2_negate","vec2_inverse","vec2_normalize","vec2_dot","vec2_cross","vec2_lerp","vec2_random","transformMat2","transformMat2d","vec2_transformMat3","vec2_transformMat4","vec2_rotate","p0","p1","sinC","cosC","vec2_angle","len1","len2","vec2_str","vec2_exactEquals","vec2_equals","vec2_len","vec2_sub","vec2_mul","vec2_div","vec2_dist","vec2_sqrDist","vec2_sqrLen","vec2_forEach","__webpack_amd_options__","show","Denque","concurrify","noop","moop","this","showf","sf","replace","partial1","arguments","partial2","partial3","raise","indent","FL","ordinal","namespace","version","$$type","error","message","Error","typeError","TypeError","invalidArgument","expected","actual","invalidFuture","id","parse","info","throwInvalidArgument","throwInvalidContext","throwInvalidFuture","isFunction","isThenable","Promise","Boolean","then","isUnsigned","isObject","nil","head","cons","tail","interpretSequence","seq","rec","rej","res","future","action","settled","queue","cancel","stack","async","pushStack","popStack","settle","_spawn","_actions","unshift","shift","_interpret","exception","rejected","resolved","warmupActions","early","terminator","clear","Sequence$cancel","pop","run","Future$value$rej","Future$onCrash","name$$1","_","split","map","join","Future","computation","Computation","isFuture","toString","other","_ap","mapper","_map","lmapper","rmapper","_bimap","_chain","ap","bimap","chain","mapRej","_mapRej","chainRej","_chainRej","race","_race","both","_both","and","_and","_or","swap","_swap","fold","_fold","finally","_finally","lastly","fork","forkCatch","done","callback","promise","_this","isRejected","isResolved","isSettled","extractLeft","extractRight","Core","_computation","Rejected","_value","reject","Resolved","of","Never","_isNever","Sequence","_parallelAp","open","cont","never","isNever","Crashed","error$$1","_error","Eager","crashed","Action","ApAction","MapAction","BimapAction","ChainAction","MapRejAction","ChainRejAction","SwapAction","FoldAction","FinallyAction","AndAction","OrAction","ParallelApAction","RaceAction","BothAction","ParallelApActionState","RaceActionState","BothActionState","spawn","actions","Next","Done","isIteration","_transform","Undetermined","Synchronous","Asynchronous","ChainRec","step","init","_step","_init","ap$mval","mval","mfunc","Apply","test","alt$left","Alt","alt","map$mapper","Functor","bimap$lmapper$rmapper","Bifunctor","bimap$lmapper","chain$chainer","chainer","Chain","mapRej$mapper","chainRej$chainer","lastly$right","and$left","both$left","or$left","race$right","fold$f$g","fold$f","done$callback","fork$f$g","fork$f","value$cont","After$race","_time","After","time","RejectAfter","after$time","rejectAfter$time","reason","Attempt","_fn","attempt","timing","state","drain","setTimeout","clearTimeout","Cold","Cached","Pending","Crashed$1","Rejected$1","Resolved$1","pure","_pure","reset","Encase","_a","Encase2","_b","Encase3","_c","EncaseN","EncaseN2","EncaseN3","EncaseP","EncaseP2","EncaseP3","invalidIteration","invalidState","generator","_generator","Hook","acquire","dispose","consume","_acquire","_dispose","_consume","hook$acquire$cleanup","cleanup","hook$acquire","Node","Parallel","futures","_futures","_length","_max","_state","_addToQueue","_queue","push","_queued","_drainQueue","crash","resolve","_cancel","err","val","iterator","next","resource","cancelConsume","Hook$done","Hook$reject","Hook$consumptionException","rec_","Hook$dispose","disposal","Hook$cancelDisposal","Hook$cancelConsumption","Hook$consumptionRejected","Hook$consumptionResolved","cancelAcquire","consumption","cancels","cursor","running","blocked","Parallel$cancel","Parallel$run","idx","Parallel$drain","emptyArray","validateNthFuture","parallel$max","xs","isArray","TryP","chainRec","Par","isParallel","zero","Fluture","freeze","par","sequential","after","rejectAfter","try","cache","encase","encase2","encase3","encaseN","encaseN2","encaseN3","encaseP","encaseP2","encaseP3","do","hook","node","parallel","tryP","assign","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","apply","self","sanctuaryShow","$$show","seen","entry","indexOf","valueOf","JSON","stringify","isNaN","NaN","toISOString","concat","keys","sort","filter","constructor","String","sanctuaryTypeIdentifiers","pattern","RegExp","slice","groups","exec","Number","sanctuaryEither","sanctuaryTypeClasses","__doctest","require","EitherType","BinaryType","Either","isLeft","env","TypeClass","Unknown","checkTypes","Left$prototype","isRight","@@show","Left$prototype$show","fantasy-land/map","fantasy-land/bimap","Left","fantasy-land/ap","fantasy-land/chain","fantasy-land/alt","fantasy-land/reduce","fantasy-land/traverse","typeRep","fantasy-land/extend","Right$prototype","Right$prototype$show","Right","util","inspect","custom","Setoid","Left$prototype$equals","Ord","Left$prototype$lte","Semigroup","Left$prototype$concat","Right$prototype$equals","Right$prototype$lte","Right$prototype$concat","tag","lte","either","global","process","formatRegExp","format","isString","objects","args","isNull","deprecate","msg","isUndefined","noDeprecation","warned","throwDeprecation","traceDeprecation","console","debugEnviron","debugs","obj","opts","ctx","stylize","stylizeNoColor","depth","colors","isBoolean","showHidden","_extend","customInspect","stylizeWithColor","formatValue","styleType","style","styles","recurseTimes","ret","primitive","simple","isNumber","visibleKeys","array","hash","getOwnPropertyNames","isError","formatError","isRegExp","isDate","Date","output","base","braces","toUTCString","formatProperty","match","reduce","prev","cur","desc","getOwnPropertyDescriptor","line","substr","objectToString","pad","debuglog","NODE_ENV","BROADCAST","BUILD_VERSION","NODE_DEBUG","toUpperCase","pid","bold","italic","underline","white","grey","black","blue","cyan","green","magenta","red","yellow","special","number","boolean","undefined","null","string","date","regexp","isNullOrUndefined","isSymbol","isPrimitive","isBuffer","months","prop","log","getHours","getMinutes","getSeconds","getDate","getMonth","inherits","origin","GltfAnimationTargetPath","GltfAnimationInterpolation","GltfMaterialAlphaMode","GltfNodeKind","GltfPrimitiveDrawKind","sanctuary","isNil","fetchImage","url","crossOrigin","fluture","img","Image","addEventListener","src","window","URL","webkitURL","location","sameOrigin","Nothing","Just","__assign","fletch","endpoint","options","method","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","status","query","requestType","data","encodeURIComponent","responseType","withCredentials","headers","setRequestHeader","send","abort","XhrLoader","response","_fetchOverride","_fetchUrlOverride","fetchArrayBufferUrl","fetchJsonUrl","BlobLoader","read","blob","fileReader","FileReader","onload","result","onerror","readAsArrayBuffer","readAsDataURL","readAsText","TRANSLATION","ROTATION","SCALE","WEIGHTS","LINEAR","STEP","CUBICSPLINE","OPAQUE","MASK","BLEND","MESH","SKIN","ELEMENTS","ARRAY","GltfIblExtensionName","GltfLightsExtensionName","GltfLights_MAX","GltfUnlitExtensionName","CameraKind","NodeKind","LightKind","WebGlConstants","PERSPECTIVE","ORTHOGRAPHIC","CAMERA","LIGHT","Directional","Point","Spot","ACTIVE_ATTRIBUTES","ACTIVE_ATTRIBUTE_MAX_LENGTH","ACTIVE_TEXTURE","ACTIVE_UNIFORMS","ACTIVE_UNIFORM_MAX_LENGTH","ALIASED_LINE_WIDTH_RANGE","ALIASED_POINT_SIZE_RANGE","ALPHA","ALPHA_BITS","ALWAYS","ARRAY_BUFFER","ARRAY_BUFFER_BINDING","ATTACHED_SHADERS","BACK","BLEND_COLOR","BLEND_DST_ALPHA","BLEND_DST_RGB","BLEND_EQUATION","BLEND_EQUATION_ALPHA","BLEND_EQUATION_RGB","BLEND_SRC_ALPHA","BLEND_SRC_RGB","BLUE_BITS","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","BROWSER_DEFAULT_WEBGL","BUFFER_SIZE","BUFFER_USAGE","BYTE","CCW","CLAMP_TO_EDGE","COLOR_ATTACHMENT0","COLOR_BUFFER_BIT","COLOR_CLEAR_VALUE","COLOR_WRITEMASK","COMPILE_STATUS","COMPRESSED_TEXTURE_FORMATS","CONSTANT_ALPHA","CONSTANT_COLOR","CONTEXT_LOST_WEBGL","CULL_FACE","CULL_FACE_MODE","CURRENT_PROGRAM","CURRENT_VERTEX_ATTRIB","CW","DECR","DECR_WRAP","DELETE_STATUS","DEPTH_ATTACHMENT","DEPTH_BITS","DEPTH_BUFFER_BIT","DEPTH_CLEAR_VALUE","DEPTH_COMPONENT","DEPTH_COMPONENT16","DEPTH_FUNC","DEPTH_RANGE","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","DEPTH_TEST","DEPTH_WRITEMASK","DITHER","DONT_CARE","DST_ALPHA","DST_COLOR","DYNAMIC_DRAW","ELEMENT_ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER_BINDING","EQUAL","FASTEST","FLOAT","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","FRAGMENT_SHADER","FRAMEBUFFER","FRAMEBUFFER_ATTACHMENT_OBJECT_NAME","FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE","FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE","FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL","FRAMEBUFFER_BINDING","FRAMEBUFFER_COMPLETE","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_UNSUPPORTED","FRONT","FRONT_AND_BACK","FRONT_FACE","FUNC_ADD","FUNC_REVERSE_SUBTRACT","FUNC_SUBTRACT","GENERATE_MIPMAP_HINT","GEQUAL","GREATER","GREEN_BITS","HIGH_FLOAT","HIGH_INT","INCR","INCR_WRAP","INFO_LOG_LENGTH","INT","INT_VEC2","INT_VEC3","INT_VEC4","INVALID_ENUM","INVALID_FRAMEBUFFER_OPERATION","INVALID_OPERATION","INVALID_VALUE","INVERT","KEEP","LEQUAL","LESS","LINEAR_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINES","LINE_LOOP","LINE_STRIP","LINE_WIDTH","LINK_STATUS","LOW_FLOAT","LOW_INT","LUMINANCE","LUMINANCE_ALPHA","MAX_COMBINED_TEXTURE_IMAGE_UNITS","MAX_CUBE_MAP_TEXTURE_SIZE","MAX_FRAGMENT_UNIFORM_VECTORS","MAX_RENDERBUFFER_SIZE","MAX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_VARYING_VECTORS","MAX_VERTEX_ATTRIBS","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_VERTEX_UNIFORM_VECTORS","MAX_VIEWPORT_DIMS","MEDIUM_FLOAT","MEDIUM_INT","MIRRORED_REPEAT","NEAREST","NEAREST_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","NEVER","NICEST","NONE","NOTEQUAL","NO_ERROR","NUM_COMPRESSED_TEXTURE_FORMATS","ONE","ONE_MINUS_CONSTANT_ALPHA","ONE_MINUS_CONSTANT_COLOR","ONE_MINUS_DST_ALPHA","ONE_MINUS_DST_COLOR","ONE_MINUS_SRC_ALPHA","ONE_MINUS_SRC_COLOR","OUT_OF_MEMORY","PACK_ALIGNMENT","POINTS","POLYGON_OFFSET_FACTOR","POLYGON_OFFSET_FILL","POLYGON_OFFSET_UNITS","RED_BITS","RENDERBUFFER","RENDERBUFFER_ALPHA_SIZE","RENDERBUFFER_BINDING","RENDERBUFFER_BLUE_SIZE","RENDERBUFFER_DEPTH_SIZE","RENDERBUFFER_GREEN_SIZE","RENDERBUFFER_HEIGHT","RENDERBUFFER_INTERNAL_FORMAT","RENDERBUFFER_RED_SIZE","RENDERBUFFER_STENCIL_SIZE","RENDERBUFFER_WIDTH","RENDERER","REPEAT","REPLACE","RGB","RGB5_A1","RGB565","RGBA","RGBA4","SAMPLER_2D","SAMPLER_CUBE","SAMPLES","SAMPLE_ALPHA_TO_COVERAGE","SAMPLE_BUFFERS","SAMPLE_COVERAGE","SAMPLE_COVERAGE_INVERT","SAMPLE_COVERAGE_VALUE","SCISSOR_BOX","SCISSOR_TEST","SHADER_COMPILER","SHADER_SOURCE_LENGTH","SHADER_TYPE","SHADING_LANGUAGE_VERSION","SHORT","SRC_ALPHA","SRC_ALPHA_SATURATE","SRC_COLOR","STATIC_DRAW","STENCIL_ATTACHMENT","STENCIL_BACK_FAIL","STENCIL_BACK_FUNC","STENCIL_BACK_PASS_DEPTH_FAIL","STENCIL_BACK_PASS_DEPTH_PASS","STENCIL_BACK_REF","STENCIL_BACK_VALUE_MASK","STENCIL_BACK_WRITEMASK","STENCIL_BITS","STENCIL_BUFFER_BIT","STENCIL_CLEAR_VALUE","STENCIL_FAIL","STENCIL_FUNC","STENCIL_INDEX","STENCIL_INDEX8","STENCIL_PASS_DEPTH_FAIL","STENCIL_PASS_DEPTH_PASS","STENCIL_REF","STENCIL_TEST","STENCIL_VALUE_MASK","STENCIL_WRITEMASK","STREAM_DRAW","SUBPIXEL_BITS","TEXTURE","TEXTURE0","TEXTURE1","TEXTURE2","TEXTURE3","TEXTURE4","TEXTURE5","TEXTURE6","TEXTURE7","TEXTURE8","TEXTURE9","TEXTURE10","TEXTURE11","TEXTURE12","TEXTURE13","TEXTURE14","TEXTURE15","TEXTURE16","TEXTURE17","TEXTURE18","TEXTURE19","TEXTURE20","TEXTURE21","TEXTURE22","TEXTURE23","TEXTURE24","TEXTURE25","TEXTURE26","TEXTURE27","TEXTURE28","TEXTURE29","TEXTURE30","TEXTURE31","TEXTURE_2D","TEXTURE_BINDING_2D","TEXTURE_BINDING_CUBE_MAP","TEXTURE_CUBE_MAP","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Z","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TRIANGLES","TRIANGLE_FAN","TRIANGLE_STRIP","UNPACK_ALIGNMENT","UNPACK_COLORSPACE_CONVERSION_WEBGL","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNSIGNED_BYTE","UNSIGNED_INT","UNSIGNED_SHORT","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","VALIDATE_STATUS","VENDOR","VERSION","VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","VERTEX_ATTRIB_ARRAY_ENABLED","VERTEX_ATTRIB_ARRAY_NORMALIZED","VERTEX_ATTRIB_ARRAY_POINTER","VERTEX_ATTRIB_ARRAY_SIZE","VERTEX_ATTRIB_ARRAY_STRIDE","VERTEX_ATTRIB_ARRAY_TYPE","VERTEX_SHADER","VIEWPORT","ZERO","createVec2","Float64Array","createVec4","createVec3","createMat4","gl_matrix","mat4","createQuat","quat","createFill","size","fill","createIdentityTransform","parentModelMatrix","trs","rotation","localMatrix","getMatrixFromTrs","modelMatrix","getModelMatrix","createTransform","overrideTrs","getTrsFromMatrix","matrix","scaledMatrix","getNormalMatrix","getViewMatrices","camera","modelViewMatrix","modelViewProjectionMatrix","updateTransform","transform","updateLocal","updateModel","normalMatrix","updateView","rotateVectorByMatrix","qRot","vec3","getOrthographicProjection","settings","values","xmag","ymag","znear","zfar","getPerspectiveProjection","aspectRatio","canvas","clientWidth","clientHeight","yfov","getCameraProjection","kind","getCameraView","getCameraPosition","setCameraViewFromTransform","setCameraPositionFromTransform","position","setCameraProjectionFromSettings","getLightDirectionFromMatrix","vRes","filterNodeDeep","children","filterNodesDeep","nodes","forEachNodes","forEachNode","someNodes","some","someNode","countNodes","findNode","pred","nodesOrNode","targetNode","mapNode","mapNodeWithParent","parent","mapNodesWithParent","mapNodes","updateNodeTransforms","_parent","_node","pModelMatrix","beforeModel","afterModel","updateLightDirection","lightKind","light","direction","updateNodeListTransforms","interpolate_linear","xs0","xs1","vec2","vec4","findKeyframeBounds","getValue","arr","_withinBounds","pValue","nValue","_binarySearch","mid","GLTF_PARSE_ACCESSOR_TYPE_SIZE","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","GLTF_PARSE_COMPONENT_BYTE_SIZE","[object Object]","getComponentTypedData","buffer","componentType","Int8Array","Uint8Array","Int16Array","Uint16Array","Uint32Array","getTypedDataFromInfo","buffers","bufferViewIndex","ArrayBuffer","bufferLength","bufferIndex","byteOffset","GLTF_PARSE_getAccessorTypedData","gltf","sparse","typeCount","accessorType","sparseIndices","indices","sparseValues","indexOfValue","valueIndex","GLTF_PARSE_getAccessorDataInfo","accessorId","accessor","accessors","byteLength","bufferView","bufferViews","byteStride","GLTF_PARSE_animationPathToString","GLTF_PARSE_animationStringToPath","weights","GLTF_PARSE_interpolationLookup","linear","cubicspline","gltf_setAnimationTime","animation","bounds","keyframes","k0","k1","interpolation","targetPath","morphWeights","gltf_createAnimator","animations","loop","totalTimes","Map","lastTs","ts","nextTime","timeMax","timeMin","animationIds","GLTF_PARSE_attributeNames","HAS_PREPPED","prepWebGlRenderer","renderer","extras","aName","attributes","globalLocations","getExtension","createTextureSwitcher","gl","activeTextureMap","_switchTexture","samplerIndex","texture","has","cacheInfo","activeTexture","bindTexture","switchTexture","switchCubeTexture","createTextureFromTarget","targets","createTexture","bindTarget","dataSize","setParameters","mipLevel","Element","texImage2D","createCubeTextureFromTarget","mipTarget","faceTarget","textureSetterSimple","_opts","isPowerOf2","flipY","pixelStorei","useMips","generateMipmap","texParameteri","wrapS","wrapT","filterMin","filterMag","createSimpleTextureFromTarget","alpha","nextHighestPowerOfTwo","defaultSampler","getBasePath","path","idx1","lastIndexOf","idx2","GltfExtensions","loadAssets","coreData","config","extensionsUsed","extensions","jsonData","basePath","imageUrls","brdf","cubeMaps","cubeMapName","urls","list","imageFutures","ldrs","ldr","imageMap","ibl","createData","assets","colorSpace","useLod","images","faces","mipLevels","faceIndex","createScene","originalScene","scene","createNode","originalNode","initialShaderConfig_Primitive","originalIds","shaderConfig","runtimeShaderConfig_Primitive","initialShaderConfig_Scene","runtimeShaderConfig_Scene","getShaderSource","sceneShaderconfig","primitiveShaderConfig","source","defines","defineString","vertex","fragment","lights","nodeConfig","originalLight","directional","point","spot","color","from","intensity","innerConeAngle","outerConeAngle","angleScale","angleOffset","nPointLights","nDirectionalLights","nSpotLights","sceneShaderConfig","warn","fs","LIGHTS_VARS","LIGHTS_FUNCS","dLen","pLen","sLen","GLTF_PARSE_LoadDataAssets","glbBuffers","ext","acc","uri","image","mimeType","arrayBufferView","Blob","urlCreator","createObjectURL","bufferViewId","bufferId","loadImages","imageElements","GLTF_PARSE_CreateData","textures","textureMap","textureId","sampler","samplers","defaultColorSpace","materials","material","emissiveTexture","index","normalTexture","occlusionTexture","pbrMetallicRoughness","baseColorTexture","metallicRoughnessTexture","display","check","naturalWidth","naturalHeight","document","createElement","getContext","drawImage","wTexture","GLTF_PARSE_createTextures","bufferViewInfo","accessorLookup","indicesList","meshes","mesh","primitives","isElements","strategy","normalized","rendererBufferId","bvInfo","usagePattern","vaoIdLookup","GLTF_PARSE_createAttributes","animationId","channels","channel","toLowerCase","timeAccessor","input","timings","valuesAccessor","subarray","shaders","original","initConfig","utf8ArrayToStr","charCache","charFromCodePt","fromCodePoint","fromCharCode","codePt","byte1","buffLen","getJsonFromArrayBuffer","aBuffer","bytes","TextDecoder","decode","getChunk","dv","DataView","chunkLength","getUint32","chunkType","chunkStart","chunkEnd","chunkData","GLTF_PARSE_getOriginalFromArrayBuffer","magic","GLTF_PARSE_isBinaryFile","gltfEndOffset","bin","endOffset","_vaoIdCounter","attributeShaderNameLookup","POSITION","NORMAL","TANGENT","TEXCOORD_0","COLOR_0","JOINTS_0","WEIGHTS_0","GLTF_PARSE_sortPrimitiveAttributeKeys","ORDER","oa","ob","GLTF_PARSE_getPrimitiveAttributeKeys","originalPrimitive","GLTF_PARSE_createPrimitives","meshPrimitives","nodeId","primitiveIdx","vaoId","vao","elementBufferId","attributeKey","attributeName","getLocationInRenderer","morphIndex","aMorph","sym","vertexArrays","_primitive","drawKind","drawMode","elementsId","attributeKeys","arrayCount","materialId","_m","metallicRoughnessValues","baseColorFactor","metallicFactor","roughnessFactor","baseColorSamplerIndex","metallicRoughnessSamplerIndex","normal","strength","occlusion","emissiveSamplerIndex","emissiveFactor","alphaMode","doubleSided","alphaCutoff","meshId","primitiveId","hasAttribute","attr","nMorphWeights","nPositionMorphs","nNormalMorphs","nTangentMorphs","nSkinJoints","skin","skins","joints","hasNormalAttributes","hasTangentAttributes","hasUvAttributes","hasColorAttributes","hasBaseColorMap","hasNormalMap","hasEmissiveMap","hasMetalRoughnessMap","hasOcclusionMap","manualSRGB","fastSRGB","getCoreInitialShaderConfig_Primitive","GLTF_PARSE_getNodes","skinLookup","originalSkin","skinId","inverseBindMatrices","numbers","skeletonRootId","skinData","originalNodeId","joint","inverseBindMatrix","skeleton","GLTF_PARSE_createSkins","getGltfNode","baseNode","nodeTrsProp","originalCamera","orthographic","cameras","cameraIndex","finalNode","UNIFORM_TYPE","createUniforms","activateShader","uniformLocations","uniformValues","uniformSingleValues","uniformMatrixTranspose","getLocation","uName","program","getUniformLocation","validLocation","loc","_isEqual","_assignCacheValues","uType","Int32Array","_setSingleValue","setterFn","_setValues","_setMatrixValues","setters","uniform1f","uniform1fv","uniform1i","uniform1iv","uniform2f","uniform2fv","uniform2i","uniform2iv","uniform3f","uniform3fv","uniform3i","uniform3iv","uniform4f","uniform4fv","uniform4i","uniform4iv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","hasLocation","current","_activateShader","shaderId","useProgram","createShader","vShader","fShader","createProgram","WebGLShader","deleteShader","deleteProgram","loadShader","shaderType","sourceText","shader","shaderSource","compileShader","getShaderParameter","errorMessage","getShaderInfoLog","attachShader","bindAttribLocation","linkProgram","getProgramParameter","getProgramInfoLog","_compileShader","uniforms","baseArray","morphsArray","skinArray","lightsArray","hashBooleans32","getShaderSource$2","getCoreShaderSource","getCoreVertexShader","vs","MORPH_VARS","MORPH_FUNCS","weightIndex","createMorphs","nMorphs","aTarget","SKIN_JOINT_COUNT","_scratchVec3","_cacheLights","renderScene","shaderGroupByAlpha","renderThunksByShader","meshList","lightList","skinMatrices","getHashForScene","sceneConfig","primitiveConfig","unlit","shaderKey","shaderHash","getOrGenerateShader","shaderGroup","thunk","glToggle","diffuse","specular","assignMeshTexture","textureInfo","activate","elementsAccessor","drawElements","drawArrays","Set","glDepthFunc","glBlendFunc","render","_render","shaderGroups","gltf_updateShaderConfigs","gltf_load","bridge","_allNodes","_data","getAllNodes","getData","getOriginalScene","sceneNumber","allNodes","scenes","sceneList","GLTF_PARSE_createScene","getCameraNode","loadFile","start","gltf_updateNodeTransforms","updatedNodes","gltf_setJointTransforms","gltf_findNodeByOriginalId","nodeOrNodes","fullTree","jointList","getJointList","getSkeletonRootTransform","find","pos","inverseRootMatrix","jMat","meshNode","jointIds","delete","gltf_updateScene","animate","frameTs","createAttributes","currentBuffer","currentTarget","_perShaderCache","_globalCache","activateElements","bindBuffer","getLocationInShader","getAttribLocation","activateData","vertexAttribPointer","enableVertexAttribArray","createWebGlBuffers","infoMap","bData","createBuffer","bufferData","makeFramebufferPicker","renderBuffer","createRenderbuffer","bindRenderbuffer","renderbufferStorage","frameBuffer","createFramebuffer","bindFramebuffer","framebufferTexture2D","framebufferRenderbuffer","unbind","readPixel","readout","readPixels","deleteFramebuffer","deleteRenderbuffer","deleteTexture","bits","createVertexArrays","_cache","currentSym","_bind","bindVertexArrayOES","bindVertexArray","_activate","force","createVertexArrayOES","createVertexArray","release","getVersionString","getParameter","_isNumber","chr","getMajorVersion","numberString","charAt","parseInt","createWebGlRenderer","contextAttributes","_gl","lastScreenSize","flagMap","extensionMap","extName","depthFunc","_sFactor","_dFactor","textureSwitcher","resize","setAttribute","viewport","drawingBufferWidth","drawingBufferHeight","setting","flag","enable","disable","func","sFactor","dFactor","blendFunc","sanctuaryDef","sanctuaryMaybe","sanctuaryPair","Maybe","Pair","Descending","Sum","Nil","Cons","DescendingType","UnaryType","typeEq","extract","Type","Function","get_","toObject","invoke0","invoke1","typeIdent","TypeVariable","UnaryTypeVariable","BinaryTypeVariable","$Either","$Maybe","maybe","$Pair","pair","fst","snd","TypeRep","AnyFunction","_test","Options","RecordType","Any","def","is","MaybeType","PairType","consts","types","impl","unchecked","filterable","functor","initial","foldable","curry2","curry3","curry4","isJust","toMaybe","maybe_","justs","maybes","eitherToMaybe","encaseEither","encaseEither2","encaseEither3","not","ifElse","unfoldr","zipWith","ys","singleton","strMap","mult","requiredNonCapturingGroup","NonNegativeInteger","gte","Category","empty","Monoid","Group","Filterable","Predicate","takeWhile","dropWhile","flip","mapLeft","promap","Profunctor","Plus","Foldable","traverse","Applicative","Traversable","sequence","lift2","lift3","apFirst","apSecond","extend","Extend","duplicate","Comonad","contramap","Contravariant","curry5","compose","Semigroupoid","pipe","pipeK","isNothing","fromMaybe","fromMaybe_","Thunk","maybeToNullable","Nullable","mapMaybe","maybeToEither","fromEither","toEither","lefts","rights","tagBy","complement","when","unless","allPass","preds","anyPass","Integer","end","fromIdx","toIdx","last","take","takeLast","drop","dropLast","append","prepend","joinWith","elem","foldMap","range","groupBy","active","reverse","sortBy","zip","props","gets","StrMap","insert","remove","pairs","fromPairs","ValidNumber","FiniteNumber","sum","product","NonZeroFiniteNumber","exp","mean","total","even","odd","parseDate","ValidDate","validFloatRepr","parseFloat","Radix","NullaryType","radix","charset","parseJson","Match","toMatch","ss","withRegex","lastIndex","regex","RegexFlags","flags","regexEscape","NonGlobalRegExp","matchAll","GlobalRegExp","toUpper","toLower","trim","stripPrefix","prefix","stripSuffix","suffix","words","unwords","lines","unlines","splitOn","splitOnRegex","Array2","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","marker","Item","nextTick","title","browser","argv","versions","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","List","concat_","constant","forEachKey","sameType","iterationNext","iterationDone","dependencies","every","Constructor","Value","_funcPath","allowInheritedProps","_x","funcPath","implPath","implementations","functionName","_name","requirements","getBoundMethod","typeClass","methods","Monad","Alternative","Array$of","Array$prototype$equals","Array$prototype$lte","Array$prototype$concat","Object$prototype$concat","Null","fantasy-land/equals","fantasy-land/lte","Undefined","ignoreCase","multiline","sticky","unicode","fantasy-land/empty","fantasy-land/concat","fantasy-land/of","fantasy-land/chainRec","todo","more","steps","fantasy-land/zero","fantasy-land/filter","Arguments","theseKeys","otherKeys","applicative","fantasy-land/id","fantasy-land/compose","semigroupoid","fantasy-land/promap","profunctor","fantasy-land/contramap","contravariant","$pairs","bifunctor","applyF","applyX","chain_","rs","fx","lte_","traversable","extend_","group","monoid","comonad","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","always2","isEmpty","isPrefix","candidate","separator","memberOf","strRepeat","times","sortedKeys","stripOutermostParens","toMarkdownList","trimTrailingSpaces","bool","wrap","parenthesize","stripNamespace","_Type","validate","propPath","extractor","BINARY","FUNCTION","INCONSISTENT","NO_ARGUMENTS","NULLARY","RECORD","UNARY","UNKNOWN","VARIABLE","Inconsistent","NoArguments","typeofEq","typeof_","functionUrl","NullaryTypeWithUrl","UnaryTypeWithUrl","_1","Array_","Array0","Array1","_2","array2","Boolean_","Date_","Error_","isFinite","augmentThunk","Function_","_types","$keys","$types","inner","RegExp_","HtmlElement","NegativeFiniteNumber","NegativeInteger","NegativeNumber","Number_","NonEmpty","NonZeroInteger","NonZeroValidNumber","nullable","Object_","PositiveFiniteNumber","PositiveInteger","PositiveNumber","members","EnumType","String_","Symbol_","Unchecked","_create","numArgs","expandUnknown","_determineActualTypes","seen$","fromUnaryType","$1","xprod","$2","isConsistent","determineActualTypesLoose","updateTypeVarMap","typeVarMap","typeVar","$typeVarMap","typeVarName","$entry","valuesByPath","isNullaryTypeVar","isValid","expandUnknownStrict","satisfactoryTypes","typeInfo","expType","recur","invalidValue","constraints","typeClasses","typeClassConstraintViolation","typeVarMap$","okTypes","typeVarConstraintViolation","$1s","$2s","CheckedNullaryType","CheckedUnaryType","CheckedBinaryType","specialize","CheckedEnumType","fields","reprs","missing","CheckedRecordType","CheckedTypeVariable","CheckedUnaryTypeVariable","CheckedBinaryTypeVariable","invalidArgumentsCount","numArgsExpected","index_","constraintsRepr","$reprs","typeVarNames","showTypeWith","names","code","charCodeAt","showTypeQuoted","showValuesAndTypes","showType","typeSignature","arity","_underline","formatType3","underlineConstraint","formatType5","formatType4","label","delta","counter","carets","repr","parenthesized","resolvePropPath","formatType6","indexedPropPath","propPath_","indexedPropPath_","see","record","tvn","tc","values_","underlinedTypeVars","paths","$valuesByPath","assertRight","withTypeChecking","wrapFunctionCond","_typeVarMap","checkValue","wrapped","wrapNext","_values","expTypes","fromUncheckedUnaryType","typeConstructor","Nothing$prototype","Nothing$prototype$show","Just$prototype","Just$prototype$show","just","Just$prototype$equals","Just$prototype$lte","Just$prototype$concat","Pair$prototype$show","fantasy-land/extract","Pair$prototype$equals","Pair$prototype$lte","Pair$prototype$concat","Pair$prototype$ap","Pair$prototype$chain","MESSAGE","WorkerLoaderCommand","INIT","READY","WorkerCommand","SCENE_PING","SCENE_PONG","TICK","RENDER","MyWorker","pure3d_1","Utils_1","Worker_Types_1","Renderer_1","Scene_Prep_1","fluture_1","getCompileFlags","buildVersion","buildMode","isProduction","createRenderer","loadWorker","worker","gltfBridge","onPong","cmd","removeEventListener","startRenderCycle","postMessage","prepScene","readyForUpdate","tick","requestAnimationFrame","Worker","_head","_tail","_capacityMask","_list","_fromArray","peekAt","peek","peekFront","peekBack","item","_growArray","_shrinkArray","removeOne","removed","del_count","toArray","splice","temp","arg_len","arguments_index","leng","_copyArray","fullCopy","newArray","isBinary","invalidContext","Repr","INNERTYPE","OUTERTYPE","identifier","INNERNAME","OUTERNAME","Concurrently","isInner","isOuter","construct","proto","mzero","eval","readUInt8","ctor","superCtor","super_","writable","configurable","TempCtor","__export","onInitial","initWorker","nothingFn","justFn","value0","getMaybeValue","backgroundColor","getElementById","appendChild","clearColor","innerWidth","innerHeight","Camera_1","createCamera","gl_matrix_1","cameraLook","cameraUp"],"mappings":"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","file":"io.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 26);\n","/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n","import * as glMatrix from \"./common.js\"\n\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nexport function fromValues(m00, m01, m10, m11) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    let a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n\n  // Calculate the determinant\n  let det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] =  a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] =  a0 * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  let a0 = a[0];\n  out[0] =  a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] =  a0;\n\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n}\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix\n * @param {mat2} D the diagonal matrix\n * @param {mat2} U the upper triangular matrix\n * @param {mat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2]/a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2x3 Matrix\n * @module mat2d\n *\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nexport function fromValues(a, b, c, d, tx, ty) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function invert(out, a) {\n  let aa = a[0], ab = a[1], ac = a[2], ad = a[3];\n  let atx = a[4], aty = a[5];\n\n  let det = aa * ad - ab * ac;\n  if(!det){\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nexport function translate(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}\n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n}\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b00 = b[0], b01 = b[1], b02 = b[2];\n  let b10 = b[3], b11 = b[4], b12 = b[5];\n  let b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a03 = a[3];\n    let a12 = a[6], a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0], by = -a[1], bz = -a[2], bw = a[3],\n  ax = a[4], ay = a[5], az = a[6], aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2), nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = (2 * far * near) * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  let len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  len = x0*x0 + x1*x1 + x2*x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2];\n  let bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let x = a[0], y = a[1], z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    let uvx = qy * z - qz * y,\n        uvy = qz * x - qx * z,\n        uvz = qx * y - qy * x;\n    // var uuv = vec3.cross([], qvec, uv);\n    let uuvx = qy * uvz - qz * uvy,\n        uuvy = qz * uvx - qx * uvz,\n        uuvz = qx * uvy - qy * uvx;\n    // vec3.scale(uv, uv, 2 * w);\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let tempA = fromValues(a[0], a[1], a[2]);\n  let tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  let cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2];\n  let b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  let x = a[0], y = a[1], z = a[2];\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\"\nimport * as mat3 from \"./mat3.js\"\nimport * as vec3 from \"./vec3.js\"\nimport * as vec4 from \"./vec4.js\"\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  let rad = Math.acos(q[3]) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  let x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > glMatrix.EPSILON ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Generates a random quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  let u1 = glMatrix.RANDOM();\n  let u2 = glMatrix.RANDOM();\n  let u3 = glMatrix.RANDOM();\n\n  let sqrt1MinusU1 = Math.sqrt(1 - u1);\n  let sqrtU1 = Math.sqrt(u1);\n\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  let invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if ( m[4] > m[0] )\n      i = 1;\n    if ( m[8] > m[i*3+i] )\n      i = 2;\n    let j = (i+1)%3;\n    let k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n    let halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function() {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.fromValues(1,0,0);\n  let yUnitVec3 = vec3.fromValues(0,1,0);\n\n  return function(out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  let temp1 = create();\n  let temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function() {\n  let matr = mat3.create();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\nexport function create() {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n  dq[3] = 1;\n  return dq;\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function clone(a) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  let ax = x2 * 0.5,\n    ay = y2 * 0.5,\n    az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q quaternion\n * @param {vec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotationTranslation(out, q, t) {\n  let ax = t[0] * 0.5,\n    ay = t[1] * 0.5,\n    az = t[2] * 0.5,\n    bx = q[0],\n    by = q[1],\n    bz = q[2],\n    bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Creates a dual quat from a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {vec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {mat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  let outer = quat.create();\n  mat4.getRotation(outer, a);\n  let t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} real part\n */\nexport const getReal = quat.copy;\n\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} dual part\n */\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\nexport const setReal = quat.copy;\n\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {quat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\nexport function getTranslation(out, a) {\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to translate\n * @param {vec3} v vector to translate by\n * @returns {quat2} out\n */\nexport function translate(out, a, v) {\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3],\n    bx1 = v[0] * 0.5,\n    by1 = v[1] * 0.5,\n    bz1 = v[2] * 0.5,\n    ax2 = a[4],\n    ay2 = a[5],\n    az2 = a[6],\n    aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateX(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateY(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateZ(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {quat} q quaternion to rotate by\n * @returns {quat2} out\n */\nexport function rotateByQuatAppend(out, a, q) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat} q quaternion to rotate by\n * @param {quat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\nexport function rotateByQuatPrepend(out, q, a) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    bx = a[0],\n    by = a[1],\n    bz = a[2],\n    bw = a[3];\n\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {vec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n  let axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  let bx = s * axis[0] / axisLength;\n  let by = s * axis[1] / axisLength;\n  let bz = s * axis[2] / axisLength;\n  let bw = Math.cos(rad);\n\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n\n  return out;\n}\n\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n * @function\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n */\nexport function multiply(out, a, b) {\n  let ax0 = a[0],\n    ay0 = a[1],\n    az0 = a[2],\n    aw0 = a[3],\n    bx1 = b[4],\n    by1 = b[5],\n    bz1 = b[6],\n    bw1 = b[7],\n    ax1 = a[4],\n    ay1 = a[5],\n    az1 = a[6],\n    aw1 = a[7],\n    bx0 = b[0],\n    by0 = b[1],\n    bz0 = b[2],\n    bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = quat.dot;\n\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\nexport function lerp(out, a, b, t) {\n  let mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\nexport function invert(out, a) {\n  let sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Calculates the length of a dual quat\n *\n * @param {quat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\nexport const length = quat.length;\n\n/**\n * Alias for {@link quat2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {quat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = quat.squaredLength;\n\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\nexport function normalize(out, a) {\n  let magnitude = squaredLength(a);\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n\n    let a0 = a[0] / magnitude;\n    let a1 = a[1] / magnitude;\n    let a2 = a[2] / magnitude;\n    let a3 = a[3] / magnitude;\n\n    let b0 = a[4];\n    let b1 = a[5];\n    let b2 = a[6];\n    let b3 = a[7];\n\n    let a_dot_b = (a0 * b0) + (a1 * b1) + (a2 * b2) + (a3 * b3);\n\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n\n    out[4] = (b0 - (a0 * a_dot_b)) / magnitude;\n    out[5] = (b1 - (a1 * a_dot_b)) / magnitude;\n    out[6] = (b2 - (a2 * a_dot_b)) / magnitude;\n    out[7] = (b3 - (a3 * a_dot_b)) / magnitude;\n  }\n  return out;\n}\n\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {quat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat2} a the first dual quaternion.\n * @param {quat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n    a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {quat2} a the first dual quat.\n * @param {quat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3],\n    a4 = a[4],\n    a5 = a[5],\n    a6 = a[6],\n    a7 = a[7];\n  let b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)));\n}\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  if(glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nexport function round (out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x*x + y*y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength (a) {\n  var x = a[0],\n    y = a[1];\n  return x*x + y*y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x*x + y*y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  let p0 = a[0] - b[0],\n  p1 = a[1] - b[1],\n  sinC = Math.sin(c),\n  cosC = Math.cos(c);\n  \n  //perform rotation and translate to correct position\n  out[0] = p0*cosC - p1*sinC + b[0];\n  out[1] = p0*sinC + p1*cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let x1 = a[0],\n    y1 = a[1],\n    x2 = b[0],\n    y2 = b[1];\n  \n  let len1 = x1*x1 + y1*y1;\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n  \n  let len2 = x2*x2 + y2*y2;\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n  \n  let cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n  \n  \n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1];\n  let b0 = b[0], b1 = b[1];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 2;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('sanctuary-show'), require('sanctuary-type-identifiers'), require('denque'), require('sanctuary-type-classes'), require('concurrify')) :\n  typeof define === 'function' && define.amd ? define(['sanctuary-show', 'sanctuary-type-identifiers', 'denque', 'sanctuary-type-classes', 'concurrify'], factory) :\n  (global.Fluture = factory(global.sanctuaryShow,global.sanctuaryTypeIdentifiers,global.Denque,global.sanctuaryTypeClasses,global.concurrify));\n}(this, (function (show,type,Denque,Z,concurrify) { 'use strict';\n\n  show = show && show.hasOwnProperty('default') ? show['default'] : show;\n  type = type && type.hasOwnProperty('default') ? type['default'] : type;\n  Denque = Denque && Denque.hasOwnProperty('default') ? Denque['default'] : Denque;\n  Z = Z && Z.hasOwnProperty('default') ? Z['default'] : Z;\n  concurrify = concurrify && concurrify.hasOwnProperty('default') ? concurrify['default'] : concurrify;\n\n  function noop(){}\n  function moop(){ return this }\n  function padf(sf, s){ return s.replace(/^/gm, sf).replace(sf, '') }\n  function showf(f){ return padf('  ', show(f)) }\n\n  function partial1(f, a){\n    return function bound1(b, c, d){\n      switch(arguments.length){\n        case 1: return f(a, b);\n        case 2: return f(a, b, c);\n        default: return f(a, b, c, d);\n      }\n    };\n  }\n\n  function partial2(f, a, b){\n    return function bound2(c, d){\n      return arguments.length === 1 ? f(a, b, c) : f(a, b, c, d);\n    };\n  }\n\n  function partial3(f, a, b, c){\n    return function bound3(d){\n      return f(a, b, c, d);\n    };\n  }\n\n  function raise(x){\n    throw x;\n  }\n\n  function indent(s){\n    return '  ' + s;\n  }\n\n  var FL = {\n    map: 'fantasy-land/map',\n    bimap: 'fantasy-land/bimap',\n    chain: 'fantasy-land/chain',\n    chainRec: 'fantasy-land/chainRec',\n    ap: 'fantasy-land/ap',\n    of: 'fantasy-land/of',\n    zero: 'fantasy-land/zero'\n  };\n\n  var ordinal = ['first', 'second', 'third', 'fourth', 'fifth'];\n\n  var namespace = 'fluture';\n  var name = 'Future';\n  var version = 4;\n\n  var $$type = namespace + '/' + name + '@' + version;\n\n  function error(message){\n    return new Error(message);\n  }\n\n  function typeError(message){\n    return new TypeError(message);\n  }\n\n  function invalidArgument(it, at, expected, actual){\n    return typeError(\n      it + ' expects its ' + ordinal[at] + ' argument to ' + expected + '\\n  Actual: ' + show(actual)\n    );\n  }\n\n  function invalidContext(it, actual){\n    return typeError(\n      it + ' was invoked outside the context of a Future. You might want to use'\n    + ' a dispatcher instead\\n  Called on: ' + show(actual)\n    );\n  }\n\n  function invalidNamespace(m, x){\n    return (\n      'The Future was not created by ' + namespace + '. '\n    + 'Make sure you transform other Futures to ' + namespace + ' Futures. '\n    + 'Got ' + (x ? ('a Future from ' + x) : 'an unscoped Future') + '.'\n    + '\\n  See: https://github.com/fluture-js/Fluture#casting-futures'\n    );\n  }\n\n  function invalidVersion(m, x){\n    return (\n      'The Future was created by ' + (x < version ? 'an older' : 'a newer')\n    + ' version of ' + namespace + '. '\n    + 'This means that one of the sources which creates Futures is outdated. '\n    + 'Update this source, or transform its created Futures to be compatible.'\n    + '\\n  See: https://github.com/fluture-js/Fluture#casting-futures'\n    );\n  }\n\n  function invalidFuture(it, at, m, s){\n    var id = type.parse(type(m));\n    var info = id.name === name ? '\\n' + (\n      id.namespace !== namespace ? invalidNamespace(m, id.namespace)\n    : id.version !== version ? invalidVersion(m, id.version)\n    : 'Nothing seems wrong. Contact the Fluture maintainers.') : '';\n    return typeError(\n      it + ' expects ' + (ordinal[at] ? 'its ' + ordinal[at] + ' argument to be a valid Future' : at)\n    + '.' + info + '\\n  Actual: ' + show(m) + ' :: ' + id.name + (s || '')\n    );\n  }\n\n  function valueToError(x){\n    var name$$1, message;\n    try{\n      if(x && typeof x.name === 'string' && typeof x.message === 'string'){\n        name$$1 = x.name;\n        message = x.message;\n      }else{\n        name$$1 = 'Non-Error';\n        message = show(x);\n      }\n    }catch (_){\n      name$$1 = 'Something';\n      message = '<The value which was thrown could not be converted to string>';\n    }\n    var e = error(\n      name$$1 + ' occurred while running a computation for a Future:\\n\\n' +\n      message.split('\\n').map(indent).join('\\n')\n    );\n    return e;\n  }\n\n  function throwInvalidArgument(it, at, expected, actual){\n    throw invalidArgument(it, at, expected, actual);\n  }\n\n  function throwInvalidContext(it, actual){\n    throw invalidContext(it, actual);\n  }\n\n  function throwInvalidFuture(it, at, m, s){\n    throw invalidFuture(it, at, m, s);\n  }\n\n  function isFunction(f){\n    return typeof f === 'function';\n  }\n\n  function isThenable(m){\n    return m instanceof Promise || Boolean(m) && isFunction(m.then);\n  }\n\n  function isBoolean(f){\n    return typeof f === 'boolean';\n  }\n\n  function isNumber(f){\n    return typeof f === 'number';\n  }\n\n  function isUnsigned(n){\n    return (n === Infinity || isNumber(n) && n > 0 && n % 1 === 0);\n  }\n\n  function isObject(o){\n    return o !== null && typeof o === 'object';\n  }\n\n  function isIterator(i){\n    return isObject(i) && isFunction(i.next);\n  }\n\n  function isArray(x){\n    return Array.isArray(x);\n  }\n\n  /* eslint no-param-reassign:0 */\n\n  var nil = {head: null};\n  nil.tail = nil;\n\n  function cons(head, tail){\n    return {head: head, tail: tail};\n  }\n\n  /*eslint no-cond-assign:0, no-constant-condition:0 */\n\n  function interpretSequence(seq, rec, rej, res){\n\n    //This is the primary queue of actions. All actions in here will be \"cold\",\n    //meaning they haven't had the chance yet to run concurrent computations.\n    var queue = new Denque();\n\n    //These combined variables define our current state.\n    // future  = the future we are currently forking\n    // action  = the action to be informed when the future settles\n    // cancel  = the cancel function of the current future\n    // settled = a boolean indicating whether a new tick should start\n    // async   = a boolean indicating whether we are awaiting a result asynchronously\n    var future, action, cancel = noop, stack = nil, settled, async = true, it;\n\n    //Pushes a new action onto the stack. The stack is used to keep \"hot\"\n    //actions. The last one added is the first one to process, because actions\n    //are pushed right-to-left (see warmupActions).\n    function pushStack(x){\n      stack = cons(x, stack);\n    }\n\n    //Takes the leftmost action from the stack and returns it.\n    function popStack(){\n      var x = stack.head;\n      stack = stack.tail;\n      return x;\n    }\n\n    //This function is called with a future to use in the next tick.\n    //Here we \"flatten\" the actions of another Sequence into our own actions,\n    //this is the magic that allows for infinitely stack safe recursion because\n    //actions like ChainAction will return a new Sequence.\n    //If we settled asynchronously, we call drain() directly to run the next tick.\n    function settle(m){\n      settled = true;\n      future = m;\n\n      if(future._spawn){\n        var tail = future._actions;\n\n        while(tail !== nil){\n          queue.unshift(tail.head);\n          tail = tail.tail;\n        }\n\n        future = future._spawn;\n      }\n\n      if(async) drain();\n    }\n\n    //This function serves as a rejection handler for our current future.\n    //It will tell the current action that the future rejected, and it will\n    //settle the current tick with the action's answer to that.\n    function rejected(x){\n      settle(action.rejected(x));\n    }\n\n    //This function serves as a resolution handler for our current future.\n    //It will tell the current action that the future resolved, and it will\n    //settle the current tick with the action's answer to that.\n    function resolved(x){\n      settle(action.resolved(x));\n    }\n\n    //This function is passed into actions when they are \"warmed up\".\n    //If the action decides that it has its result, without the need to await\n    //anything else, then it can call this function to force \"early termination\".\n    //When early termination occurs, all actions which were queued prior to the\n    //terminator will be skipped. If they were already hot, they will also receive\n    //a cancel signal so they can cancel their own concurrent computations, as\n    //their results are no longer needed.\n    function early(m, terminator){\n      cancel();\n      queue.clear();\n\n      if(async && action !== terminator){\n        action.cancel();\n        while((it = popStack()) && it !== terminator) it.cancel();\n      }\n\n      settle(m);\n    }\n\n    //This will cancel the current Future, the current action, and all queued hot actions.\n    function Sequence$cancel(){\n      cancel();\n      action && action.cancel();\n      while(it = popStack()) it.cancel();\n    }\n\n    //This function is called when an exception is caught.\n    function exception(e){\n      Sequence$cancel();\n      rec(e);\n    }\n\n    //This function serves to kickstart concurrent computations.\n    //Takes all actions from the cold queue *back-to-front*, and calls run() on\n    //each of them, passing them the \"early\" function. If any of them settles (by\n    //calling early()), we abort. After warming up all actions in the cold queue,\n    //we warm up the current action as well.\n    function warmupActions(){\n      while(it = queue.pop()){\n        it = it.run(early);\n        if(settled) return;\n        pushStack(it);\n      }\n      action = action.run(early);\n    }\n\n    //This function represents our main execution loop.\n    //When we refer to a \"tick\", we mean the execution of the body inside the\n    //primary while-loop of this function.\n    //Every tick follows the following algorithm:\n    // 1. We try to take an action from the cold queue, if we fail, go to step 2.\n    //      1a. We fork the future.\n    //      1b. We warmupActions() if the we haven't settled yet.\n    // 2. We try to take an action from the hot queue, if we fail, go to step 3.\n    //      2a. We fork the Future, if settles, we continue to the next tick.\n    // 3. If we couldn't take actions from either queues, we fork the Future into\n    //    the user provided continuations. This is the end of the interpretation.\n    // 4. If we did take an action from one of queues, but none of the steps\n    //    caused a settle(), it means we are asynchronously waiting for something\n    //    to settle and start the next tick, so we return from the function.\n    function drain(){\n      async = false;\n\n      while(true){\n        settled = false;\n        if(action = queue.shift()){\n          cancel = future._interpret(exception, rejected, resolved);\n          if(!settled) warmupActions();\n        }else if(action = popStack()){\n          cancel = future._interpret(exception, rejected, resolved);\n        }else break;\n        if(settled) continue;\n        async = true;\n        return;\n      }\n\n      cancel = future._interpret(exception, rej, res);\n    }\n\n    //Start the execution loop.\n    settle(seq);\n\n    //Return the cancellation function.\n    return Sequence$cancel;\n\n  }\n\n  function Future$value$rej(x){\n    raise(error(\n      'Future#value was called on a rejected Future\\n' +\n      '  Actual: Future.reject(' + show(x) + ')'\n    ));\n  }\n\n  function Future$onCrash(x){\n    raise(valueToError(x));\n  }\n\n  function Future(computation){\n    if(!isFunction(computation)) throwInvalidArgument('Future', 0, 'be a Function', computation);\n    return new Computation(computation);\n  }\n\n  function isFuture(x){\n    return x instanceof Future || type(x) === $$type;\n  }\n\n  Future['@@type'] = $$type;\n\n  Future.prototype['@@show'] = function Future$show(){\n    return this.toString();\n  };\n\n  Future.prototype[FL.ap] = function Future$FL$ap(other){\n    return other._ap(this);\n  };\n\n  Future.prototype[FL.map] = function Future$FL$map(mapper){\n    return this._map(mapper);\n  };\n\n  Future.prototype[FL.bimap] = function Future$FL$bimap(lmapper, rmapper){\n    return this._bimap(lmapper, rmapper);\n  };\n\n  Future.prototype[FL.chain] = function Future$FL$chain(mapper){\n    return this._chain(mapper);\n  };\n\n  Future.prototype.ap = function Future$ap(other){\n    if(!isFuture(this)) throwInvalidContext('Future#ap', this);\n    if(!isFuture(other)) throwInvalidFuture('Future#ap', 0, other);\n    return this._ap(other);\n  };\n\n  Future.prototype.map = function Future$map(mapper){\n    if(!isFuture(this)) throwInvalidContext('Future#map', this);\n    if(!isFunction(mapper)) throwInvalidArgument('Future#map', 0, 'to be a Function', mapper);\n    return this._map(mapper);\n  };\n\n  Future.prototype.bimap = function Future$bimap(lmapper, rmapper){\n    if(!isFuture(this)) throwInvalidContext('Future#bimap', this);\n    if(!isFunction(lmapper)) throwInvalidArgument('Future#bimap', 0, 'to be a Function', lmapper);\n    if(!isFunction(rmapper)) throwInvalidArgument('Future#bimap', 1, 'to be a Function', rmapper);\n    return this._bimap(lmapper, rmapper);\n  };\n\n  Future.prototype.chain = function Future$chain(mapper){\n    if(!isFuture(this)) throwInvalidContext('Future#chain', this);\n    if(!isFunction(mapper)) throwInvalidArgument('Future#chain', 0, 'to be a Function', mapper);\n    return this._chain(mapper);\n  };\n\n  Future.prototype.mapRej = function Future$mapRej(mapper){\n    if(!isFuture(this)) throwInvalidContext('Future#mapRej', this);\n    if(!isFunction(mapper)) throwInvalidArgument('Future#mapRej', 0, 'to be a Function', mapper);\n    return this._mapRej(mapper);\n  };\n\n  Future.prototype.chainRej = function Future$chainRej(mapper){\n    if(!isFuture(this)) throwInvalidContext('Future#chainRej', this);\n    if(!isFunction(mapper)) throwInvalidArgument('Future#chainRej', 0, 'to be a Function', mapper);\n    return this._chainRej(mapper);\n  };\n\n  Future.prototype.race = function Future$race(other){\n    if(!isFuture(this)) throwInvalidContext('Future#race', this);\n    if(!isFuture(other)) throwInvalidFuture('Future#race', 0, other);\n    return this._race(other);\n  };\n\n  Future.prototype.both = function Future$both(other){\n    if(!isFuture(this)) throwInvalidContext('Future#both', this);\n    if(!isFuture(other)) throwInvalidFuture('Future#both', 0, other);\n    return this._both(other);\n  };\n\n  Future.prototype.and = function Future$and(other){\n    if(!isFuture(this)) throwInvalidContext('Future#and', this);\n    if(!isFuture(other)) throwInvalidFuture('Future#and', 0, other);\n    return this._and(other);\n  };\n\n  Future.prototype.or = function Future$or(other){\n    if(!isFuture(this)) throwInvalidContext('Future#or', this);\n    if(!isFuture(other)) throwInvalidFuture('Future#or', 0, other);\n    return this._or(other);\n  };\n\n  Future.prototype.swap = function Future$swap(){\n    if(!isFuture(this)) throwInvalidContext('Future#ap', this);\n    return this._swap();\n  };\n\n  Future.prototype.fold = function Future$fold(lmapper, rmapper){\n    if(!isFuture(this)) throwInvalidContext('Future#ap', this);\n    if(!isFunction(lmapper)) throwInvalidArgument('Future#fold', 0, 'to be a Function', lmapper);\n    if(!isFunction(rmapper)) throwInvalidArgument('Future#fold', 1, 'to be a Function', rmapper);\n    return this._fold(lmapper, rmapper);\n  };\n\n  Future.prototype.finally = function Future$finally(other){\n    if(!isFuture(this)) throwInvalidContext('Future#finally', this);\n    if(!isFuture(other)) throwInvalidFuture('Future#finally', 0, other);\n    return this._finally(other);\n  };\n\n  Future.prototype.lastly = function Future$lastly(other){\n    if(!isFuture(this)) throwInvalidContext('Future#lastly', this);\n    if(!isFuture(other)) throwInvalidFuture('Future#lastly', 0, other);\n    return this._finally(other);\n  };\n\n  Future.prototype.fork = function Future$fork(rej, res){\n    if(!isFuture(this)) throwInvalidContext('Future#fork', this);\n    if(!isFunction(rej)) throwInvalidArgument('Future#fork', 0, 'to be a Function', rej);\n    if(!isFunction(res)) throwInvalidArgument('Future#fork', 1, 'to be a Function', res);\n    return this._interpret(Future$onCrash, rej, res);\n  };\n\n  Future.prototype.forkCatch = function Future$fork(rec, rej, res){\n    if(!isFuture(this)) throwInvalidContext('Future#fork', this);\n    if(!isFunction(rec)) throwInvalidArgument('Future#fork', 0, 'to be a Function', rec);\n    if(!isFunction(rej)) throwInvalidArgument('Future#fork', 1, 'to be a Function', rej);\n    if(!isFunction(res)) throwInvalidArgument('Future#fork', 2, 'to be a Function', res);\n    return this._interpret(rec, rej, res);\n  };\n\n  Future.prototype.value = function Future$value(res){\n    if(!isFuture(this)) throwInvalidContext('Future#value', this);\n    if(!isFunction(res)) throwInvalidArgument('Future#value', 0, 'to be a Function', res);\n    return this._interpret(Future$onCrash, Future$value$rej, res);\n  };\n\n  Future.prototype.done = function Future$done(callback){\n    if(!isFuture(this)) throwInvalidContext('Future#done', this);\n    if(!isFunction(callback)) throwInvalidArgument('Future#done', 0, 'to be a Function', callback);\n    return this._interpret(Future$onCrash,\n                           function Future$done$rej(x){ callback(x); },\n                           function Future$done$res(x){ callback(null, x); });\n  };\n\n  Future.prototype.promise = function Future$promise(){\n    var _this = this;\n    return new Promise(function Future$promise$computation(res, rej){\n      _this._interpret(Future$onCrash, rej, res);\n    });\n  };\n\n  Future.prototype.isRejected = function Future$isRejected(){\n    return false;\n  };\n\n  Future.prototype.isResolved = function Future$isResolved(){\n    return false;\n  };\n\n  Future.prototype.isSettled = function Future$isSettled(){\n    return this.isRejected() || this.isResolved();\n  };\n\n  Future.prototype.extractLeft = function Future$extractLeft(){\n    return [];\n  };\n\n  Future.prototype.extractRight = function Future$extractRight(){\n    return [];\n  };\n\n  var Core = Object.create(Future.prototype);\n\n  Core._ap = function Core$ap(other){\n    return new Sequence(this)._ap(other);\n  };\n\n  Core._parallelAp = function Core$parallelAp(other){\n    return new Sequence(this)._parallelAp(other);\n  };\n\n  Core._map = function Core$map(mapper){\n    return new Sequence(this)._map(mapper);\n  };\n\n  Core._bimap = function Core$bimap(lmapper, rmapper){\n    return new Sequence(this)._bimap(lmapper, rmapper);\n  };\n\n  Core._chain = function Core$chain(mapper){\n    return new Sequence(this)._chain(mapper);\n  };\n\n  Core._mapRej = function Core$mapRej(mapper){\n    return new Sequence(this)._mapRej(mapper);\n  };\n\n  Core._chainRej = function Core$chainRej(mapper){\n    return new Sequence(this)._chainRej(mapper);\n  };\n\n  Core._race = function Core$race(other){\n    return new Sequence(this)._race(other);\n  };\n\n  Core._both = function Core$both(other){\n    return new Sequence(this)._both(other);\n  };\n\n  Core._and = function Core$and(other){\n    return new Sequence(this)._and(other);\n  };\n\n  Core._or = function Core$or(other){\n    return new Sequence(this)._or(other);\n  };\n\n  Core._swap = function Core$swap(){\n    return new Sequence(this)._swap();\n  };\n\n  Core._fold = function Core$fold(lmapper, rmapper){\n    return new Sequence(this)._fold(lmapper, rmapper);\n  };\n\n  Core._finally = function Core$finally(other){\n    return new Sequence(this)._finally(other);\n  };\n\n  function Computation(computation){\n    this._computation = computation;\n  }\n\n  Computation.prototype = Object.create(Core);\n\n  Computation.prototype._interpret = function Computation$interpret(rec, rej, res){\n    var open = false, cancel = noop, cont = function(){ open = true; };\n    try{\n      cancel = this._computation(function Computation$rej(x){\n        cont = function Computation$rej$cont(){\n          open = false;\n          rej(x);\n        };\n        if(open){\n          cont();\n        }\n      }, function Computation$res(x){\n        cont = function Computation$res$cont(){\n          open = false;\n          res(x);\n        };\n        if(open){\n          cont();\n        }\n      }) || noop;\n    }catch(e){\n      open = false;\n      rec(e);\n      return noop;\n    }\n    if(!(isFunction(cancel) && cancel.length === 0)){\n      rec(typeError(\n        'The computation was expected to return a nullary function or void\\n' +\n        '  Actual: ' + show(cancel)\n      ));\n    }\n    cont();\n    return function Computation$cancel(){\n      if(open){\n        open = false;\n        cancel && cancel();\n      }\n    };\n  };\n\n  Computation.prototype.toString = function Computation$toString(){\n    return 'Future(' + showf(this._computation) + ')';\n  };\n\n  function Rejected(value){\n    this._value = value;\n  }\n\n  Rejected.prototype = Object.create(Core);\n\n  Rejected.prototype._ap = moop;\n  Rejected.prototype._parallelAp = moop;\n  Rejected.prototype._map = moop;\n  Rejected.prototype._chain = moop;\n  Rejected.prototype._race = moop;\n  Rejected.prototype._both = moop;\n  Rejected.prototype._and = moop;\n\n  Rejected.prototype._or = function Rejected$or(other){\n    return other;\n  };\n\n  Rejected.prototype._finally = function Rejected$finally(other){\n    return other._and(this);\n  };\n\n  Rejected.prototype._swap = function Rejected$swap(){\n    return new Resolved(this._value);\n  };\n\n  Rejected.prototype._interpret = function Rejected$interpret(rec, rej){\n    rej(this._value);\n    return noop;\n  };\n\n  Rejected.prototype.isRejected = function Rejected$isRejected(){\n    return true;\n  };\n\n  Rejected.prototype.extractLeft = function Rejected$extractLeft(){\n    return [this._value];\n  };\n\n  Rejected.prototype.toString = function Rejected$toString(){\n    return 'Future.reject(' + show(this._value) + ')';\n  };\n\n  function reject(x){\n    return new Rejected(x);\n  }\n\n  function Resolved(value){\n    this._value = value;\n  }\n\n  Resolved.prototype = Object.create(Core);\n\n  Resolved.prototype._race = moop;\n  Resolved.prototype._mapRej = moop;\n  Resolved.prototype._or = moop;\n\n  Resolved.prototype._and = function Resolved$and(other){\n    return other;\n  };\n\n  Resolved.prototype._both = function Resolved$both(other){\n    var left = this._value;\n    return other._map(function Resolved$both$mapper(right){\n      return [left, right];\n    });\n  };\n\n  Resolved.prototype._swap = function Resolved$swap(){\n    return new Rejected(this._value);\n  };\n\n  Resolved.prototype._finally = function Resolved$finally(other){\n    var value = this._value;\n    return other._map(function Resolved$finally$mapper(){\n      return value;\n    });\n  };\n\n  Resolved.prototype._interpret = function Resolved$interpret(rec, rej, res){\n    res(this._value);\n    return noop;\n  };\n\n  Resolved.prototype.isResolved = function Resolved$isResolved(){\n    return true;\n  };\n\n  Resolved.prototype.extractRight = function Resolved$extractRight(){\n    return [this._value];\n  };\n\n  Resolved.prototype.toString = function Resolved$toString(){\n    return 'Future.of(' + show(this._value) + ')';\n  };\n\n  function of(x){\n    return new Resolved(x);\n  }\n\n  function Never(){\n    this._isNever = true;\n  }\n\n  Never.prototype = Object.create(Future.prototype);\n\n  Never.prototype._ap = moop;\n  Never.prototype._parallelAp = moop;\n  Never.prototype._map = moop;\n  Never.prototype._bimap = moop;\n  Never.prototype._chain = moop;\n  Never.prototype._mapRej = moop;\n  Never.prototype._chainRej = moop;\n  Never.prototype._both = moop;\n  Never.prototype._or = moop;\n  Never.prototype._swap = moop;\n  Never.prototype._fold = moop;\n  Never.prototype._finally = moop;\n\n  Never.prototype._race = function Never$race(other){\n    return other;\n  };\n\n  Never.prototype._interpret = function Never$interpret(){\n    return noop;\n  };\n\n  Never.prototype.toString = function Never$toString(){\n    return 'Future.never';\n  };\n\n  var never = new Never();\n\n  function isNever(x){\n    return isFuture(x) && x._isNever === true;\n  }\n\n  function Crashed(error$$1){\n    this._error = error$$1;\n  }\n\n  Crashed.prototype = Object.create(Future.prototype);\n\n  Crashed.prototype._ap = moop;\n  Crashed.prototype._parallelAp = moop;\n  Crashed.prototype._map = moop;\n  Crashed.prototype._bimap = moop;\n  Crashed.prototype._chain = moop;\n  Crashed.prototype._mapRej = moop;\n  Crashed.prototype._chainRej = moop;\n  Crashed.prototype._both = moop;\n  Crashed.prototype._or = moop;\n  Crashed.prototype._swap = moop;\n  Crashed.prototype._fold = moop;\n  Crashed.prototype._finally = moop;\n  Crashed.prototype._race = moop;\n\n  Crashed.prototype._interpret = function Crashed$interpret(rec){\n    rec(this._error);\n    return noop;\n  };\n\n  function Eager(future){\n    var _this = this;\n    _this.rec = noop;\n    _this.rej = noop;\n    _this.res = noop;\n    _this.crashed = false;\n    _this.rejected = false;\n    _this.resolved = false;\n    _this.value = null;\n    _this.cancel = future._interpret(function Eager$crash(x){\n      _this.value = x;\n      _this.crashed = true;\n      _this.cancel = noop;\n      _this.rec(x);\n    }, function Eager$reject(x){\n      _this.value = x;\n      _this.rejected = true;\n      _this.cancel = noop;\n      _this.rej(x);\n    }, function Eager$resolve(x){\n      _this.value = x;\n      _this.resolved = true;\n      _this.cancel = noop;\n      _this.res(x);\n    });\n  }\n\n  Eager.prototype = Object.create(Core);\n\n  Eager.prototype._interpret = function Eager$interpret(rec, rej, res){\n    if(this.crashed) rec(this.value);\n    else if(this.rejected) rej(this.value);\n    else if(this.resolved) res(this.value);\n    else{\n      this.rec = rec;\n      this.rej = rej;\n      this.res = res;\n    }\n    return this.cancel;\n  };\n\n  var Action = {\n    rejected: function Action$rejected(x){ this.cancel(); return new Rejected(x) },\n    resolved: function Action$resolved(x){ this.cancel(); return new Resolved(x) },\n    run: function Action$run(){ return this },\n    cancel: function Action$cancel(){}\n  };\n\n  function ApAction(other){ this.other = other; }\n  ApAction.prototype = Object.create(Action);\n\n  ApAction.prototype.resolved = function ApAction$resolved(f){\n    return isFunction(f) ?\n           this.other._map(function ApAction$resolved$mapper(x){ return f(x) }) :\n           new Crashed(typeError(\n             'Future#ap expects its first argument to be a Future of a Function'\n             + '\\n  Actual: Future.of(' + show(f) + ')'\n           ));\n  };\n\n  ApAction.prototype.toString = function ApAction$toString(){\n    return 'ap(' + this.other.toString() + ')';\n  };\n\n  function MapAction(mapper){ this.mapper = mapper; }\n  MapAction.prototype = Object.create(Action);\n\n  MapAction.prototype.resolved = function MapAction$resolved(x){\n    var m;\n    try{ m = new Resolved(this.mapper(x)); }catch(e){ m = new Crashed(e); }\n    return m;\n  };\n\n  MapAction.prototype.toString = function MapAction$toString(){\n    return 'map(' + showf(this.mapper) + ')';\n  };\n\n  function BimapAction(lmapper, rmapper){ this.lmapper = lmapper; this.rmapper = rmapper; }\n  BimapAction.prototype = Object.create(Action);\n\n  BimapAction.prototype.rejected = function BimapAction$rejected(x){\n    var m;\n    try{ m = new Rejected(this.lmapper(x)); }catch(e){ m = new Crashed(e); }\n    return m;\n  };\n\n  BimapAction.prototype.resolved = function BimapAction$resolved(x){\n    var m;\n    try{ m = new Resolved(this.rmapper(x)); }catch(e){ m = new Crashed(e); }\n    return m;\n  };\n\n  BimapAction.prototype.toString = function BimapAction$toString(){\n    return 'bimap(' + showf(this.lmapper) + ', ' + showf(this.rmapper) + ')';\n  };\n\n  function ChainAction(mapper){ this.mapper = mapper; }\n  ChainAction.prototype = Object.create(Action);\n\n  ChainAction.prototype.resolved = function ChainAction$resolved(x){\n    var m;\n    try{ m = this.mapper(x); }catch(e){ return new Crashed(e) }\n    return isFuture(m) ? m : new Crashed(invalidFuture(\n      'Future#chain',\n      'the function it\\'s given to return a Future',\n      m,\n      '\\n  From calling: ' + showf(this.mapper) + '\\n  With: ' + show(x)\n    ));\n  };\n\n  ChainAction.prototype.toString = function ChainAction$toString(){\n    return 'chain(' + showf(this.mapper) + ')';\n  };\n\n  function MapRejAction(mapper){ this.mapper = mapper; }\n  MapRejAction.prototype = Object.create(Action);\n\n  MapRejAction.prototype.rejected = function MapRejAction$rejected(x){\n    var m;\n    try{ m = new Rejected(this.mapper(x)); }catch(e){ m = new Crashed(e); }\n    return m;\n  };\n\n  MapRejAction.prototype.toString = function MapRejAction$toString(){\n    return 'mapRej(' + showf(this.mapper) + ')';\n  };\n\n  function ChainRejAction(mapper){ this.mapper = mapper; }\n  ChainRejAction.prototype = Object.create(Action);\n\n  ChainRejAction.prototype.rejected = function ChainRejAction$rejected(x){\n    var m;\n    try{ m = this.mapper(x); }catch(e){ return new Crashed(e) }\n    return isFuture(m) ? m : new Crashed(invalidFuture(\n      'Future#chainRej',\n      'the function it\\'s given to return a Future',\n      m,\n      '\\n  From calling: ' + showf(this.mapper) + '\\n  With: ' + show(x)\n    ));\n  };\n\n  ChainRejAction.prototype.toString = function ChainRejAction$toString(){\n    return 'chainRej(' + showf(this.mapper) + ')';\n  };\n\n  function SwapAction(){}\n  SwapAction.prototype = Object.create(Action);\n\n  SwapAction.prototype.rejected = function SwapAction$rejected(x){\n    return new Resolved(x);\n  };\n\n  SwapAction.prototype.resolved = function SwapAction$resolved(x){\n    return new Rejected(x);\n  };\n\n  SwapAction.prototype.toString = function SwapAction$toString(){\n    return 'swap()';\n  };\n\n  function FoldAction(lmapper, rmapper){ this.lmapper = lmapper; this.rmapper = rmapper; }\n  FoldAction.prototype = Object.create(Action);\n\n  FoldAction.prototype.rejected = function FoldAction$rejected(x){\n    var m;\n    try{ m = new Resolved(this.lmapper(x)); }catch(e){ m = new Crashed(e); }\n    return m;\n  };\n\n  FoldAction.prototype.resolved = function FoldAction$resolved(x){\n    var m;\n    try{ m = new Resolved(this.rmapper(x)); }catch(e){ m = new Crashed(e); }\n    return m;\n  };\n\n  FoldAction.prototype.toString = function FoldAction$toString(){\n    return 'fold(' + showf(this.lmapper) + ', ' + showf(this.rmapper) + ')';\n  };\n\n  function FinallyAction(other){ this.other = other; }\n  FinallyAction.prototype = Object.create(Action);\n\n  FinallyAction.prototype.rejected = function FinallyAction$rejected(x){\n    return this.other._and(new Rejected(x));\n  };\n\n  FinallyAction.prototype.resolved = function FinallyAction$resolved(x){\n    return this.other._map(function FoldAction$resolved$mapper(){ return x });\n  };\n\n  FinallyAction.prototype.cancel = function FinallyAction$cancel(){\n    this.other._interpret(noop, noop, noop)();\n  };\n\n  FinallyAction.prototype.toString = function FinallyAction$toString(){\n    return 'finally(' + this.other.toString() + ')';\n  };\n\n  function AndAction(other){ this.other = other; }\n  AndAction.prototype = Object.create(Action);\n\n  AndAction.prototype.resolved = function AndAction$resolved(){\n    return this.other;\n  };\n\n  AndAction.prototype.toString = function AndAction$toString(){\n    return 'and(' + this.other.toString() + ')';\n  };\n\n  function OrAction(other){ this.other = other; }\n  OrAction.prototype = Object.create(Action);\n\n  OrAction.prototype.rejected = function OrAction$rejected(){\n    return this.other;\n  };\n\n  OrAction.prototype.toString = function OrAction$toString(){\n    return 'or(' + this.other.toString() + ')';\n  };\n\n  function ParallelApAction(other){ this.other = other; }\n  ParallelApAction.prototype = Object.create(ApAction.prototype);\n\n  ParallelApAction.prototype.run = function ParallelApAction$run(early){\n    return new ParallelApActionState(early, this.other);\n  };\n\n  ParallelApAction.prototype.toString = function ParallelApAction$toString(){\n    return '_parallelAp(' + this.other.toString() + ')';\n  };\n\n  function RaceAction(other){ this.other = other; }\n  RaceAction.prototype = Object.create(Action);\n\n  RaceAction.prototype.run = function RaceAction$run(early){\n    return new RaceActionState(early, new Eager(this.other));\n  };\n\n  RaceAction.prototype.toString = function RaceAction$toString(){\n    return 'race(' + this.other.toString() + ')';\n  };\n\n  function BothAction(other){ this.other = other; }\n  BothAction.prototype = Object.create(Action);\n\n  BothAction.prototype.resolved = function BothAction$resolved(x){\n    return this.other._map(function BothAction$resolved$mapper(y){ return [x, y] });\n  };\n\n  BothAction.prototype.run = function BothAction$run(early){\n    return new BothActionState(early, new Eager(this.other));\n  };\n\n  BothAction.prototype.toString = function BothAction$toString(){\n    return 'both(' + this.other.toString() + ')';\n  };\n\n  function ParallelApActionState(early, other){\n    var _this = this;\n    _this.other = new Eager(other);\n    _this.cancel = this.other._interpret(\n      function ParallelApActionState$rec(x){ early(new Crashed(x), _this); },\n      function ParallelApActionState$rej(x){ early(new Rejected(x), _this); },\n      noop\n    );\n  }\n\n  ParallelApActionState.prototype = Object.create(ParallelApAction.prototype);\n\n  function RaceActionState(early, other){\n    var _this = this;\n    _this.other = other;\n    _this.cancel = other._interpret(\n      function RaceActionState$rec(x){ early(new Crashed(x), _this); },\n      function RaceActionState$rej(x){ early(new Rejected(x), _this); },\n      function RaceActionState$res(x){ early(new Resolved(x), _this); }\n    );\n  }\n\n  RaceActionState.prototype = Object.create(RaceAction.prototype);\n\n  function BothActionState(early, other){\n    var _this = this;\n    _this.other = other;\n    _this.cancel = other._interpret(\n      function BothActionState$rec(x){ early(new Crashed(x), _this); },\n      function BothActionState$rej(x){ early(new Rejected(x), _this); },\n      noop\n    );\n  }\n\n  BothActionState.prototype = Object.create(BothAction.prototype);\n\n  function Sequence(spawn, actions){\n    this._spawn = spawn;\n    this._actions = actions || nil;\n  }\n\n  Sequence.prototype = Object.create(Future.prototype);\n\n  Sequence.prototype._transform = function Sequence$_transform(action){\n    return new Sequence(this._spawn, cons(action, this._actions));\n  };\n\n  Sequence.prototype._ap = function Sequence$ap(other){\n    return this._transform(new ApAction(other));\n  };\n\n  Sequence.prototype._parallelAp = function Sequence$pap(other){\n    return this._transform(new ParallelApAction(other));\n  };\n\n  Sequence.prototype._map = function Sequence$map(mapper){\n    return this._transform(new MapAction(mapper));\n  };\n\n  Sequence.prototype._bimap = function Sequence$bimap(lmapper, rmapper){\n    return this._transform(new BimapAction(lmapper, rmapper));\n  };\n\n  Sequence.prototype._chain = function Sequence$chain(mapper){\n    return this._transform(new ChainAction(mapper));\n  };\n\n  Sequence.prototype._mapRej = function Sequence$mapRej(mapper){\n    return this._transform(new MapRejAction(mapper));\n  };\n\n  Sequence.prototype._chainRej = function Sequence$chainRej(mapper){\n    return this._transform(new ChainRejAction(mapper));\n  };\n\n  Sequence.prototype._race = function Sequence$race(other){\n    return isNever(other) ? this : this._transform(new RaceAction(other));\n  };\n\n  Sequence.prototype._both = function Sequence$both(other){\n    return this._transform(new BothAction(other));\n  };\n\n  Sequence.prototype._and = function Sequence$and(other){\n    return this._transform(new AndAction(other));\n  };\n\n  Sequence.prototype._or = function Sequence$or(other){\n    return this._transform(new OrAction(other));\n  };\n\n  Sequence.prototype._swap = function Sequence$swap(){\n    return this._transform(new SwapAction);\n  };\n\n  Sequence.prototype._fold = function Sequence$fold(lmapper, rmapper){\n    return this._transform(new FoldAction(lmapper, rmapper));\n  };\n\n  Sequence.prototype._finally = function Sequence$finally(other){\n    return this._transform(new FinallyAction(other));\n  };\n\n  Sequence.prototype._interpret = function Sequence$interpret(rec, rej, res){\n    return interpretSequence(this, rec, rej, res);\n  };\n\n  Sequence.prototype.toString = function Sequence$toString(){\n    var str = '', tail = this._actions;\n\n    while(tail !== nil){\n      str = '.' + tail.head.toString() + str;\n      tail = tail.tail;\n    }\n\n    return this._spawn.toString() + str;\n  };\n\n  function Next(x){\n    return {done: false, value: x};\n  }\n\n  function Done(x){\n    return {done: true, value: x};\n  }\n\n  function isIteration(x){\n    return isObject(x) && isBoolean(x.done);\n  }\n\n  var Undetermined = 0;\n  var Synchronous = 1;\n  var Asynchronous = 2;\n\n  function ChainRec(step, init){\n    this._step = step;\n    this._init = init;\n  }\n\n  ChainRec.prototype = Object.create(Core);\n\n  ChainRec.prototype._interpret = function ChainRec$interpret(rec, rej, res){\n\n    var _step = this._step;\n    var _init = this._init;\n    var timing = Undetermined, cancel = noop, state = Next(_init);\n\n    function resolved(it){\n      state = it;\n      timing = timing === Undetermined ? Synchronous : drain();\n    }\n\n    function drain(){\n      while(!state.done){\n        timing = Undetermined;\n\n        try{\n          var m = _step(Next, Done, state.value);\n        }catch(e){\n          rec(e);\n          return;\n        }\n\n        cancel = m._interpret(rec, rej, resolved);\n\n        if(timing !== Synchronous){\n          timing = Asynchronous;\n          return;\n        }\n      }\n\n      res(state.value);\n    }\n\n    drain();\n\n    return function Future$chainRec$cancel(){ cancel(); };\n\n  };\n\n  ChainRec.prototype.toString = function ChainRec$toString(){\n    return 'Future.chainRec(' + showf(this._step) + ', ' + show(this._init) + ')';\n  };\n\n  function chainRec(step, init){\n    return new ChainRec(step, init);\n  }\n\n  function ap$mval(mval, mfunc){\n    if(!Z.Apply.test(mfunc)) throwInvalidArgument('Future.ap', 1, 'be an Apply', mfunc);\n    return Z.ap(mval, mfunc);\n  }\n\n  function ap(mval, mfunc){\n    if(!Z.Apply.test(mval)) throwInvalidArgument('Future.ap', 0, 'be an Apply', mval);\n    if(arguments.length === 1) return partial1(ap$mval, mval);\n    return ap$mval(mval, mfunc);\n  }\n\n  function alt$left(left, right){\n    if(!Z.Alt.test(right)) throwInvalidArgument('alt', 1, 'be an Alt', right);\n    return Z.alt(left, right);\n  }\n\n  function alt(left, right){\n    if(!Z.Alt.test(left)) throwInvalidArgument('alt', 0, 'be an Alt', left);\n    if(arguments.length === 1) return partial1(alt$left, left);\n    return alt$left(left, right);\n  }\n\n  function map$mapper(mapper, m){\n    if(!Z.Functor.test(m)) throwInvalidArgument('Future.map', 1, 'be a Functor', m);\n    return Z.map(mapper, m);\n  }\n\n  function map(mapper, m){\n    if(!isFunction(mapper)) throwInvalidArgument('Future.map', 0, 'be a Function', mapper);\n    if(arguments.length === 1) return partial1(map$mapper, mapper);\n    return map$mapper(mapper, m);\n  }\n\n  function bimap$lmapper$rmapper(lmapper, rmapper, m){\n    if(!Z.Bifunctor.test(m)) throwInvalidArgument('Future.bimap', 2, 'be a Bifunctor', m);\n    return Z.bimap(lmapper, rmapper, m);\n  }\n\n  function bimap$lmapper(lmapper, rmapper, m){\n    if(!isFunction(rmapper)) throwInvalidArgument('Future.bimap', 1, 'be a Function', rmapper);\n    if(arguments.length === 2) return partial2(bimap$lmapper$rmapper, lmapper, rmapper);\n    return bimap$lmapper$rmapper(lmapper, rmapper, m);\n  }\n\n  function bimap(lmapper, rmapper, m){\n    if(!isFunction(lmapper)) throwInvalidArgument('Future.bimap', 0, 'be a Function', lmapper);\n    if(arguments.length === 1) return partial1(bimap$lmapper, lmapper);\n    if(arguments.length === 2) return bimap$lmapper(lmapper, rmapper);\n    return bimap$lmapper(lmapper, rmapper, m);\n  }\n\n  function chain$chainer(chainer, m){\n    if(!Z.Chain.test(m)) throwInvalidArgument('Future.chain', 1, 'be a Chain', m);\n    return Z.chain(chainer, m);\n  }\n\n  function chain(chainer, m){\n    if(!isFunction(chainer)) throwInvalidArgument('Future.chain', 0, 'be a Function', chainer);\n    if(arguments.length === 1) return partial1(chain$chainer, chainer);\n    return chain$chainer(chainer, m);\n  }\n\n  function mapRej$mapper(mapper, m){\n    if(!isFuture(m)) throwInvalidFuture('Future.mapRej', 1, m);\n    return m.mapRej(mapper);\n  }\n\n  function mapRej(mapper, m){\n    if(!isFunction(mapper)) throwInvalidArgument('Future.mapRej', 0, 'be a Function', mapper);\n    if(arguments.length === 1) return partial1(mapRej$mapper, mapper);\n    return mapRej$mapper(mapper, m);\n  }\n\n  function chainRej$chainer(chainer, m){\n    if(!isFuture(m)) throwInvalidFuture('Future.chainRej', 1, m);\n    return m.chainRej(chainer);\n  }\n\n  function chainRej(chainer, m){\n    if(!isFunction(chainer)) throwInvalidArgument('Future.chainRej', 0, 'be a Function', chainer);\n    if(arguments.length === 1) return partial1(chainRej$chainer, chainer);\n    return chainRej$chainer(chainer, m);\n  }\n\n  function lastly$right(right, left){\n    if(!isFuture(left)) throwInvalidFuture('Future.finally', 1, left);\n    return left.finally(right);\n  }\n\n  function lastly(right, left){\n    if(!isFuture(right)) throwInvalidFuture('Future.finally', 0, right);\n    if(arguments.length === 1) return partial1(lastly$right, right);\n    return lastly$right(right, left);\n  }\n\n  function and$left(left, right){\n    if(!isFuture(right)) throwInvalidFuture('Future.and', 1, right);\n    return left.and(right);\n  }\n\n  function and(left, right){\n    if(!isFuture(left)) throwInvalidFuture('Future.and', 0, left);\n    if(arguments.length === 1) return partial1(and$left, left);\n    return and$left(left, right);\n  }\n\n  function both$left(left, right){\n    if(!isFuture(right)) throwInvalidFuture('Future.both', 1, right);\n    return left.both(right);\n  }\n\n  function both(left, right){\n    if(!isFuture(left)) throwInvalidFuture('Future.both', 0, left);\n    if(arguments.length === 1) return partial1(both$left, left);\n    return both$left(left, right);\n  }\n\n  function or$left(left, right){\n    if(!isFuture(right)) throwInvalidFuture('Future.or', 1, right);\n    return left.or(right);\n  }\n\n  function or(left, right){\n    if(!isFuture(left)) throwInvalidFuture('Future.or', 0, left);\n    if(arguments.length === 1) return partial1(or$left, left);\n    return or$left(left, right);\n  }\n\n  function race$right(right, left){\n    if(!isFuture(left)) throwInvalidFuture('Future.race', 1, left);\n    return left.race(right);\n  }\n\n  function race(right, left){\n    if(!isFuture(right)) throwInvalidFuture('Future.race', 0, right);\n    if(arguments.length === 1) return partial1(race$right, right);\n    return race$right(right, left);\n  }\n\n  function swap(m){\n    if(!isFuture(m)) throwInvalidFuture('Future.swap', 0, m);\n    return m.swap();\n  }\n\n  function fold$f$g(f, g, m){\n    if(!isFuture(m)) throwInvalidFuture('Future.fold', 2, m);\n    return m.fold(f, g);\n  }\n\n  function fold$f(f, g, m){\n    if(!isFunction(g)) throwInvalidArgument('Future.fold', 1, 'be a function', g);\n    if(arguments.length === 2) return partial2(fold$f$g, f, g);\n    return fold$f$g(f, g, m);\n  }\n\n  function fold(f, g, m){\n    if(!isFunction(f)) throwInvalidArgument('Future.fold', 0, 'be a function', f);\n    if(arguments.length === 1) return partial1(fold$f, f);\n    if(arguments.length === 2) return fold$f(f, g);\n    return fold$f(f, g, m);\n  }\n\n  function done$callback(callback, m){\n    if(!isFuture(m)) throwInvalidFuture('Future.done', 1, m);\n    return m.done(callback);\n  }\n\n  function done(callback, m){\n    if(!isFunction(callback)) throwInvalidArgument('Future.done', 0, 'be a Function', callback);\n    if(arguments.length === 1) return partial1(done$callback, callback);\n    return done$callback(callback, m);\n  }\n\n  function fork$f$g(f, g, m){\n    if(!isFuture(m)) throwInvalidFuture('Future.fork', 2, m);\n    return m._interpret(raise, f, g);\n  }\n\n  function fork$f(f, g, m){\n    if(!isFunction(g)) throwInvalidArgument('Future.fork', 1, 'be a function', g);\n    if(arguments.length === 2) return partial2(fork$f$g, f, g);\n    return fork$f$g(f, g, m);\n  }\n\n  function fork(f, g, m){\n    if(!isFunction(f)) throwInvalidArgument('Future.fork', 0, 'be a function', f);\n    if(arguments.length === 1) return partial1(fork$f, f);\n    if(arguments.length === 2) return fork$f(f, g);\n    return fork$f(f, g, m);\n  }\n\n  function forkCatch(f, g, h, m){\n    if(!isFunction(f)) throwInvalidArgument('Future.forkCatch', 0, 'be a function', f);\n    if(arguments.length === 1) return partial1(forkCatch, f);\n    if(!isFunction(g)) throwInvalidArgument('Future.forkCatch', 1, 'be a function', g);\n    if(arguments.length === 2) return partial2(forkCatch, f, g);\n    if(!isFunction(h)) throwInvalidArgument('Future.forkCatch', 2, 'be a function', h);\n    if(arguments.length === 3) return partial3(forkCatch, f, g, h);\n    if(!isFuture(m)) throwInvalidFuture('Future.forkCatch', 3, m);\n    return m._interpret(f, g, h);\n  }\n\n  function promise(m){\n    if(!isFuture(m)) throwInvalidFuture('Future.promise', 0, m);\n    return m.promise();\n  }\n\n  function value$cont(cont, m){\n    if(!isFuture(m)) throwInvalidFuture('Future.value', 1, m);\n    return m.value(cont);\n  }\n\n  function value(cont, m){\n    if(!isFunction(cont)) throwInvalidArgument('Future.value', 0, 'be a Function', cont);\n    if(arguments.length === 1) return partial1(value$cont, cont);\n    return value$cont(cont, m);\n  }\n\n  function extractLeft(m){\n    if(!isFuture(m)) throwInvalidFuture('Future.extractLeft', 0, m);\n    return m.extractLeft();\n  }\n\n  function extractRight(m){\n    if(!isFuture(m)) throwInvalidFuture('Future.extractRight', 0, m);\n    return m.extractRight();\n  }\n\n  function After$race(other){\n    return other.isSettled()\n         ? other\n         : isNever(other)\n         ? this\n         : typeof other._time === 'number'\n         ? other._time < this._time ? other : this\n         : Core._race.call(this, other);\n  }\n\n  function After(time, value){\n    this._time = time;\n    this._value = value;\n  }\n\n  After.prototype = Object.create(Core);\n\n  After.prototype._race = After$race;\n\n  After.prototype._swap = function After$swap(){\n    return new RejectAfter(this._time, this._value);\n  };\n\n  After.prototype._interpret = function After$interpret(rec, rej, res){\n    var id = setTimeout(res, this._time, this._value);\n    return function After$cancel(){ clearTimeout(id); };\n  };\n\n  After.prototype.extractRight = function After$extractRight(){\n    return [this._value];\n  };\n\n  After.prototype.toString = function After$toString(){\n    return 'Future.after(' + show(this._time) + ', ' + show(this._value) + ')';\n  };\n\n  function RejectAfter(time, value){\n    this._time = time;\n    this._value = value;\n  }\n\n  RejectAfter.prototype = Object.create(Core);\n\n  RejectAfter.prototype._race = After$race;\n\n  RejectAfter.prototype._swap = function RejectAfter$swap(){\n    return new After(this._time, this._value);\n  };\n\n  RejectAfter.prototype._interpret = function RejectAfter$interpret(rec, rej){\n    var id = setTimeout(rej, this._time, this._value);\n    return function RejectAfter$cancel(){ clearTimeout(id); };\n  };\n\n  RejectAfter.prototype.extractLeft = function RejectAfter$extractLeft(){\n    return [this._value];\n  };\n\n  RejectAfter.prototype.toString = function RejectAfter$toString(){\n    return 'Future.rejectAfter(' + show(this._time) + ', ' + show(this._value) + ')';\n  };\n\n  function after$time(time, value){\n    return time === Infinity ? never : new After(time, value);\n  }\n\n  function after(time, value){\n    if(!isUnsigned(time)) throwInvalidArgument('Future.after', 0, 'be a positive integer', time);\n    if(arguments.length === 1) return partial1(after$time, time);\n    return after$time(time, value);\n  }\n\n  function rejectAfter$time(time, reason){\n    return time === Infinity ? never : new RejectAfter(time, reason);\n  }\n\n  function rejectAfter(time, reason){\n    if(!isUnsigned(time)){\n      throwInvalidArgument('Future.rejectAfter', 0, 'be a positive integer', time);\n    }\n    if(arguments.length === 1) return partial1(rejectAfter$time, time);\n    return rejectAfter$time(time, reason);\n  }\n\n  function Attempt(fn){\n    this._fn = fn;\n  }\n\n  Attempt.prototype = Object.create(Core);\n\n  Attempt.prototype._interpret = function Attempt$interpret(rec, rej, res){\n    var r;\n    try{ r = this._fn(); }catch(e){ rej(e); return noop }\n    res(r);\n    return noop;\n  };\n\n  Attempt.prototype.toString = function Attempt$toString(){\n    return 'Future.try(' + showf(this._fn) + ')';\n  };\n\n  function attempt(f){\n    if(!isFunction(f)) throwInvalidArgument('Future.try', 0, 'be a function', f);\n    return new Attempt(f);\n  }\n\n  var Cold = Cached.Cold = 0;\n  var Pending = Cached.Pending = 1;\n  var Crashed$1 = Cached.Crashed = 2;\n  var Rejected$1 = Cached.Rejected = 3;\n  var Resolved$1 = Cached.Resolved = 4;\n\n  function Queued(rec, rej, res){\n    this[Crashed$1] = rec;\n    this[Rejected$1] = rej;\n    this[Resolved$1] = res;\n  }\n\n  function Cached(pure){\n    this._pure = pure;\n    this.reset();\n  }\n\n  Cached.prototype = Object.create(Core);\n\n  Cached.prototype.isRejected = function Cached$isRejected(){\n    return this._state === Rejected$1;\n  };\n\n  Cached.prototype.isResolved = function Cached$isResolved(){\n    return this._state === Resolved$1;\n  };\n\n  Cached.prototype.extractLeft = function Cached$extractLeft(){\n    return this.isRejected() ? [this._value] : [];\n  };\n\n  Cached.prototype.extractRight = function Cached$extractRight(){\n    return this.isResolved() ? [this._value] : [];\n  };\n\n  Cached.prototype._addToQueue = function Cached$addToQueue(rec, rej, res){\n    var _this = this;\n    if(_this._state > Pending) return noop;\n    var i = _this._queue.push(new Queued(rec, rej, res)) - 1;\n    _this._queued = _this._queued + 1;\n\n    return function Cached$removeFromQueue(){\n      if(_this._state > Pending) return;\n      _this._queue[i] = undefined;\n      _this._queued = _this._queued - 1;\n      if(_this._queued === 0) _this.reset();\n    };\n  };\n\n  Cached.prototype._drainQueue = function Cached$drainQueue(){\n    if(this._state <= Pending) return;\n    if(this._queued === 0) return;\n    var queue = this._queue;\n    var length = queue.length;\n    var state = this._state;\n    var value = this._value;\n\n    for(var i = 0; i < length; i++){\n      queue[i] && queue[i][state](value);\n      queue[i] = undefined;\n    }\n\n    this._queue = undefined;\n    this._queued = 0;\n  };\n\n  Cached.prototype.crash = function Cached$crash(error){\n    if(this._state > Pending) return;\n    this._value = error;\n    this._state = Crashed$1;\n    this._drainQueue();\n  };\n\n  Cached.prototype.reject = function Cached$reject(reason){\n    if(this._state > Pending) return;\n    this._value = reason;\n    this._state = Rejected$1;\n    this._drainQueue();\n  };\n\n  Cached.prototype.resolve = function Cached$resolve(value){\n    if(this._state > Pending) return;\n    this._value = value;\n    this._state = Resolved$1;\n    this._drainQueue();\n  };\n\n  Cached.prototype.run = function Cached$run(){\n    var _this = this;\n    if(_this._state > Cold) return;\n    _this._state = Pending;\n    _this._cancel = _this._pure._interpret(\n      function Cached$fork$rec(x){ _this.crash(x); },\n      function Cached$fork$rej(x){ _this.reject(x); },\n      function Cached$fork$res(x){ _this.resolve(x); }\n    );\n  };\n\n  Cached.prototype.reset = function Cached$reset(){\n    if(this._state === Cold) return;\n    if(this._state === Pending) this._cancel();\n    this._cancel = noop;\n    this._queue = [];\n    this._queued = 0;\n    this._value = undefined;\n    this._state = Cold;\n  };\n\n  Cached.prototype._interpret = function Cached$interpret(rec, rej, res){\n    var cancel = noop;\n\n    switch(this._state){\n      case Pending: cancel = this._addToQueue(rec, rej, res); break;\n      case Crashed$1: rec(this._value); break;\n      case Rejected$1: rej(this._value); break;\n      case Resolved$1: res(this._value); break;\n      default: cancel = this._addToQueue(rec, rej, res); this.run();\n    }\n\n    return cancel;\n  };\n\n  Cached.prototype.toString = function Cached$toString(){\n    return 'Future.cache(' + this._pure.toString() + ')';\n  };\n\n  function cache(m){\n    if(!isFuture(m)) throwInvalidFuture('Future.cache', 0, m);\n    return new Cached(m);\n  }\n\n  function Encase(fn, a){\n    this._fn = fn;\n    this._a = a;\n  }\n\n  Encase.prototype = Object.create(Core);\n\n  Encase.prototype._interpret = function Encase$interpret(rec, rej, res){\n    var r;\n    try{ r = this._fn(this._a); }catch(e){ rej(e); return noop }\n    res(r);\n    return noop;\n  };\n\n  Encase.prototype.toString = function Encase$toString(){\n    return 'Future.encase(' + showf(this._fn) + ', ' + show(this._a) + ')';\n  };\n\n  function encase(f, x){\n    if(!isFunction(f)) throwInvalidArgument('Future.encase', 0, 'be a function', f);\n    if(arguments.length === 1) return partial1(encase, f);\n    return new Encase(f, x);\n  }\n\n  function Encase2(fn, a, b){\n    this._fn = fn;\n    this._a = a;\n    this._b = b;\n  }\n\n  Encase2.prototype = Object.create(Core);\n\n  Encase2.prototype._interpret = function Encase2$interpret(rec, rej, res){\n    var r;\n    try{ r = this._fn(this._a, this._b); }catch(e){ rej(e); return noop }\n    res(r);\n    return noop;\n  };\n\n  Encase2.prototype.toString = function Encase2$toString(){\n    return 'Future.encase2(' + showf(this._fn) + ', ' + show(this._a) + ', ' + show(this._b) + ')';\n  };\n\n  function encase2(f, x, y){\n    if(!isFunction(f)) throwInvalidArgument('Future.encase2', 0, 'be a function', f);\n\n    switch(arguments.length){\n      case 1: return partial1(encase2, f);\n      case 2: return partial2(encase2, f, x);\n      default: return new Encase2(f, x, y);\n    }\n  }\n\n  function Encase3(fn, a, b, c){\n    this._fn = fn;\n    this._a = a;\n    this._b = b;\n    this._c = c;\n  }\n\n  Encase3.prototype = Object.create(Core);\n\n  Encase3.prototype._interpret = function Encase3$interpret(rec, rej, res){\n    var r;\n    try{ r = this._fn(this._a, this._b, this._c); }catch(e){ rej(e); return noop }\n    res(r);\n    return noop;\n  };\n\n  Encase3.prototype.toString = function Encase3$toString(){\n    return 'Future.encase3('\n         + showf(this._fn)\n         + ', '\n         + show(this._a)\n         + ', '\n         + show(this._b)\n         + ', '\n         + show(this._c)\n         + ')';\n  };\n\n  function encase3(f, x, y, z){\n    if(!isFunction(f)) throwInvalidArgument('Future.encase3', 0, 'be a function', f);\n\n    switch(arguments.length){\n      case 1: return partial1(encase3, f);\n      case 2: return partial2(encase3, f, x);\n      case 3: return partial3(encase3, f, x, y);\n      default: return new Encase3(f, x, y, z);\n    }\n  }\n\n  function EncaseN(fn, a){\n    this._fn = fn;\n    this._a = a;\n  }\n\n  EncaseN.prototype = Object.create(Core);\n\n  EncaseN.prototype._interpret = function EncaseN$interpret(rec, rej, res){\n    var open = false, cont = function(){ open = true; };\n    try{\n      this._fn(this._a, function EncaseN$done(err, val){\n        cont = err ? function EncaseN3$rej(){\n          open = false;\n          rej(err);\n        } : function EncaseN3$res(){\n          open = false;\n          res(val);\n        };\n        if(open){\n          cont();\n        }\n      });\n    }catch(e){\n      rec(e);\n      open = false;\n      return noop;\n    }\n    cont();\n    return function EncaseN$cancel(){ open = false; };\n  };\n\n  EncaseN.prototype.toString = function EncaseN$toString(){\n    return 'Future.encaseN(' + showf(this._fn) + ', ' + show(this._a) + ')';\n  };\n\n  function encaseN(f, x){\n    if(!isFunction(f)) throwInvalidArgument('Future.encaseN', 0, 'be a function', f);\n    if(arguments.length === 1) return partial1(encaseN, f);\n    return new EncaseN(f, x);\n  }\n\n  function EncaseN2(fn, a, b){\n    this._fn = fn;\n    this._a = a;\n    this._b = b;\n  }\n\n  EncaseN2.prototype = Object.create(Core);\n\n  EncaseN2.prototype._interpret = function EncaseN2$interpret(rec, rej, res){\n    var open = false, cont = function(){ open = true; };\n    try{\n      this._fn(this._a, this._b, function EncaseN2$done(err, val){\n        cont = err ? function EncaseN2$rej(){\n          open = false;\n          rej(err);\n        } : function EncaseN2$res(){\n          open = false;\n          res(val);\n        };\n        if(open){\n          cont();\n        }\n      });\n    }catch(e){\n      rec(e);\n      open = false;\n      return noop;\n    }\n    cont();\n    return function EncaseN2$cancel(){ open = false; };\n  };\n\n  EncaseN2.prototype.toString = function EncaseN2$toString(){\n    return 'Future.encaseN2(' + showf(this._fn) + ', ' + show(this._a) + ', ' + show(this._b) + ')';\n  };\n\n  function encaseN2(f, x, y){\n    if(!isFunction(f)) throwInvalidArgument('Future.encaseN2', 0, 'be a function', f);\n\n    switch(arguments.length){\n      case 1: return partial1(encaseN2, f);\n      case 2: return partial2(encaseN2, f, x);\n      default: return new EncaseN2(f, x, y);\n    }\n  }\n\n  function EncaseN3(fn, a, b, c){\n    this._fn = fn;\n    this._a = a;\n    this._b = b;\n    this._c = c;\n  }\n\n  EncaseN3.prototype = Object.create(Core);\n\n  EncaseN3.prototype._interpret = function EncaseN3$interpret(rec, rej, res){\n    var open = false, cont = function(){ open = true; };\n    try{\n      this._fn(this._a, this._b, this._c, function EncaseN3$done(err, val){\n        cont = err ? function EncaseN3$rej(){\n          open = false;\n          rej(err);\n        } : function EncaseN3$res(){\n          open = false;\n          res(val);\n        };\n        if(open){\n          cont();\n        }\n      });\n    }catch(e){\n      rec(e);\n      open = false;\n      return noop;\n    }\n    cont();\n    return function EncaseN3$cancel(){ open = false; };\n  };\n\n  EncaseN3.prototype.toString = function EncaseN3$toString(){\n    return 'Future.encaseN3('\n         + showf(this._fn)\n         + ', '\n         + show(this._a)\n         + ', '\n         + show(this._b)\n         + ', '\n         + show(this._c)\n         + ')';\n  };\n\n  function encaseN3(f, x, y, z){\n    if(!isFunction(f)) throwInvalidArgument('Future.encaseN3', 0, 'be a function', f);\n\n    switch(arguments.length){\n      case 1: return partial1(encaseN3, f);\n      case 2: return partial2(encaseN3, f, x);\n      case 3: return partial3(encaseN3, f, x, y);\n      default: return new EncaseN3(f, x, y, z);\n    }\n  }\n\n  function invalidPromise(p, f, a){\n    return typeError(\n      'Future.encaseP expects the function it\\'s given to return a Promise/Thenable'\n      + '\\n  Actual: ' + (show(p)) + '\\n  From calling: ' + (showf(f))\n      + '\\n  With: ' + (show(a))\n    );\n  }\n\n  function EncaseP(fn, a){\n    this._fn = fn;\n    this._a = a;\n  }\n\n  EncaseP.prototype = Object.create(Core);\n\n  EncaseP.prototype._interpret = function EncaseP$interpret(rec, rej, res){\n    var open = true, fn = this._fn, a = this._a, p;\n    try{\n      p = fn(a);\n    }catch(e){\n      rec(e);\n      return noop;\n    }\n    if(!isThenable(p)){\n      rec(invalidPromise(p, fn, a));\n      return noop;\n    }\n    p.then(function EncaseP$res(x){\n      if(open){\n        open = false;\n        res(x);\n      }\n    }, function EncaseP$rej(x){\n      if(open){\n        open = false;\n        rej(x);\n      }\n    });\n    return function EncaseP$cancel(){ open = false; };\n  };\n\n  EncaseP.prototype.toString = function EncaseP$toString(){\n    return 'Future.encaseP(' + showf(this._fn) + ', ' + show(this._a) + ')';\n  };\n\n  function encaseP(f, x){\n    if(!isFunction(f)) throwInvalidArgument('Future.encaseP', 0, 'be a function', f);\n    if(arguments.length === 1) return partial1(encaseP, f);\n    return new EncaseP(f, x);\n  }\n\n  function invalidPromise$1(p, f, a, b){\n    return typeError(\n      'Future.encaseP2 expects the function it\\'s given to return a Promise/Thenable'\n      + '\\n  Actual: ' + (show(p)) + '\\n  From calling: ' + (showf(f))\n      + '\\n  With 1: ' + (show(a))\n      + '\\n  With 2: ' + (show(b))\n    );\n  }\n\n  function EncaseP2(fn, a, b){\n    this._fn = fn;\n    this._a = a;\n    this._b = b;\n  }\n\n  EncaseP2.prototype = Object.create(Core);\n\n  EncaseP2.prototype._interpret = function EncaseP2$interpret(rec, rej, res){\n    var open = true, fn = this._fn, a = this._a, b = this._b, p;\n    try{\n      p = fn(a, b);\n    }catch(e){\n      rec(e);\n      return noop;\n    }\n    if(!isThenable(p)){\n      rec(invalidPromise$1(p, fn, a, b));\n      return noop;\n    }\n    p.then(function EncaseP2$res(x){\n      if(open){\n        open = false;\n        res(x);\n      }\n    }, function EncaseP2$rej(x){\n      if(open){\n        open = false;\n        rej(x);\n      }\n    });\n    return function EncaseP2$cancel(){ open = false; };\n  };\n\n  EncaseP2.prototype.toString = function EncaseP2$toString(){\n    return 'Future.encaseP2(' + showf(this._fn) + ', ' + show(this._a) + ', ' + show(this._b) + ')';\n  };\n\n  function encaseP2(f, x, y){\n    if(!isFunction(f)) throwInvalidArgument('Future.encaseP2', 0, 'be a function', f);\n\n    switch(arguments.length){\n      case 1: return partial1(encaseP2, f);\n      case 2: return partial2(encaseP2, f, x);\n      default: return new EncaseP2(f, x, y);\n    }\n  }\n\n  function invalidPromise$2(p, f, a, b, c){\n    return typeError(\n      'Future.encaseP3 expects the function it\\'s given to return a Promise/Thenable'\n      + '\\n  Actual: ' + (show(p)) + '\\n  From calling: ' + (showf(f))\n      + '\\n  With 1: ' + (show(a))\n      + '\\n  With 2: ' + (show(b))\n      + '\\n  With 3: ' + (show(c))\n    );\n  }\n\n  function EncaseP3(fn, a, b, c){\n    this._fn = fn;\n    this._a = a;\n    this._b = b;\n    this._c = c;\n  }\n\n  EncaseP3.prototype = Object.create(Core);\n\n  EncaseP3.prototype._interpret = function EncaseP3$interpret(rec, rej, res){\n    var open = true, fn = this._fn, a = this._a, b = this._b, c = this._c, p;\n    try{\n      p = fn(a, b, c);\n    }catch(e){\n      rec(e);\n      return noop;\n    }\n    if(!isThenable(p)){\n      rec(invalidPromise$2(p, fn, a, b, c));\n      return noop;\n    }\n    p.then(function EncaseP3$res(x){\n      if(open){\n        open = false;\n        res(x);\n      }\n    }, function EncaseP3$rej(x){\n      if(open){\n        open = false;\n        rej(x);\n      }\n    });\n    return function EncaseP3$cancel(){ open = false; };\n  };\n\n  EncaseP3.prototype.toString = function EncaseP3$toString(){\n    return 'Future.encaseP3('\n         + showf(this._fn)\n         + ', '\n         + show(this._a)\n         + ', '\n         + show(this._b)\n         + ', '\n         + show(this._c)\n         + ')';\n  };\n\n  function encaseP3(f, x, y, z){\n    if(!isFunction(f)) throwInvalidArgument('Future.encaseP3', 0, 'be a function', f);\n\n    switch(arguments.length){\n      case 1: return partial1(encaseP3, f);\n      case 2: return partial2(encaseP3, f, x);\n      case 3: return partial3(encaseP3, f, x, y);\n      default: return new EncaseP3(f, x, y, z);\n    }\n  }\n\n  /*eslint consistent-return: 0, no-cond-assign: 0*/\n\n  function invalidIteration(o){\n    return typeError(\n      'The iterator did not return a valid iteration from iterator.next()\\n' +\n      '  Actual: ' + show(o)\n    );\n  }\n\n  function invalidState(x){\n    return invalidFuture(\n      'Future.do',\n      'the iterator to produce only valid Futures',\n      x,\n      '\\n  Tip: If you\\'re using a generator, make sure you always yield a Future'\n    );\n  }\n\n  function Go(generator){\n    this._generator = generator;\n  }\n\n  Go.prototype = Object.create(Core);\n\n  Go.prototype._interpret = function Go$interpret(rec, rej, res){\n\n    var timing = Undetermined, cancel = noop, state, value, iterator;\n\n    try{\n      iterator = this._generator();\n    }catch(e){\n      rec(e);\n      return noop;\n    }\n\n    if(!isIterator(iterator)){\n      rec(invalidArgument('Future.do', 0, 'return an iterator, maybe you forgot the \"*\"', iterator));\n      return noop;\n    }\n\n    function resolved(x){\n      value = x;\n      if(timing === Asynchronous) return drain();\n      timing = Synchronous;\n    }\n\n    function drain(){\n      //eslint-disable-next-line no-constant-condition\n      while(true){\n        try{\n          state = iterator.next(value);\n        }catch(e){\n          return rec(e);\n        }\n        if(!isIteration(state)) return rec(invalidIteration(state));\n        if(state.done) break;\n        if(!isFuture(state.value)) return rec(invalidState(state.value));\n        timing = Undetermined;\n        cancel = state.value._interpret(rec, rej, resolved);\n        if(timing === Undetermined) return timing = Asynchronous;\n      }\n      res(state.value);\n    }\n\n    drain();\n\n    return function Go$cancel(){ cancel(); };\n\n  };\n\n  Go.prototype.toString = function Go$toString(){\n    return 'Future.do(' + showf(this._generator) + ')';\n  };\n\n  function go(generator){\n    if(!isFunction(generator)) throwInvalidArgument('Future.do', 0, 'be a Function', generator);\n    return new Go(generator);\n  }\n\n  /* eslint no-param-reassign:0 */\n\n  function invalidDisposal(m, f, x){\n    return invalidFuture(\n      'Future.hook',\n      'the first function it\\'s given to return a Future',\n      m,\n      '\\n  From calling: ' + showf(f) + '\\n  With: ' + show(x)\n    );\n  }\n\n  function invalidConsumption(m, f, x){\n    return invalidFuture(\n      'Future.hook',\n      'the second function it\\'s given to return a Future',\n      m,\n      '\\n  From calling: ' + showf(f) + '\\n  With: ' + show(x)\n    );\n  }\n\n  function Hook(acquire, dispose, consume){\n    this._acquire = acquire;\n    this._dispose = dispose;\n    this._consume = consume;\n  }\n\n  Hook.prototype = Object.create(Core);\n\n  Hook.prototype._interpret = function Hook$interpret(rec, rej, res){\n\n    var _acquire = this._acquire, _dispose = this._dispose, _consume = this._consume;\n    var cancel, cancelConsume = noop, resource, value, cont = noop;\n\n    function Hook$done(){\n      cont(value);\n    }\n\n    function Hook$reject(x){\n      rej(x);\n    }\n\n    function Hook$consumptionException(e){\n      var rec_ = rec;\n      cont = noop;\n      rej = noop;\n      rec = noop;\n      Hook$dispose();\n      rec_(e);\n    }\n\n    function Hook$dispose(){\n      var disposal;\n      try{\n        disposal = _dispose(resource);\n      }catch(e){\n        return rec(e);\n      }\n      if(!isFuture(disposal)){\n        return rec(invalidDisposal(disposal, _dispose, resource));\n      }\n      disposal._interpret(rec, Hook$reject, Hook$done);\n      cancel = Hook$cancelDisposal;\n    }\n\n    function Hook$cancelConsumption(){\n      cancelConsume();\n      Hook$dispose();\n      Hook$cancelDisposal();\n    }\n\n    function Hook$cancelDisposal(){\n      cont = noop;\n      rec = noop;\n      rej = noop;\n    }\n\n    function Hook$consumptionRejected(x){\n      cont = rej;\n      value = x;\n      Hook$dispose();\n    }\n\n    function Hook$consumptionResolved(x){\n      cont = res;\n      value = x;\n      Hook$dispose();\n    }\n\n    function Hook$consume(x){\n      resource = x;\n      var consumption;\n      try{\n        consumption = _consume(resource);\n      }catch(e){\n        return Hook$consumptionException(e);\n      }\n      if(!isFuture(consumption)){\n        return Hook$consumptionException(invalidConsumption(consumption, _consume, resource));\n      }\n      cancel = Hook$cancelConsumption;\n      cancelConsume = consumption._interpret(\n        Hook$consumptionException,\n        Hook$consumptionRejected,\n        Hook$consumptionResolved\n      );\n    }\n\n    var cancelAcquire = _acquire._interpret(rec, Hook$reject, Hook$consume);\n    cancel = cancel || cancelAcquire;\n\n    return function Hook$fork$cancel(){ cancel(); };\n\n  };\n\n  Hook.prototype.toString = function Hook$toString(){\n    return 'Future.hook('\n         + this._acquire.toString()\n         + ', '\n         + showf(this._dispose)\n         + ', '\n         + showf(this._consume)\n         + ')';\n  };\n\n  function hook$acquire$cleanup(acquire, cleanup, consume){\n    if(!isFunction(consume)) throwInvalidArgument('Future.hook', 2, 'be a Future', consume);\n    return new Hook(acquire, cleanup, consume);\n  }\n\n  function hook$acquire(acquire, cleanup, consume){\n    if(!isFunction(cleanup)) throwInvalidArgument('Future.hook', 1, 'be a function', cleanup);\n    if(arguments.length === 2) return partial2(hook$acquire$cleanup, acquire, cleanup);\n    return hook$acquire$cleanup(acquire, cleanup, consume);\n  }\n\n  function hook(acquire, cleanup, consume){\n    if(!isFuture(acquire)) throwInvalidFuture('Future.hook', 0, acquire);\n    if(arguments.length === 1) return partial1(hook$acquire, acquire);\n    if(arguments.length === 2) return hook$acquire(acquire, cleanup);\n    return hook$acquire(acquire, cleanup, consume);\n  }\n\n  function Node(fn){\n    this._fn = fn;\n  }\n\n  Node.prototype = Object.create(Core);\n\n  Node.prototype._interpret = function Node$interpret(rec, rej, res){\n    var open = false, cont = function(){ open = true; };\n    try{\n      this._fn(function Node$done(err, val){\n        cont = err ? function Node$rej(){\n          open = false;\n          rej(err);\n        } : function Node$res(){\n          open = false;\n          res(val);\n        };\n        if(open){\n          cont();\n        }\n      });\n    }catch(e){\n      rec(e);\n      open = false;\n      return noop;\n    }\n    cont();\n    return function Node$cancel(){ open = false; };\n  };\n\n  Node.prototype.toString = function Node$toString(){\n    return 'Future.node(' + showf(this._fn) + ')';\n  };\n\n  function node(f){\n    if(!isFunction(f)) throwInvalidArgument('Future.node', 0, 'be a function', f);\n    return new Node(f);\n  }\n\n  function Parallel(max, futures){\n    this._futures = futures;\n    this._length = futures.length;\n    this._max = Math.min(this._length, max);\n  }\n\n  Parallel.prototype = Object.create(Core);\n\n  Parallel.prototype._interpret = function Parallel$interpret(rec, rej, res){\n\n    var _futures = this._futures, _length = this._length, _max = this._max;\n    var cancels = new Array(_length), out = new Array(_length);\n    var cursor = 0, running = 0, blocked = false;\n\n    function Parallel$cancel(){\n      cursor = _length;\n      for(var n = 0; n < _length; n++) cancels[n] && cancels[n]();\n    }\n\n    function Parallel$run(idx){\n      running++;\n      cancels[idx] = _futures[idx]._interpret(function Parallel$rec(e){\n        cancels[idx] = noop;\n        Parallel$cancel();\n        rec(e);\n      }, function Parallel$rej(reason){\n        cancels[idx] = noop;\n        Parallel$cancel();\n        rej(reason);\n      }, function Parallel$res(value){\n        cancels[idx] = noop;\n        out[idx] = value;\n        running--;\n        if(cursor === _length && running === 0) res(out);\n        else if(blocked) Parallel$drain();\n      });\n    }\n\n    function Parallel$drain(){\n      blocked = false;\n      while(cursor < _length && running < _max) Parallel$run(cursor++);\n      blocked = true;\n    }\n\n    Parallel$drain();\n\n    return Parallel$cancel;\n\n  };\n\n  Parallel.prototype.toString = function Parallel$toString(){\n    return 'Future.parallel(' + this._max + ', ' + show(this._futures) + ')';\n  };\n\n  var emptyArray = new Resolved([]);\n\n  function validateNthFuture(m, i){\n    if(!isFuture(m)) throwInvalidFuture(\n      'Future.parallel',\n      'its second argument to be an array of valid Futures. ' +\n      'The value at position ' + i + ' in the array is not a Future',\n      m\n    );\n  }\n\n  function parallel$max(max, xs){\n    if(!isArray(xs)) throwInvalidArgument('Future.parallel', 1, 'be an array', xs);\n    for(var idx = 0; idx < xs.length; idx++) validateNthFuture(xs[idx], idx);\n    return xs.length === 0 ? emptyArray : new Parallel(max, xs);\n  }\n\n  function parallel(max, xs){\n    if(!isUnsigned(max)) throwInvalidArgument('Future.parallel', 0, 'be a positive integer', max);\n    if(arguments.length === 1) return partial1(parallel$max, max);\n    return parallel$max(max, xs);\n  }\n\n  function invalidPromise$3(p, f){\n    return typeError(\n      'Future.tryP expects the function it\\'s given to return a Promise/Thenable'\n      + '\\n  Actual: ' + show(p) + '\\n  From calling: ' + showf(f)\n    );\n  }\n\n  function TryP(fn){\n    this._fn = fn;\n  }\n\n  TryP.prototype = Object.create(Core);\n\n  TryP.prototype._interpret = function TryP$interpret(rec, rej, res){\n    var open = true, fn = this._fn, p;\n    try{\n      p = fn();\n    }catch(e){\n      rec(e);\n      return noop;\n    }\n    if(!isThenable(p)){\n      rec(invalidPromise$3(p, fn));\n      return noop;\n    }\n    p.then(function TryP$res(x){\n      if(open){\n        open = false;\n        res(x);\n      }\n    }, function TryP$rej(x){\n      if(open){\n        open = false;\n        rej(x);\n      }\n    });\n    return function TryP$cancel(){ open = false; };\n  };\n\n  TryP.prototype.toString = function TryP$toString(){\n    return 'Future.tryP(' + show(this._fn) + ')';\n  };\n\n  function tryP(f){\n    if(!isFunction(f)) throwInvalidArgument('Future.tryP', 0, 'be a function', f);\n    return new TryP(f);\n  }\n\n  Future.of = Future[FL.of] = of;\n  Future.chainRec = Future[FL.chainRec] = chainRec;\n  Future.reject = reject;\n  Future.ap = ap;\n  Future.map = map;\n  Future.bimap = bimap;\n  Future.chain = chain;\n\n  var Par = concurrify(Future, never, race, function parallelAp(a, b){ return b._parallelAp(a) });\n  Par.of = Par[FL.of];\n  Par.zero = Par[FL.zero];\n  Par.map = map;\n  Par.ap = ap;\n  Par.alt = alt;\n\n  function isParallel(x){\n    return x instanceof Par || type(x) === Par['@@type'];\n  }\n\n  function seq(par){\n    if(!isParallel(par)) throwInvalidArgument('Future.seq', 0, 'to be a Par', par);\n    return par.sequential;\n  }\n\n  var Fluture = /*#__PURE__*/Object.freeze({\n    Future: Future,\n    default: Future,\n    Par: Par,\n    isParallel: isParallel,\n    seq: seq,\n    isFuture: isFuture,\n    reject: reject,\n    of: of,\n    never: never,\n    isNever: isNever,\n    after: after,\n    rejectAfter: rejectAfter,\n    attempt: attempt,\n    try: attempt,\n    cache: cache,\n    encase: encase,\n    encase2: encase2,\n    encase3: encase3,\n    encaseN: encaseN,\n    encaseN2: encaseN2,\n    encaseN3: encaseN3,\n    encaseP: encaseP,\n    encaseP2: encaseP2,\n    encaseP3: encaseP3,\n    go: go,\n    do: go,\n    hook: hook,\n    node: node,\n    parallel: parallel,\n    tryP: tryP,\n    ap: ap,\n    alt: alt,\n    map: map,\n    bimap: bimap,\n    chain: chain,\n    mapRej: mapRej,\n    chainRej: chainRej,\n    lastly: lastly,\n    finally: lastly,\n    and: and,\n    both: both,\n    or: or,\n    race: race,\n    swap: swap,\n    fold: fold,\n    done: done,\n    fork: fork,\n    forkCatch: forkCatch,\n    promise: promise,\n    value: value,\n    extractLeft: extractLeft,\n    extractRight: extractRight\n  });\n\n  var index_cjs = Object.assign(Future, Fluture);\n\n  return index_cjs;\n\n})));\n","//. # sanctuary-show\n//.\n//. Haskell has a `show` function which can be applied to a compatible value to\n//. produce a descriptive string representation of that value. The idea is that\n//. the string representation should, if possible, be an expression which would\n//. produce the original value if evaluated.\n//.\n//. This library provides a similar [`show`](#show) function.\n//.\n//. In general, this property should hold: `eval (show (x)) = x`. In some cases\n//. parens are necessary to ensure correct interpretation (`{}`, for example,\n//. is an empty block rather than an empty object in some contexts). Thus the\n//. property is more accurately stated `eval ('(' + show (x) + ')') = x`.\n//.\n//. One can make values of a custom type compatible with [`show`](#show) by\n//. defining a `@@show` method. For example:\n//.\n//. ```javascript\n//. //# Maybe#@@show :: Maybe a ~> () -> String\n//. //.\n//. //. ```javascript\n//. //. > show (Nothing)\n//. //. 'Nothing'\n//. //.\n//. //. > show (Just (['foo', 'bar', 'baz']))\n//. //. 'Just ([\"foo\", \"bar\", \"baz\"])'\n//. //. ```\n//. Maybe.prototype['@@show'] = function() {\n//.   return this.isNothing ? 'Nothing' : 'Just (' + show (this.value) + ')';\n//. };\n//. ```\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryShow = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$show :: String\n  var $$show = '@@show';\n\n  //  seen :: Array Any\n  var seen = [];\n\n  //  entry :: Object -> String -> String\n  function entry(o) {\n    return function(k) {\n      return show(k) + ': ' + show(o[k]);\n    };\n  }\n\n  //# show :: Showable a => a -> String\n  //.\n  //. Returns a useful string representation of the given value.\n  //.\n  //. Dispatches to the value's `@@show` method if present.\n  //.\n  //. Where practical, `show (eval ('(' + show (x) + ')')) = show (x)`.\n  //.\n  //. ```javascript\n  //. > show (null)\n  //. 'null'\n  //.\n  //. > show (undefined)\n  //. 'undefined'\n  //.\n  //. > show (true)\n  //. 'true'\n  //.\n  //. > show (new Boolean (false))\n  //. 'new Boolean (false)'\n  //.\n  //. > show (-0)\n  //. '-0'\n  //.\n  //. > show (NaN)\n  //. 'NaN'\n  //.\n  //. > show (new Number (Infinity))\n  //. 'new Number (Infinity)'\n  //.\n  //. > show ('foo\\n\"bar\"\\nbaz\\n')\n  //. '\"foo\\\\n\\\\\"bar\\\\\"\\\\nbaz\\\\n\"'\n  //.\n  //. > show (new String (''))\n  //. 'new String (\"\")'\n  //.\n  //. > show (['foo', 'bar', 'baz'])\n  //. '[\"foo\", \"bar\", \"baz\"]'\n  //.\n  //. > show ([[[[[0]]]]])\n  //. '[[[[[0]]]]]'\n  //.\n  //. > show ({x: [1, 2], y: [3, 4], z: [5, 6]})\n  //. '{\"x\": [1, 2], \"y\": [3, 4], \"z\": [5, 6]}'\n  //. ```\n  function show(x) {\n    if (seen.indexOf(x) >= 0) return '<Circular>';\n\n    switch (Object.prototype.toString.call(x)) {\n\n      case '[object Boolean]':\n        return typeof x === 'object' ?\n          'new Boolean (' + show(x.valueOf()) + ')' :\n          x.toString();\n\n      case '[object Number]':\n        return typeof x === 'object' ?\n          'new Number (' + show(x.valueOf()) + ')' :\n          1 / x === -Infinity ? '-0' : x.toString(10);\n\n      case '[object String]':\n        return typeof x === 'object' ?\n          'new String (' + show(x.valueOf()) + ')' :\n          JSON.stringify(x);\n\n      case '[object Date]':\n        return 'new Date (' +\n               show(isNaN(x.valueOf()) ? NaN : x.toISOString()) +\n               ')';\n\n      case '[object Error]':\n        return 'new ' + x.name + ' (' + show(x.message) + ')';\n\n      case '[object Arguments]':\n        return 'function () { return arguments; } (' +\n               Array.prototype.map.call(x, show).join(', ') +\n               ')';\n\n      case '[object Array]':\n        seen.push(x);\n        try {\n          return '[' + x.map(show).concat(\n            Object.keys(x)\n            .sort()\n            .filter(function(k) { return !/^\\d+$/.test(k); })\n            .map(entry(x))\n          ).join(', ') + ']';\n        } finally {\n          seen.pop();\n        }\n\n      case '[object Object]':\n        seen.push(x);\n        try {\n          return (\n            $$show in x &&\n            (x.constructor == null || x.constructor.prototype !== x) ?\n              x[$$show]() :\n              '{' + Object.keys(x).sort().map(entry(x)).join(', ') + '}'\n          );\n        } finally {\n          seen.pop();\n        }\n\n      default:\n        return String(x);\n\n    }\n  }\n\n  return show;\n\n}));\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. sanctuary-type-identifiers comprises:\n//.\n//.   - an npm and browser -compatible package for deriving the\n//.     _type identifier_ of a JavaScript value; and\n//.   - a specification which authors may follow to specify type\n//.     identifiers for their types.\n//.\n//. ### Specification\n//.\n//. For a type to be compatible with the algorithm:\n//.\n//.   - every member of the type MUST have a `constructor` property\n//.     pointing to an object known as the _type representative_;\n//.\n//.   - the type representative MUST have a `@@type` property\n//.     (the _type identifier_); and\n//.\n//.   - the type identifier MUST be a string primitive and SHOULD have\n//.     format `'<namespace>/<name>[@<version>]'`, where:\n//.\n//.       - `<namespace>` MUST consist of one or more characters, and\n//.         SHOULD equal the name of the npm package which defines the\n//.         type (including [scope][3] where appropriate);\n//.\n//.       - `<name>` MUST consist of one or more characters, and SHOULD\n//.         be the unique name of the type; and\n//.\n//.       - `<version>` MUST consist of one or more digits, and SHOULD\n//.         represent the version of the type.\n//.\n//. If the type identifier does not conform to the format specified above,\n//. it is assumed that the entire string represents the _name_ of the type;\n//. _namespace_ will be `null` and _version_ will be `0`.\n//.\n//. If the _version_ is not given, it is assumed to be `0`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  pattern :: RegExp\n  var pattern = new RegExp(\n    '^'\n  + '([\\\\s\\\\S]+)'   //  <namespace>\n  + '/'             //  SOLIDUS (U+002F)\n  + '([\\\\s\\\\S]+?)'  //  <name>\n  + '(?:'           //  optional non-capturing group {\n  +   '@'           //    COMMERCIAL AT (U+0040)\n  +   '([0-9]+)'    //    <version>\n  + ')?'            //  }\n  + '$'\n  );\n\n  //. ### Usage\n  //.\n  //. ```javascript\n  //. const type = require('sanctuary-type-identifiers');\n  //. ```\n  //.\n  //. ```javascript\n  //. > function Identity(x) {\n  //. .   if (!(this instanceof Identity)) return new Identity(x);\n  //. .   this.value = x;\n  //. . }\n  //. . Identity['@@type'] = 'my-package/Identity@1';\n  //.\n  //. > type.parse(type(Identity(0)))\n  //. {namespace: 'my-package', name: 'Identity', version: 1}\n  //. ```\n  //.\n  //. ### API\n  //.\n  //# type :: Any -> String\n  //.\n  //. Takes any value and returns a string which identifies its type. If the\n  //. value conforms to the [specification][4], the custom type identifier is\n  //. returned.\n  //.\n  //. ```javascript\n  //. > type(null)\n  //. 'Null'\n  //.\n  //. > type(true)\n  //. 'Boolean'\n  //.\n  //. > type(Identity(0))\n  //. 'my-package/Identity@1'\n  //. ```\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  //# type.parse :: String -> { namespace :: Nullable String, name :: String, version :: Number }\n  //.\n  //. Takes any string and parses it according to the [specification][4],\n  //. returning an object with `namespace`, `name`, and `version` fields.\n  //.\n  //. ```javascript\n  //. > type.parse('my-package/List@2')\n  //. {namespace: 'my-package', name: 'List', version: 2}\n  //.\n  //. > type.parse('nonsense!')\n  //. {namespace: null, name: 'nonsense!', version: 0}\n  //.\n  //. > type.parse(Identity['@@type'])\n  //. {namespace: 'my-package', name: 'Identity', version: 1}\n  //. ```\n  type.parse = function parse(s) {\n    var groups = pattern.exec(s);\n    return {\n      namespace: groups == null || groups[1] == null ? null : groups[1],\n      name:      groups == null                      ? s    : groups[2],\n      version:   groups == null || groups[3] == null ? 0    : Number(groups[3])\n    };\n  };\n\n  return type;\n\n}));\n\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: https://docs.npmjs.com/misc/scope\n//. [4]: #specification\n","/*\n         _______    ___    _________    ___   ___    _______    ______\n        /  ____/\\  /  /\\  /__   ___/\\  /  /\\ /  /\\  /  ____/\\  /  __  \\\n       /  /\\___\\/ /  / /  \\_/  /\\__\\/ /  /_//  / / /  /\\___\\/ /  /\\/  /\\\n      /  ____/\\  /  / /    /  / /    /  ___   / / /  ____/\\  /      _/ /\n     /  /\\___\\/ /  / /    /  / /    /  /\\_/  / / /  /\\___\\/ /  /|  |\\\\/\n    /______/\\  /__/ /    /__/ /    /__/ //__/ / /______/\\  /__/ |__| |\n    \\______\\/  \\__\\/     \\__\\/     \\__\\/ \\__\\/  \\______\\/  \\__\\/ \\__\\|\n                                                                            */\n\n//. <a href=\"https://github.com/fantasyland/fantasy-land\"><img alt=\"Fantasy Land\" src=\"https://raw.githubusercontent.com/fantasyland/fantasy-land/master/logo.png\" width=\"75\" height=\"75\" align=\"left\"></a>\n//.\n//. # sanctuary-either\n//.\n//. The Either type represents values with two possibilities: a value of type\n//. `Either a b` is either a Left whose value is of type `a` or a Right whose\n//. value is of type `b`.\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f (require ('sanctuary-show'),\n                        require ('sanctuary-type-classes'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define (['sanctuary-show', 'sanctuary-type-classes'], f);\n  } else {\n    self.sanctuaryEither = f (self.sanctuaryShow, self.sanctuaryTypeClasses);\n  }\n\n} (function(show, Z) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    var $ = __doctest.require ('sanctuary-def');\n    var type = __doctest.require ('sanctuary-type-identifiers');\n    var S = (function() {\n      var S = __doctest.require ('sanctuary');\n      var EitherType = $.BinaryType\n        ('sanctuary-either/Either')\n        ('')\n        (function(x) { return type (x) === Either['@@type']; })\n        (function(e) { return e.isLeft ? [e.value] : []; })\n        (function(e) { return e.isLeft ? [] : [e.value]; });\n      var env = Z.concat (S.env,\n                          [$.TypeClass, EitherType ($.Unknown) ($.Unknown)]);\n      return S.create ({checkTypes: true, env: env});\n    } ());\n  }\n\n  var Either = {};\n\n  var Left$prototype = {\n    /* eslint-disable key-spacing */\n    'constructor':            Either,\n    'isLeft':                 true,\n    'isRight':                false,\n    '@@show':                 Left$prototype$show,\n    'fantasy-land/map':       Left$prototype$map,\n    'fantasy-land/bimap':     Left$prototype$bimap,\n    'fantasy-land/ap':        Left$prototype$ap,\n    'fantasy-land/chain':     Left$prototype$chain,\n    'fantasy-land/alt':       Left$prototype$alt,\n    'fantasy-land/reduce':    Left$prototype$reduce,\n    'fantasy-land/traverse':  Left$prototype$traverse,\n    'fantasy-land/extend':    Left$prototype$extend\n    /* eslint-enable key-spacing */\n  };\n\n  var Right$prototype = {\n    /* eslint-disable key-spacing */\n    'constructor':            Either,\n    'isLeft':                 false,\n    'isRight':                true,\n    '@@show':                 Right$prototype$show,\n    'fantasy-land/map':       Right$prototype$map,\n    'fantasy-land/bimap':     Right$prototype$bimap,\n    'fantasy-land/ap':        Right$prototype$ap,\n    'fantasy-land/chain':     Right$prototype$chain,\n    'fantasy-land/alt':       Right$prototype$alt,\n    'fantasy-land/reduce':    Right$prototype$reduce,\n    'fantasy-land/traverse':  Right$prototype$traverse,\n    'fantasy-land/extend':    Right$prototype$extend\n    /* eslint-enable key-spacing */\n  };\n\n  var util =\n    typeof module === 'object' && typeof module.exports === 'object' ?\n    require ('util') :\n    /* istanbul ignore next */ {};\n  var inspect =\n    util.inspect != null && typeof util.inspect.custom === 'symbol' ?\n    /* istanbul ignore next */ util.inspect.custom :\n    /* istanbul ignore next */ 'inspect';\n  Left$prototype[inspect] = Left$prototype$show;\n  Right$prototype[inspect] = Right$prototype$show;\n\n  //. `Either a b` satisfies the following [Fantasy Land][] specifications:\n  //.\n  //. ```javascript\n  //. > const Useless = require ('sanctuary-useless')\n  //.\n  //. > S.map (k => k + ' '.repeat (16 - k.length) +\n  //. .             (Z[k].test (Right (Useless)) ? '\\u2705   ' :\n  //. .              Z[k].test (Right (['foo'])) ? '\\u2705 * ' :\n  //. .              /* otherwise */               '\\u274C   '))\n  //. .       (S.keys (Z.filter ($.test ([]) ($.TypeClass), Z)))\n  //. [ 'Setoid          ✅ * ',  // if ‘a’ and ‘b’ satisfy Setoid\n  //. . 'Ord             ✅ * ',  // if ‘a’ and ‘b’ satisfy Ord\n  //. . 'Semigroupoid    ❌   ',\n  //. . 'Category        ❌   ',\n  //. . 'Semigroup       ✅ * ',  // if ‘a’ and ‘b’ satisfy Semigroup\n  //. . 'Monoid          ❌   ',\n  //. . 'Group           ❌   ',\n  //. . 'Filterable      ❌   ',\n  //. . 'Functor         ✅   ',\n  //. . 'Bifunctor       ✅   ',\n  //. . 'Profunctor      ❌   ',\n  //. . 'Apply           ✅   ',\n  //. . 'Applicative     ✅   ',\n  //. . 'Chain           ✅   ',\n  //. . 'ChainRec        ✅   ',\n  //. . 'Monad           ✅   ',\n  //. . 'Alt             ✅   ',\n  //. . 'Plus            ❌   ',\n  //. . 'Alternative     ❌   ',\n  //. . 'Foldable        ✅   ',\n  //. . 'Traversable     ✅   ',\n  //. . 'Extend          ✅   ',\n  //. . 'Comonad         ❌   ',\n  //. . 'Contravariant   ❌   ' ]\n  //. ```\n\n  //# Either :: TypeRep Either\n  //.\n  //. Either [type representative][].\n\n  //# Either.Left :: a -> Either a b\n  //.\n  //. Constructs a value of type `Either a b` from a value of type `a`.\n  //.\n  //. ```javascript\n  //. > Left ('sqrt undefined for -1')\n  //. Left ('sqrt undefined for -1')\n  //. ```\n  var Left = Either.Left = function(value) {\n    var left = Object.create (Left$prototype);\n    if (Z.Setoid.test (value)) {\n      left['fantasy-land/equals'] = Left$prototype$equals;\n      if (Z.Ord.test (value)) {\n        left['fantasy-land/lte'] = Left$prototype$lte;\n      }\n    }\n    if (Z.Semigroup.test (value)) {\n      left['fantasy-land/concat'] = Left$prototype$concat;\n    }\n    left.value = value;\n    return left;\n  };\n\n  //# Either.Right :: b -> Either a b\n  //.\n  //. Constructs a value of type `Either a b` from a value of type `b`.\n  //.\n  //. ```javascript\n  //. > Right (42)\n  //. Right (42)\n  //. ```\n  var Right = Either.Right = function Right(value) {\n    var right = Object.create (Right$prototype);\n    if (Z.Setoid.test (value)) {\n      right['fantasy-land/equals'] = Right$prototype$equals;\n      if (Z.Ord.test (value)) {\n        right['fantasy-land/lte'] = Right$prototype$lte;\n      }\n    }\n    if (Z.Semigroup.test (value)) {\n      right['fantasy-land/concat'] = Right$prototype$concat;\n    }\n    right.value = value;\n    return right;\n  };\n\n  //# Either.@@type :: String\n  //.\n  //. Either [type identifier][].\n  //.\n  //. ```javascript\n  //. > type (Right (42))\n  //. 'sanctuary-either/Either@1'\n  //.\n  //. > type.parse (type (Right (42)))\n  //. {namespace: 'sanctuary-either', name: 'Either', version: 1}\n  //. ```\n  Either['@@type'] = 'sanctuary-either/Either@1';\n\n  //# Either.fantasy-land/of :: b -> Either a b\n  //.\n  //.   - `of (Either) (x)` is equivalent to `Right (x)`\n  //.\n  //. ```javascript\n  //. > S.of (Either) (42)\n  //. Right (42)\n  //. ```\n  Either['fantasy-land/of'] = Right;\n\n  function next(x) { return {tag: next, value: x}; }\n  function done(x) { return {tag: done, value: x}; }\n\n  //# Either.fantasy-land/chainRec :: ((a -> c, b -> c, a) -> Either d c, a) -> Either d b\n  //.\n  //. ```javascript\n  //. > Z.chainRec (\n  //. .   Either,\n  //. .   (next, done, x) =>\n  //. .     x <= 1 ? Left ('!!') : Right (x >= 1000 ? done (x) : next (x * x)),\n  //. .   1\n  //. . )\n  //. Left ('!!')\n  //.\n  //. > Z.chainRec (\n  //. .   Either,\n  //. .   (next, done, x) =>\n  //. .     x <= 1 ? Left ('!!') : Right (x >= 1000 ? done (x) : next (x * x)),\n  //. .   2\n  //. . )\n  //. Right (65536)\n  //. ```\n  Either['fantasy-land/chainRec'] = function(f, x) {\n    var r = next (x);\n    while (r.tag === next) {\n      var either = f (next, done, r.value);\n      if (either.isLeft) return either;\n      r = either.value;\n    }\n    return Right (r.value);\n  };\n\n  //# Either#@@show :: (Showable a, Showable b) => Either a b ~> () -> String\n  //.\n  //.   - `show (Left (x))` is equivalent to `'Left (' + show (x) + ')'`\n  //.   - `show (Right (x))` is equivalent to `'Right (' + show (x) + ')'`\n  //.\n  //. ```javascript\n  //. > show (Left ('sqrt undefined for -1'))\n  //. 'Left (\"sqrt undefined for -1\")'\n  //.\n  //. > show (Right ([1, 2, 3]))\n  //. 'Right ([1, 2, 3])'\n  //. ```\n  function Left$prototype$show() {\n    return 'Left (' + show (this.value) + ')';\n  }\n  function Right$prototype$show() {\n    return 'Right (' + show (this.value) + ')';\n  }\n\n  //# Either#fantasy-land/equals :: (Setoid a, Setoid b) => Either a b ~> Either a b -> Boolean\n  //.\n  //.   - `Left (x)` is equal to `Left (y)` [iff][] `x` is equal to `y`\n  //.     according to [`Z.equals`][]\n  //.   - `Right (x)` is equal to `Right (y)` [iff][] `x` is equal to `y`\n  //.     according to [`Z.equals`][]\n  //.   - `Left (x)` is never equal to `Right (y)`\n  //.\n  //. ```javascript\n  //. > S.equals (Left ([1, 2, 3])) (Left ([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals (Right ([1, 2, 3])) (Right ([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals (Left ([1, 2, 3])) (Right ([1, 2, 3]))\n  //. false\n  //. ```\n  function Left$prototype$equals(other) {\n    return other.isLeft && Z.equals (this.value, other.value);\n  }\n  function Right$prototype$equals(other) {\n    return other.isRight && Z.equals (this.value, other.value);\n  }\n\n  //# Either#fantasy-land/lte :: (Ord a, Ord b) => Either a b ~> Either a b -> Boolean\n  //.\n  //.   - `Left (x)` is less than or equal to `Left (y)` [iff][] `x` is less\n  //.     than or equal to `y` according to [`Z.lte`][]\n  //.   - `Right (x)` is less than or equal to `Right (y)` [iff][] `x` is less\n  //.     than or equal to `y` according to [`Z.lte`][]\n  //.   - `Left (x)` is always less than `Right (y)`\n  //.\n  //. ```javascript\n  //. > S.filter (S.lte (Left (1))) ([Left (0), Left (1), Left (2)])\n  //. [Left (0), Left (1)]\n  //.\n  //. > S.filter (S.lte (Right (1))) ([Right (0), Right (1), Right (2)])\n  //. [Right (0), Right (1)]\n  //.\n  //. > S.filter (S.lte (Left (1))) ([Right (0), Right (1), Right (2)])\n  //. []\n  //.\n  //. > S.filter (S.lte (Right (1))) ([Left (0), Left (1), Left (2)])\n  //. [Left (0), Left (1), Left (2)]\n  //. ```\n  function Left$prototype$lte(other) {\n    return other.isRight || Z.lte (this.value, other.value);\n  }\n  function Right$prototype$lte(other) {\n    return other.isRight && Z.lte (this.value, other.value);\n  }\n\n  //# Either#fantasy-land/concat :: (Semigroup a, Semigroup b) => Either a b ~> Either a b -> Either a b\n  //.\n  //.   - `concat (Left (x)) (Left (y))` is equivalent to\n  //.     `Left (concat (x) (y))`\n  //.   - `concat (Right (x)) (Right (y))` is equivalent to\n  //.     `Right (concat (x) (y))`\n  //.   - `concat (Left (x)) (Right (y))` is equivalent to `Right (y)`\n  //.   - `concat (Right (x)) (Left (y))` is equivalent to `Right (x)`\n  //.\n  //. ```javascript\n  //. > S.concat (Left ('abc')) (Left ('def'))\n  //. Left ('abcdef')\n  //.\n  //. > S.concat (Right ([1, 2, 3])) (Right ([4, 5, 6]))\n  //. Right ([1, 2, 3, 4, 5, 6])\n  //.\n  //. > S.concat (Left ('abc')) (Right ([1, 2, 3]))\n  //. Right ([1, 2, 3])\n  //.\n  //. > S.concat (Right ([1, 2, 3])) (Left ('abc'))\n  //. Right ([1, 2, 3])\n  //. ```\n  function Left$prototype$concat(other) {\n    return other.isLeft ? Left (Z.concat (this.value, other.value)) : other;\n  }\n  function Right$prototype$concat(other) {\n    return other.isRight ? Right (Z.concat (this.value, other.value)) : this;\n  }\n\n  //# Either#fantasy-land/map :: Either a b ~> (b -> c) -> Either a c\n  //.\n  //.   - `map (f) (Left (x))` is equivalent to `Left (x)`\n  //.   - `map (f) (Right (x))` is equivalent to `Right (f (x))`\n  //.\n  //. ```javascript\n  //. > S.map (S.add (1)) (Left ('sqrt undefined for -1'))\n  //. Left ('sqrt undefined for -1')\n  //.\n  //. > S.map (S.add (1)) (Right (99))\n  //. Right (100)\n  //. ```\n  function Left$prototype$map(f) {\n    return this;\n  }\n  function Right$prototype$map(f) {\n    return Right (f (this.value));\n  }\n\n  //# Either#fantasy-land/bimap :: Either a c ~> (a -> b, c -> d) -> Either b d\n  //.\n  //.   - `bimap (f) (g) (Left (x))` is equivalent to `Left (f (x))`\n  //.   - `bimap (f) (g) (Right (x))` is equivalent to `Right (g (x))`\n  //.\n  //. ```javascript\n  //. > S.bimap (S.toUpper) (S.add (1)) (Left ('abc'))\n  //. Left ('ABC')\n  //.\n  //. > S.bimap (S.toUpper) (S.add (1)) (Right (99))\n  //. Right (100)\n  //. ```\n  function Left$prototype$bimap(f, g) {\n    return Left (f (this.value));\n  }\n  function Right$prototype$bimap(f, g) {\n    return Right (g (this.value));\n  }\n\n  //# Either#fantasy-land/ap :: Either a b ~> Either a (b -> c) -> Either a c\n  //.\n  //.   - `ap (Left (x)) (Left (y))` is equivalent to `Left (x)`\n  //.   - `ap (Left (x)) (Right (y))` is equivalent to `Left (x)`\n  //.   - `ap (Right (f)) (Left (x))` is equivalent to `Left (x)`\n  //.   - `ap (Right (f)) (Right (x))` is equivalent to `Right (f (x))`\n  //.\n  //. ```javascript\n  //. > S.ap (Left ('div undefined for 0')) (Left ('sqrt undefined for -1'))\n  //. Left ('div undefined for 0')\n  //.\n  //. > S.ap (Left ('div undefined for 0')) (Right (99))\n  //. Left ('div undefined for 0')\n  //.\n  //. > S.ap (Right (S.add (1))) (Left ('sqrt undefined for -1'))\n  //. Left ('sqrt undefined for -1')\n  //.\n  //. > S.ap (Right (S.add (1))) (Right (99))\n  //. Right (100)\n  //. ```\n  function Left$prototype$ap(other) {\n    return other.isLeft ? other : this;\n  }\n  function Right$prototype$ap(other) {\n    return other.isLeft ? other : Right (other.value (this.value));\n  }\n\n  //# Either#fantasy-land/chain :: Either a b ~> (b -> Either a c) -> Either a c\n  //.\n  //.   - `chain (f) (Left (x))` is equivalent to `Left (x)`\n  //.   - `chain (f) (Right (x))` is equivalent to `f (x)`\n  //.\n  //. ```javascript\n  //. > const sqrt = n => n < 0 ? Left ('sqrt undefined for ' + show (n))\n  //. .                         : Right (Math.sqrt (n))\n  //.\n  //. > S.chain (sqrt) (Left ('div undefined for 0'))\n  //. Left ('div undefined for 0')\n  //.\n  //. > S.chain (sqrt) (Right (-1))\n  //. Left ('sqrt undefined for -1')\n  //.\n  //. > S.chain (sqrt) (Right (25))\n  //. Right (5)\n  //. ```\n  function Left$prototype$chain(f) {\n    return this;\n  }\n  function Right$prototype$chain(f) {\n    return f (this.value);\n  }\n\n  //# Either#fantasy-land/alt :: Either a b ~> Either a b -> Either a b\n  //.\n  //.   - `alt (Left (x)) (Left (y))` is equivalent to `Left (y)`\n  //.   - `alt (Left (x)) (Right (y))` is equivalent to `Right (y)`\n  //.   - `alt (Right (x)) (Left (y))` is equivalent to `Right (x)`\n  //.   - `alt (Right (x)) (Right (y))` is equivalent to `Right (x)`\n  //.\n  //. ```javascript\n  //. > S.alt (Left ('A')) (Left ('B'))\n  //. Left ('B')\n  //.\n  //. > S.alt (Left ('C')) (Right (1))\n  //. Right (1)\n  //.\n  //. > S.alt (Right (2)) (Left ('D'))\n  //. Right (2)\n  //.\n  //. > S.alt (Right (3)) (Right (4))\n  //. Right (3)\n  //. ```\n  function Left$prototype$alt(other) {\n    return other;\n  }\n  function Right$prototype$alt(other) {\n    return this;\n  }\n\n  //# Either#fantasy-land/reduce :: Either a b ~> ((c, b) -> c, c) -> c\n  //.\n  //.   - `reduce (f) (x) (Left (y))` is equivalent to `x`\n  //.   - `reduce (f) (x) (Right (y))` is equivalent to `f (x) (y)`\n  //.\n  //. ```javascript\n  //. > S.reduce (S.concat) ([1]) (Left ('sqrt undefined for -1'))\n  //. [1]\n  //.\n  //. > S.reduce (S.concat) ([1]) (Right ([2]))\n  //. [1, 2]\n  //. ```\n  function Left$prototype$reduce(f, x) {\n    return x;\n  }\n  function Right$prototype$reduce(f, x) {\n    return f (x, this.value);\n  }\n\n  //# Either#fantasy-land/traverse :: Applicative f => Either a b ~> (TypeRep f, b -> f c) -> f (Either a c)\n  //.\n  //.   - `traverse (A) (f) (Left (x))` is equivalent to `of (A) (Left (x))`\n  //.   - `traverse (A) (f) (Right (x))` is equivalent to `map (Right) (f (x))`\n  //.\n  //. ```javascript\n  //. > S.traverse (Array) (S.words) (Left ('sqrt undefined for -1'))\n  //. [Left ('sqrt undefined for -1')]\n  //.\n  //. > S.traverse (Array) (S.words) (Right ('foo bar baz'))\n  //. [Right ('foo'), Right ('bar'), Right ('baz')]\n  //. ```\n  function Left$prototype$traverse(typeRep, f) {\n    return Z.of (typeRep, this);\n  }\n  function Right$prototype$traverse(typeRep, f) {\n    return Z.map (Right, f (this.value));\n  }\n\n  //# Either#fantasy-land/extend :: Either a b ~> (Either a b -> c) -> Either a c\n  //.\n  //.   - `extend (f) (Left (x))` is equivalent to `Left (x)`\n  //.   - `extend (f) (Right (x))` is equivalent to `Right (f (Right (x)))`\n  //.\n  //. ```javascript\n  //. > S.extend (S.reduce (S.add) (1)) (Left ('sqrt undefined for -1'))\n  //. Left ('sqrt undefined for -1')\n  //.\n  //. > S.extend (S.reduce (S.add) (1)) (Right (99))\n  //. Right (100)\n  //. ```\n  function Left$prototype$extend(f) {\n    return this;\n  }\n  function Right$prototype$extend(f) {\n    return Right (f (this));\n  }\n\n  return Either;\n\n}));\n\n//. [Fantasy Land]:             v:fantasyland/fantasy-land\n//. [`Z.equals`]:               v:sanctuary-js/sanctuary-type-classes#equals\n//. [`Z.lte`]:                  v:sanctuary-js/sanctuary-type-classes#lte\n//. [iff]:                      https://en.wikipedia.org/wiki/If_and_only_if\n//. [type identifier]:          v:sanctuary-js/sanctuary-type-identifiers\n//. [type representative]:      v:fantasyland/fantasy-land#type-representatives\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n","import { mat4, quat, vec3, vec2, vec4 } from 'gl-matrix';\nimport { Future, parallel } from 'fluture';\nimport { fetchImage, fetchJsonUrl, fetchArrayBufferUrl, loadImageFromArrayBuffer } from 'fluture-loaders';\n\nvar GltfAnimationTargetPath;\r\n(function (GltfAnimationTargetPath) {\r\n    GltfAnimationTargetPath[GltfAnimationTargetPath[\"TRANSLATION\"] = 1] = \"TRANSLATION\";\r\n    GltfAnimationTargetPath[GltfAnimationTargetPath[\"ROTATION\"] = 2] = \"ROTATION\";\r\n    GltfAnimationTargetPath[GltfAnimationTargetPath[\"SCALE\"] = 3] = \"SCALE\";\r\n    GltfAnimationTargetPath[GltfAnimationTargetPath[\"WEIGHTS\"] = 4] = \"WEIGHTS\";\r\n})(GltfAnimationTargetPath || (GltfAnimationTargetPath = {}));\r\nvar GltfAnimationInterpolation;\r\n(function (GltfAnimationInterpolation) {\r\n    GltfAnimationInterpolation[GltfAnimationInterpolation[\"LINEAR\"] = 1] = \"LINEAR\";\r\n    GltfAnimationInterpolation[GltfAnimationInterpolation[\"STEP\"] = 2] = \"STEP\";\r\n    GltfAnimationInterpolation[GltfAnimationInterpolation[\"CUBICSPLINE\"] = 3] = \"CUBICSPLINE\";\r\n})(GltfAnimationInterpolation || (GltfAnimationInterpolation = {}));\n\nvar GltfMaterialAlphaMode;\r\n(function (GltfMaterialAlphaMode) {\r\n    GltfMaterialAlphaMode[GltfMaterialAlphaMode[\"OPAQUE\"] = 1] = \"OPAQUE\";\r\n    GltfMaterialAlphaMode[GltfMaterialAlphaMode[\"MASK\"] = 2] = \"MASK\";\r\n    GltfMaterialAlphaMode[GltfMaterialAlphaMode[\"BLEND\"] = 3] = \"BLEND\";\r\n})(GltfMaterialAlphaMode || (GltfMaterialAlphaMode = {}));\n\n//would be nice to extend but that's not really doable with enums\r\nvar GltfNodeKind;\r\n(function (GltfNodeKind) {\r\n    GltfNodeKind[GltfNodeKind[\"MESH\"] = 3] = \"MESH\";\r\n    GltfNodeKind[GltfNodeKind[\"SKIN\"] = 4] = \"SKIN\";\r\n})(GltfNodeKind || (GltfNodeKind = {}));\n\nvar GltfPrimitiveDrawKind;\r\n(function (GltfPrimitiveDrawKind) {\r\n    GltfPrimitiveDrawKind[GltfPrimitiveDrawKind[\"ELEMENTS\"] = 1] = \"ELEMENTS\";\r\n    GltfPrimitiveDrawKind[GltfPrimitiveDrawKind[\"ARRAY\"] = 2] = \"ARRAY\";\r\n})(GltfPrimitiveDrawKind || (GltfPrimitiveDrawKind = {}));\n\nconst GltfIblExtensionName = \"PURE3D_IBL\";\n\nconst GltfLightsExtensionName = \"KHR_lights_punctual\";\r\nconst GltfLights_MAX = 10;\n\nconst GltfUnlitExtensionName = \"KHR_Unlit\";\n\nvar CameraKind;\r\n(function (CameraKind) {\r\n    CameraKind[CameraKind[\"PERSPECTIVE\"] = 0] = \"PERSPECTIVE\";\r\n    CameraKind[CameraKind[\"ORTHOGRAPHIC\"] = 1] = \"ORTHOGRAPHIC\";\r\n})(CameraKind || (CameraKind = {}));\n\nvar NodeKind;\r\n(function (NodeKind) {\r\n    NodeKind[NodeKind[\"CAMERA\"] = 1] = \"CAMERA\";\r\n    NodeKind[NodeKind[\"LIGHT\"] = 2] = \"LIGHT\";\r\n})(NodeKind || (NodeKind = {}));\n\nvar LightKind;\r\n(function (LightKind) {\r\n    LightKind[LightKind[\"Directional\"] = 1] = \"Directional\";\r\n    LightKind[LightKind[\"Point\"] = 2] = \"Point\";\r\n    LightKind[LightKind[\"Spot\"] = 3] = \"Spot\";\r\n})(LightKind || (LightKind = {}));\n\n//taken from https://raw.githubusercontent.com/mattdesl/gl-constants/master/1.0/index.js\r\n//would be good to properly check against https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants\r\nvar WebGlConstants;\r\n(function (WebGlConstants) {\r\n    WebGlConstants[WebGlConstants[\"ACTIVE_ATTRIBUTES\"] = 35721] = \"ACTIVE_ATTRIBUTES\";\r\n    WebGlConstants[WebGlConstants[\"ACTIVE_ATTRIBUTE_MAX_LENGTH\"] = 35722] = \"ACTIVE_ATTRIBUTE_MAX_LENGTH\";\r\n    WebGlConstants[WebGlConstants[\"ACTIVE_TEXTURE\"] = 34016] = \"ACTIVE_TEXTURE\";\r\n    WebGlConstants[WebGlConstants[\"ACTIVE_UNIFORMS\"] = 35718] = \"ACTIVE_UNIFORMS\";\r\n    WebGlConstants[WebGlConstants[\"ACTIVE_UNIFORM_MAX_LENGTH\"] = 35719] = \"ACTIVE_UNIFORM_MAX_LENGTH\";\r\n    WebGlConstants[WebGlConstants[\"ALIASED_LINE_WIDTH_RANGE\"] = 33902] = \"ALIASED_LINE_WIDTH_RANGE\";\r\n    WebGlConstants[WebGlConstants[\"ALIASED_POINT_SIZE_RANGE\"] = 33901] = \"ALIASED_POINT_SIZE_RANGE\";\r\n    WebGlConstants[WebGlConstants[\"ALPHA\"] = 6406] = \"ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"ALPHA_BITS\"] = 3413] = \"ALPHA_BITS\";\r\n    WebGlConstants[WebGlConstants[\"ALWAYS\"] = 519] = \"ALWAYS\";\r\n    WebGlConstants[WebGlConstants[\"ARRAY_BUFFER\"] = 34962] = \"ARRAY_BUFFER\";\r\n    WebGlConstants[WebGlConstants[\"ARRAY_BUFFER_BINDING\"] = 34964] = \"ARRAY_BUFFER_BINDING\";\r\n    WebGlConstants[WebGlConstants[\"ATTACHED_SHADERS\"] = 35717] = \"ATTACHED_SHADERS\";\r\n    WebGlConstants[WebGlConstants[\"BACK\"] = 1029] = \"BACK\";\r\n    WebGlConstants[WebGlConstants[\"BLEND\"] = 3042] = \"BLEND\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_COLOR\"] = 32773] = \"BLEND_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_DST_ALPHA\"] = 32970] = \"BLEND_DST_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_DST_RGB\"] = 32968] = \"BLEND_DST_RGB\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_EQUATION\"] = 32777] = \"BLEND_EQUATION\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_EQUATION_ALPHA\"] = 34877] = \"BLEND_EQUATION_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_EQUATION_RGB\"] = 32777] = \"BLEND_EQUATION_RGB\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_SRC_ALPHA\"] = 32971] = \"BLEND_SRC_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"BLEND_SRC_RGB\"] = 32969] = \"BLEND_SRC_RGB\";\r\n    WebGlConstants[WebGlConstants[\"BLUE_BITS\"] = 3412] = \"BLUE_BITS\";\r\n    WebGlConstants[WebGlConstants[\"BOOL\"] = 35670] = \"BOOL\";\r\n    WebGlConstants[WebGlConstants[\"BOOL_VEC2\"] = 35671] = \"BOOL_VEC2\";\r\n    WebGlConstants[WebGlConstants[\"BOOL_VEC3\"] = 35672] = \"BOOL_VEC3\";\r\n    WebGlConstants[WebGlConstants[\"BOOL_VEC4\"] = 35673] = \"BOOL_VEC4\";\r\n    WebGlConstants[WebGlConstants[\"BROWSER_DEFAULT_WEBGL\"] = 37444] = \"BROWSER_DEFAULT_WEBGL\";\r\n    WebGlConstants[WebGlConstants[\"BUFFER_SIZE\"] = 34660] = \"BUFFER_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"BUFFER_USAGE\"] = 34661] = \"BUFFER_USAGE\";\r\n    WebGlConstants[WebGlConstants[\"BYTE\"] = 5120] = \"BYTE\";\r\n    WebGlConstants[WebGlConstants[\"CCW\"] = 2305] = \"CCW\";\r\n    WebGlConstants[WebGlConstants[\"CLAMP_TO_EDGE\"] = 33071] = \"CLAMP_TO_EDGE\";\r\n    WebGlConstants[WebGlConstants[\"COLOR_ATTACHMENT0\"] = 36064] = \"COLOR_ATTACHMENT0\";\r\n    WebGlConstants[WebGlConstants[\"COLOR_BUFFER_BIT\"] = 16384] = \"COLOR_BUFFER_BIT\";\r\n    WebGlConstants[WebGlConstants[\"COLOR_CLEAR_VALUE\"] = 3106] = \"COLOR_CLEAR_VALUE\";\r\n    WebGlConstants[WebGlConstants[\"COLOR_WRITEMASK\"] = 3107] = \"COLOR_WRITEMASK\";\r\n    WebGlConstants[WebGlConstants[\"COMPILE_STATUS\"] = 35713] = \"COMPILE_STATUS\";\r\n    WebGlConstants[WebGlConstants[\"COMPRESSED_TEXTURE_FORMATS\"] = 34467] = \"COMPRESSED_TEXTURE_FORMATS\";\r\n    WebGlConstants[WebGlConstants[\"CONSTANT_ALPHA\"] = 32771] = \"CONSTANT_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"CONSTANT_COLOR\"] = 32769] = \"CONSTANT_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"CONTEXT_LOST_WEBGL\"] = 37442] = \"CONTEXT_LOST_WEBGL\";\r\n    WebGlConstants[WebGlConstants[\"CULL_FACE\"] = 2884] = \"CULL_FACE\";\r\n    WebGlConstants[WebGlConstants[\"CULL_FACE_MODE\"] = 2885] = \"CULL_FACE_MODE\";\r\n    WebGlConstants[WebGlConstants[\"CURRENT_PROGRAM\"] = 35725] = \"CURRENT_PROGRAM\";\r\n    WebGlConstants[WebGlConstants[\"CURRENT_VERTEX_ATTRIB\"] = 34342] = \"CURRENT_VERTEX_ATTRIB\";\r\n    WebGlConstants[WebGlConstants[\"CW\"] = 2304] = \"CW\";\r\n    WebGlConstants[WebGlConstants[\"DECR\"] = 7683] = \"DECR\";\r\n    WebGlConstants[WebGlConstants[\"DECR_WRAP\"] = 34056] = \"DECR_WRAP\";\r\n    WebGlConstants[WebGlConstants[\"DELETE_STATUS\"] = 35712] = \"DELETE_STATUS\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_ATTACHMENT\"] = 36096] = \"DEPTH_ATTACHMENT\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_BITS\"] = 3414] = \"DEPTH_BITS\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_BUFFER_BIT\"] = 256] = \"DEPTH_BUFFER_BIT\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_CLEAR_VALUE\"] = 2931] = \"DEPTH_CLEAR_VALUE\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_COMPONENT\"] = 6402] = \"DEPTH_COMPONENT\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_COMPONENT16\"] = 33189] = \"DEPTH_COMPONENT16\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_FUNC\"] = 2932] = \"DEPTH_FUNC\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_RANGE\"] = 2928] = \"DEPTH_RANGE\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_STENCIL\"] = 34041] = \"DEPTH_STENCIL\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_STENCIL_ATTACHMENT\"] = 33306] = \"DEPTH_STENCIL_ATTACHMENT\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_TEST\"] = 2929] = \"DEPTH_TEST\";\r\n    WebGlConstants[WebGlConstants[\"DEPTH_WRITEMASK\"] = 2930] = \"DEPTH_WRITEMASK\";\r\n    WebGlConstants[WebGlConstants[\"DITHER\"] = 3024] = \"DITHER\";\r\n    WebGlConstants[WebGlConstants[\"DONT_CARE\"] = 4352] = \"DONT_CARE\";\r\n    WebGlConstants[WebGlConstants[\"DST_ALPHA\"] = 772] = \"DST_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"DST_COLOR\"] = 774] = \"DST_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"DYNAMIC_DRAW\"] = 35048] = \"DYNAMIC_DRAW\";\r\n    WebGlConstants[WebGlConstants[\"ELEMENT_ARRAY_BUFFER\"] = 34963] = \"ELEMENT_ARRAY_BUFFER\";\r\n    WebGlConstants[WebGlConstants[\"ELEMENT_ARRAY_BUFFER_BINDING\"] = 34965] = \"ELEMENT_ARRAY_BUFFER_BINDING\";\r\n    WebGlConstants[WebGlConstants[\"EQUAL\"] = 514] = \"EQUAL\";\r\n    WebGlConstants[WebGlConstants[\"FASTEST\"] = 4353] = \"FASTEST\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT\"] = 5126] = \"FLOAT\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_MAT2\"] = 35674] = \"FLOAT_MAT2\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_MAT3\"] = 35675] = \"FLOAT_MAT3\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_MAT4\"] = 35676] = \"FLOAT_MAT4\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_VEC2\"] = 35664] = \"FLOAT_VEC2\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_VEC3\"] = 35665] = \"FLOAT_VEC3\";\r\n    WebGlConstants[WebGlConstants[\"FLOAT_VEC4\"] = 35666] = \"FLOAT_VEC4\";\r\n    WebGlConstants[WebGlConstants[\"FRAGMENT_SHADER\"] = 35632] = \"FRAGMENT_SHADER\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER\"] = 36160] = \"FRAMEBUFFER\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME\"] = 36049] = \"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\"] = 36048] = \"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\"] = 36051] = \"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL\"] = 36050] = \"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_BINDING\"] = 36006] = \"FRAMEBUFFER_BINDING\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_COMPLETE\"] = 36053] = \"FRAMEBUFFER_COMPLETE\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\"] = 36054] = \"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\"] = 36057] = \"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\"] = 36055] = \"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\";\r\n    WebGlConstants[WebGlConstants[\"FRAMEBUFFER_UNSUPPORTED\"] = 36061] = \"FRAMEBUFFER_UNSUPPORTED\";\r\n    WebGlConstants[WebGlConstants[\"FRONT\"] = 1028] = \"FRONT\";\r\n    WebGlConstants[WebGlConstants[\"FRONT_AND_BACK\"] = 1032] = \"FRONT_AND_BACK\";\r\n    WebGlConstants[WebGlConstants[\"FRONT_FACE\"] = 2886] = \"FRONT_FACE\";\r\n    WebGlConstants[WebGlConstants[\"FUNC_ADD\"] = 32774] = \"FUNC_ADD\";\r\n    WebGlConstants[WebGlConstants[\"FUNC_REVERSE_SUBTRACT\"] = 32779] = \"FUNC_REVERSE_SUBTRACT\";\r\n    WebGlConstants[WebGlConstants[\"FUNC_SUBTRACT\"] = 32778] = \"FUNC_SUBTRACT\";\r\n    WebGlConstants[WebGlConstants[\"GENERATE_MIPMAP_HINT\"] = 33170] = \"GENERATE_MIPMAP_HINT\";\r\n    WebGlConstants[WebGlConstants[\"GEQUAL\"] = 518] = \"GEQUAL\";\r\n    WebGlConstants[WebGlConstants[\"GREATER\"] = 516] = \"GREATER\";\r\n    WebGlConstants[WebGlConstants[\"GREEN_BITS\"] = 3411] = \"GREEN_BITS\";\r\n    WebGlConstants[WebGlConstants[\"HIGH_FLOAT\"] = 36338] = \"HIGH_FLOAT\";\r\n    WebGlConstants[WebGlConstants[\"HIGH_INT\"] = 36341] = \"HIGH_INT\";\r\n    WebGlConstants[WebGlConstants[\"INCR\"] = 7682] = \"INCR\";\r\n    WebGlConstants[WebGlConstants[\"INCR_WRAP\"] = 34055] = \"INCR_WRAP\";\r\n    WebGlConstants[WebGlConstants[\"INFO_LOG_LENGTH\"] = 35716] = \"INFO_LOG_LENGTH\";\r\n    WebGlConstants[WebGlConstants[\"INT\"] = 5124] = \"INT\";\r\n    WebGlConstants[WebGlConstants[\"INT_VEC2\"] = 35667] = \"INT_VEC2\";\r\n    WebGlConstants[WebGlConstants[\"INT_VEC3\"] = 35668] = \"INT_VEC3\";\r\n    WebGlConstants[WebGlConstants[\"INT_VEC4\"] = 35669] = \"INT_VEC4\";\r\n    WebGlConstants[WebGlConstants[\"INVALID_ENUM\"] = 1280] = \"INVALID_ENUM\";\r\n    WebGlConstants[WebGlConstants[\"INVALID_FRAMEBUFFER_OPERATION\"] = 1286] = \"INVALID_FRAMEBUFFER_OPERATION\";\r\n    WebGlConstants[WebGlConstants[\"INVALID_OPERATION\"] = 1282] = \"INVALID_OPERATION\";\r\n    WebGlConstants[WebGlConstants[\"INVALID_VALUE\"] = 1281] = \"INVALID_VALUE\";\r\n    WebGlConstants[WebGlConstants[\"INVERT\"] = 5386] = \"INVERT\";\r\n    WebGlConstants[WebGlConstants[\"KEEP\"] = 7680] = \"KEEP\";\r\n    WebGlConstants[WebGlConstants[\"LEQUAL\"] = 515] = \"LEQUAL\";\r\n    WebGlConstants[WebGlConstants[\"LESS\"] = 513] = \"LESS\";\r\n    WebGlConstants[WebGlConstants[\"LINEAR\"] = 9729] = \"LINEAR\";\r\n    WebGlConstants[WebGlConstants[\"LINEAR_MIPMAP_LINEAR\"] = 9987] = \"LINEAR_MIPMAP_LINEAR\";\r\n    WebGlConstants[WebGlConstants[\"LINEAR_MIPMAP_NEAREST\"] = 9985] = \"LINEAR_MIPMAP_NEAREST\";\r\n    WebGlConstants[WebGlConstants[\"LINES\"] = 1] = \"LINES\";\r\n    WebGlConstants[WebGlConstants[\"LINE_LOOP\"] = 2] = \"LINE_LOOP\";\r\n    WebGlConstants[WebGlConstants[\"LINE_STRIP\"] = 3] = \"LINE_STRIP\";\r\n    WebGlConstants[WebGlConstants[\"LINE_WIDTH\"] = 2849] = \"LINE_WIDTH\";\r\n    WebGlConstants[WebGlConstants[\"LINK_STATUS\"] = 35714] = \"LINK_STATUS\";\r\n    WebGlConstants[WebGlConstants[\"LOW_FLOAT\"] = 36336] = \"LOW_FLOAT\";\r\n    WebGlConstants[WebGlConstants[\"LOW_INT\"] = 36339] = \"LOW_INT\";\r\n    WebGlConstants[WebGlConstants[\"LUMINANCE\"] = 6409] = \"LUMINANCE\";\r\n    WebGlConstants[WebGlConstants[\"LUMINANCE_ALPHA\"] = 6410] = \"LUMINANCE_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"MAX_COMBINED_TEXTURE_IMAGE_UNITS\"] = 35661] = \"MAX_COMBINED_TEXTURE_IMAGE_UNITS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_CUBE_MAP_TEXTURE_SIZE\"] = 34076] = \"MAX_CUBE_MAP_TEXTURE_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"MAX_FRAGMENT_UNIFORM_VECTORS\"] = 36349] = \"MAX_FRAGMENT_UNIFORM_VECTORS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_RENDERBUFFER_SIZE\"] = 34024] = \"MAX_RENDERBUFFER_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"MAX_TEXTURE_IMAGE_UNITS\"] = 34930] = \"MAX_TEXTURE_IMAGE_UNITS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_TEXTURE_SIZE\"] = 3379] = \"MAX_TEXTURE_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"MAX_VARYING_VECTORS\"] = 36348] = \"MAX_VARYING_VECTORS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_VERTEX_ATTRIBS\"] = 34921] = \"MAX_VERTEX_ATTRIBS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_VERTEX_TEXTURE_IMAGE_UNITS\"] = 35660] = \"MAX_VERTEX_TEXTURE_IMAGE_UNITS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_VERTEX_UNIFORM_VECTORS\"] = 36347] = \"MAX_VERTEX_UNIFORM_VECTORS\";\r\n    WebGlConstants[WebGlConstants[\"MAX_VIEWPORT_DIMS\"] = 3386] = \"MAX_VIEWPORT_DIMS\";\r\n    WebGlConstants[WebGlConstants[\"MEDIUM_FLOAT\"] = 36337] = \"MEDIUM_FLOAT\";\r\n    WebGlConstants[WebGlConstants[\"MEDIUM_INT\"] = 36340] = \"MEDIUM_INT\";\r\n    WebGlConstants[WebGlConstants[\"MIRRORED_REPEAT\"] = 33648] = \"MIRRORED_REPEAT\";\r\n    WebGlConstants[WebGlConstants[\"NEAREST\"] = 9728] = \"NEAREST\";\r\n    WebGlConstants[WebGlConstants[\"NEAREST_MIPMAP_LINEAR\"] = 9986] = \"NEAREST_MIPMAP_LINEAR\";\r\n    WebGlConstants[WebGlConstants[\"NEAREST_MIPMAP_NEAREST\"] = 9984] = \"NEAREST_MIPMAP_NEAREST\";\r\n    WebGlConstants[WebGlConstants[\"NEVER\"] = 512] = \"NEVER\";\r\n    WebGlConstants[WebGlConstants[\"NICEST\"] = 4354] = \"NICEST\";\r\n    WebGlConstants[WebGlConstants[\"NONE\"] = 0] = \"NONE\";\r\n    WebGlConstants[WebGlConstants[\"NOTEQUAL\"] = 517] = \"NOTEQUAL\";\r\n    WebGlConstants[WebGlConstants[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\r\n    WebGlConstants[WebGlConstants[\"NUM_COMPRESSED_TEXTURE_FORMATS\"] = 34466] = \"NUM_COMPRESSED_TEXTURE_FORMATS\";\r\n    WebGlConstants[WebGlConstants[\"ONE\"] = 1] = \"ONE\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_CONSTANT_ALPHA\"] = 32772] = \"ONE_MINUS_CONSTANT_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_CONSTANT_COLOR\"] = 32770] = \"ONE_MINUS_CONSTANT_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_DST_ALPHA\"] = 773] = \"ONE_MINUS_DST_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_DST_COLOR\"] = 775] = \"ONE_MINUS_DST_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_SRC_ALPHA\"] = 771] = \"ONE_MINUS_SRC_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"ONE_MINUS_SRC_COLOR\"] = 769] = \"ONE_MINUS_SRC_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"OUT_OF_MEMORY\"] = 1285] = \"OUT_OF_MEMORY\";\r\n    WebGlConstants[WebGlConstants[\"PACK_ALIGNMENT\"] = 3333] = \"PACK_ALIGNMENT\";\r\n    WebGlConstants[WebGlConstants[\"POINTS\"] = 0] = \"POINTS\";\r\n    WebGlConstants[WebGlConstants[\"POLYGON_OFFSET_FACTOR\"] = 32824] = \"POLYGON_OFFSET_FACTOR\";\r\n    WebGlConstants[WebGlConstants[\"POLYGON_OFFSET_FILL\"] = 32823] = \"POLYGON_OFFSET_FILL\";\r\n    WebGlConstants[WebGlConstants[\"POLYGON_OFFSET_UNITS\"] = 10752] = \"POLYGON_OFFSET_UNITS\";\r\n    WebGlConstants[WebGlConstants[\"RED_BITS\"] = 3410] = \"RED_BITS\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER\"] = 36161] = \"RENDERBUFFER\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_ALPHA_SIZE\"] = 36179] = \"RENDERBUFFER_ALPHA_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_BINDING\"] = 36007] = \"RENDERBUFFER_BINDING\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_BLUE_SIZE\"] = 36178] = \"RENDERBUFFER_BLUE_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_DEPTH_SIZE\"] = 36180] = \"RENDERBUFFER_DEPTH_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_GREEN_SIZE\"] = 36177] = \"RENDERBUFFER_GREEN_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_HEIGHT\"] = 36163] = \"RENDERBUFFER_HEIGHT\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_INTERNAL_FORMAT\"] = 36164] = \"RENDERBUFFER_INTERNAL_FORMAT\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_RED_SIZE\"] = 36176] = \"RENDERBUFFER_RED_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_STENCIL_SIZE\"] = 36181] = \"RENDERBUFFER_STENCIL_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"RENDERBUFFER_WIDTH\"] = 36162] = \"RENDERBUFFER_WIDTH\";\r\n    WebGlConstants[WebGlConstants[\"RENDERER\"] = 7937] = \"RENDERER\";\r\n    WebGlConstants[WebGlConstants[\"REPEAT\"] = 10497] = \"REPEAT\";\r\n    WebGlConstants[WebGlConstants[\"REPLACE\"] = 7681] = \"REPLACE\";\r\n    WebGlConstants[WebGlConstants[\"RGB\"] = 6407] = \"RGB\";\r\n    WebGlConstants[WebGlConstants[\"RGB5_A1\"] = 32855] = \"RGB5_A1\";\r\n    WebGlConstants[WebGlConstants[\"RGB565\"] = 36194] = \"RGB565\";\r\n    WebGlConstants[WebGlConstants[\"RGBA\"] = 6408] = \"RGBA\";\r\n    WebGlConstants[WebGlConstants[\"RGBA4\"] = 32854] = \"RGBA4\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLER_2D\"] = 35678] = \"SAMPLER_2D\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLER_CUBE\"] = 35680] = \"SAMPLER_CUBE\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLES\"] = 32937] = \"SAMPLES\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLE_ALPHA_TO_COVERAGE\"] = 32926] = \"SAMPLE_ALPHA_TO_COVERAGE\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLE_BUFFERS\"] = 32936] = \"SAMPLE_BUFFERS\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLE_COVERAGE\"] = 32928] = \"SAMPLE_COVERAGE\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLE_COVERAGE_INVERT\"] = 32939] = \"SAMPLE_COVERAGE_INVERT\";\r\n    WebGlConstants[WebGlConstants[\"SAMPLE_COVERAGE_VALUE\"] = 32938] = \"SAMPLE_COVERAGE_VALUE\";\r\n    WebGlConstants[WebGlConstants[\"SCISSOR_BOX\"] = 3088] = \"SCISSOR_BOX\";\r\n    WebGlConstants[WebGlConstants[\"SCISSOR_TEST\"] = 3089] = \"SCISSOR_TEST\";\r\n    WebGlConstants[WebGlConstants[\"SHADER_COMPILER\"] = 36346] = \"SHADER_COMPILER\";\r\n    WebGlConstants[WebGlConstants[\"SHADER_SOURCE_LENGTH\"] = 35720] = \"SHADER_SOURCE_LENGTH\";\r\n    WebGlConstants[WebGlConstants[\"SHADER_TYPE\"] = 35663] = \"SHADER_TYPE\";\r\n    WebGlConstants[WebGlConstants[\"SHADING_LANGUAGE_VERSION\"] = 35724] = \"SHADING_LANGUAGE_VERSION\";\r\n    WebGlConstants[WebGlConstants[\"SHORT\"] = 5122] = \"SHORT\";\r\n    WebGlConstants[WebGlConstants[\"SRC_ALPHA\"] = 770] = \"SRC_ALPHA\";\r\n    WebGlConstants[WebGlConstants[\"SRC_ALPHA_SATURATE\"] = 776] = \"SRC_ALPHA_SATURATE\";\r\n    WebGlConstants[WebGlConstants[\"SRC_COLOR\"] = 768] = \"SRC_COLOR\";\r\n    WebGlConstants[WebGlConstants[\"STATIC_DRAW\"] = 35044] = \"STATIC_DRAW\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_ATTACHMENT\"] = 36128] = \"STENCIL_ATTACHMENT\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_FAIL\"] = 34817] = \"STENCIL_BACK_FAIL\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_FUNC\"] = 34816] = \"STENCIL_BACK_FUNC\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_PASS_DEPTH_FAIL\"] = 34818] = \"STENCIL_BACK_PASS_DEPTH_FAIL\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_PASS_DEPTH_PASS\"] = 34819] = \"STENCIL_BACK_PASS_DEPTH_PASS\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_REF\"] = 36003] = \"STENCIL_BACK_REF\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_VALUE_MASK\"] = 36004] = \"STENCIL_BACK_VALUE_MASK\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BACK_WRITEMASK\"] = 36005] = \"STENCIL_BACK_WRITEMASK\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BITS\"] = 3415] = \"STENCIL_BITS\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_BUFFER_BIT\"] = 1024] = \"STENCIL_BUFFER_BIT\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_CLEAR_VALUE\"] = 2961] = \"STENCIL_CLEAR_VALUE\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_FAIL\"] = 2964] = \"STENCIL_FAIL\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_FUNC\"] = 2962] = \"STENCIL_FUNC\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_INDEX\"] = 6401] = \"STENCIL_INDEX\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_INDEX8\"] = 36168] = \"STENCIL_INDEX8\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_PASS_DEPTH_FAIL\"] = 2965] = \"STENCIL_PASS_DEPTH_FAIL\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_PASS_DEPTH_PASS\"] = 2966] = \"STENCIL_PASS_DEPTH_PASS\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_REF\"] = 2967] = \"STENCIL_REF\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_TEST\"] = 2960] = \"STENCIL_TEST\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_VALUE_MASK\"] = 2963] = \"STENCIL_VALUE_MASK\";\r\n    WebGlConstants[WebGlConstants[\"STENCIL_WRITEMASK\"] = 2968] = \"STENCIL_WRITEMASK\";\r\n    WebGlConstants[WebGlConstants[\"STREAM_DRAW\"] = 35040] = \"STREAM_DRAW\";\r\n    WebGlConstants[WebGlConstants[\"SUBPIXEL_BITS\"] = 3408] = \"SUBPIXEL_BITS\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE\"] = 5890] = \"TEXTURE\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE0\"] = 33984] = \"TEXTURE0\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE1\"] = 33985] = \"TEXTURE1\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE2\"] = 33986] = \"TEXTURE2\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE3\"] = 33987] = \"TEXTURE3\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE4\"] = 33988] = \"TEXTURE4\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE5\"] = 33989] = \"TEXTURE5\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE6\"] = 33990] = \"TEXTURE6\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE7\"] = 33991] = \"TEXTURE7\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE8\"] = 33992] = \"TEXTURE8\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE9\"] = 33993] = \"TEXTURE9\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE10\"] = 33994] = \"TEXTURE10\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE11\"] = 33995] = \"TEXTURE11\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE12\"] = 33996] = \"TEXTURE12\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE13\"] = 33997] = \"TEXTURE13\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE14\"] = 33998] = \"TEXTURE14\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE15\"] = 33999] = \"TEXTURE15\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE16\"] = 34000] = \"TEXTURE16\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE17\"] = 34001] = \"TEXTURE17\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE18\"] = 34002] = \"TEXTURE18\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE19\"] = 34003] = \"TEXTURE19\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE20\"] = 34004] = \"TEXTURE20\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE21\"] = 34005] = \"TEXTURE21\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE22\"] = 34006] = \"TEXTURE22\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE23\"] = 34007] = \"TEXTURE23\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE24\"] = 34008] = \"TEXTURE24\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE25\"] = 34009] = \"TEXTURE25\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE26\"] = 34010] = \"TEXTURE26\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE27\"] = 34011] = \"TEXTURE27\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE28\"] = 34012] = \"TEXTURE28\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE29\"] = 34013] = \"TEXTURE29\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE30\"] = 34014] = \"TEXTURE30\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE31\"] = 34015] = \"TEXTURE31\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_2D\"] = 3553] = \"TEXTURE_2D\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_BINDING_2D\"] = 32873] = \"TEXTURE_BINDING_2D\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_BINDING_CUBE_MAP\"] = 34068] = \"TEXTURE_BINDING_CUBE_MAP\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP\"] = 34067] = \"TEXTURE_CUBE_MAP\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_NEGATIVE_X\"] = 34070] = \"TEXTURE_CUBE_MAP_NEGATIVE_X\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_NEGATIVE_Y\"] = 34072] = \"TEXTURE_CUBE_MAP_NEGATIVE_Y\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_NEGATIVE_Z\"] = 34074] = \"TEXTURE_CUBE_MAP_NEGATIVE_Z\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_POSITIVE_X\"] = 34069] = \"TEXTURE_CUBE_MAP_POSITIVE_X\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_POSITIVE_Y\"] = 34071] = \"TEXTURE_CUBE_MAP_POSITIVE_Y\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_CUBE_MAP_POSITIVE_Z\"] = 34073] = \"TEXTURE_CUBE_MAP_POSITIVE_Z\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_MAG_FILTER\"] = 10240] = \"TEXTURE_MAG_FILTER\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_MIN_FILTER\"] = 10241] = \"TEXTURE_MIN_FILTER\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_WRAP_S\"] = 10242] = \"TEXTURE_WRAP_S\";\r\n    WebGlConstants[WebGlConstants[\"TEXTURE_WRAP_T\"] = 10243] = \"TEXTURE_WRAP_T\";\r\n    WebGlConstants[WebGlConstants[\"TRIANGLES\"] = 4] = \"TRIANGLES\";\r\n    WebGlConstants[WebGlConstants[\"TRIANGLE_FAN\"] = 6] = \"TRIANGLE_FAN\";\r\n    WebGlConstants[WebGlConstants[\"TRIANGLE_STRIP\"] = 5] = \"TRIANGLE_STRIP\";\r\n    WebGlConstants[WebGlConstants[\"UNPACK_ALIGNMENT\"] = 3317] = \"UNPACK_ALIGNMENT\";\r\n    WebGlConstants[WebGlConstants[\"UNPACK_COLORSPACE_CONVERSION_WEBGL\"] = 37443] = \"UNPACK_COLORSPACE_CONVERSION_WEBGL\";\r\n    WebGlConstants[WebGlConstants[\"UNPACK_FLIP_Y_WEBGL\"] = 37440] = \"UNPACK_FLIP_Y_WEBGL\";\r\n    WebGlConstants[WebGlConstants[\"UNPACK_PREMULTIPLY_ALPHA_WEBGL\"] = 37441] = \"UNPACK_PREMULTIPLY_ALPHA_WEBGL\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_BYTE\"] = 5121] = \"UNSIGNED_BYTE\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_INT\"] = 5125] = \"UNSIGNED_INT\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_SHORT\"] = 5123] = \"UNSIGNED_SHORT\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_SHORT_4_4_4_4\"] = 32819] = \"UNSIGNED_SHORT_4_4_4_4\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_SHORT_5_5_5_1\"] = 32820] = \"UNSIGNED_SHORT_5_5_5_1\";\r\n    WebGlConstants[WebGlConstants[\"UNSIGNED_SHORT_5_6_5\"] = 33635] = \"UNSIGNED_SHORT_5_6_5\";\r\n    WebGlConstants[WebGlConstants[\"VALIDATE_STATUS\"] = 35715] = \"VALIDATE_STATUS\";\r\n    WebGlConstants[WebGlConstants[\"VENDOR\"] = 7936] = \"VENDOR\";\r\n    WebGlConstants[WebGlConstants[\"VERSION\"] = 7938] = \"VERSION\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\"] = 34975] = \"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_ENABLED\"] = 34338] = \"VERTEX_ATTRIB_ARRAY_ENABLED\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_NORMALIZED\"] = 34922] = \"VERTEX_ATTRIB_ARRAY_NORMALIZED\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_POINTER\"] = 34373] = \"VERTEX_ATTRIB_ARRAY_POINTER\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_SIZE\"] = 34339] = \"VERTEX_ATTRIB_ARRAY_SIZE\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_STRIDE\"] = 34340] = \"VERTEX_ATTRIB_ARRAY_STRIDE\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_ATTRIB_ARRAY_TYPE\"] = 34341] = \"VERTEX_ATTRIB_ARRAY_TYPE\";\r\n    WebGlConstants[WebGlConstants[\"VERTEX_SHADER\"] = 35633] = \"VERTEX_SHADER\";\r\n    WebGlConstants[WebGlConstants[\"VIEWPORT\"] = 2978] = \"VIEWPORT\";\r\n    WebGlConstants[WebGlConstants[\"ZERO\"] = 0] = \"ZERO\";\r\n})(WebGlConstants || (WebGlConstants = {}));\n\n//GLTF\n\nconst createVec2 = () => new Float64Array(2);\r\nconst createVec4 = () => new Float64Array(4);\r\nconst createVec3 = () => new Float64Array(3);\r\nconst createMat4 = () => {\r\n    const data = new Float64Array(16);\r\n    mat4.identity(data);\r\n    return data;\r\n};\r\nconst createQuat = () => {\r\n    const data = new Float64Array(4);\r\n    quat.identity(data);\r\n    return data;\r\n};\r\nconst createFill = (size) => (value) => {\r\n    const data = new Float64Array(size);\r\n    data.fill(value);\r\n    return data;\r\n};\n\nconst createIdentityTransform = (parentModelMatrix) => {\r\n    const translation = createVec3();\r\n    const rotation = createQuat();\r\n    const scale = createFill(3)(1);\r\n    const trs = { translation, rotation, scale };\r\n    const localMatrix = getMatrixFromTrs(trs);\r\n    const modelMatrix = getModelMatrix(parentModelMatrix)(localMatrix);\r\n    return { trs, localMatrix, modelMatrix };\r\n};\r\nconst createTransform = (parentModelMatrix) => (overrideTrs) => {\r\n    const trs = {};\r\n    trs.translation = overrideTrs.translation ? overrideTrs.translation : createVec3();\r\n    trs.rotation = overrideTrs.rotation ? overrideTrs.rotation : createQuat();\r\n    trs.scale = overrideTrs.scale ? overrideTrs.scale : createFill(3)(1);\r\n    const localMatrix = getMatrixFromTrs(trs);\r\n    const modelMatrix = getModelMatrix(parentModelMatrix)(localMatrix);\r\n    return { trs, localMatrix, modelMatrix };\r\n};\r\nconst getTrsFromMatrix = (matrix) => {\r\n    const scale = mat4.getScaling(createVec3(), matrix);\r\n    const scaledMatrix = mat4.scale(createMat4(), matrix, [1 / scale[0], 1 / scale[1], 1 / scale[2]]);\r\n    return {\r\n        translation: mat4.getTranslation(createVec3(), matrix),\r\n        rotation: mat4.getRotation(createVec4(), scaledMatrix),\r\n        scale\r\n    };\r\n};\r\nconst getMatrixFromTrs = (trs) => mat4.fromRotationTranslationScale(createMat4(), trs.rotation, trs.translation, trs.scale);\r\nconst getModelMatrix = (parentModelMatrix) => (localMatrix) => parentModelMatrix\r\n    ? mat4.multiply(createMat4(), parentModelMatrix, localMatrix)\r\n    : localMatrix.slice();\r\nconst getNormalMatrix = (modelMatrix) => mat4.transpose(mat4.create(), mat4.invert(mat4.create(), modelMatrix));\r\nconst getViewMatrices = (camera) => (modelMatrix) => {\r\n    const modelViewMatrix = mat4.multiply(mat4.create(), camera.view, modelMatrix);\r\n    const modelViewProjectionMatrix = mat4.multiply(mat4.create(), camera.projection, modelViewMatrix);\r\n    return {\r\n        modelViewMatrix,\r\n        modelViewProjectionMatrix\r\n    };\r\n};\r\nconst updateTransform = (opts) => (parentModelMatrix) => (transform) => {\r\n    const localMatrix = opts.updateLocal ? getMatrixFromTrs(transform.trs) : transform.localMatrix;\r\n    const modelMatrix = opts.updateModel ? getModelMatrix(parentModelMatrix)(localMatrix) : transform.modelMatrix;\r\n    const normalMatrix = opts.updateModel && transform.normalMatrix\r\n        ? getNormalMatrix(modelMatrix)\r\n        : undefined;\r\n    const { modelViewMatrix, modelViewProjectionMatrix } = opts.updateView ? getViewMatrices(opts.camera)(modelMatrix) : transform;\r\n    return Object.assign({}, transform, {\r\n        localMatrix, modelMatrix, normalMatrix, modelViewMatrix, modelViewProjectionMatrix\r\n    });\r\n};\r\nconst rotateVectorByMatrix = (vec) => (matrix) => {\r\n    const qRot = mat4.getRotation(createQuat(), matrix);\r\n    const vRes = vec3.transformQuat(createVec3(), vec, qRot);\r\n    return vRes;\r\n};\n\nconst getOrthographicProjection = (settings) => {\r\n    const values = createMat4();\r\n    const r = settings.xmag;\r\n    const t = settings.ymag;\r\n    const n = settings.znear;\r\n    const f = settings.zfar;\r\n    values[0] = 1 / r;\r\n    values[5] = 1 / t;\r\n    values[10] = 2 / (n - f);\r\n    values[14] = (f + n) / (n - f);\r\n    values[15] = 1;\r\n    return values;\r\n};\r\nconst getPerspectiveProjection = (settings) => {\r\n    const values = createMat4();\r\n    const a = settings.aspectRatio === undefined && settings.canvas !== undefined\r\n        ? settings.canvas.clientWidth / settings.canvas.clientHeight\r\n        : settings.aspectRatio;\r\n    const y = settings.yfov;\r\n    const n = settings.znear;\r\n    const f = settings.zfar; //if this is undefined, use infinite projection\r\n    values[0] = 1 / (a * Math.tan(.5 * y));\r\n    values[5] = 1 / (Math.tan(.5 * y));\r\n    values[10] = f === undefined ? -1 : (f + n) / (n - f);\r\n    values[11] = -1;\r\n    values[14] = f === undefined ? (-2 * n) : (2 * f * n) / (n - f);\r\n    return values;\r\n};\r\nconst getCameraProjection = (settings) => settings.kind == CameraKind.ORTHOGRAPHIC\r\n    ? getOrthographicProjection(settings)\r\n    : getPerspectiveProjection(settings);\r\nconst getCameraView = (modelMatrix) => mat4.invert(createMat4(), modelMatrix);\r\nconst getCameraPosition = (modelMatrix) => mat4.getTranslation(createVec3(), modelMatrix);\r\nconst setCameraViewFromTransform = (transform) => (camera) => Object.assign({}, camera, {\r\n    view: getCameraView(transform.modelMatrix)\r\n});\r\nconst setCameraPositionFromTransform = (transform) => (camera) => Object.assign({}, camera, {\r\n    position: getCameraPosition(transform.modelMatrix)\r\n});\r\nconst setCameraProjectionFromSettings = (settings) => (camera) => Object.assign({}, camera, {\r\n    projection: getCameraProjection(settings)\r\n});\n\n//Non-essential helpers\r\nconst getLightDirectionFromMatrix = (modelMatrix) => {\r\n    const vRes = rotateVectorByMatrix([0, 0, -1])(modelMatrix);\r\n    vec3.normalize(vRes, vRes);\r\n    return vRes;\r\n};\n\n//filter stuff could use some testing\r\nconst filterNodeDeep = (fn) => (node) => {\r\n    if (node === undefined || !fn(node)) {\r\n        return undefined;\r\n    }\r\n    return !node.children\r\n        ? node\r\n        : Object.assign({}, node, { children: node.children.map(filterNodeDeep(fn)).filter(n => n) });\r\n};\r\nconst filterNodesDeep = (fn) => (nodes) => nodes\r\n    .map(filterNodeDeep(fn))\r\n    .filter(n => n);\r\n//Side effects\r\nconst forEachNodes = (fn) => (nodes) => nodes.forEach(forEachNode(fn));\r\nconst forEachNode = (fn) => (node) => {\r\n    fn(node);\r\n    if (node.children) {\r\n        node.children.forEach(forEachNode(fn));\r\n    }\r\n};\r\nconst someNodes = (fn) => (nodes) => nodes.some(someNode(fn));\r\nconst someNode = (fn) => (node) => {\r\n    if (fn(node)) {\r\n        return true;\r\n    }\r\n    if (node.children) {\r\n        return node.children.some(someNode(fn));\r\n    }\r\n    return false;\r\n};\r\n//Helpers\r\nconst countNodes = (nodes) => {\r\n    let count = 0;\r\n    forEachNodes(() => count++)(nodes);\r\n    return count;\r\n};\r\nconst findNode = (pred) => (nodesOrNode) => {\r\n    let targetNode;\r\n    const fn = (node) => {\r\n        if (pred(node)) {\r\n            targetNode = node;\r\n            return true;\r\n        }\r\n    };\r\n    if (Array.isArray(nodesOrNode)) {\r\n        someNodes(fn)(nodesOrNode);\r\n    }\r\n    else {\r\n        someNode(fn)(nodesOrNode);\r\n    }\r\n    return targetNode;\r\n};\r\n//Note - the immutability guarantee is the responsibility of the function - after it returns, the children are _replaced_\r\nconst mapNode = (fn) => (node) => {\r\n    const n = fn(node);\r\n    return !n.children\r\n        ? n\r\n        : Object.assign(n, { children: n.children.map(mapNode(fn)) });\r\n};\r\nconst mapNodeWithParent = (fn) => (parent) => (node) => {\r\n    const n = fn(parent)(node);\r\n    return !n.children\r\n        ? n\r\n        : Object.assign(n, { children: n.children.map(mapNodeWithParent(fn)(n)) });\r\n};\r\nconst mapNodesWithParent = (fn) => (parent) => (nodes) => nodes.map(mapNodeWithParent(fn)(parent));\r\nconst mapNodes = (fn) => (nodes) => nodes.map(mapNode(fn));\r\n//Specific use-cases\r\nconst updateNodeTransforms = (opts) => (parent) => (node) => mapNodeWithParent((_parent) => (_node) => {\r\n    const pModelMatrix = _parent ? _parent.transform.modelMatrix : undefined;\r\n    const beforeModel = _node.transform.modelMatrix;\r\n    const t = updateTransform(opts)(pModelMatrix)(_node.transform);\r\n    const afterModel = t.modelMatrix;\r\n    const result = Object.assign({}, _node, { transform: t });\r\n    //not ideal for typescript, but meh\r\n    if (opts.updateLightDirection && result.kind === NodeKind.LIGHT) {\r\n        const lightKind = result.light.kind;\r\n        if (lightKind === LightKind.Directional || lightKind === LightKind.Spot) {\r\n            //only update if the model matrix is different\r\n            if (result.light.direction === undefined || !mat4.equals(beforeModel, afterModel)) {\r\n                result.light.direction = getLightDirectionFromMatrix(t.modelMatrix);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n})(parent)(node);\r\nconst updateNodeListTransforms = (opts) => (parent) => (nodes) => mapNodesWithParent(updateNodeTransforms(opts))(parent)(nodes);\n\n//adapted from https://www.geeksforgeeks.org/binary-search/\r\n//returns the left and right bounds if there's no _exact_ match, otherwise, the match\r\nconst binaryFindBounds = (getValue) => (arr) => (x) => {\r\n    const max = arr.length - 1;\r\n    const _withinBounds = ([l, r]) => {\r\n        if (l === r) {\r\n            return false;\r\n        }\r\n        if (l < 0 || r < 1) {\r\n            return false;\r\n        }\r\n        const pValue = getValue(arr[l]);\r\n        const nValue = getValue(arr[r]);\r\n        return (x > pValue && x < nValue);\r\n    };\r\n    const _binarySearch = ([l, r]) => {\r\n        if (r >= l) {\r\n            const mid = 0 | (l + (r - l) / 2);\r\n            const value = getValue(arr[mid]);\r\n            if (value == x) {\r\n                return mid;\r\n            }\r\n            if (_withinBounds([mid - 1, mid])) {\r\n                return [mid - 1, mid];\r\n            }\r\n            if (_withinBounds([mid, mid + 1])) {\r\n                return [mid, mid + 1];\r\n            }\r\n            return (value > x)\r\n                ? _binarySearch([l, mid - 1])\r\n                : _binarySearch([mid + 1, r]);\r\n        }\r\n        return -1;\r\n    };\r\n    return _binarySearch([0, max]);\r\n};\n\nconst interpolate_linear = ({ v0, v1, t }) => {\r\n    if (typeof v0 === \"number\" && typeof v1 === \"number\") {\r\n        return v0 * (1 - t) + v1 * t;\r\n    }\r\n    const xs0 = v0;\r\n    const xs1 = v1;\r\n    if (xs0.length !== xs1.length) {\r\n        throw new Error(\"different length of animation values\");\r\n    }\r\n    switch (xs0.length) {\r\n        case 1: return interpolate_linear({ v0: xs0[0], v1: xs1[0], t });\r\n        case 2: return vec2.lerp(vec2.create(), xs0, xs1, t);\r\n        case 3: return vec3.lerp(vec3.create(), xs0, xs1, t);\r\n        case 4: return vec4.lerp(vec4.create(), xs0, xs1, t);\r\n    }\r\n};\r\nconst interpolateKeyframes = ({ k0, k1, time, interpolation, targetPath }) => {\r\n    const v0 = k0.values;\r\n    const v1 = k1.values;\r\n    const t = (time - k0.timing) / (k1.timing - k0.timing); //get t as a percentage of timing between k0 and k1: https://math.stackexchange.com/questions/754130/find-what-percent-x-is-between-two-numbers\r\n    switch (interpolation) {\r\n        case GltfAnimationInterpolation.LINEAR: return targetPath === GltfAnimationTargetPath.ROTATION\r\n            ? quat.slerp(quat.create(), v0, v1, t)\r\n            : interpolate_linear({ v0, v1, t });\r\n        case GltfAnimationInterpolation.STEP: return v0;\r\n        case GltfAnimationInterpolation.CUBICSPLINE: throw new Error(\"cubicspline is not supported yet!\");\r\n        default: throw new Error(\"unsupported interpolation \");\r\n    }\r\n};\r\nconst findKeyframeBounds = binaryFindBounds((k) => k.timing);\n\nconst GLTF_PARSE_ACCESSOR_TYPE_SIZE = {\r\n    'SCALAR': 1,\r\n    'VEC2': 2,\r\n    'VEC3': 3,\r\n    'VEC4': 4,\r\n    'MAT2': 4,\r\n    'MAT3': 9,\r\n    'MAT4': 16\r\n};\r\nconst GLTF_PARSE_COMPONENT_BYTE_SIZE = {\r\n    [WebGlConstants.BYTE]: 1,\r\n    [WebGlConstants.UNSIGNED_BYTE]: 1,\r\n    [WebGlConstants.SHORT]: 2,\r\n    [WebGlConstants.UNSIGNED_SHORT]: 2,\r\n    [WebGlConstants.UNSIGNED_INT]: 4,\r\n    [WebGlConstants.FLOAT]: 4\r\n};\n\nconst getComponentTypedData = ({ buffer, componentType }) => {\r\n    switch (componentType) {\r\n        case WebGlConstants.BYTE: return new Int8Array(buffer);\r\n        case WebGlConstants.UNSIGNED_BYTE: return new Uint8Array(buffer);\r\n        case WebGlConstants.SHORT: return new Int16Array(buffer);\r\n        case WebGlConstants.UNSIGNED_SHORT: return new Uint16Array(buffer);\r\n        case WebGlConstants.UNSIGNED_INT: return new Uint32Array(buffer);\r\n        case WebGlConstants.FLOAT: return new Float32Array(buffer);\r\n        default: throw new Error(\"unknown accessor component type!\");\r\n    }\r\n};\r\nconst getTypedDataFromInfo = ({ info, buffers }) => (info.bufferViewIndex === undefined)\r\n    ? getComponentTypedData({\r\n        buffer: new ArrayBuffer(info.bufferLength),\r\n        componentType: info.componentType\r\n    })\r\n    : getComponentTypedData({\r\n        buffer: buffers[info.bufferIndex].slice(info.byteOffset, info.byteOffset + info.bufferLength),\r\n        componentType: info.componentType\r\n    });\r\nconst GLTF_PARSE_getAccessorTypedData = ({ gltf, info, buffers }) => {\r\n    const values = getTypedDataFromInfo({ info, buffers });\r\n    if (info.sparse) {\r\n        const typeCount = GLTF_PARSE_ACCESSOR_TYPE_SIZE[info.accessorType];\r\n        const sparseIndices = getTypedDataFromInfo({ info: info.sparse.indices, buffers });\r\n        const sparseValues = getTypedDataFromInfo({ info: info.sparse.values, buffers });\r\n        sparseIndices\r\n            .map(value => value * typeCount)\r\n            .forEach((indexOfValue, valueIndex) => {\r\n            for (let i = 0; i < typeCount; i++) {\r\n                values[indexOfValue + i] = sparseValues[i + (valueIndex * typeCount)];\r\n            }\r\n        });\r\n    }\r\n    return values;\r\n};\r\n/*\r\nexport const GLTF_PARSE_createTypedData = ({ gltf, buffers}: { gltf: GLTF_ORIGINAL, buffers: Array<ArrayBuffer>}) => {\r\n\n    const accessorData = new Map<number, TypedNumberArray>();\r\n\n    const isAttribute = (accessorId:number):boolean => {\r\n        if(!gltf.nodes || !gltf.meshes || !gltf.nodes.length || !gltf.meshes.length) {\r\n            return false;\r\n        }\r\n\n        return gltf.nodes.findIndex(node => {\r\n            if(node.mesh === undefined) {\r\n                return false;\r\n            }\r\n\n            return gltf.meshes[node.mesh].primitives.findIndex(p =>\r\n                Object.keys(p.attributes).findIndex(k => p[k] === accessorId) !== -1\r\n            ) !== -1\r\n        }) !== -1\r\n    }\r\n\n    const isImage = (accessorId:number):boolean => {\r\n        if(!gltf.images || !gltf.images.length) {\r\n            return false;\r\n        }\r\n\n        return gltf.images.findIndex(image =>\r\n            image.bufferView === gltf.accessors[accessorId].bufferView\r\n        ) !== -1\r\n    }\r\n\n    gltf.accessors\r\n        .forEach((accessor, accessorId) => {\r\n            if(!isAttribute(accessorId) && !isImage(accessorId)) {\r\n                const values = GLTF_PARSE_getAccessorTypedData({gltf, buffers, accessorId});\r\n                accessorData.set(accessorId, values);\r\n\n                console.log(\"created typed data for accessor\", accessorId);\r\n            } else {\r\n                console.log(\"skipping typed data for accessor\", accessorId);\r\n            }\r\n\n        });\r\n\n    return accessorData;\r\n}\r\n */\n\nconst getAccessorInfo = ({ gltf, accessor }) => {\r\n    const byteLength = (accessor.count * GLTF_PARSE_ACCESSOR_TYPE_SIZE[accessor.type] * GLTF_PARSE_COMPONENT_BYTE_SIZE[accessor.componentType]);\r\n    if (accessor.bufferView === undefined) {\r\n        if (accessor.sparse === undefined) {\r\n            throw new Error(\"accessor must either be sparse or have a buffer view\");\r\n        }\r\n        return {\r\n            bufferLength: byteLength,\r\n            componentType: accessor.componentType,\r\n            accessorType: accessor.type\r\n        };\r\n    }\r\n    const bufferView = gltf.bufferViews[accessor.bufferView];\r\n    const byteOffset = (bufferView.byteOffset === undefined ? 0 : bufferView.byteOffset) + (accessor.byteOffset === undefined ? 0 : accessor.byteOffset);\r\n    const byteStride = bufferView.byteStride ? bufferView.byteStride : 0;\r\n    const byteStrideLength = byteStride * GLTF_PARSE_ACCESSOR_TYPE_SIZE[accessor.type] * GLTF_PARSE_COMPONENT_BYTE_SIZE[accessor.componentType];\r\n    const bufferLength = byteStrideLength + byteLength;\r\n    return {\r\n        bufferLength,\r\n        componentType: accessor.componentType,\r\n        bufferViewIndex: accessor.bufferView,\r\n        bufferIndex: bufferView.buffer,\r\n        byteOffset,\r\n        accessorType: accessor.type\r\n    };\r\n};\r\nconst getSparseAccessorIndicesInfo = ({ gltf, accessor }) => {\r\n    const values = accessor.sparse.indices;\r\n    const byteLength = (accessor.sparse.count * GLTF_PARSE_COMPONENT_BYTE_SIZE[values.componentType]);\r\n    const bufferView = gltf.bufferViews[values.bufferView];\r\n    const byteOffset = (bufferView.byteOffset === undefined ? 0 : bufferView.byteOffset) + (values.byteOffset === undefined ? 0 : values.byteOffset);\r\n    return {\r\n        bufferLength: byteLength,\r\n        componentType: values.componentType,\r\n        bufferViewIndex: accessor.bufferView,\r\n        bufferIndex: bufferView.buffer,\r\n        byteOffset,\r\n        accessorType: accessor.type\r\n    };\r\n};\r\nconst getSparseAccessorValuesInfo = ({ gltf, accessor }) => {\r\n    const values = accessor.sparse.values;\r\n    const byteLength = (accessor.sparse.count * GLTF_PARSE_ACCESSOR_TYPE_SIZE[accessor.type] * GLTF_PARSE_COMPONENT_BYTE_SIZE[accessor.componentType]);\r\n    const bufferView = gltf.bufferViews[values.bufferView];\r\n    const byteOffset = (bufferView.byteOffset === undefined ? 0 : bufferView.byteOffset) + (values.byteOffset === undefined ? 0 : values.byteOffset);\r\n    return {\r\n        bufferLength: byteLength,\r\n        componentType: accessor.componentType,\r\n        bufferViewIndex: accessor.bufferView,\r\n        bufferIndex: bufferView.buffer,\r\n        byteOffset,\r\n        accessorType: accessor.type\r\n    };\r\n};\r\nconst GLTF_PARSE_getAccessorDataInfo = ({ gltf, accessorId }) => {\r\n    const accessor = gltf.accessors[accessorId];\r\n    const info = getAccessorInfo({ gltf, accessor });\r\n    if (accessor.sparse) {\r\n        info.sparse = {\r\n            indices: getSparseAccessorIndicesInfo({ gltf, accessor }),\r\n            values: getSparseAccessorValuesInfo({ gltf, accessor })\r\n        };\r\n    }\r\n    return info;\r\n};\n\nconst GLTF_PARSE_animationPathToString = {\r\n    [GltfAnimationTargetPath.WEIGHTS]: \"weights\",\r\n    [GltfAnimationTargetPath.TRANSLATION]: \"translation\",\r\n    [GltfAnimationTargetPath.ROTATION]: \"rotation\",\r\n    [GltfAnimationTargetPath.SCALE]: \"scale\"\r\n};\r\nconst GLTF_PARSE_animationStringToPath = {\r\n    \"weights\": GltfAnimationTargetPath.WEIGHTS,\r\n    \"translation\": GltfAnimationTargetPath.TRANSLATION,\r\n    \"rotation\": GltfAnimationTargetPath.ROTATION,\r\n    \"scale\": GltfAnimationTargetPath.SCALE,\r\n};\r\nconst GLTF_PARSE_interpolationLookup = {\r\n    \"linear\": GltfAnimationInterpolation.LINEAR,\r\n    \"step\": GltfAnimationInterpolation.STEP,\r\n    \"cubicspline\": GltfAnimationInterpolation.CUBICSPLINE\r\n};\r\nconst GLTF_PARSE_addAnimationIds = ({ gltf, nodes }) => {\r\n    let animationId = 0;\r\n    if (gltf.animations) {\r\n        gltf.animations.forEach(animation => {\r\n            animation\r\n                .channels\r\n                .filter(channel => channel.target.node !== undefined)\r\n                .forEach(channel => {\r\n                mapNodes((node) => {\r\n                    if (node.originalNodeId === channel.target.node) {\r\n                        if (!node.animationIds || node.animationIds.indexOf(animationId) === -1) {\r\n                            if (!node.animationIds) {\r\n                                node.animationIds = [];\r\n                            }\r\n                            node.animationIds.push(animationId);\r\n                        }\r\n                    }\r\n                    return node;\r\n                })(nodes);\r\n                animationId++;\r\n            });\r\n        });\r\n    }\r\n    return nodes;\r\n};\r\nconst GLTF_PARSE_createAnimations = ({ gltf, buffers }) => {\r\n    //load animation list\r\n    const animations = new Map();\r\n    let animationId = 0;\r\n    if (gltf.animations) {\r\n        gltf.animations.forEach(animation => {\r\n            animation\r\n                .channels\r\n                .filter(channel => channel.target.node !== undefined)\r\n                .forEach(channel => {\r\n                const targetPath = GLTF_PARSE_animationStringToPath[channel.target.path.toLowerCase()];\r\n                const sampler = animation.samplers[channel.sampler];\r\n                const interpolation = GLTF_PARSE_interpolationLookup[sampler.interpolation ? sampler.interpolation.toLowerCase() : \"linear\"];\r\n                const timeAccessor = gltf.accessors[sampler.input];\r\n                const timings = GLTF_PARSE_getAccessorTypedData({\r\n                    gltf,\r\n                    buffers,\r\n                    info: GLTF_PARSE_getAccessorDataInfo({ gltf, accessorId: sampler.input })\r\n                });\r\n                const values = GLTF_PARSE_getAccessorTypedData({\r\n                    gltf,\r\n                    buffers,\r\n                    info: GLTF_PARSE_getAccessorDataInfo({ gltf, accessorId: sampler.output })\r\n                });\r\n                const valuesAccessor = gltf.accessors[sampler.output];\r\n                //can't be map() because Array != Float64Array\r\n                let keyframes = new Array(timings.length);\r\n                timings.forEach((timing, index) => {\r\n                    const count = targetPath === GltfAnimationTargetPath.WEIGHTS\r\n                        ? values.length / timings.length //always a scalar and final size will be the number of morph targets times the number of animation frames.\r\n                        : GLTF_PARSE_ACCESSOR_TYPE_SIZE[valuesAccessor.type];\r\n                    keyframes[index] = {\r\n                        timing,\r\n                        values: count === 1\r\n                            ? values[index]\r\n                            : values.subarray(index * count, (index + 1) * count),\r\n                    };\r\n                });\r\n                animations.set(animationId++, {\r\n                    keyframes,\r\n                    interpolation,\r\n                    targetPath,\r\n                    timeMin: timeAccessor.min[0],\r\n                    timeMax: timeAccessor.max[0]\r\n                });\r\n            });\r\n        });\r\n    }\r\n    return animations;\r\n};\n\nconst gltf_setAnimationTime = (animation) => (time) => (node) => {\r\n    const bounds = findKeyframeBounds(animation.keyframes)(time);\r\n    if (bounds === -1) {\r\n        return;\r\n    }\r\n    const values = !Array.isArray(bounds)\r\n        ? animation.keyframes[bounds].values //if it's an exact match there's no need to interpolate\r\n        : interpolateKeyframes({\r\n            k0: animation.keyframes[bounds[0]],\r\n            k1: animation.keyframes[bounds[1]],\r\n            interpolation: animation.interpolation,\r\n            targetPath: animation.targetPath,\r\n            time\r\n        });\r\n    return Object.assign({}, node, (animation.targetPath === GltfAnimationTargetPath.WEIGHTS)\r\n        ? { morphWeights: values }\r\n        : { transform: Object.assign({}, node.transform, {\r\n                trs: Object.assign({}, node.transform.trs, {\r\n                    [GLTF_PARSE_animationPathToString[animation.targetPath]]: values\r\n                })\r\n            })\r\n        });\r\n};\r\n//creates a function that will iterate over all the baked in animations, with a provided timestep\r\nconst gltf_createAnimator = (animations) => ({ loop }) => {\r\n    const totalTimes = new Map();\r\n    animations.forEach((value, key) => totalTimes.set(key, 0));\r\n    let lastTs;\r\n    return (ts) => (nodes) => {\r\n        const dt = lastTs === undefined ? 0 : ((ts - lastTs) / 1000);\r\n        lastTs = ts;\r\n        animations.forEach((animation, key) => {\r\n            const prevTime = totalTimes.get(key);\r\n            let nextTime = prevTime + dt;\r\n            if (loop === true) {\r\n                while (nextTime > animation.timeMax) {\r\n                    nextTime -= animation.timeMax;\r\n                }\r\n            }\r\n            if (nextTime >= animation.timeMin && nextTime <= animation.timeMax) {\r\n                nodes = mapNodes((node) => node.animationIds && node.animationIds.indexOf(key) !== -1\r\n                    ? gltf_setAnimationTime(animation)(nextTime)(node)\r\n                    : node)(nodes);\r\n            }\r\n            totalTimes.set(key, nextTime);\r\n        });\r\n        return nodes;\r\n    };\r\n};\n\nconst GLTF_PARSE_attributeNames = [\r\n    \"a_Position\",\r\n    \"a_Normal\",\r\n    \"a_Tangent\",\r\n    \"a_UV\",\r\n    \"a_Color\",\r\n    \"a_Morph_0\",\r\n    \"a_Morph_1\",\r\n    \"a_Morph_2\",\r\n    \"a_Morph_3\",\r\n    \"a_Morph_4\",\r\n    \"a_Morph_5\",\r\n    \"a_Morph_6\",\r\n    \"a_Morph_7\",\r\n    \"a_Skin_Joint\",\r\n    \"a_Skin_Weight\"\r\n];\r\nconst getAccessorStrategy = ({ gltf, accessor, info }) => {\r\n    const typeCount = GLTF_PARSE_ACCESSOR_TYPE_SIZE[accessor.type];\r\n    const bufferView = (accessor.bufferView === undefined)\r\n        ? undefined\r\n        : gltf.bufferViews[accessor.bufferView];\r\n    const stride = (bufferView === undefined || bufferView.byteStride === undefined) ? 0 : bufferView.byteStride;\r\n    return {\r\n        size: typeCount,\r\n        type: accessor.componentType,\r\n        normalized: accessor.normalized === undefined ? false : accessor.normalized,\r\n        stride,\r\n        offset: (info.sparse || !accessor.byteOffset) ? 0 : accessor.byteOffset\r\n        //since we sliced it off already for sparse values, it's always 0 here\r\n    };\r\n};\r\nconst isAttribute = ({ gltf, accessorId }) => {\r\n    if (!gltf.nodes) {\r\n        return false;\r\n    }\r\n    return gltf.nodes.some(node => node.mesh === undefined ? false :\r\n        gltf.meshes[node.mesh].primitives.some(primitive => primitive.indices === accessorId\r\n            || Object.keys(primitive.attributes).some(key => primitive.attributes[key] === accessorId)\r\n            || (primitive.targets && primitive.targets.some(target => Object.keys(target).some(key => target[key] === accessorId)))));\r\n};\r\nconst GLTF_PARSE_createAttributes = ({ gltf, buffers, renderer }) => {\r\n    const bufferViewInfo = new Map();\r\n    const accessorLookup = new Map();\r\n    const indicesList = [];\r\n    if (gltf.meshes) {\r\n        gltf.meshes.forEach(mesh => {\r\n            mesh.primitives.forEach(primitive => {\r\n                if (primitive.indices !== undefined) {\r\n                    indicesList.push(primitive.indices);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    gltf.accessors\r\n        .map((accessor, accessorId) => ({ accessor, accessorId }))\r\n        .filter(({ accessorId }) => isAttribute({ gltf, accessorId }))\r\n        .forEach(({ accessor, accessorId }) => {\r\n        const isElements = indicesList.indexOf(accessorId) === -1 ? false : true;\r\n        const info = GLTF_PARSE_getAccessorDataInfo({ gltf, accessorId });\r\n        const strategy = getAccessorStrategy({ gltf, accessor, info });\r\n        let rendererBufferId, buffer;\r\n        if (accessor.sparse) {\r\n            rendererBufferId = Symbol(`accessor ${accessorId}`);\r\n            buffer = GLTF_PARSE_getAccessorTypedData({\r\n                gltf,\r\n                buffers,\r\n                info\r\n            }).buffer;\r\n        }\r\n        else {\r\n            if (!bufferViewInfo.has(info.bufferViewIndex)) {\r\n                const bufferView = gltf.bufferViews[info.bufferViewIndex];\r\n                const byteOffset = bufferView.byteOffset ? bufferView.byteOffset : 0;\r\n                bufferViewInfo.set(info.bufferViewIndex, {\r\n                    rendererBufferId: Symbol(`${info.bufferViewIndex}`),\r\n                    buffer: buffers[info.bufferIndex].slice(byteOffset, byteOffset + bufferView.byteLength)\r\n                });\r\n            }\r\n            const bvInfo = bufferViewInfo.get(info.bufferViewIndex);\r\n            rendererBufferId = bvInfo.rendererBufferId;\r\n            buffer = bvInfo.buffer;\r\n        }\r\n        renderer.buffers.assign(rendererBufferId)({\r\n            target: isElements ? WebGlConstants.ELEMENT_ARRAY_BUFFER : WebGlConstants.ARRAY_BUFFER,\r\n            usagePattern: WebGlConstants.STATIC_DRAW,\r\n            data: buffer\r\n        });\r\n        accessorLookup.set(accessorId, { strategy, rendererBufferId });\r\n    });\r\n    const vaoIdLookup = new Map();\r\n    return { accessorLookup, vaoIdLookup };\r\n};\n\nconst HAS_PREPPED = Symbol();\r\n//This only happens once and it won't hurt to call when in doubt\r\n//Only used at init/loading\r\nconst prepWebGlRenderer = (renderer) => {\r\n    if (renderer.extras[HAS_PREPPED] !== true) {\r\n        if (renderer.version > 1) {\r\n            throw new Error(\"GLTF Renderering only supports WebGL 1.0 for now\");\r\n        }\r\n        GLTF_PARSE_attributeNames.forEach(aName => {\r\n            renderer.attributes.globalLocations.add(aName);\r\n        });\r\n        renderer.getExtension('OES_standard_derivatives');\r\n        renderer.getExtension('EXT_shader_texture_lod');\r\n        renderer.getExtension('EXT_SRGB');\r\n        renderer.getExtension('OES_element_index_uint'); //only for scifi-helmet...\r\n        renderer.extras[HAS_PREPPED] = true;\r\n    }\r\n};\r\nconst getDefaultInitConfig = () => ({});\n\nconst faceTargetFromKey = (key) => {\r\n    switch (key) {\r\n        case \"posX\": return WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_X;\r\n        case \"negX\": return WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_X;\r\n        case \"posY\": return WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_Y;\r\n        case \"negY\": return WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_Y;\r\n        case \"posZ\": return WebGlConstants.TEXTURE_CUBE_MAP_POSITIVE_Z;\r\n        case \"negZ\": return WebGlConstants.TEXTURE_CUBE_MAP_NEGATIVE_Z;\r\n    }\r\n};\r\nconst createTextureSwitcher = (gl) => {\r\n    const activeTextureMap = new Map();\r\n    const _switchTexture = (target) => (samplerIndex) => (texture) => {\r\n        const skipSwitch = activeTextureMap.has(samplerIndex) && (() => {\r\n            const cacheInfo = activeTextureMap.get(samplerIndex);\r\n            return cacheInfo.target === target && cacheInfo.texture === texture;\r\n        })();\r\n        if (!skipSwitch) {\r\n            gl.activeTexture(gl.TEXTURE0 + samplerIndex);\r\n            gl.bindTexture(target, texture);\r\n            activeTextureMap.set(samplerIndex, { target, texture });\r\n        }\r\n        return texture;\r\n    };\r\n    return {\r\n        switchTexture: _switchTexture(WebGlConstants.TEXTURE_2D),\r\n        switchCubeTexture: _switchTexture(WebGlConstants.TEXTURE_CUBE_MAP)\r\n    };\r\n};\r\nconst createTextureFromTarget = (opts) => (targets) => {\r\n    const { gl } = opts;\r\n    const texture = gl.createTexture();\r\n    const bindTarget = WebGlConstants.TEXTURE_2D;\r\n    const dataSize = opts.dataSize || gl.UNSIGNED_BYTE;\r\n    gl.bindTexture(bindTarget, texture);\r\n    opts.setParameters(opts);\r\n    const mipTargets = Array.isArray(targets) ? targets : [targets];\r\n    mipTargets.forEach((target, mipLevel) => {\r\n        if (target instanceof Element) {\r\n            gl.texImage2D(bindTarget, mipLevel, opts.format, opts.format, dataSize, target);\r\n        }\r\n        else {\r\n            gl.texImage2D(bindTarget, mipLevel, opts.format, opts.width, opts.height, 0, opts.format, dataSize, target);\r\n        }\r\n    });\r\n    return texture;\r\n};\r\nconst createCubeTextureFromTarget = (opts) => (targets) => {\r\n    const { gl } = opts;\r\n    const texture = gl.createTexture();\r\n    const bindTarget = WebGlConstants.TEXTURE_CUBE_MAP;\r\n    const dataSize = opts.dataSize || gl.UNSIGNED_BYTE;\r\n    gl.bindTexture(bindTarget, texture);\r\n    opts.setParameters(opts);\r\n    const mipTargets = Array.isArray(targets) ? targets : [targets];\r\n    mipTargets.forEach((mipTarget, mipLevel) => {\r\n        Object.keys(mipTarget).forEach((key) => {\r\n            const faceTarget = faceTargetFromKey(key);\r\n            const target = mipTarget[key];\r\n            if (target instanceof Element) {\r\n                gl.texImage2D(faceTarget, mipLevel, opts.format, opts.format, dataSize, target);\r\n            }\r\n            else {\r\n                gl.texImage2D(faceTarget, mipLevel, opts.format, opts.width, opts.height, 0, opts.format, dataSize, target);\r\n            }\r\n        });\r\n    });\r\n    return texture;\r\n};\r\n//only first param is set by user, second is set internally\r\nconst textureSetterSimple = (opts) => (_opts) => {\r\n    const { gl, width, height } = _opts;\r\n    const isPowerOf2 = (value) => (value & (value - 1)) == 0;\r\n    if (opts.flipY) {\r\n        gl.pixelStorei(WebGlConstants.UNPACK_FLIP_Y_WEBGL, true);\r\n    }\r\n    else {\r\n        gl.pixelStorei(WebGlConstants.UNPACK_FLIP_Y_WEBGL, false);\r\n    }\r\n    if (isPowerOf2(width) && isPowerOf2(height) && opts.useMips === true) {\r\n        gl.generateMipmap(WebGlConstants.TEXTURE_2D);\r\n    }\r\n    else {\r\n        gl.texParameteri(WebGlConstants.TEXTURE_2D, WebGlConstants.TEXTURE_WRAP_S, !opts.wrapS ? WebGlConstants.CLAMP_TO_EDGE : opts.wrapS);\r\n        gl.texParameteri(WebGlConstants.TEXTURE_2D, WebGlConstants.TEXTURE_WRAP_T, !opts.wrapT ? WebGlConstants.CLAMP_TO_EDGE : opts.wrapT);\r\n        gl.texParameteri(WebGlConstants.TEXTURE_2D, WebGlConstants.TEXTURE_MIN_FILTER, !opts.filterMin ? WebGlConstants.LINEAR : opts.filterMin);\r\n        gl.texParameteri(WebGlConstants.TEXTURE_2D, WebGlConstants.TEXTURE_MAG_FILTER, !opts.filterMag ? WebGlConstants.LINEAR : opts.filterMag);\r\n    }\r\n};\r\nconst createSimpleTextureFromTarget = (opts) => (target) => createTextureFromTarget({\r\n    gl: opts.gl,\r\n    format: opts.alpha ? WebGlConstants.RGBA : WebGlConstants.RGB,\r\n    setParameters: textureSetterSimple(opts)\r\n})(target);\n\nconst getColorSpaceForTextureId = ({ renderer, gltf, textureId }) => {\r\n    const defaultColorSpace = WebGlConstants.RGBA;\r\n    const SRGBA = 0x8C42; //SRGB_ALPHA_EXT ... not in type definitions yet and might vary by renderer.version\r\n    for (let i = 0; i < gltf.materials.length; i++) {\r\n        const material = gltf.materials[i];\r\n        if (material.emissiveTexture && material.emissiveTexture.index === textureId) {\r\n            return SRGBA;\r\n        }\r\n        if (material.normalTexture && material.normalTexture.index === textureId) {\r\n            return WebGlConstants.RGBA;\r\n        }\r\n        if (material.occlusionTexture && material.occlusionTexture.index === textureId) {\r\n            return WebGlConstants.RGBA;\r\n        }\r\n        if (material.pbrMetallicRoughness) {\r\n            if (material.pbrMetallicRoughness.baseColorTexture && material.pbrMetallicRoughness.baseColorTexture.index === textureId) {\r\n                return SRGBA;\r\n            }\r\n            if (material.pbrMetallicRoughness.metallicRoughnessTexture && material.pbrMetallicRoughness.metallicRoughnessTexture.index === textureId) {\r\n                return WebGlConstants.RGBA;\r\n            }\r\n        }\r\n    }\r\n    return defaultColorSpace;\r\n};\r\nconst requiresPowerOf2 = ({ wrapS, wrapT, filterMin, filterMag, sampler }) => (wrapS === WebGlConstants.REPEAT || wrapS === WebGlConstants.MIRRORED_REPEAT || wrapT === WebGlConstants.REPEAT || wrapT === WebGlConstants.MIRRORED_REPEAT)\r\n    || (filterMin === WebGlConstants.NEAREST_MIPMAP_NEAREST || filterMin === WebGlConstants.NEAREST_MIPMAP_LINEAR || filterMin === WebGlConstants.LINEAR_MIPMAP_NEAREST || filterMin === WebGlConstants.LINEAR_MIPMAP_LINEAR);\r\nconst isPowerOf2 = (img) => {\r\n    const check = (value) => (value & (value - 1)) == 0;\r\n    return check(img.naturalWidth) && check(img.naturalHeight);\r\n};\r\nconst nextHighestPowerOfTwo = (x) => {\r\n    --x;\r\n    for (var i = 1; i < 32; i <<= 1) {\r\n        x = x | x >> i;\r\n    }\r\n    return x + 1;\r\n};\r\nconst resizeImageToNextPowerOf2 = (img) => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = nextHighestPowerOfTwo(img.width);\r\n    canvas.height = nextHighestPowerOfTwo(img.height);\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height); //use img.width/height if not scaling\r\n    return canvas;\r\n};\r\nconst defaultSampler = {\r\n    filterMin: WebGlConstants.LINEAR,\r\n    filterMag: WebGlConstants.LINEAR,\r\n    wrapS: WebGlConstants.REPEAT,\r\n    wrapT: WebGlConstants.REPEAT\r\n};\r\nconst GLTF_PARSE_createTextures = ({ renderer, gltf, imageElements }) => {\r\n    const textureMap = new Map();\r\n    const { gl } = renderer;\r\n    if (gltf.textures) {\r\n        gltf.textures.forEach((texture, textureId) => {\r\n            const sampler = Object.assign({}, defaultSampler, texture.sampler === undefined ? undefined : gltf.samplers[texture.sampler]);\r\n            const colorSpace = getColorSpaceForTextureId({ renderer, gltf, textureId });\r\n            const img = imageElements[texture.source];\r\n            const { wrapS, wrapT, filterMin, filterMag } = sampler;\r\n            const display = (requiresPowerOf2({ wrapS, wrapT, filterMin, filterMag, sampler }) && !isPowerOf2(img))\r\n                ? resizeImageToNextPowerOf2(img)\r\n                : img;\r\n            const wTexture = createTextureFromTarget({\r\n                gl,\r\n                format: colorSpace,\r\n                setParameters: () => {\r\n                    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n                    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);\r\n                    gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\r\n                    gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\r\n                    gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filterMin);\r\n                    gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filterMag);\r\n                }\r\n            })(display);\r\n            textureMap.set(textureId, wTexture);\r\n        });\r\n    }\r\n    return textureMap;\r\n};\n\n//helper for loading each item separately and creating the world manually\r\nconst getBasePath = (path) => {\r\n    const idx1 = (path.lastIndexOf(\"/\") + 1);\r\n    const idx2 = (path.lastIndexOf(\"\\\\\") + 1);\r\n    return !idx1 && !idx2\r\n        ? path\r\n        : path.substr(0, (idx1 > idx2) ? idx1 : idx2);\r\n};\n\nconst getIblConfig = (gltf) => {\r\n    if (gltf.extensionsUsed && gltf.extensionsUsed.indexOf(GltfIblExtensionName) !== -1) {\r\n        return gltf.extensions[GltfIblExtensionName];\r\n    }\r\n    return null;\r\n};\r\nconst loadAssets = ({ gltf, coreData }) => {\r\n    const config = getIblConfig(gltf);\r\n    const path = config ? config.path : \"\";\r\n    if (path === \"\") {\r\n        return Future.of(coreData);\r\n    }\r\n    return fetchJsonUrl(path)\r\n        .chain(jsonData => {\r\n        const basePath = getBasePath(path);\r\n        const imageUrls = Array();\r\n        imageUrls.push(jsonData.brdf.url);\r\n        const cubeMapNames = Object.keys(jsonData.cubeMaps);\r\n        cubeMapNames.forEach(cubeMapName => {\r\n            const cubeMap = jsonData.cubeMaps[cubeMapName];\r\n            cubeMap.urls.forEach(list => {\r\n                list.forEach(url => {\r\n                    imageUrls.push(cubeMapName + \"/\" + url);\r\n                });\r\n            });\r\n        });\r\n        const imageFutures = imageUrls.map(url => fetchImage(basePath + url).map(img => ({ url, img })));\r\n        return parallel(Infinity, imageFutures)\r\n            .map(ldrs => {\r\n            const m = new Map();\r\n            ldrs.forEach(ldr => {\r\n                m.set(ldr.url, ldr.img);\r\n            });\r\n            return m;\r\n        })\r\n            .map(imageMap => ({ jsonData, imageMap }));\r\n    })\r\n        .map(ibl => Object.assign({}, coreData, { extensions: Object.assign({}, coreData.extensions, { ibl })\r\n    }));\r\n};\r\nconst createData = ({ gltf, assets, renderer }) => (data) => {\r\n    if (!assets.extensions.ibl) {\r\n        return data;\r\n    }\r\n    prepWebGlRenderer(renderer);\r\n    const gl = renderer.gl;\r\n    const { jsonData, imageMap } = assets.extensions.ibl;\r\n    const makeBrdfTexture = createTextureFromTarget({\r\n        gl,\r\n        format: jsonData.brdf.colorSpace,\r\n        setParameters: () => {\r\n            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n            gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n            gl.texParameteri(WebGlConstants.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        }\r\n    });\r\n    const makeCubeMapTexture = (images) => (cubeMapName) => ({ colorSpace, urls }) => {\r\n        const faces = [\"posX\", \"negX\", \"posY\", \"negY\", \"posZ\", \"negZ\"];\r\n        let mipLevels = [];\r\n        urls.forEach(list => {\r\n            const mipLevel = {};\r\n            list.forEach((url, faceIndex) => {\r\n                const img = images.get(cubeMapName + \"/\" + url);\r\n                mipLevel[faces[faceIndex]] = img;\r\n            });\r\n            mipLevels.push(mipLevel);\r\n        });\r\n        return createCubeTextureFromTarget({\r\n            gl,\r\n            format: colorSpace,\r\n            setParameters: opts => {\r\n                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n                if (urls.length > 1) {\r\n                    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\r\n                    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n                }\r\n                else {\r\n                    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n                    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n                }\r\n            }\r\n        })(mipLevels);\r\n    };\r\n    const ibl = {\r\n        brdf: makeBrdfTexture(imageMap.get(jsonData.brdf.url)),\r\n        cubeMaps: {},\r\n        useLod: false\r\n    };\r\n    Object.keys(jsonData.cubeMaps).forEach(cubeMapName => {\r\n        const cubeMap = jsonData.cubeMaps[cubeMapName];\r\n        if (cubeMap.urls.length > 1) {\r\n            ibl.useLod = true;\r\n        }\r\n        ibl.cubeMaps[cubeMapName] = makeCubeMapTexture(imageMap)(cubeMapName)(jsonData.cubeMaps[cubeMapName]);\r\n    });\r\n    return Object.assign({}, data, { extensions: Object.assign({}, data.extensions, { ibl })\r\n    });\r\n};\r\nconst createScene = (gltf) => (originalScene) => (scene) => scene;\r\nconst createNode = (gltf) => (originalNode) => (node) => {\r\n    return node;\r\n};\r\nconst initialShaderConfig_Primitive = (data) => (originalIds) => (primitive) => (shaderConfig) => shaderConfig;\r\nconst initialShaderConfig_Scene = (data) => (scene) => (shaderConfig) => data.extensions.ibl\r\n    ? Object.assign({}, shaderConfig, {\r\n        ibl: {\r\n            useLod: data.extensions.ibl.useLod\r\n        }\r\n    })\r\n    : shaderConfig;\r\nconst runtimeShaderConfig_Primitive = (scene) => (primitive) => (shaderConfig) => shaderConfig;\r\nconst runtimeShaderConfig_Scene = (scene) => (shaderConfig) => shaderConfig;\r\nconst getShaderSource = (data) => (sceneShaderconfig) => (primitiveShaderConfig) => (source) => {\r\n    if (data.extensions.ibl) {\r\n        const defines = [];\r\n        defines.push(\"USE_IBL\");\r\n        if (data.extensions.ibl.useLod) {\r\n            defines.push(\"USE_TEX_LOD\");\r\n        }\r\n        const defineString = defines.map(value => `#define ${value} 1\\n`).join('');\r\n        return Object.assign({}, source, {\r\n            vertex: defineString + source.vertex,\r\n            fragment: defineString + source.fragment\r\n        });\r\n    }\r\n    return source;\r\n};\r\nconst GLTF_PARSE_Extension_Ibl = {\r\n    loadAssets,\r\n    createData,\r\n    createScene,\r\n    createNode,\r\n    initialShaderConfig_Primitive,\r\n    runtimeShaderConfig_Primitive,\r\n    initialShaderConfig_Scene,\r\n    runtimeShaderConfig_Scene,\r\n    getShaderSource\r\n};\n\n/* Note - lights are different than other extensions since\r\n * they are passed around really as part of the scene, for the sake of convenience (rather than scene.extensions for ambient, or hunting for nodes with extensions.light - lights are first-class citizens\r\n * For this reason, it is possible to \"trick\" the shader config by specifying the scene data directly rather than auto-loading it via KHR_Lights, though that typically wouldn't be used\r\n */\r\nconst getConfig = (gltf) => {\r\n    if (gltf.extensionsUsed && gltf.extensionsUsed.indexOf(GltfLightsExtensionName) !== -1) {\r\n        return gltf.extensions[GltfLightsExtensionName].lights;\r\n    }\r\n    return null;\r\n};\r\nconst getLight = (originalLight) => {\r\n    const kindMap = {\r\n        directional: LightKind.Directional,\r\n        point: LightKind.Point,\r\n        spot: LightKind.Spot\r\n    };\r\n    const light = {\r\n        kind: kindMap[originalLight.type],\r\n        color: originalLight.color\r\n            ? Float64Array.from(originalLight.color)\r\n            : Float64Array.from([1.0, 1.0, 1.0]),\r\n        intensity: originalLight.intensity !== undefined\r\n            ? originalLight.intensity\r\n            : 1.0\r\n    };\r\n    if (light.kind === LightKind.Spot) {\r\n        const innerConeAngle = originalLight.spot && originalLight.spot.innerConeAngle !== undefined\r\n            ? originalLight.spot.innerConeAngle\r\n            : 0;\r\n        const outerConeAngle = originalLight.spot && originalLight.spot.outerConeAngle !== undefined\r\n            ? originalLight.spot.outerConeAngle\r\n            : Math.PI / 4;\r\n        light.angleScale = 1.0 / Math.max(0.001, Math.cos(innerConeAngle) - Math.cos(outerConeAngle));\r\n        light.angleOffset = -Math.cos(outerConeAngle) * light.angleScale;\r\n    }\r\n    return light;\r\n};\r\nconst loadAssets$1 = ({ gltf, coreData }) => Future.of(coreData);\r\nconst createData$1 = ({ gltf, assets, renderer }) => (data) => data;\r\nconst createScene$1 = (gltf) => (originalScene) => (scene) => scene;\r\nconst createNode$1 = (gltf) => (originalNode) => (node) => {\r\n    const config = getConfig(gltf);\r\n    const nodeConfig = originalNode.extensions && originalNode.extensions.hasOwnProperty(GltfLightsExtensionName)\r\n        ? originalNode.extensions[GltfLightsExtensionName]\r\n        : undefined;\r\n    if (!config || !nodeConfig) {\r\n        return node;\r\n    }\r\n    const light = getLight(config[nodeConfig.light]);\r\n    if (node.kind) {\r\n        throw new Error(\"node cannot be both a light and some other kind...\");\r\n    }\r\n    return Object.assign({}, node, {\r\n        kind: NodeKind.LIGHT,\r\n        light\r\n    });\r\n};\r\nconst initialShaderConfig_Primitive$1 = (data) => (originalIds) => (primitive) => (shaderConfig) => shaderConfig;\r\nconst initialShaderConfig_Scene$1 = (data) => (scene) => (shaderConfig) => shaderConfig;\r\nconst runtimeShaderConfig_Primitive$1 = (scene) => (primitive) => (shaderConfig) => shaderConfig;\r\nconst runtimeShaderConfig_Scene$1 = (scene) => (shaderConfig) => {\r\n    let nPointLights = 0;\r\n    let nDirectionalLights = 0;\r\n    let nSpotLights = 0;\r\n    forEachNodes((node) => {\r\n        if (node.kind === NodeKind.LIGHT) {\r\n            switch (node.light.kind) {\r\n                case LightKind.Directional:\r\n                    nDirectionalLights++;\r\n                    break;\r\n                case LightKind.Point:\r\n                    nPointLights++;\r\n                    break;\r\n                case LightKind.Spot:\r\n                    nSpotLights++;\r\n                    break;\r\n            }\r\n        }\r\n    })(scene.nodes);\r\n    const config = {\r\n        nPointLights,\r\n        nDirectionalLights,\r\n        nSpotLights,\r\n    };\r\n    return Object.assign({}, shaderConfig, { lights: config });\r\n};\r\nconst getDynamicFragmentShader = (data) => (sceneShaderConfig) => (primitiveShaderConfig) => (fs) => {\r\n    let LIGHTS_VARS = '';\r\n    let LIGHTS_FUNCS = '';\r\n    const dLen = sceneShaderConfig.lights.nDirectionalLights;\r\n    const pLen = sceneShaderConfig.lights.nPointLights;\r\n    const sLen = sceneShaderConfig.lights.nSpotLights;\r\n    if (dLen) {\r\n        LIGHTS_VARS += `uniform vec3 u_Light_Directional_Direction[${dLen}];\\n`;\r\n        LIGHTS_VARS += `uniform vec3 u_Light_Directional_Color[${dLen}];\\n`;\r\n        LIGHTS_VARS += `uniform float u_Light_Directional_Intensity[${dLen}];\\n`;\r\n        for (let i = 0; i < dLen; i++) {\r\n            LIGHTS_FUNCS += `light = getDirectionalLight(\n                fragment,\n                u_Light_Directional_Direction[${i}],\n                u_Light_Directional_Color[${i}],\n                u_Light_Directional_Intensity[${i}]\n            );\\n`;\r\n            LIGHTS_FUNCS += `color += getColor(pbr, fragment, light);\\n`;\r\n        }\r\n    }\r\n    if (pLen) {\r\n        LIGHTS_VARS += `uniform vec3 u_Light_Point_Position[${pLen}];\\n`;\r\n        LIGHTS_VARS += `uniform vec3 u_Light_Point_Color[${pLen}];\\n`;\r\n        LIGHTS_VARS += `uniform float u_Light_Point_Intensity[${pLen}];\\n`;\r\n        for (let i = 0; i < pLen; i++) {\r\n            LIGHTS_FUNCS += `light = getPointLight(\n                fragment,\n                u_Light_Point_Position[${i}], \n                u_Light_Point_Color[${i}], \n                u_Light_Point_Intensity[${i}]\n            );\\n`;\r\n            LIGHTS_FUNCS += `color += getColor(pbr, fragment, light);\\n`;\r\n        }\r\n    }\r\n    if (sLen) {\r\n        LIGHTS_VARS += `uniform vec3 u_Light_Spot_Position[${sLen}];\\n`;\r\n        LIGHTS_VARS += `uniform vec3 u_Light_Spot_Direction[${sLen}];\\n`;\r\n        LIGHTS_VARS += `uniform float u_Light_Spot_AngleScale[${sLen}];\\n`;\r\n        LIGHTS_VARS += `uniform float u_Light_Spot_AngleOffset[${sLen}];\\n`;\r\n        LIGHTS_VARS += `uniform vec3 u_Light_Spot_Color[${sLen}];\\n`;\r\n        LIGHTS_VARS += `uniform float u_Light_Spot_Intensity[${sLen}];\\n`;\r\n        for (let i = 0; i < sLen; i++) {\r\n            LIGHTS_FUNCS += `light = getSpotLight(\n                fragment,\n                u_Light_Spot_Position[${i}], \n                u_Light_Spot_Direction[${i}], \n                u_Light_Spot_AngleScale[${i}], \n                u_Light_Spot_AngleOffset[${i}], \n                u_Light_Spot_Color[${i}], \n                u_Light_Spot_Intensity[${i}]\n            );\\n`;\r\n            LIGHTS_FUNCS += `color += getColor(pbr, fragment, light);\\n`;\r\n        }\r\n    }\r\n    return fs.replace(\"%PUNCTUAL_LIGHTS_VARS%\", LIGHTS_VARS).replace(\"%PUNCTUAL_LIGHTS_FUNCS%\", LIGHTS_FUNCS);\r\n};\r\nconst getShaderSource$1 = (data) => (sceneShaderConfig) => (primitiveShaderConfig) => (source) => {\r\n    if (sceneShaderConfig.lights) {\r\n        const defines = [];\r\n        const { nPointLights, nDirectionalLights, nSpotLights } = sceneShaderConfig.lights;\r\n        if (nPointLights > GltfLights_MAX || nDirectionalLights > GltfLights_MAX || nSpotLights > GltfLights_MAX) {\r\n            console.warn(`Only ${GltfLights_MAX} lights of each kind are supported`);\r\n        }\r\n        if (!nPointLights && !nDirectionalLights && !nSpotLights) {\r\n            return source;\r\n        }\r\n        defines.push(\"USE_PUNCTUAL_LIGHTS\");\r\n        const defineString = defines.map(value => `#define ${value} 1\\n`).join('');\r\n        return Object.assign({}, source, {\r\n            vertex: defineString + source.vertex,\r\n            fragment: getDynamicFragmentShader(data)(sceneShaderConfig)(primitiveShaderConfig)(defineString + source.fragment)\r\n        });\r\n    }\r\n    else {\r\n        return source;\r\n    }\r\n};\r\nconst GLTF_PARSE_Extension_Lights = {\r\n    loadAssets: loadAssets$1,\r\n    createData: createData$1,\r\n    createScene: createScene$1,\r\n    createNode: createNode$1,\r\n    initialShaderConfig_Primitive: initialShaderConfig_Primitive$1,\r\n    runtimeShaderConfig_Primitive: runtimeShaderConfig_Primitive$1,\r\n    initialShaderConfig_Scene: initialShaderConfig_Scene$1,\r\n    runtimeShaderConfig_Scene: runtimeShaderConfig_Scene$1,\r\n    getShaderSource: getShaderSource$1\r\n};\n\nconst GltfExtensions = [\r\n    GLTF_PARSE_Extension_Ibl,\r\n    GLTF_PARSE_Extension_Lights\r\n];\n\n//Pure data loaders\r\nconst loadBuffers = ({ basePath, gltf, glbBuffers }) => parallel(Infinity, gltf.buffers.map((buffer, bufferIndex) => glbBuffers !== undefined && bufferIndex < glbBuffers.length\r\n    ? Future.of(glbBuffers[bufferIndex].slice(0, buffer.byteLength))\r\n    : buffer.uri.indexOf(\"data:\") === 0\r\n        ? fetchArrayBufferUrl(buffer.uri)\r\n        : fetchArrayBufferUrl(basePath + buffer.uri)));\r\nconst loadImages = ({ basePath, gltf, buffers }) => {\r\n    const getImageBufferData = (bufferViewId) => {\r\n        const bufferView = gltf.bufferViews[bufferViewId];\r\n        const bufferId = bufferView.buffer;\r\n        const offset = bufferView.byteOffset === undefined ? 0 : bufferView.byteOffset;\r\n        return buffers[bufferId].slice(offset, offset + bufferView.byteLength);\r\n    };\r\n    //load texture data\r\n    return parallel(Infinity, !gltf.images || !gltf.images.length\r\n        ? []\r\n        : gltf.images.map(image => image.bufferView !== undefined\r\n            ? loadImageFromArrayBuffer({ data: getImageBufferData(image.bufferView), mimeType: image.mimeType })\r\n            : image.uri.indexOf(\"data:\") === 0\r\n                ? fetchImage(image.uri) //untested\r\n                : fetchImage(basePath + image.uri)));\r\n};\r\n//Tools for processing and loading data\r\nconst GLTF_PARSE_LoadDataAssets = ({ basePath, gltf, glbBuffers }) => GltfExtensions\r\n    .map(ext => ext.loadAssets)\r\n    .reduce((acc, fn) => (acc = acc.chain(coreData => fn({ gltf, coreData })), acc), loadBuffers({ basePath, gltf, glbBuffers })\r\n    .chain((buffers) => loadImages({ basePath, gltf, buffers })\r\n    .map(imageElements => ({\r\n    buffers, imageElements, extensions: {}\r\n}))));\r\nconst GLTF_PARSE_CreateData = ({ gltf, assets, renderer, config }) => {\r\n    prepWebGlRenderer(renderer);\r\n    const { imageElements, buffers } = assets;\r\n    const textures = GLTF_PARSE_createTextures({ renderer, gltf, imageElements });\r\n    const attributes = GLTF_PARSE_createAttributes({ gltf, buffers, renderer });\r\n    const animations = GLTF_PARSE_createAnimations({ gltf, buffers });\r\n    const shaders = new Map();\r\n    return GltfExtensions\r\n        .map(ext => ext.createData)\r\n        .reduce((acc, val) => (acc = val({ gltf, assets, renderer })(acc), acc), {\r\n        original: gltf,\r\n        animations,\r\n        attributes,\r\n        textures,\r\n        shaders,\r\n        initConfig: config,\r\n        extensions: {}\r\n    });\r\n};\n\n//https://stackoverflow.com/a/41798356/784519\r\nconst utf8ArrayToStr = (function () {\r\n    var charCache = new Array(128); // Preallocate the cache for the common single byte chars\r\n    var charFromCodePt = String.fromCodePoint || String.fromCharCode;\r\n    var result = [];\r\n    return function (array) {\r\n        var codePt, byte1;\r\n        var buffLen = array.length;\r\n        result.length = 0;\r\n        for (var i = 0; i < buffLen;) {\r\n            byte1 = array[i++];\r\n            if (byte1 <= 0x7F) {\r\n                codePt = byte1;\r\n            }\r\n            else if (byte1 <= 0xDF) {\r\n                codePt = ((byte1 & 0x1F) << 6) | (array[i++] & 0x3F);\r\n            }\r\n            else if (byte1 <= 0xEF) {\r\n                codePt = ((byte1 & 0x0F) << 12) | ((array[i++] & 0x3F) << 6) | (array[i++] & 0x3F);\r\n            }\r\n            else if (String.fromCodePoint) {\r\n                codePt = ((byte1 & 0x07) << 18) | ((array[i++] & 0x3F) << 12) | ((array[i++] & 0x3F) << 6) | (array[i++] & 0x3F);\r\n            }\r\n            else {\r\n                codePt = 63; // Cannot convert four byte code points, so use \"?\" instead\r\n                i += 3;\r\n            }\r\n            result.push(charCache[codePt] || (charCache[codePt] = charFromCodePt(codePt)));\r\n        }\r\n        return result.join('');\r\n    };\r\n})();\r\nconst getJsonFromArrayBuffer = (aBuffer) => {\r\n    const bytes = new Uint8Array(aBuffer);\r\n    const str = window[\"TextDecoder\"]\r\n        ? new TextDecoder('utf-8').decode(bytes)\r\n        : utf8ArrayToStr(bytes);\r\n    //console.log(str);\r\n    return JSON.parse(str);\r\n};\n\nconst getHeader = (aBuffer) => {\r\n    const dv = new DataView(aBuffer, 0, 12);\r\n    return {\r\n        magic: dv.getUint32(0, true),\r\n        version: dv.getUint32(4, true),\r\n        length: dv.getUint32(8, true)\r\n    };\r\n};\r\nconst getChunk = (offset) => (aBuffer) => {\r\n    const dv = new DataView(aBuffer, offset, 8);\r\n    const chunkLength = dv.getUint32(0, true);\r\n    const chunkType = dv.getUint32(4, true);\r\n    const chunkStart = offset + 8;\r\n    const chunkEnd = chunkStart + chunkLength;\r\n    const chunkData = aBuffer.slice(chunkStart, chunkEnd);\r\n    const result = [\r\n        (chunkType === 0x4E4F534A)\r\n            ? getJsonFromArrayBuffer(chunkData)\r\n            : (chunkType === 0x004E4942)\r\n                ? chunkData\r\n                : null,\r\n        chunkEnd\r\n    ];\r\n    if (result[0] === null) {\r\n        console.log(`unknown chunk type: ${chunkType}`);\r\n    }\r\n    return result;\r\n};\r\nconst asGlb = (aBuffer) => {\r\n    const [gltf, gltfEndOffset] = getChunk(12)(aBuffer);\r\n    const buffers = new Array();\r\n    let offset = gltfEndOffset;\r\n    while (offset < aBuffer.byteLength) {\r\n        const [bin, endOffset] = getChunk(offset)(aBuffer);\r\n        if (bin !== null) {\r\n            buffers.push(bin);\r\n        }\r\n        offset += endOffset;\r\n    }\r\n    return { gltf, glbBuffers: buffers };\r\n};\r\nconst GLTF_PARSE_isBinaryFile = (aBuffer) => getHeader(aBuffer).magic === 0x46546C67;\r\nconst GLTF_PARSE_getOriginalFromArrayBuffer = (aBuffer) => GLTF_PARSE_isBinaryFile(aBuffer)\r\n    ? asGlb(aBuffer)\r\n    : { gltf: getJsonFromArrayBuffer(aBuffer), glbBuffers: [] };\n\nlet _vaoIdCounter = 0;\r\nconst attributeShaderNameLookup = {\r\n    \"POSITION\": \"a_Position\",\r\n    \"NORMAL\": \"a_Normal\",\r\n    \"TANGENT\": \"a_Tangent\",\r\n    \"TEXCOORD_0\": \"a_UV\",\r\n    \"COLOR_0\": \"a_Color\",\r\n    \"JOINTS_0\": \"a_Skin_Joint\",\r\n    \"WEIGHTS_0\": \"a_Skin_Weight\"\r\n};\r\n//Sorting the attributes is important so that the dynamic shader\r\n//matches the correct location for each morph (e.g. morph_1 is position and location x, etc.)\r\nconst GLTF_PARSE_sortPrimitiveAttributeKeys = (keys) => keys.sort((a, b) => {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    const ORDER = [\"POSITION\", \"NORMAL\", \"TANGENT\", \"TEXCOOR_0\", \"COLOR_0\", \"JOINTS_0\", \"WEIGHTS_0\"];\r\n    const oa = ORDER.indexOf(a);\r\n    const ob = ORDER.indexOf(b);\r\n    return oa < ob ? -1 : oa > ob ? 1 : 0;\r\n});\r\nconst GLTF_PARSE_primitiveHasAttribute = (attributeName) => (originalPrimitive) => Object.keys(originalPrimitive.attributes).indexOf(attributeName) !== -1;\r\nconst GLTF_PARSE_getPrimitiveAttributeKeys = (originalPrimitive) => GLTF_PARSE_sortPrimitiveAttributeKeys(Object.keys(originalPrimitive.attributes));\r\nconst GLTF_PARSE_createPrimitiveAttributes = ({ renderer, originalPrimitive, data }) => {\r\n    const vao = { data: [] };\r\n    const accessorLookup = data.attributes.accessorLookup;\r\n    if (originalPrimitive.indices !== undefined) {\r\n        vao.elementBufferId = accessorLookup.get(originalPrimitive.indices).rendererBufferId;\r\n    }\r\n    const attributeKeys = GLTF_PARSE_getPrimitiveAttributeKeys(originalPrimitive);\r\n    attributeKeys.forEach((attributeKey) => {\r\n        const accessorId = originalPrimitive.attributes[attributeKey];\r\n        const attributeName = attributeShaderNameLookup[attributeKey];\r\n        if (!accessorLookup.has(accessorId)) {\r\n            throw new Error(\"bug here!\");\r\n        }\r\n        vao.data.push(Object.assign({ location: renderer.attributes.getLocationInRenderer(attributeName), bufferId: accessorLookup.get(accessorId).rendererBufferId }, accessorLookup.get(accessorId).strategy));\r\n    });\r\n    const { targets } = originalPrimitive;\r\n    if (targets) {\r\n        let morphIndex = 0;\r\n        targets.forEach(target => {\r\n            GLTF_PARSE_sortPrimitiveAttributeKeys(Object.keys(target)).forEach(attributeKey => {\r\n                const accessorId = target[attributeKey];\r\n                const aMorph = `a_Morph_${morphIndex++}`;\r\n                //console.log(aMorph,  data.accessors.get(accessorId).strategy.offset);\r\n                vao.data.push(Object.assign({ location: renderer.attributes.getLocationInRenderer(aMorph), bufferId: accessorLookup.get(accessorId).rendererBufferId }, accessorLookup.get(accessorId).strategy));\r\n            });\r\n        });\r\n    }\r\n    //vao.data.forEach(({attributeName}) => console.log(attributeName, shader.attributes.getLocation(attributeName)));\r\n    const vaoId = _vaoIdCounter++;\r\n    const sym = Symbol();\r\n    data.attributes.vaoIdLookup.set(vaoId, sym);\r\n    renderer.vertexArrays.assign(sym)(vao);\r\n    return vaoId;\r\n};\n\nconst GLTF_PARSE_getPrimitiveDrawing = ({ originalPrimitive, data }) => {\r\n    const _primitive = {\r\n        drawKind: (originalPrimitive.indices !== undefined) ? GltfPrimitiveDrawKind.ELEMENTS : GltfPrimitiveDrawKind.ARRAY,\r\n        drawMode: originalPrimitive.mode ? originalPrimitive.mode : WebGlConstants.TRIANGLES\r\n    };\r\n    if (_primitive.drawKind === GltfPrimitiveDrawKind.ELEMENTS) {\r\n        _primitive.elementsId = originalPrimitive.indices;\r\n    }\r\n    else {\r\n        const attributeKeys = GLTF_PARSE_getPrimitiveAttributeKeys(originalPrimitive);\r\n        _primitive.arrayCount = data.original.accessors[originalPrimitive.attributes[attributeKeys[0]]].count;\r\n    }\r\n    return _primitive;\r\n};\n\nconst GLTF_PARSE_createMaterialForPrimitive = ({ gltf, materialId, data }) => {\r\n    const _m = gltf.materials[materialId];\r\n    const material = {};\r\n    material.metallicRoughnessValues = Float64Array.from([1.0, 1.0]);\r\n    material.baseColorFactor = Float64Array.from([1.0, 1.0, 1.0, 1.0]);\r\n    if (_m.pbrMetallicRoughness) {\r\n        if (_m.pbrMetallicRoughness.metallicFactor !== undefined) {\r\n            material.metallicRoughnessValues[0] = _m.pbrMetallicRoughness.metallicFactor;\r\n        }\r\n        if (_m.pbrMetallicRoughness.roughnessFactor !== undefined) {\r\n            material.metallicRoughnessValues[1] = _m.pbrMetallicRoughness.roughnessFactor;\r\n        }\r\n        if (_m.pbrMetallicRoughness.baseColorFactor !== undefined) {\r\n            material.baseColorFactor = Float64Array.from(_m.pbrMetallicRoughness.baseColorFactor);\r\n        }\r\n        if (_m.pbrMetallicRoughness.baseColorTexture !== undefined) {\r\n            material.baseColorSamplerIndex = _m.pbrMetallicRoughness.baseColorTexture.index;\r\n        }\r\n        if (_m.pbrMetallicRoughness.metallicRoughnessTexture !== undefined) {\r\n            material.metallicRoughnessSamplerIndex = _m.pbrMetallicRoughness.metallicRoughnessTexture.index;\r\n        }\r\n    }\r\n    if (_m.normalTexture !== undefined) {\r\n        const scale = _m.normalTexture.scale !== undefined ? _m.normalTexture.scale : 1.0;\r\n        material.normal = {\r\n            scale,\r\n            samplerIndex: _m.normalTexture.index\r\n        };\r\n    }\r\n    if (_m.occlusionTexture !== undefined) {\r\n        const strength = _m.occlusionTexture.strength !== undefined ? _m.occlusionTexture.strength : 1.0;\r\n        material.occlusion = {\r\n            strength,\r\n            samplerIndex: _m.occlusionTexture.index\r\n        };\r\n    }\r\n    if (_m.emissiveTexture !== undefined) {\r\n        material.emissiveSamplerIndex = _m.emissiveTexture.index;\r\n    }\r\n    if (_m.emissiveFactor !== undefined) {\r\n        material.emissiveFactor = Float64Array.from(_m.emissiveFactor);\r\n    }\r\n    if (_m.alphaMode) {\r\n        switch (_m.alphaMode) {\r\n            case \"BLEND\":\r\n                material.alphaMode = GltfMaterialAlphaMode.BLEND;\r\n                break;\r\n            case \"MASK\":\r\n                material.alphaMode = GltfMaterialAlphaMode.MASK;\r\n                break;\r\n            default:\r\n                material.alphaMode = GltfMaterialAlphaMode.OPAQUE;\r\n                break;\r\n        }\r\n    }\r\n    material.doubleSided = _m.doubleSided ? true : false;\r\n    material.alphaCutoff = _m.alphaCutoff === undefined ? .5 : _m.alphaCutoff;\r\n    return material;\r\n};\n\n//These need to be called via bridge/setup\r\nconst GLTF_PARSE_getInitialShaderConfig_Primitive = (data) => (originalIds) => (primitive) => GltfExtensions\r\n    .map(ext => ext.initialShaderConfig_Primitive)\r\n    .reduce((acc, val) => (acc = val(data)(originalIds)(primitive)(acc), acc), getCoreInitialShaderConfig_Primitive(data)(originalIds)(primitive));\r\nconst GLTF_PARSE_getInitialShaderConfig_Scene = (data) => (scene) => GltfExtensions\r\n    .map(ext => ext.initialShaderConfig_Scene)\r\n    .reduce((acc, val) => (acc = val(data)(scene)(acc), acc), {});\r\nconst getCoreInitialShaderConfig_Primitive = (data) => (originalIds) => (primitive) => {\r\n    const gltf = data.original;\r\n    const originalNode = data.original.nodes[originalIds.nodeId];\r\n    const originalPrimitive = data.original.meshes[originalIds.meshId].primitives[originalIds.primitiveId];\r\n    const hasAttribute = (originalPrimitive) => (attr) => Object.keys(originalPrimitive.attributes).indexOf(attr) !== -1;\r\n    const material = primitive.material;\r\n    let nMorphWeights = 0;\r\n    let nPositionMorphs = 0;\r\n    let nNormalMorphs = 0;\r\n    let nTangentMorphs = 0;\r\n    let nSkinJoints = 0;\r\n    if (originalNode.skin !== undefined) {\r\n        const skin = data.original.skins[originalNode.skin];\r\n        nSkinJoints = skin.joints.length;\r\n    }\r\n    if (originalPrimitive.targets) {\r\n        originalPrimitive.targets.forEach(target => {\r\n            GLTF_PARSE_sortPrimitiveAttributeKeys(Object.keys(target)).forEach(key => {\r\n                switch (key) {\r\n                    case \"POSITION\":\r\n                        nPositionMorphs++;\r\n                        break;\r\n                    case \"NORMAL\":\r\n                        nNormalMorphs++;\r\n                        break;\r\n                    case \"TANGENT\":\r\n                        nTangentMorphs++;\r\n                        break;\r\n                    default: console.warn(\"unknown...\", key);\r\n                }\r\n            });\r\n            nMorphWeights++;\r\n        });\r\n    }\r\n    const shaderConfig = {\r\n        nMorphWeights,\r\n        nPositionMorphs,\r\n        nNormalMorphs,\r\n        nTangentMorphs,\r\n        nSkinJoints,\r\n        alphaMode: (material && material.alphaMode) ? material.alphaMode : GltfMaterialAlphaMode.OPAQUE,\r\n        hasNormalAttributes: hasAttribute(originalPrimitive)(\"NORMAL\"),\r\n        hasTangentAttributes: hasAttribute(originalPrimitive)(\"TANGENT\"),\r\n        hasUvAttributes: hasAttribute(originalPrimitive)(\"TEXCOORD_0\"),\r\n        hasColorAttributes: hasAttribute(originalPrimitive)(\"COLOR_0\"),\r\n        hasBaseColorMap: material && material.baseColorSamplerIndex !== undefined,\r\n        hasNormalMap: material && material.normal !== undefined,\r\n        hasEmissiveMap: material && material.emissiveSamplerIndex !== undefined,\r\n        hasMetalRoughnessMap: material && material.metallicRoughnessSamplerIndex !== undefined,\r\n        hasOcclusionMap: material && material.occlusion !== undefined,\r\n        manualSRGB: data.initConfig.manualSRGB === true,\r\n        fastSRGB: data.initConfig.fastSRGB === true,\r\n    };\r\n    return shaderConfig;\r\n};\n\nconst GLTF_PARSE_createPrimitives = ({ renderer, data }) => {\r\n    const gltf = data.original;\r\n    const meshPrimitives = new Map();\r\n    if (gltf.nodes === undefined || gltf.nodes === null) {\r\n        return meshPrimitives;\r\n    }\r\n    gltf.nodes\r\n        .map((node, idx) => [node, idx])\r\n        .filter(([node, idx]) => node.mesh !== undefined && node.mesh !== null)\r\n        .forEach(([node, nodeId]) => meshPrimitives.set(node.mesh, gltf.meshes[node.mesh].primitives.map((originalPrimitive, primitiveIdx) => {\r\n        const mesh = gltf.meshes[node.mesh];\r\n        const primitive = Object.assign({ vaoId: GLTF_PARSE_createPrimitiveAttributes({ renderer, originalPrimitive, data }) }, GLTF_PARSE_getPrimitiveDrawing({ originalPrimitive, data }));\r\n        if (originalPrimitive.material !== undefined) {\r\n            primitive.material = GLTF_PARSE_createMaterialForPrimitive({ gltf, materialId: originalPrimitive.material, data });\r\n        }\r\n        primitive.shaderConfig =\r\n            GLTF_PARSE_getInitialShaderConfig_Primitive(data)({ nodeId: nodeId, meshId: node.mesh, primitiveId: primitiveIdx })(primitive);\r\n        return primitive;\r\n    })));\r\n    return meshPrimitives;\r\n};\n\nconst GLTF_PARSE_createScene = ({ renderer, data, allNodes }) => (camera) => (sceneNumber) => {\r\n    let nodes = [];\r\n    if (sceneNumber >= 0 && data.original.scenes[sceneNumber]) {\r\n        const sceneList = data.original.scenes[sceneNumber].nodes;\r\n        forEachNodes(node => {\r\n            if (sceneList.indexOf(node.originalNodeId) !== -1) {\r\n                nodes.push(node);\r\n            }\r\n        })(allNodes);\r\n    }\r\n    else {\r\n        nodes = allNodes;\r\n        console.warn(\"no scene specified! Expect duplicate nodes...\");\r\n    }\r\n    const originalScene = sceneNumber >= 0\r\n        ? data.original.scenes[sceneNumber]\r\n        : {\r\n            nodes: data.original.nodes.map((node, idx) => idx)\r\n        };\r\n    //const nodes =_allNodes.filter((node, idx) => originalScene.nodes.indexOf(idx) !== -1);\r\n    const scene = GltfExtensions\r\n        .map(ext => ext.createScene)\r\n        .reduce((acc, val) => acc = val(data.original)(originalScene)(acc), {\r\n        camera,\r\n        nodes: updateNodeListTransforms({\r\n            updateLocal: true,\r\n            updateModel: true,\r\n            updateView: true,\r\n            updateLightDirection: true,\r\n            camera,\r\n        })(null)(nodes)\r\n    });\r\n    //workaround read-only here\r\n    scene.shaderConfig = GLTF_PARSE_getInitialShaderConfig_Scene(data)(scene);\r\n    return scene;\r\n};\n\nconst GLTF_PARSE_getCameraSettings = (originalCamera) => originalCamera.type === \"orthographic\"\r\n    ? {\r\n        kind: CameraKind.ORTHOGRAPHIC,\r\n        xmag: originalCamera.orthographic.xmag,\r\n        ymag: originalCamera.orthographic.ymag,\r\n        znear: originalCamera.orthographic.znear,\r\n        zfar: originalCamera.orthographic.zfar\r\n    }\r\n    : {\r\n        kind: CameraKind.PERSPECTIVE,\r\n        aspectRatio: originalCamera.perspective.aspectRatio,\r\n        yfov: originalCamera.perspective.yfov,\r\n        znear: originalCamera.perspective.znear,\r\n        zfar: originalCamera.perspective.zfar,\r\n    };\n\nconst GLTF_PARSE_createSkins = ({ gltf, buffers }) => {\r\n    const skins = new Map();\r\n    if (!gltf.skins || !gltf.skins.length) {\r\n        return skins;\r\n    }\r\n    //From the spec, this is guaranteed to be from a vec4 accessor and a series of mat4 data\r\n    const splitMatrix = (numbers) => {\r\n        const ret = new Array();\r\n        for (let idx = 0; idx < numbers.length;) {\r\n            ret.push(numbers.slice(idx, idx + 16));\r\n            idx += 16;\r\n        }\r\n        return ret;\r\n    };\r\n    gltf.skins.forEach((originalSkin, skinId) => {\r\n        const inverseBindMatrices = originalSkin.inverseBindMatrices\r\n            ? splitMatrix(GLTF_PARSE_getAccessorTypedData({\r\n                gltf,\r\n                buffers,\r\n                info: GLTF_PARSE_getAccessorDataInfo({ gltf, accessorId: originalSkin.inverseBindMatrices })\r\n            }))\r\n            : originalSkin.joints.map(createMat4);\r\n        if (inverseBindMatrices.length !== originalSkin.joints.length) {\r\n            throw new Error(\"inverse bind matrices mismatch!\");\r\n        }\r\n        let skeletonRootId;\r\n        const skinData = {\r\n            joints: originalSkin.joints.map((originalNodeId, idx) => {\r\n                const joint = {\r\n                    originalNodeId,\r\n                    inverseBindMatrix: inverseBindMatrices[idx]\r\n                };\r\n                if (originalSkin.skeleton !== undefined && originalSkin.skeleton === originalNodeId) {\r\n                    skeletonRootId = originalNodeId;\r\n                }\r\n                return joint;\r\n            })\r\n        };\r\n        if (skeletonRootId !== undefined) {\r\n            skinData.skeletonRootId = skeletonRootId;\r\n        }\r\n        skins.set(skinId, skinData);\r\n    });\r\n    return skins;\r\n};\n\n/*\r\n * All of the nodes are parsed in place as though they could be any root\r\n * Technically this is extra needless computation, but it makes the code clearer\r\n * Also, doing it this way allows for dynamic scene mixtures :D\r\n *\r\n * Since it's only on init, the cpu processing shouldn't matter much\r\n * Nodes are by definition lightweight, it's no biggie in terms of memory either\r\n * However, they _should_ be culled via GltfBridge.getOriginalScene(), otherwise dups will show\r\n */\r\nconst GLTF_PARSE_getNodes = ({ gltf, primitives, data, assets }) => {\r\n    const skinLookup = GLTF_PARSE_createSkins({ gltf, buffers: assets.buffers });\r\n    const getGltfNode = (parentModelMatrix) => (originalNodeId) => (node) => {\r\n        const baseNode = {\r\n            originalNodeId,\r\n            kind: node.mesh !== undefined && primitives.has(node.mesh) && primitives.get(node.mesh).length\r\n                ? GltfNodeKind.MESH\r\n                : node.camera !== undefined\r\n                    ? NodeKind.CAMERA\r\n                    : undefined,\r\n        };\r\n        const trs = node.matrix ? getTrsFromMatrix(Float64Array.from(node.matrix)) : getTrs(node);\r\n        const localMatrix = node.matrix ? new Float64Array(node.matrix) : getMatrixFromTrs(trs);\r\n        const modelMatrix = getModelMatrix(parentModelMatrix)(localMatrix);\r\n        baseNode.transform = { trs, localMatrix, modelMatrix };\r\n        const hasNormals = baseNode.kind !== GltfNodeKind.MESH\r\n            ? false\r\n            : gltf.meshes[node.mesh].primitives.some(p => GLTF_PARSE_primitiveHasAttribute(\"NORMAL\")(p));\r\n        if (hasNormals) {\r\n            baseNode.transform.normalMatrix = getNormalMatrix(modelMatrix);\r\n        }\r\n        if (baseNode.kind === GltfNodeKind.MESH) {\r\n            baseNode.primitives = primitives.get(node.mesh);\r\n            if (node.skin !== undefined) {\r\n                const skinData = skinLookup.get(node.skin);\r\n                baseNode.skin = {\r\n                    skinId: node.skin,\r\n                    joints: skinData.joints.slice()\r\n                };\r\n                if (skinData.skeletonRootId !== undefined) {\r\n                    baseNode.skin.skeletonRootId = skinData.skeletonRootId;\r\n                }\r\n            }\r\n            const morphWeights = node.weights\r\n                ? Float64Array.from(node.weights)\r\n                : gltf.meshes[node.mesh].weights\r\n                    ? Float64Array.from(gltf.meshes[node.mesh].weights)\r\n                    : undefined;\r\n            if (morphWeights) {\r\n                baseNode.morphWeights = morphWeights;\r\n            }\r\n        }\r\n        else if (baseNode.kind === NodeKind.CAMERA) {\r\n            baseNode.camera = {\r\n                //the actual camera settings depend on view and potentially canvas\r\n                //so this is just partial\r\n                settings: GLTF_PARSE_getCameraSettings(gltf.cameras[node.camera])\r\n            };\r\n            baseNode.cameraIndex = node.camera;\r\n        }\r\n        const finalNode = GltfExtensions\r\n            .map(ext => ext.createNode)\r\n            .reduce((acc, val) => (acc = val(gltf)(node)(acc), acc), baseNode);\r\n        return !node.children\r\n            ? finalNode\r\n            : Object.assign({}, finalNode, { children: node.children.map(idx => getGltfNode(modelMatrix)(idx)(gltf.nodes[idx])) });\r\n    };\r\n    return GLTF_PARSE_addAnimationIds({\r\n        gltf,\r\n        nodes: gltf.nodes\r\n            .map((node, idx) => getGltfNode(null)(idx)(node))\r\n    });\r\n};\r\nfunction getTrs(node) {\r\n    const trs = {\r\n        translation: Float64Array.from([0.0, 0.0, 0.0]),\r\n        rotation: Float64Array.from([0.0, 0.0, 0.0, 1.0]),\r\n        scale: Float64Array.from([1.0, 1.0, 1.0])\r\n    };\r\n    Object.keys(trs).forEach(prop => {\r\n        const nodeTrsProp = node[prop];\r\n        if (nodeTrsProp) {\r\n            trs[prop] = nodeTrsProp;\r\n        }\r\n    });\r\n    return trs;\r\n}\n\nvar UNIFORM_TYPE;\r\n(function (UNIFORM_TYPE) {\r\n    UNIFORM_TYPE[UNIFORM_TYPE[\"FLOAT\"] = 0] = \"FLOAT\";\r\n    UNIFORM_TYPE[UNIFORM_TYPE[\"INT\"] = 1] = \"INT\";\r\n})(UNIFORM_TYPE || (UNIFORM_TYPE = {}));\r\nconst createUniforms = ({ renderer, activateShader }) => {\r\n    const { gl } = renderer;\r\n    const cache = {\r\n        uniformLocations: new Map(),\r\n        uniformValues: new Map(),\r\n        uniformSingleValues: new Map(),\r\n        uniformMatrixTranspose: new Map()\r\n    };\r\n    const getLocation = (uName) => {\r\n        const { program } = activateShader();\r\n        if (!cache.uniformLocations.has(uName)) {\r\n            cache.uniformLocations.set(uName, gl.getUniformLocation(program, uName));\r\n        }\r\n        return cache.uniformLocations.get(uName);\r\n    };\r\n    const validLocation = (loc) => (loc !== null && loc !== undefined && loc != -1);\r\n    const hasLocation = (uName) => validLocation(getLocation(uName));\r\n    const _isEqual = (uName) => (values) => {\r\n        if (!cache.uniformValues.has(uName)) {\r\n            return false;\r\n        }\r\n        const xs = cache.uniformValues.get(uName);\r\n        if (xs.length !== values.length) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < xs.length; i++) {\r\n            if (xs[i] !== values[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    const _assignCacheValues = (uType) => (uName) => (values) => {\r\n        //Must make a copy each time for two reasons:\r\n        //1. Otherwise it could be referencing the same object in subsequent calls\r\n        //2. Normalizing to 32-bit values\r\n        //However - the cache is local only, so it's only allocating the first time (subsequent is just writing to mutable space)\r\n        if (!cache.uniformValues.has(uName)) {\r\n            switch (uType) {\r\n                case UNIFORM_TYPE.FLOAT:\r\n                    cache.uniformValues.set(uName, new Float32Array(values.length));\r\n                    break;\r\n                case UNIFORM_TYPE.INT:\r\n                    cache.uniformValues.set(uName, new Int32Array(values.length));\r\n                    break;\r\n            }\r\n            return;\r\n        }\r\n        const target = cache.uniformValues.get(uName);\r\n        for (let idx = 0; idx < values.length; idx++) {\r\n            target[idx] = values[idx];\r\n        }\r\n    };\r\n    const _setSingleValue = (setterFn) => (uName) => (value) => {\r\n        if (!cache.uniformSingleValues.has(uName) || cache.uniformSingleValues.get(uName) !== value) {\r\n            cache.uniformSingleValues.set(uName, value);\r\n            const loc = getLocation(uName);\r\n            if (validLocation(loc)) {\r\n                setterFn(loc)(value); //for single values it doesn't get converted\r\n            }\r\n        }\r\n    };\r\n    const _setValues = (uType) => (setterFn) => (uName) => (values) => {\r\n        if (!_isEqual(uName)(values)) {\r\n            _assignCacheValues(uType)(uName)(values);\r\n            const loc = getLocation(uName);\r\n            if (validLocation(loc)) {\r\n                setterFn(loc)(cache.uniformValues.get(uName)); //for arrays it needs to be grabbed from cache which set the appropriate type\r\n            }\r\n        }\r\n    };\r\n    const _setMatrixValues = (uType) => (setterFn) => (uName) => (transpose) => (values) => {\r\n        if (!cache.uniformMatrixTranspose.has(uName) || cache.uniformMatrixTranspose.get(uName) !== transpose || !_isEqual(uName)(values)) {\r\n            _assignCacheValues(uType)(uName)(values);\r\n            cache.uniformMatrixTranspose.set(uName, transpose);\r\n            const loc = getLocation(uName);\r\n            if (validLocation(loc)) {\r\n                setterFn(loc)(transpose)(cache.uniformValues.get(uName));\r\n            }\r\n        }\r\n    };\r\n    const setters = {\r\n        uniform1f: _setSingleValue(loc => v => gl.uniform1f(loc, v)),\r\n        uniform1fv: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform1fv(loc, v)),\r\n        uniform1i: _setSingleValue(loc => v => gl.uniform1i(loc, v)),\r\n        uniform1iv: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform1iv(loc, v)),\r\n        uniform2f: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform2f(loc, v[0], v[1])),\r\n        uniform2fv: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform2fv(loc, v)),\r\n        uniform2i: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform2i(loc, v[0], v[1])),\r\n        uniform2iv: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform2iv(loc, v)),\r\n        uniform3f: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform3f(loc, v[0], v[1], v[2])),\r\n        uniform3fv: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform3fv(loc, v)),\r\n        uniform3i: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform3i(loc, v[0], v[1], v[2])),\r\n        uniform3iv: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform3iv(loc, v)),\r\n        uniform4f: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform4f(loc, v[0], v[1], v[2], v[3])),\r\n        uniform4fv: _setValues(UNIFORM_TYPE.FLOAT)(loc => v => gl.uniform4fv(loc, v)),\r\n        uniform4i: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform4i(loc, v[0], v[1], v[2], v[3])),\r\n        uniform4iv: _setValues(UNIFORM_TYPE.INT)(loc => v => gl.uniform4iv(loc, v)),\r\n        uniformMatrix2fv: _setMatrixValues(UNIFORM_TYPE.FLOAT)(loc => t => v => gl.uniformMatrix2fv(loc, t, v)),\r\n        uniformMatrix3fv: _setMatrixValues(UNIFORM_TYPE.FLOAT)(loc => t => v => gl.uniformMatrix3fv(loc, t, v)),\r\n        uniformMatrix4fv: _setMatrixValues(UNIFORM_TYPE.FLOAT)(loc => t => v => gl.uniformMatrix4fv(loc, t, v)),\r\n    };\r\n    return {\r\n        cache,\r\n        setters,\r\n        getLocation,\r\n        validLocation,\r\n        hasLocation\r\n    };\r\n};\n\n//the \"any\" here is actually WebGlShader but defining it as such would cause a circular reference\r\nlet current;\r\nconst shaders = new Map();\r\nconst _compileShader = ({ renderer, source }) => {\r\n    let vShader;\r\n    let fShader;\r\n    const { gl } = renderer;\r\n    const program = gl.createProgram();\r\n    const dispose = () => {\r\n        if (vShader !== undefined && (vShader instanceof WebGLShader)) {\r\n            gl.deleteShader(vShader);\r\n        }\r\n        if (fShader !== undefined && (fShader instanceof WebGLShader)) {\r\n            gl.deleteShader(fShader);\r\n        }\r\n        gl.deleteProgram(program);\r\n    };\r\n    const getShaderName = (shaderType) => shaderType === gl.VERTEX_SHADER ? \"vertex\" : \"fragment\";\r\n    const loadShader = (shaderType) => (sourceText) => {\r\n        const shader = gl.createShader(shaderType);\r\n        gl.shaderSource(shader, sourceText);\r\n        gl.compileShader(shader);\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            const errorMessage = `${getShaderName(shaderType)} error: ` + gl.getShaderInfoLog(shader);\r\n            throw new Error(errorMessage); //this _should_ be an exception\r\n        }\r\n        gl.attachShader(program, shader);\r\n        return shader;\r\n    };\r\n    vShader = loadShader(gl.VERTEX_SHADER)(source.vertex);\r\n    if (vShader instanceof Error) {\r\n        dispose();\r\n        return vShader;\r\n    }\r\n    fShader = loadShader(gl.FRAGMENT_SHADER)(source.fragment);\r\n    if (fShader instanceof Error) {\r\n        dispose();\r\n        return fShader;\r\n    }\r\n    let location = 0;\r\n    renderer.attributes.globalLocations.forEach(aName => {\r\n        gl.bindAttribLocation(program, location, aName);\r\n        location++;\r\n    });\r\n    gl.linkProgram(program);\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        dispose();\r\n        return new Error('Unable to initialize the shader program: ' + gl.getProgramInfoLog(program));\r\n    }\r\n    return program;\r\n};\r\nconst _activateShader = (shaderId) => {\r\n    if (!current || current.shaderId !== shaderId) {\r\n        current = shaders.get(shaderId);\r\n        current.gl.useProgram(current.program);\r\n    }\r\n    return current;\r\n};\r\nconst activateShader = (shaderId) => _activateShader(shaderId);\r\nconst createShader = ({ renderer, shaderId, source }) => {\r\n    const program = _compileShader({ source, renderer });\r\n    const shader = {\r\n        gl: renderer.gl,\r\n        shaderId,\r\n        program,\r\n        uniforms: createUniforms({ renderer, activateShader: () => _activateShader(shaderId) }),\r\n    };\r\n    shaders.set(shaderId, shader);\r\n    return shader;\r\n};\n\nconst createRendererThunk = (thunk) => () => {\r\n    const { renderer, data, node, primitive, lightList, scene, shader, skinMatrices } = thunk;\r\n    const { camera } = scene;\r\n    const { gl } = renderer;\r\n    const gltf = data.original;\r\n    const { material, drawMode } = primitive;\r\n    const { uniforms, shaderId } = shader;\r\n    const { uniform1i, uniform1f, uniform1fv, uniform1iv, uniform2fv, uniform3fv, uniform4fv, uniformMatrix4fv } = uniforms.setters;\r\n    const vaoId = data.attributes.vaoIdLookup.get(primitive.vaoId);\r\n    let samplerIndex = 0;\r\n    activateShader(shaderId);\r\n    if (material && material.doubleSided) {\r\n        renderer.glToggle(WebGlConstants.CULL_FACE)(false);\r\n    }\r\n    else {\r\n        renderer.glToggle(WebGlConstants.CULL_FACE)(true);\r\n    }\r\n    /*\r\n        Set the IBL uniforms\r\n    */\r\n    if (scene.shaderConfig.ibl) {\r\n        renderer.switchTexture(samplerIndex)(data.extensions.ibl.brdf);\r\n        uniform1i(\"u_brdfLUT\")(samplerIndex++);\r\n        if (data.extensions.ibl.cubeMaps.diffuse) {\r\n            renderer.switchCubeTexture(samplerIndex)(data.extensions.ibl.cubeMaps.diffuse);\r\n            uniform1i(\"u_DiffuseEnvSampler\")(samplerIndex++);\r\n        }\r\n        if (data.extensions.ibl.cubeMaps.specular) {\r\n            renderer.switchCubeTexture(samplerIndex)(data.extensions.ibl.cubeMaps.specular);\r\n            uniform1i(\"u_SpecularEnvSampler\")(samplerIndex++);\r\n        }\r\n        //this is actually just used in fragment shader (e.g. not for transforms), but it's required\r\n        uniform3fv(\"u_Camera\")(camera.position);\r\n    }\r\n    /*\r\n     * Set the node-based lighting uniforms\r\n    */\r\n    if (lightList) {\r\n        if (lightList.directional) {\r\n            //console.log(lightList.directional.direction);\r\n            uniform3fv(\"u_Light_Directional_Direction\")(lightList.directional.direction);\r\n            uniform3fv(\"u_Light_Directional_Color\")(lightList.directional.color);\r\n            uniform1fv(\"u_Light_Directional_Intensity\")(lightList.directional.intensity);\r\n        }\r\n        if (lightList.point) {\r\n            uniform3fv(\"u_Light_Point_Position\")(lightList.point.position);\r\n            uniform3fv(\"u_Light_Point_Color\")(lightList.point.color);\r\n            uniform1fv(\"u_Light_Point_Intensity\")(lightList.point.intensity);\r\n        }\r\n        if (lightList.spot) {\r\n            uniform3fv(\"u_Light_Spot_Position\")(lightList.spot.position);\r\n            uniform3fv(\"u_Light_Spot_Direction\")(lightList.spot.direction);\r\n            uniform1fv(\"u_Light_Spot_AngleScale\")(lightList.spot.angleScale);\r\n            uniform1fv(\"u_Light_Spot_AngleOffset\")(lightList.spot.angleOffset);\r\n            uniform3fv(\"u_Light_Spot_Color\")(lightList.spot.color);\r\n            uniform1fv(\"u_Light_Spot_Intensity\")(lightList.spot.intensity);\r\n        }\r\n    }\r\n    /*\r\n      Set the transform uniforms\r\n    */\r\n    if (skinMatrices) {\r\n        uniformMatrix4fv(\"u_Skin_Matrices\")(false)(skinMatrices);\r\n    }\r\n    uniformMatrix4fv(\"u_MVPMatrix\")(false)(node.transform.modelViewProjectionMatrix);\r\n    uniformMatrix4fv(\"u_ModelMatrix\")(false)(node.transform.modelMatrix);\r\n    if (node.transform.normalMatrix) {\r\n        uniformMatrix4fv(\"u_NormalMatrix\")(false)(node.transform.normalMatrix);\r\n    }\r\n    /*\r\n      Set the morph targets\r\n    */\r\n    //console.log(uniforms.getLocation(\"u_MorphWeights\"));\r\n    if (node.morphWeights) {\r\n        uniform1fv(\"u_MorphWeights\")(node.morphWeights);\r\n    }\r\n    /*\r\n      Set the material uniforms\r\n    */\r\n    const assignMeshTexture = (uName) => (textureInfo) => {\r\n        if (typeof textureInfo === \"number\") {\r\n            renderer.switchTexture(samplerIndex)(data.textures.get(textureInfo));\r\n        }\r\n        else {\r\n            renderer.switchTexture(samplerIndex)(textureInfo);\r\n        }\r\n        uniform1i(uName)(samplerIndex++);\r\n    };\r\n    if (material) {\r\n        uniform2fv(\"u_MetallicRoughnessValues\")(material.metallicRoughnessValues);\r\n        uniform4fv(\"u_BaseColorFactor\")(material.baseColorFactor);\r\n        if (material.baseColorSamplerIndex !== undefined) {\r\n            assignMeshTexture(\"u_BaseColorSampler\")(material.baseColorSamplerIndex);\r\n        }\r\n        if (material.metallicRoughnessSamplerIndex !== undefined) {\r\n            assignMeshTexture(\"u_MetallicRoughnessSampler\")(material.metallicRoughnessSamplerIndex);\r\n        }\r\n        if (material.normal !== undefined) {\r\n            uniform1f(\"u_NormalScale\")(material.normal.scale);\r\n            assignMeshTexture(\"u_NormalSampler\")(material.normal.samplerIndex);\r\n        }\r\n        if (material.occlusion !== undefined) {\r\n            uniform1f(\"u_OcclusionStrength\")(material.occlusion.strength);\r\n            assignMeshTexture(\"u_OcclusionSampler\")(material.occlusion.samplerIndex);\r\n        }\r\n        if (material.emissiveSamplerIndex !== undefined) {\r\n            assignMeshTexture(\"u_EmissiveSampler\")(material.emissiveSamplerIndex);\r\n        }\r\n        if (material.emissiveFactor !== undefined) {\r\n            uniform3fv(\"u_EmissiveFactor\")(material.emissiveFactor);\r\n        }\r\n        if (material.alphaMode === GltfMaterialAlphaMode.MASK) {\r\n            const alphaCutoff = (material.alphaMode === GltfMaterialAlphaMode.MASK)\r\n                ? material.alphaCutoff\r\n                : 1.0;\r\n            uniform1f(\"u_AlphaCutoff\")(alphaCutoff);\r\n        }\r\n    }\r\n    /*\r\n        Draw\r\n    */\r\n    renderer.vertexArrays.activate(vaoId);\r\n    if (primitive.drawKind === GltfPrimitiveDrawKind.ELEMENTS) {\r\n        const elementsAccessor = gltf.accessors[primitive.elementsId];\r\n        //console.log(`gl.drawElements(${drawMode}, ${elementsAccessor.count}, ${elementsAccessor.componentType}, ${elementsAccessor.byteOffset || 0});`)\r\n        gl.drawElements(drawMode, elementsAccessor.count, elementsAccessor.componentType, elementsAccessor.byteOffset || 0);\r\n    }\r\n    else {\r\n        gl.drawArrays(drawMode, 0, primitive.arrayCount);\r\n    }\r\n};\n\n//TODO - speed has been optimized but need to test thoroughly for correctness (was roughly tested)\r\n//https://stackoverflow.com/questions/17398578/hash-algorithm-for-variable-size-boolean-array?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa\r\nconst baseArray = new Uint8Array(18);\r\nconst morphsArray = new Uint8Array(30);\r\nconst skinArray = new Uint8Array(30);\r\nconst lightsArray = new Uint8Array(30);\r\nconst hashBooleans32 = (xs) => {\r\n    let h = (1 << xs.length);\r\n    for (let i = 0; i < xs.length; i++) {\r\n        h = h | ((xs[i]) << (xs.length - i - 1));\r\n    }\r\n    return h;\r\n};\r\nconst getShaderHash = (sceneConfig) => (primitiveConfig) => {\r\n    baseArray.fill(0);\r\n    morphsArray.fill(0);\r\n    skinArray.fill(0);\r\n    lightsArray.fill(0);\r\n    if (primitiveConfig.hasNormalAttributes) {\r\n        baseArray[0] = 1;\r\n    }\r\n    if (primitiveConfig.hasTangentAttributes) {\r\n        baseArray[1] = 1;\r\n    }\r\n    if (primitiveConfig.hasUvAttributes) {\r\n        baseArray[2] = 1;\r\n    }\r\n    if (primitiveConfig.hasColorAttributes) {\r\n        baseArray[3] = 1;\r\n    }\r\n    if (primitiveConfig.hasBaseColorMap) {\r\n        baseArray[4] = 1;\r\n    }\r\n    if (primitiveConfig.hasNormalMap) {\r\n        baseArray[5] = 1;\r\n    }\r\n    if (primitiveConfig.hasEmissiveMap) {\r\n        baseArray[6] = 1;\r\n    }\r\n    if (primitiveConfig.hasMetalRoughnessMap) {\r\n        baseArray[7] = 1;\r\n    }\r\n    if (primitiveConfig.hasOcclusionMap) {\r\n        baseArray[8] = 1;\r\n    }\r\n    if (primitiveConfig.manualSRGB) {\r\n        baseArray[9] = 1;\r\n    }\r\n    if (primitiveConfig.fastSRGB) {\r\n        baseArray[10] = 1;\r\n    }\r\n    baseArray[11] = primitiveConfig.alphaMode === GltfMaterialAlphaMode.BLEND ? 0 : 1;\r\n    baseArray[12] = primitiveConfig.alphaMode === GltfMaterialAlphaMode.MASK ? 0 : 1;\r\n    baseArray[13] = primitiveConfig.alphaMode === GltfMaterialAlphaMode.OPAQUE ? 0 : 1;\r\n    if (sceneConfig.ibl) {\r\n        baseArray[14] = 1;\r\n        if (sceneConfig.ibl.useLod) {\r\n            baseArray[15] = 1;\r\n        }\r\n    }\r\n    if (sceneConfig.unlit) {\r\n        baseArray[16] = 1;\r\n    }\r\n    if (sceneConfig.lights) {\r\n        baseArray[17] = 1;\r\n        //Light instances get their own array - 10 * 3 = 30 possibilities\r\n        for (let i = 0; i < sceneConfig.lights.nDirectionalLights; i++) {\r\n            lightsArray[i] = 1;\r\n        }\r\n        for (let i = 0; i < sceneConfig.lights.nPointLights; i++) {\r\n            lightsArray[10 + i] = 1;\r\n        }\r\n        for (let i = 0; i < sceneConfig.lights.nSpotLights; i++) {\r\n            lightsArray[20 + i] = 1;\r\n        }\r\n    }\r\n    for (let i = 0; i < primitiveConfig.nPositionMorphs; i++) {\r\n    }\r\n    for (let i = 0; i < primitiveConfig.nNormalMorphs; i++) {\r\n    }\r\n    for (let i = 0; i < primitiveConfig.nTangentMorphs; i++) {\r\n    }\r\n    for (let i = 0; i < primitiveConfig.nMorphWeights; i++) {\r\n    }\r\n    for (let i = 0; i < primitiveConfig.nSkinJoints; i++) {\r\n        skinArray[i] = 1;\r\n    }\r\n    const shaderKey = hashBooleans32(baseArray).toString();\r\n    \"-\" + hashBooleans32(morphsArray).toString()\r\n        + \"-\" + hashBooleans32(skinArray).toString()\r\n        + \"-\" + hashBooleans32(lightsArray).toString();\r\n    return shaderKey;\r\n};\r\n/*\r\nconst _lookup = new Map();\r\nconst FINAL = Symbol();\r\n\nexport const getShaderSymbol = (config:GltfShaderConfig):Symbol => {\r\n\n    let lookup = _lookup;\r\n\n    const setLookup = key => {\r\n        if(!lookup.has(key)) {\r\n            lookup.set(key, new Map());\r\n        }\r\n\n        lookup = lookup.get(key);\r\n    }\r\n    \n\n    setLookup(config.hasNormalAttributes);\r\n    setLookup(config.hasTangentAttributes);\r\n    setLookup(config.hasUvAttributes);\r\n    setLookup(config.hasColorAttributes);\r\n    setLookup(config.hasBaseColorMap);\r\n    setLookup(config.hasNormalMap);\r\n    setLookup(config.hasEmissiveMap);\r\n    setLookup(config.hasMetalRoughnessMap);\r\n    setLookup(config.hasOcclusionMap);\r\n    setLookup(config.manualSRGB);\r\n    setLookup(config.fastSRGB);\r\n    if(config.extensions.ibl) {\r\n        setLookup(true);\r\n        setLookup(config.extensions.ibl.useLod);\r\n    } else {\r\n        setLookup(false);\r\n    }\r\n\n    setLookup(config.extensions.unlit ? true : false);\r\n\n    if(config.extensions.lights) {\r\n        setLookup(true);\r\n\n        setLookup(config.extensions.lights.hasAmbient);\r\n        setLookup(config.extensions.lights.nDirectionalLights);\r\n        setLookup(config.extensions.lights.nPointLights);\r\n        setLookup(config.extensions.lights.nSpotLights);\r\n    } else {\r\n        setLookup(false);\r\n    }\r\n\n    setLookup(config.nPositionMorphs);\r\n    setLookup(config.nNormalMorphs);\r\n    setLookup(config.nTangentMorphs);\r\n    setLookup(config.nMorphWeights);\r\n    setLookup(config.nSkinJoints);\r\n   \n    if(!lookup.has(FINAL)) {\r\n        lookup.set(FINAL, Symbol());\r\n    }\r\n\n    return lookup.get(FINAL);\r\n\n}\r\n*/\n\nvar vertexShaderSource = \"precision highp float;\\nprecision highp int;\\n\\n%MORPH_VARS%\\n\\n#ifdef HAS_SKIN\\nattribute vec4 a_Skin_Joint;\\nattribute vec4 a_Skin_Weight;\\nuniform mat4 u_Skin_Matrices[%SKIN_JOINT_COUNT%];\\n#endif\\n\\nattribute vec4 a_Position;\\n#ifdef HAS_NORMALS\\nattribute vec4 a_Normal;\\n#endif\\n#ifdef HAS_TANGENTS\\nattribute vec4 a_Tangent;\\n#endif\\n#ifdef HAS_UV\\nattribute vec2 a_UV;\\n#endif\\n#ifdef HAS_COLOR\\nattribute vec4 a_Color;\\nvarying vec4 v_Color;\\n#endif\\n\\nuniform mat4 u_MVPMatrix;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_NormalMatrix;\\n\\nvarying vec3 v_Position;\\nvarying vec2 v_UV;\\n\\n#ifdef HAS_NORMALS\\n#ifdef HAS_TANGENTS\\nvarying mat3 v_TBN;\\n#else\\nvarying vec3 v_Normal;\\n#endif\\n#endif\\n\\n\\nvoid main()\\n{\\n\\n  \\n\\n  vec4 m_Position = a_Position;\\n  #ifdef HAS_NORMALS\\n    vec4 m_Normal = a_Normal;\\n  #endif\\n  #ifdef HAS_TANGENTS\\n    vec4 m_Tangent = a_Tangent;\\n  #endif\\n\\n#ifdef HAS_SKIN\\n    mat4 skinMat = a_Skin_Weight[0] * u_Skin_Matrices[int(a_Skin_Joint[0])]\\n        +   a_Skin_Weight[1] * u_Skin_Matrices[int(a_Skin_Joint[1])]\\n        +   a_Skin_Weight[2] * u_Skin_Matrices[int(a_Skin_Joint[2])]\\n        +   a_Skin_Weight[3] * u_Skin_Matrices[int(a_Skin_Joint[3])];\\n\\n    m_Position = skinMat * m_Position;\\n#endif\\n    %MORPH_FUNCS%\\n\\n\\n  \\n  vec4 pos = u_ModelMatrix * m_Position;\\n  v_Position = vec3(pos.xyz) / pos.w;\\n\\n  #ifdef HAS_NORMALS\\n  #ifdef HAS_TANGENTS\\n  vec3 normalW = normalize(vec3(u_NormalMatrix * vec4(m_Normal.xyz, 0.0)));\\n  vec3 tangentW = normalize(vec3(u_ModelMatrix * vec4(m_Tangent.xyz, 0.0)));\\n  vec3 bitangentW = cross(normalW, tangentW) * m_Tangent.w;\\n  v_TBN = mat3(tangentW, bitangentW, normalW);\\n  #else // HAS_TANGENTS != 1\\n  v_Normal = normalize(vec3(u_ModelMatrix * vec4(m_Normal.xyz, 0.0)));\\n  #endif\\n  #endif\\n\\n  #ifdef HAS_UV\\n  v_UV = a_UV;\\n  #else\\n  v_UV = vec2(0.,0.);\\n  #endif\\n\\n    #ifdef HAS_COLOR\\n    v_Color = a_Color;\\n    #endif\\n\\n\\n  gl_Position = u_MVPMatrix * m_Position; // needs w for proper perspective correction\\n}\\n\\n\";\n\nvar fragmentShaderSource = \"//\\n// This fragment shader defines a reference implementation for Physically Based Shading of\\n// a microfacet surface material defined by a glTF model.\\n//\\n// References:\\n// [1] Real Shading in Unreal Engine 4\\n//     http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\\n// [2] Physically Based Shading at Disney\\n//     http://blog.selfshadow.com/publications/s2012-shading-course/burley/s2012_pbs_disney_brdf_notes_v3.pdf\\n// [3] README.md - Environment Maps\\n//     https://github.com/KhronosGroup/glTF-WebGL-PBR/#environment-maps\\n// [4] \\\"An Inexpensive BRDF Model for Physically based Rendering\\\" by Christophe Schlick\\n//     https://www.cs.virginia.edu/~jdl/bib/appearance/analytic%20models/schlick94b.pdf\\n\\n///////////////////////////////\\n// Quality settings \\n///////////////////////////////\\n\\nprecision highp float;\\nprecision highp int;\\n\\n///////////////////////////////\\n// Extensions \\n///////////////////////////////\\n\\n#extension GL_EXT_shader_texture_lod: enable\\n#extension GL_OES_standard_derivatives : enable\\n\\n///////////////////////////////\\n// Structs \\n///////////////////////////////\\n\\nstruct Fragment \\n{\\n    vec3 normal; // fragment normal\\n    vec3 vectorToCamera; //normalized vector from surface point to camera\\n    vec3 reflection; //reflection vector\\n    float NdotV; // cos angle between normal and view direction\\n};\\n\\nstruct Pbr \\n{\\n    vec4 baseColor;\\n    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)\\n    float metalness;              // metallic value at the surface\\n    vec3 reflectance0;            // full reflectance color (normal incidence angle)\\n    vec3 reflectance90;           // reflectance color at grazing angle\\n    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])\\n    vec3 diffuseColor;            // color contribution from diffuse lighting\\n    vec3 specularColor;           // color contribution from specular lighting\\n};\\n\\nstruct Light\\n{\\n    float NdotL;                  // cos angle between normal and light direction\\n    float NdotH;                  // cos angle between normal and half vector\\n    float LdotH;                  // cos angle between light direction and half vector\\n    float VdotH;                  // cos angle between view direction and half vector\\n    vec3 color;                   // attenuated color\\n};\\n\\n///////////////////////////////\\n// Constants \\n///////////////////////////////\\n\\nconst float M_PI = 3.141592653589793;\\nconst float c_MinRoughness = 0.04;\\n\\n\\n///////////////////////////////\\n// Uniforms and Attributes \\n///////////////////////////////\\n\\n#ifdef USE_PUNCTUAL_LIGHTS\\n%PUNCTUAL_LIGHTS_VARS%\\n#endif\\n\\n#ifdef USE_IBL\\nuniform samplerCube u_DiffuseEnvSampler;\\nuniform samplerCube u_SpecularEnvSampler;\\nuniform sampler2D u_brdfLUT;\\n#endif\\n\\n#ifdef HAS_BASECOLORMAP\\nuniform sampler2D u_BaseColorSampler;\\nuniform float u_AlphaCutoff; \\n#endif\\n#ifdef HAS_NORMALMAP\\nuniform sampler2D u_NormalSampler;\\nuniform float u_NormalScale;\\n#endif\\n#ifdef HAS_EMISSIVEMAP\\nuniform sampler2D u_EmissiveSampler;\\nuniform vec3 u_EmissiveFactor;\\n#endif\\n#ifdef HAS_METALROUGHNESSMAP\\nuniform sampler2D u_MetallicRoughnessSampler;\\n#endif\\n#ifdef HAS_OCCLUSIONMAP\\nuniform sampler2D u_OcclusionSampler;\\nuniform float u_OcclusionStrength;\\n#endif\\n\\n#ifdef HAS_COLOR\\nvarying vec4 v_Color;\\n#endif\\n\\nuniform vec2 u_MetallicRoughnessValues;\\nuniform vec4 u_BaseColorFactor;\\n\\nuniform vec3 u_Camera;\\n\\n\\n///////////////////////////////\\n// Varyings \\n///////////////////////////////\\n\\nvarying vec3 v_Position;\\n\\nvarying vec2 v_UV;\\n\\n#ifdef HAS_NORMALS\\n#ifdef HAS_TANGENTS\\nvarying mat3 v_TBN;\\n#else\\nvarying vec3 v_Normal;\\n#endif\\n#endif\\n\\n///////////////////////////////\\n// Pure functions\\n///////////////////////////////\\n\\n// Convert color space\\nvec4 SRGBtoLINEAR(vec4 srgbIn)\\n{\\n    #ifdef MANUAL_SRGB\\n        #ifdef SRGB_FAST_APPROXIMATION\\n            vec3 linOut = pow(srgbIn.xyz,vec3(2.2));\\n        #else //SRGB_FAST_APPROXIMATION\\n            vec3 bLess = step(vec3(0.04045),srgbIn.xyz);\\n            vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );\\n        #endif //SRGB_FAST_APPROXIMATION\\n        \\n        return vec4(linOut,srgbIn.w);\\n    #else //MANUAL_SRGB\\n        return srgbIn;\\n    #endif //MANUAL_SRGB\\n}\\n\\n\\n// Basic Lambertian diffuse\\n// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog\\n// See also [1], Equation 1\\nvec3 diffuse(Pbr pbr, Fragment fragment, Light light)\\n{\\n    return pbr.diffuseColor / M_PI;\\n}\\n\\n// The following equation models the Fresnel reflectance term of the spec equation (aka F())\\n// Implementation of fresnel from [4], Equation 15\\nvec3 specularReflection(Pbr pbr, Fragment fragment, Light light)\\n{\\n    return pbr.reflectance0 + (pbr.reflectance90 - pbr.reflectance0) * pow(clamp(1.0 - light.VdotH, 0.0, 1.0), 5.0);\\n}\\n\\n// This calculates the specular geometric attenuation (aka G()),\\n// where rougher material will reflect less light back to the viewer.\\n// This implementation is based on [1] Equation 4, and we adopt their modifications to\\n// alphaRoughness as input as originally proposed in [2].\\nfloat geometricOcclusion(Pbr pbr, Fragment fragment, Light light)\\n{\\n    float NdotL = light.NdotL;\\n    float NdotV = fragment.NdotV;\\n    float r = pbr.alphaRoughness;\\n\\n    float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));\\n    float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));\\n    return attenuationL * attenuationV;\\n}\\n\\n// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())\\n// Implementation from \\\"Average Irregularity Representation of a Roughened Surface for Ray Reflection\\\" by T. S. Trowbridge, and K. P. Reitz\\n// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.\\nfloat microfacetDistribution(Pbr pbr, Fragment fragment, Light light)\\n{\\n    float roughnessSq = pbr.alphaRoughness * pbr.alphaRoughness;\\n    float f = (light.NdotH * roughnessSq - light.NdotH) * light.NdotH + 1.0;\\n    return roughnessSq / (M_PI * f * f);\\n}\\n\\n///////////////////////////////\\n// Data functions\\n///////////////////////////////\\n\\n\\n// Get the PBR info from uniforms and attributes\\nPbr getPbr() {\\n    // Metallic and Roughness material properties are packed together\\n    // In glTF, these factors can be specified by fixed scalar values\\n    // or from a metallic-roughness map\\n    float perceptualRoughness = u_MetallicRoughnessValues.y;\\n    float metallic = u_MetallicRoughnessValues.x;\\n    #ifdef HAS_METALROUGHNESSMAP\\n    // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.\\n    // This layout intentionally reserves the 'r' channel for (optional) occlusion map data\\n    vec4 mrSample = texture2D(u_MetallicRoughnessSampler, v_UV);\\n    perceptualRoughness = mrSample.g * perceptualRoughness;\\n    metallic = mrSample.b * metallic;\\n    #endif\\n    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);\\n    metallic = clamp(metallic, 0.0, 1.0);\\n    // Roughness is authored as perceptual roughness; as is convention,\\n    // convert to material roughness by squaring the perceptual roughness [2].\\n    float alphaRoughness = perceptualRoughness * perceptualRoughness;\\n\\n    // The albedo may be defined from a base texture or a flat color\\n    #ifdef HAS_BASECOLORMAP\\n    vec4 textureColor = texture2D(u_BaseColorSampler, v_UV);\\n    vec4 baseColor = SRGBtoLINEAR(textureColor) * u_BaseColorFactor;\\n    #else\\n    vec4 baseColor = u_BaseColorFactor;\\n    #endif\\n\\n    #ifdef HAS_ALPHA_CUTOFF\\n    if(baseColor.a < u_AlphaCutoff) {\\n        discard;\\n    }\\n\\n    #endif\\n\\n    #ifndef HAS_ALPHA_BLEND\\n    baseColor.a = 1.0;\\n    #endif\\n\\n    vec3 f0 = vec3(0.04);\\n    #ifdef HAS_COLOR\\n    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0) * SRGBtoLINEAR(v_Color).rgb;\\n    diffuseColor *= 1.0 - metallic;\\n    #else\\n    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);\\n    diffuseColor *= 1.0 - metallic;\\n    #endif\\n    vec3 specularColor = mix(f0, baseColor.rgb, metallic);\\n\\n    // Compute reflectance.\\n    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\\n\\n    // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.\\n    // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.\\n    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);\\n    vec3 specularEnvironmentR0 = specularColor.rgb;\\n    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;\\n\\n    return Pbr(\\n            baseColor,\\n            perceptualRoughness,\\n            metallic,\\n            specularEnvironmentR0,\\n            specularEnvironmentR90,\\n            alphaRoughness,\\n            diffuseColor,\\n            specularColor\\n    );\\n}\\n\\n// Find the normal for this fragment, pulling either from a predefined normal map\\n// or from the interpolated mesh normal and tangent attributes.\\n// used only by getFragment()\\nvec3 getNormal()\\n{\\n    // Retrieve the tangent space matrix\\n    #ifndef HAS_TANGENTS\\n    vec3 pos_dx = dFdx(v_Position);\\n    vec3 pos_dy = dFdy(v_Position);\\n    vec3 tex_dx = dFdx(vec3(v_UV, 0.0));\\n    vec3 tex_dy = dFdy(vec3(v_UV, 0.0));\\n    vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\\n\\n    #ifdef HAS_NORMALS\\n    vec3 ng = normalize(v_Normal);\\n    #else\\n    vec3 ng = cross(pos_dx, pos_dy);\\n    #endif\\n\\n    t = normalize(t - ng * dot(ng, t));\\n    vec3 b = normalize(cross(ng, t));\\n    mat3 tbn = mat3(t, b, ng);\\n    #else // HAS_TANGENTS\\n    mat3 tbn = v_TBN;\\n    #endif\\n\\n    #ifdef HAS_NORMALMAP\\n    vec3 n = texture2D(u_NormalSampler, v_UV).rgb;\\n    n = normalize(tbn * ((2.0 * n - 1.0) * vec3(u_NormalScale, u_NormalScale, 1.0)));\\n    #else\\n    // The tbn matrix is linearly interpolated, so we need to re-normalize\\n    vec3 n = normalize(tbn[2].xyz);\\n    #endif\\n\\n    return n;\\n}\\n\\n//Get Fragment info\\nFragment getFragment() {\\n    vec3 normal = getNormal();\\n    vec3 vectorToCamera = normalize(u_Camera - v_Position); \\n    vec3 reflection = -normalize(reflect(vectorToCamera, normal));\\n    float NdotV = abs(dot(normal, vectorToCamera)) + 0.001;\\n    return Fragment(normal, vectorToCamera, reflection, NdotV);\\n}\\n\\n#ifdef USE_PUNCTUAL_LIGHTS\\n//Directional light based on normal and dynamic light info\\nLight getDirectionalLight(Fragment fragment, vec3 lightDirection, vec3 color, float intensity) {\\n    vec3 N = fragment.normal;\\n    vec3 V = fragment.vectorToCamera;\\n    float NdotV = fragment.NdotV;\\n\\n    vec3 L = -normalize(lightDirection);   // Light Direction\\n    vec3 H = normalize(L+V);                          // Half vector between both l and v\\n\\n    float NdotL = clamp(dot(N, L), 0.001, 1.0);\\n    float NdotH = clamp(dot(N, H), 0.0, 1.0);\\n    float LdotH = clamp(dot(L, H), 0.0, 1.0);\\n    float VdotH = clamp(dot(V, H), 0.0, 1.0);\\n\\n    return Light(\\n        NdotL,\\n        NdotH,\\n        LdotH,\\n        VdotH,\\n        color * intensity\\n    );\\n}\\n\\n//Point light\\nLight getPointLight(Fragment fragment, vec3 lightPosition, vec3 color, float intensity) {\\n\\n    vec3 N = fragment.normal;\\n    vec3 V = fragment.vectorToCamera;\\n    float NdotV = fragment.NdotV;\\n\\n    vec3 L = normalize(lightPosition - v_Position);   // Light Direction \\n    vec3 H = normalize(L+V);                          // Half vector between both l and v\\n\\n    float NdotL = clamp(dot(N, L), 0.001, 1.0);\\n    float NdotH = clamp(dot(N, H), 0.0, 1.0);\\n    float LdotH = clamp(dot(L, H), 0.0, 1.0);\\n    float VdotH = clamp(dot(V, H), 0.0, 1.0);\\n\\n    float distance    = length(lightPosition - v_Position);\\n    float attenuation = 1.0 / (distance * distance);\\n\\n    Light light = Light(\\n        NdotL,\\n        NdotH,\\n        LdotH,\\n        VdotH,\\n        color * intensity * attenuation\\n    );\\n\\n    return light;\\n}\\n\\n\\n//Spot light\\nLight getSpotLight(Fragment fragment, vec3 lightPosition, vec3 lightDirection, float lightAngleScale, float lightAngleOffset, vec3 color, float intensity) {\\n\\n    vec3 N = fragment.normal;\\n    vec3 V = fragment.vectorToCamera;\\n    float NdotV = fragment.NdotV;\\n\\n    vec3 L = normalize(lightPosition - v_Position);   // Light Direction \\n    vec3 H = normalize(L+V);                          // Half vector between both l and v\\n\\n    float NdotL = clamp(dot(N, L), 0.001, 1.0);\\n    float NdotH = clamp(dot(N, H), 0.0, 1.0);\\n    float LdotH = clamp(dot(L, H), 0.0, 1.0);\\n    float VdotH = clamp(dot(V, H), 0.0, 1.0);\\n\\n    float distance    = length(lightPosition - v_Position);\\n    float attenuation = 1.0 / (distance * distance);\\n\\n    float cd = dot(lightDirection, V);\\n    float coneAttentuation = clamp(cd * lightAngleScale + lightAngleOffset, 0.0, 1.0);\\n    coneAttentuation *= coneAttentuation;   \\n    attenuation = attenuation * coneAttentuation;\\n\\n    Light light = Light(\\n        NdotL,\\n        NdotH,\\n        LdotH,\\n        VdotH,\\n        color * intensity * attenuation\\n    );\\n\\n    return light;\\n}\\n#endif\\n\\n// Calculation of the lighting contribution from an optional Image Based Light source.\\n// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].\\n// See our README.md on Environment Maps [3] for additional discussion.\\n#ifdef USE_IBL\\nvec3 getIBLContribution(Pbr pbr, Fragment fragment)\\n{\\n    float mipCount = 9.0; // resolution of 512x512\\n    float lod = (pbr.perceptualRoughness * mipCount);\\n    // retrieve a scale and bias to F0. See [1], Figure 3\\n    \\n    vec3 brdf = SRGBtoLINEAR(texture2D(u_brdfLUT, vec2(fragment.NdotV, 1.0 - pbr.perceptualRoughness))).rgb;\\n    vec3 diffuseLight = SRGBtoLINEAR(textureCube(u_DiffuseEnvSampler, fragment.normal)).rgb;\\n    \\n\\n    #ifdef USE_TEX_LOD\\n    vec3 specularLight = SRGBtoLINEAR(textureCubeLodEXT(u_SpecularEnvSampler, fragment.reflection, lod)).rgb;\\n    #else\\n    vec3 specularLight = SRGBtoLINEAR(textureCube(u_SpecularEnvSampler, fragment.reflection)).rgb;\\n    #endif\\n\\n    vec3 diffuse = diffuseLight * pbr.diffuseColor;\\n    vec3 specular = specularLight * (pbr.specularColor * brdf.x + brdf.y);\\n\\n    return diffuse + specular;\\n}\\n#endif\\n\\n\\nvec3 getColor(Pbr pbr, Fragment fragment, Light light) {\\n\\n    // Calculate the shading terms for the microfacet specular shading model\\n    vec3 F = specularReflection(pbr, fragment, light);\\n    float G = geometricOcclusion(pbr, fragment, light);\\n    float D = microfacetDistribution(pbr, fragment, light);\\n\\n    // Calculation of analytical lighting contribution\\n    vec3 diffuseContrib = (1.0 - F) * diffuse(pbr, fragment, light);\\n    vec3 specContrib = F * G * D / (4.0 * light.NdotL * fragment.NdotV);\\n    // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)\\n    vec3 color = light.NdotL * light.color * (diffuseContrib + specContrib);\\n    \\n\\n    return color;\\n}\\n\\nvoid main()\\n{\\n    Pbr pbr = getPbr();\\n    Fragment fragment = getFragment();\\n\\n    vec3 color = vec3(0.0, 0.0, 0.0);\\n    Light light;\\n    #ifdef USE_PUNCTUAL_LIGHTS\\n        //Actual implementation will dynamically write the code here\\n        %PUNCTUAL_LIGHTS_FUNCS%\\n\\n    /*\\n         light = getDirectionalLight(\\n                    fragment,\\n                    vec3(0,0,-1),\\n                    vec3(1.0, 1.0, 1.0),\\n                    100.0\\n        );\\n\\n        color += getColor(pbr, fragment, light);\\n      */  \\n        //Manual example\\n        /*\\n        light = getDirectionalLight(\\n                    fragment,\\n                    vec3(-1,-1,-1),\\n                    vec3(1.0, 0, 1.0),\\n                    3.0\\n        );\\n\\n        color += getColor(pbr, fragment, light);\\n        light = getPointLight(\\n                    fragment,\\n                    vec3(-3,3,3),\\n                    vec3(1.0, 1.0, 1.0),\\n                    100.0\\n        );\\n\\n        color += getColor(pbr, fragment, light);\\n        */\\n    #endif\\n\\n    #ifdef USE_IBL\\n        // Calculate lighting contribution from image based lighting source (IBL)\\n        color += getIBLContribution(pbr, fragment);\\n    #endif\\n\\n    // Apply optional PBR terms for additional (optional) shading\\n    #ifdef HAS_OCCLUSIONMAP\\n    float ao = texture2D(u_OcclusionSampler, v_UV).r;\\n    color = mix(color, color * ao, u_OcclusionStrength);\\n    #endif\\n\\n    #ifdef HAS_EMISSIVEMAP\\n    vec3 emissive = SRGBtoLINEAR(texture2D(u_EmissiveSampler, v_UV)).rgb * u_EmissiveFactor;\\n    color += emissive;\\n    #endif\\n\\n\\n    \\n    gl_FragColor = vec4(pow(color,vec3(1.0/2.2)), pbr.baseColor.a);\\n}\\n\";\n\n//import unlitFragmentShader from \"./Gltf-Unlit-Shader-Fragment.glsl\";\r\nconst updateRuntimeShaderConfig_Primitive = (scene) => (primitive) => {\r\n    const shaderConfig = GltfExtensions\r\n        .map(ext => ext.runtimeShaderConfig_Primitive)\r\n        .reduce((acc, val) => (acc = val(scene)(primitive)(acc), acc), primitive.shaderConfig);\r\n    return Object.assign({}, primitive, { shaderConfig });\r\n};\r\nconst updateRuntimeShaderConfig_Scene = (scene) => {\r\n    const shaderConfig = GltfExtensions\r\n        .map(ext => ext.runtimeShaderConfig_Scene)\r\n        .reduce((acc, val) => (acc = val(scene)(acc), acc), scene.shaderConfig);\r\n    return Object.assign({}, scene, { shaderConfig });\r\n};\r\nconst getOrGenerateShader = ({ renderer, data }) => (scene) => {\r\n    const getHashForScene = getShaderHash(scene.shaderConfig);\r\n    return (primitive) => {\r\n        const shaderHash = getHashForScene(primitive.shaderConfig);\r\n        if (!data.shaders.has(shaderHash)) {\r\n            const source = getShaderSource$2(data)(scene.shaderConfig)(primitive.shaderConfig);\r\n            const shader = createShader({\r\n                shaderId: Symbol(),\r\n                renderer,\r\n                source,\r\n            });\r\n            data.shaders.set(shaderHash, shader);\r\n            console.log(`new shader compiled`, shaderHash);\r\n        }\r\n        const shader = data.shaders.get(shaderHash);\r\n        return shader;\r\n    };\r\n};\r\nconst getShaderSource$2 = (data) => (sceneShaderConfig) => (primitiveShaderConfig) => GltfExtensions\r\n    .map(ext => ext.getShaderSource)\r\n    .reduce((acc, val) => (acc = val(data)(sceneShaderConfig)(primitiveShaderConfig)(acc), acc), getCoreShaderSource(data)(sceneShaderConfig)(primitiveShaderConfig));\r\nconst getCoreShaderSource = (data) => (sceneShaderConfig) => (primitiveShaderConfig) => {\r\n    const gltf = data.original;\r\n    const defines = [];\r\n    if (primitiveShaderConfig.hasNormalAttributes) {\r\n        defines.push(\"HAS_NORMALS\");\r\n    }\r\n    if (primitiveShaderConfig.hasTangentAttributes) {\r\n        defines.push(\"HAS_TANGENTS\");\r\n    }\r\n    if (primitiveShaderConfig.hasUvAttributes) {\r\n        defines.push(\"HAS_UV\");\r\n    }\r\n    if (primitiveShaderConfig.hasColorAttributes) {\r\n        defines.push(\"HAS_COLOR\");\r\n    }\r\n    if (primitiveShaderConfig.hasBaseColorMap) {\r\n        defines.push(\"HAS_BASECOLORMAP\");\r\n    }\r\n    if (primitiveShaderConfig.hasNormalMap) {\r\n        defines.push(\"HAS_NORMALMAP\");\r\n    }\r\n    if (primitiveShaderConfig.hasEmissiveMap) {\r\n        defines.push(\"HAS_EMISSIVEMAP\");\r\n    }\r\n    if (primitiveShaderConfig.hasMetalRoughnessMap) {\r\n        defines.push(\"HAS_METALROUGHNESSMAP\");\r\n    }\r\n    if (primitiveShaderConfig.hasOcclusionMap) {\r\n        defines.push(\"HAS_OCCLUSIONMAP\");\r\n    }\r\n    if (primitiveShaderConfig.manualSRGB) {\r\n        defines.push(\"MANUAL_SRGB\");\r\n    }\r\n    if (primitiveShaderConfig.fastSRGB) {\r\n        defines.push(\"SRGB_FAST_APPROXIMATION\");\r\n    }\r\n    if (primitiveShaderConfig.nSkinJoints) {\r\n        defines.push(\"HAS_SKIN\");\r\n    }\r\n    switch (primitiveShaderConfig.alphaMode) {\r\n        case GltfMaterialAlphaMode.MASK:\r\n            defines.push(\"HAS_ALPHA_CUTOFF\");\r\n            break;\r\n        case GltfMaterialAlphaMode.BLEND:\r\n            defines.push(\"HAS_ALPHA_BLEND\");\r\n            break;\r\n    }\r\n    const defineString = defines.map(value => `#define ${value} 1\\n`).join('');\r\n    const vertex = getCoreVertexShader(data)(sceneShaderConfig)(primitiveShaderConfig)(defineString + vertexShaderSource);\r\n    const fragment = defineString + fragmentShaderSource;\r\n    return { vertex, fragment };\r\n};\r\nconst getCoreVertexShader = (data) => (sceneShaderConfig) => (primitiveShaderConfig) => (vs) => {\r\n    let MORPH_VARS = '';\r\n    let MORPH_FUNCS = '';\r\n    let morphIndex = 0;\r\n    let weightIndex = 0;\r\n    const createMorphs = (nMorphs) => (aTarget) => {\r\n        for (let i = 0; i < nMorphs; i++) {\r\n            const aMorph = `a_Morph_${morphIndex}`;\r\n            MORPH_VARS += `attribute vec4 ${aMorph};\\n`;\r\n            MORPH_FUNCS += `${aTarget} += (u_MorphWeights[${weightIndex}] * ${aMorph});\\n`;\r\n            morphIndex++;\r\n        }\r\n        weightIndex++;\r\n    };\r\n    if (primitiveShaderConfig.nPositionMorphs) {\r\n        createMorphs(primitiveShaderConfig.nPositionMorphs)(\"m_Position\");\r\n    }\r\n    if (primitiveShaderConfig.nNormalMorphs) {\r\n        createMorphs(primitiveShaderConfig.nPositionMorphs)(\"m_Normal\");\r\n    }\r\n    if (primitiveShaderConfig.nTangentMorphs) {\r\n        createMorphs(primitiveShaderConfig.nPositionMorphs)(\"m_Tangent\");\r\n    }\r\n    if (weightIndex) {\r\n        MORPH_VARS += `uniform float u_MorphWeights[${weightIndex}];\\n`;\r\n    }\r\n    let SKIN_JOINT_COUNT = '';\r\n    if (primitiveShaderConfig.nSkinJoints) {\r\n        SKIN_JOINT_COUNT = primitiveShaderConfig.nSkinJoints.toString();\r\n    }\r\n    return vs\r\n        .replace(\"%MORPH_VARS%\", MORPH_VARS)\r\n        .replace(\"%MORPH_FUNCS%\", MORPH_FUNCS)\r\n        .replace(\"%SKIN_JOINT_COUNT%\", SKIN_JOINT_COUNT);\r\n};\n\nconst _scratchVec3 = new Float64Array(3);\r\nconst _cacheLights = {\r\n    directional: [undefined],\r\n    point: [undefined],\r\n    spot: [undefined]\r\n};\r\nfor (let i = 1; i < GltfLights_MAX; i++) {\r\n    _cacheLights.directional.push({\r\n        direction: new Float32Array(i * 3),\r\n        color: new Float32Array(i * 3),\r\n        intensity: new Float32Array(i),\r\n    });\r\n    _cacheLights.point.push({\r\n        position: new Float32Array(i * 3),\r\n        color: new Float32Array(i * 3),\r\n        intensity: new Float32Array(i),\r\n    });\r\n    _cacheLights.spot.push({\r\n        position: new Float32Array(i * 3),\r\n        direction: new Float32Array(i * 3),\r\n        color: new Float32Array(i * 3),\r\n        intensity: new Float32Array(i),\r\n        angleScale: new Float32Array(i),\r\n        angleOffset: new Float32Array(i),\r\n    });\r\n}\r\nconst getLightList = (scene) => {\r\n    const cache = {\r\n        directional: _cacheLights.directional[scene.shaderConfig.lights.nDirectionalLights],\r\n        point: _cacheLights.point[scene.shaderConfig.lights.nPointLights],\r\n        spot: _cacheLights.spot[scene.shaderConfig.lights.nSpotLights]\r\n    };\r\n    if (cache.directional) {\r\n        cache.directional.offset = 0;\r\n    }\r\n    if (cache.point) {\r\n        cache.point.offset = 0;\r\n    }\r\n    if (cache.spot) {\r\n        cache.spot.offset = 0;\r\n    }\r\n    return cache;\r\n};\r\nconst renderScene = (renderer) => (data) => (scene) => {\r\n    const shaderGroupByAlpha = new Map();\r\n    const renderThunksByShader = new Map();\r\n    const meshList = new Array();\r\n    const lightList = scene.shaderConfig.lights\r\n        ? getLightList(scene)\r\n        : undefined;\r\n    forEachNodes((node) => {\r\n        if (node.kind === GltfNodeKind.MESH\r\n            && node.transform\r\n            && node.transform.modelViewProjectionMatrix ? true : false) {\r\n            meshList.push(node);\r\n        }\r\n        else if (node.kind === NodeKind.LIGHT) {\r\n            const light = node.light;\r\n            const target = (() => {\r\n                switch (light.kind) {\r\n                    case LightKind.Directional:\r\n                        return lightList.directional;\r\n                    case LightKind.Point:\r\n                        return lightList.point;\r\n                    case LightKind.Spot:\r\n                        return lightList.spot;\r\n                }\r\n            })();\r\n            const color = light.color;\r\n            const intensity = light.intensity;\r\n            const position = light.kind === LightKind.Point || light.kind === LightKind.Spot\r\n                ? mat4.getTranslation(_scratchVec3, node.transform.modelMatrix)\r\n                : undefined;\r\n            //Is updated via node/transform updates\r\n            const direction = light.direction;\r\n            for (let i = 0; i < 3; i++) {\r\n                const offset = (target.offset * 3) + i;\r\n                if (position !== undefined) {\r\n                    target.position[offset] = position[i];\r\n                }\r\n                if (direction !== undefined) {\r\n                    target.direction[offset] = direction[i];\r\n                }\r\n                target.color[offset] = color[i];\r\n            }\r\n            if (light.kind === LightKind.Spot) {\r\n                target.angleScale[target.offset] = light.angleScale;\r\n                target.angleOffset[target.offset] = light.angleOffset;\r\n            }\r\n            target.intensity[target.offset] = intensity;\r\n            target.offset++;\r\n        }\r\n    })(scene.nodes);\r\n    /*console.log(\r\n        0, (scene.nodes[0] as GltfMeshNode).primitives[0].shaderConfig.hasColorAttributes,\r\n        1, (scene.nodes[1] as GltfMeshNode).primitives[0].shaderConfig.hasColorAttributes\r\n    );\r\n    */\r\n    meshList.forEach(node => {\r\n        let skinMatrices;\r\n        if (node.skin !== undefined && node.skin.skinMatrices) {\r\n            skinMatrices = node.skin.skinMatrices;\r\n        }\r\n        node.primitives.forEach(primitive => {\r\n            const shader = getOrGenerateShader({ renderer, data })(scene)(primitive);\r\n            if (!renderThunksByShader.has(shader.shaderId)) {\r\n                renderThunksByShader.set(shader.shaderId, []);\r\n            }\r\n            const shaderGroup = renderThunksByShader.get(shader.shaderId);\r\n            shaderGroup.push(createRendererThunk({\r\n                skinMatrices,\r\n                renderer,\r\n                data,\r\n                node,\r\n                primitive,\r\n                lightList,\r\n                scene,\r\n                shader\r\n            }));\r\n            if (!shaderGroupByAlpha.has(primitive.shaderConfig.alphaMode)) {\r\n                shaderGroupByAlpha.set(primitive.shaderConfig.alphaMode, new Set());\r\n            }\r\n            shaderGroupByAlpha.get(primitive.shaderConfig.alphaMode).add(shaderGroup);\r\n        });\r\n    });\r\n    //These are for _all_ gltf renders, but there might be another gl renderer between them so the flags need to be set\r\n    renderer.glToggle(WebGlConstants.BLEND)(false);\r\n    renderer.glToggle(WebGlConstants.DEPTH_TEST)(true);\r\n    //these are just random guesses looking at some common practices out in the wild\r\n    renderer.glDepthFunc(renderer.gl.LEQUAL);\r\n    renderer.glBlendFunc(renderer.gl.SRC_ALPHA)(renderer.gl.ONE_MINUS_SRC_ALPHA);\r\n    const render = _render(renderer)(shaderGroupByAlpha);\r\n    render(GltfMaterialAlphaMode.OPAQUE);\r\n    render(GltfMaterialAlphaMode.MASK);\r\n    render(GltfMaterialAlphaMode.BLEND);\r\n};\r\n//Render calls are sorted by alpha and then shader.\r\n//The thunks themselves will assign vaos\r\n//They are released by shader groupo\r\nconst _render = (renderer) => (shaderGroups) => (alphaMode) => {\r\n    if (shaderGroups.has(alphaMode)) {\r\n        if (alphaMode === GltfMaterialAlphaMode.BLEND) {\r\n            renderer.glToggle(WebGlConstants.BLEND)(true);\r\n        }\r\n        shaderGroups.get(alphaMode)\r\n            .forEach(xs => {\r\n            xs.forEach(fn => fn());\r\n        });\r\n    }\r\n};\n\nconst gltf_updateShaderConfigs = (scene) => {\r\n    scene = updateRuntimeShaderConfig_Scene(scene);\r\n    scene = Object.assign({}, scene, {\r\n        nodes: mapNodes(node => node.kind === GltfNodeKind.MESH\r\n            ? Object.assign({}, node, {\r\n                primitives: node.primitives.map(primitive => updateRuntimeShaderConfig_Primitive(scene)(primitive))\r\n            })\r\n            : node)(scene.nodes)\r\n    });\r\n    return scene;\r\n};\n\nconst gltf_load = ({ renderer, path, config, mapper }) => {\r\n    const bridge = createGltfBridge(renderer);\r\n    return bridge\r\n        .loadFile(path)\r\n        .chain(({ gltf, glbBuffers }) => {\r\n        gltf = mapper ? mapper(gltf) : gltf;\r\n        return bridge.loadAssets({ gltf, glbBuffers, basePath: getBasePath(path) })\r\n            .map(assets => ({ gltf, config, assets }));\r\n    })\r\n        .map(bridge.start)\r\n        .map(() => bridge);\r\n};\r\nfunction createGltfBridge(renderer) {\r\n    const exports = {};\r\n    let _allNodes;\r\n    let _data;\r\n    const loadFile = (path) => fetchArrayBufferUrl(path).map(GLTF_PARSE_getOriginalFromArrayBuffer);\r\n    const loadAssets = ({ gltf, basePath, glbBuffers }) => GLTF_PARSE_LoadDataAssets({ basePath: basePath ? basePath : \"\", gltf, glbBuffers });\r\n    const start = ({ gltf, assets, config }) => {\r\n        const data = GLTF_PARSE_CreateData({\r\n            gltf,\r\n            renderer,\r\n            assets,\r\n            config: config === undefined ? getDefaultInitConfig() : config\r\n        });\r\n        const primitives = GLTF_PARSE_createPrimitives({ renderer, data });\r\n        _data = data;\r\n        _allNodes = GLTF_PARSE_getNodes({ gltf, primitives, data, assets });\r\n    };\r\n    const renderScene$$1 = (scene) => {\r\n        renderScene(renderer)(_data)(scene);\r\n    };\r\n    const getOriginalScene = (camera) => (sceneNumber) => {\r\n        //First time is mandatory - after that it's up to the caller\r\n        const scene = gltf_updateShaderConfigs(GLTF_PARSE_createScene({\r\n            renderer,\r\n            data: _data,\r\n            allNodes: _allNodes\r\n        })(camera)(sceneNumber));\r\n        return scene;\r\n    };\r\n    const getCameraNode = (index) => {\r\n        const node = findNode(node => node.kind === NodeKind.CAMERA && node.cameraIndex === index)(_allNodes);\r\n        if (!node) {\r\n            return undefined;\r\n        }\r\n        const camera = setCameraPositionFromTransform(node.transform)(setCameraViewFromTransform(node.transform)(setCameraProjectionFromSettings(Object.assign({}, node.camera.settings, { canvas: renderer.canvas }))(Object.assign({}, node.camera))));\r\n        return Object.assign({}, node, { camera });\r\n    };\r\n    const bridge = {\r\n        renderer,\r\n        getAllNodes: () => _allNodes,\r\n        getData: () => _data,\r\n        getOriginalScene,\r\n        getCameraNode,\r\n        loadFile,\r\n        loadAssets,\r\n        start,\r\n        renderScene: renderScene$$1,\r\n    };\r\n    Object.assign(exports, bridge);\r\n    return exports;\r\n}\n\nconst gltf_updateNodeTransforms = (opts) => (nodes) => {\r\n    const updatedNodes = updateNodeListTransforms(opts)(null)(nodes);\r\n    return mapNodes(gltf_setJointTransforms(updatedNodes))(updatedNodes);\r\n};\r\nconst gltf_findNodeByOriginalId = (id) => (nodeOrNodes) => findNode((node) => node.originalNodeId === id)(nodeOrNodes);\r\nconst gltf_setJointTransforms = (fullTree) => (node) => {\r\n    if (node.kind === GltfNodeKind.MESH && node.skin) {\r\n        const jointList = getJointList(fullTree)(node);\r\n        const getSkeletonRootTransform = (id) => {\r\n            const joint = jointList.find(j => j.originalNodeId === id);\r\n            if (joint) {\r\n                return joint.transform;\r\n            }\r\n            return gltf_findNodeByOriginalId(id)(fullTree).transform;\r\n        };\r\n        let pos = 0;\r\n        //see https://github.com/KhronosGroup/glTF-Tutorials/issues/17\r\n        const inverseRootMatrix = mat4.invert(mat4.create(), node.skin.skeletonRootId === undefined\r\n            ? node.transform.modelMatrix\r\n            : getSkeletonRootTransform(node.skin.skeletonRootId).modelMatrix);\r\n        const skinMatrices = jointList.reduce((acc, joint) => {\r\n            const jMat = mat4.create();\r\n            mat4.multiply(jMat, joint.transform.modelMatrix, joint.inverseBindMatrix);\r\n            if (inverseRootMatrix) {\r\n                mat4.multiply(jMat, inverseRootMatrix, jMat);\r\n            }\r\n            //Needs to flatten for uploading to webgl\r\n            for (let i = 0; i < jMat.length; i++) {\r\n                acc[pos++] = jMat[i];\r\n            }\r\n            return acc;\r\n        }, new Float32Array(node.skin.joints.length * 16));\r\n        return Object.assign({}, node, {\r\n            skin: Object.assign({}, node.skin, {\r\n                skinMatrices\r\n            })\r\n        });\r\n    }\r\n    return node;\r\n};\r\nconst getJointList = (fullTree) => (meshNode) => {\r\n    const jointIds = new Map();\r\n    const jointList = meshNode.skin.joints.map((joint, index) => {\r\n        jointIds.set(joint.originalNodeId, index);\r\n        return {\r\n            originalNodeId: joint.originalNodeId,\r\n            inverseBindMatrix: joint.inverseBindMatrix\r\n        };\r\n    });\r\n    someNodes((node) => {\r\n        if (jointIds.has(node.originalNodeId)) {\r\n            const index = jointIds.get(node.originalNodeId);\r\n            jointList[index].transform = node.transform;\r\n            jointIds.delete(node.originalNodeId);\r\n            if (!jointIds.size) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    })(fullTree);\r\n    return jointList;\r\n};\n\n//This can be used from a worker thread\r\n//The inner functions could also be called separately for more control\r\n//TODO - Would be nice to create an optimised version that doesn't traverse the whole tree 3 times\r\nconst gltf_updateScene = (animate) => (frameTs) => (scene) => gltf_updateShaderConfigs(Object.assign({}, scene, {\r\n    nodes: gltf_updateNodeTransforms({\r\n        updateLocal: true,\r\n        updateModel: true,\r\n        updateView: true,\r\n        updateLightDirection: true,\r\n        camera: scene.camera\r\n    })(animate(frameTs)(scene.nodes))\r\n}));\n\nconst createAttributes = ({ gl, buffers }) => {\r\n    let currentBuffer;\r\n    let currentTarget;\r\n    const globalLocations = new Set();\r\n    const _perShaderCache = new Map();\r\n    const _globalCache = new Map();\r\n    const getLocationInShader = (program) => (aName) => {\r\n        if (!_perShaderCache.has(program)) {\r\n            _perShaderCache.set(program, new Map());\r\n        }\r\n        const cache = _perShaderCache.get(program);\r\n        if (!cache.has(aName)) {\r\n            cache.set(aName, gl.getAttribLocation(program, aName));\r\n        }\r\n        return cache.get(aName);\r\n    };\r\n    const getLocationInRenderer = (aName) => {\r\n        if (!_globalCache.has(aName)) {\r\n            //For-of wasn't working across typescript and things...\r\n            //This is a little ugly but it's totally fine since it's only on init\r\n            //And by far most use-cases will be a cache hit\r\n            let idx = 0;\r\n            globalLocations.forEach(val => {\r\n                if (!_globalCache.has(val)) {\r\n                    _globalCache.set(val, idx);\r\n                }\r\n                idx++;\r\n            });\r\n        }\r\n        return _globalCache.get(aName);\r\n    };\r\n    const activateElements = (bufferId) => {\r\n        const info = buffers.get(bufferId);\r\n        if (currentBuffer !== bufferId || currentTarget !== info.target) {\r\n            gl.bindBuffer(info.target, info.buffer);\r\n            currentBuffer = bufferId;\r\n            currentTarget = info.target;\r\n        }\r\n    };\r\n    const activateData = (location) => (bufferId) => (opts) => {\r\n        activateElements(bufferId); //isn't really elements here, but nicer than having a superfluous alias\r\n        gl.vertexAttribPointer(location, opts.size, opts.type, opts.normalized === undefined ? false : opts.normalized, opts.stride === undefined ? 0 : opts.stride, opts.offset === undefined ? 0 : opts.offset);\r\n        gl.enableVertexAttribArray(location);\r\n    };\r\n    return { globalLocations, getLocationInShader, getLocationInRenderer, activateElements, activateData };\r\n};\n\nconst createWebGlBuffers = (gl) => {\r\n    const infoMap = new Map();\r\n    const bind = (sym) => {\r\n        const info = infoMap.get(sym);\r\n        gl.bindBuffer(info.target, info.buffer);\r\n    };\r\n    const assign = (sym) => (bData) => {\r\n        const info = infoMap.has(sym)\r\n            ? infoMap.get(sym)\r\n            : { buffer: gl.createBuffer() };\r\n        info.data = bData.data;\r\n        info.target = bData.target;\r\n        info.usagePattern = bData.usagePattern;\r\n        infoMap.set(sym, info);\r\n        bind(sym);\r\n        //typecasting to any since coercion into TypedArray for webgl2 is responsibility of caller\r\n        gl.bufferData(info.target, info.data, info.usagePattern);\r\n    };\r\n    const get = (sym) => infoMap.get(sym);\r\n    return { assign, get, bind };\r\n};\n\n//This hasn't been tested in a while and isn't managed by the renderer anymore\r\n//See the old usage here: https://github.com/dakom/state-scenegraph/blob/master/src/lib/renderer/Renderer-WebGl.ts\r\n//Though it can still be used generally, probably, and it might be helpful to keep the code here :)\r\nconst makeFramebufferPicker = (gl) => ({ width, height }) => {\r\n    //setup a texture to store colors\r\n    const texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n    //setup a renderbuffer to store depth info\r\n    const renderBuffer = gl.createRenderbuffer();\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\r\n    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\r\n    //setup a framebuffer for offscreen rendering\r\n    const frameBuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderBuffer);\r\n    //unbind everything\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    //exported utils\r\n    const bind = () => gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    const unbind = () => gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    const readPixel = ({ x, y }) => {\r\n        const readout = new Uint8Array(4);\r\n        bind();\r\n        gl.readPixels(x, y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, readout);\r\n        unbind();\r\n        return readout;\r\n    };\r\n    const clear = (bits) => {\r\n        bind();\r\n        gl.clear(bits);\r\n        unbind();\r\n    };\r\n    const dispose = () => {\r\n        unbind();\r\n        gl.deleteFramebuffer(frameBuffer);\r\n        gl.deleteRenderbuffer(renderBuffer);\r\n        gl.deleteTexture(texture);\r\n    };\r\n    return {\r\n        bind: bind,\r\n        unbind: unbind,\r\n        readPixel: readPixel,\r\n        dispose: dispose,\r\n        clear: clear\r\n    };\r\n};\n\nconst createVertexArrays = ({ getExtension, gl, version, buffers }) => {\r\n    const _cache = new Map();\r\n    let currentSym;\r\n    const _create = () => {\r\n        if (version === 1) {\r\n            return getExtension(\"OES_vertex_array_object\").createVertexArrayOES();\r\n        }\r\n        else {\r\n            return gl.createVertexArray();\r\n        }\r\n    };\r\n    const _bind = (target) => {\r\n        if (version === 1) {\r\n            return getExtension(\"OES_vertex_array_object\").bindVertexArrayOES(target);\r\n        }\r\n        else {\r\n            return gl.bindVertexArray(target);\r\n        }\r\n    };\r\n    const _activate = (force) => (sym) => {\r\n        if (!force && currentSym === sym) {\r\n            return;\r\n        }\r\n        currentSym = sym;\r\n        if (!_cache.has(sym)) {\r\n            _cache.set(sym, _create());\r\n        }\r\n        _bind(_cache.get(sym));\r\n    };\r\n    const assign = (sym) => (v) => {\r\n        _activate(true)(sym);\r\n        if (v.elementBufferId) {\r\n            buffers.bind(v.elementBufferId);\r\n        }\r\n        v.data.forEach(({ location, usagePattern, bufferId, size, type, normalized, stride, offset }) => {\r\n            const bufferInfo = buffers.get(bufferId);\r\n            //there's no cache checks in the case of VAO - the set as a whole is toggled on/off\r\n            buffers.bind(bufferId);\r\n            gl.vertexAttribPointer(location, size, type, normalized === undefined ? false : normalized, stride === undefined ? 0 : stride, offset === undefined ? 0 : offset);\r\n            gl.enableVertexAttribArray(location);\r\n        });\r\n        release();\r\n    };\r\n    const release = () => {\r\n        if (currentSym !== null) {\r\n            currentSym = null;\r\n            _bind(null);\r\n        }\r\n    };\r\n    return { activate: _activate(false), release, assign };\r\n};\r\n/*\r\nexport const createVertexArraysForRenderer = (renderer:WebGlRenderer) =>\r\n    createVertexArrays({renderer, getAttributeLocation: renderer.getGlobalAttributeLocation});\r\n\nexport const createVertexArraysForShader = ({renderer, shader}:{renderer:WebGlRenderer, shader:WebGlShader}) =>\r\n    createVertexArrays({renderer, getAttributeLocation: shader.attributes.getLocation})\r\n    */\n\nconst getVersionString = (gl) => gl.getParameter(WebGlConstants.VERSION);\r\nconst _isNumber = (chr) => {\r\n    switch (chr) {\r\n        case '0':\r\n        case '1':\r\n        case '2':\r\n        case '3':\r\n        case '4':\r\n        case '5':\r\n        case '6':\r\n        case '7':\r\n        case '8':\r\n        case '9':\r\n            return true;\r\n    }\r\n    return false;\r\n};\r\nconst getMajorVersion = (gl) => {\r\n    const str = getVersionString(gl);\r\n    let numberString = '';\r\n    for (let i = 0; i < str.length; i++) {\r\n        const chr = str.charAt(i);\r\n        if (_isNumber(chr)) {\r\n            numberString += chr;\r\n        }\r\n        else {\r\n            if (numberString.length) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return parseInt(numberString, 10);\r\n};\n\nconst createWebGlRenderer = (opts) => {\r\n    const { canvas, contextAttributes } = opts;\r\n    const gl = (() => {\r\n        if (opts.gl !== undefined) {\r\n            return opts.gl;\r\n        }\r\n        let _gl;\r\n        if (opts.version === undefined || opts.version === 2) {\r\n            try {\r\n                _gl = canvas.getContext(\"webgl2\", contextAttributes);\r\n            }\r\n            catch (e) {\r\n                _gl = undefined;\r\n            }\r\n            if (!_gl) {\r\n                console.warn(\"Failed to initialize webgl2, trying webgl1 as a fallback...\");\r\n            }\r\n            else {\r\n                return _gl;\r\n            }\r\n        }\r\n        try {\r\n            _gl = canvas.getContext(\"webgl\", contextAttributes) || canvas.getContext(\"experimental-webgl\", contextAttributes);\r\n        }\r\n        catch (e) {\r\n            _gl = undefined;\r\n        }\r\n        if (!_gl) {\r\n            console.warn(\"Unable to initialize webgl1\");\r\n        }\r\n        return _gl;\r\n    })();\r\n    const version = getMajorVersion(gl);\r\n    const lastScreenSize = {\r\n        width: NaN,\r\n        height: NaN\r\n    };\r\n    const resize = ({ width, height }) => {\r\n        if (lastScreenSize.width !== width || lastScreenSize.height !== height) {\r\n            canvas.setAttribute('width', width.toString());\r\n            canvas.setAttribute('height', height.toString());\r\n            gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n            lastScreenSize.width = width;\r\n            lastScreenSize.height = height;\r\n        }\r\n    };\r\n    const flagMap = new Map();\r\n    const glToggle = (setting) => (flag) => {\r\n        if (!flagMap.has(setting) || flagMap.get(setting) !== flag) {\r\n            flagMap.set(setting, flag);\r\n            if (flag) {\r\n                gl.enable(setting);\r\n            }\r\n            else {\r\n                gl.disable(setting);\r\n            }\r\n        }\r\n    };\r\n    const buffers = createWebGlBuffers(gl);\r\n    const extensionMap = new Map();\r\n    const getExtension = (extName) => {\r\n        if (!extensionMap.has(extName)) {\r\n            const ext = gl.getExtension(extName);\r\n            if (!ext) {\r\n                console.warn(\"Could not create extension\", extName);\r\n            }\r\n            extensionMap.set(extName, ext);\r\n        }\r\n        return extensionMap.get(extName);\r\n    };\r\n    let depthFunc;\r\n    const glDepthFunc = (func) => {\r\n        if (func !== depthFunc) {\r\n            gl.depthFunc(func);\r\n            depthFunc = func;\r\n        }\r\n    };\r\n    let _sFactor, _dFactor;\r\n    const glBlendFunc = (sFactor) => (dFactor) => {\r\n        if (sFactor !== _sFactor || dFactor !== _dFactor) {\r\n            gl.blendFunc(sFactor, dFactor);\r\n            _sFactor = sFactor;\r\n            _dFactor = dFactor;\r\n        }\r\n    };\r\n    const textureSwitcher = createTextureSwitcher(gl);\r\n    const attributes = createAttributes({\r\n        gl,\r\n        buffers,\r\n    });\r\n    const vertexArrays = createVertexArrays({\r\n        getExtension,\r\n        gl,\r\n        version,\r\n        buffers\r\n    });\r\n    return Object.assign({ resize,\r\n        canvas,\r\n        gl,\r\n        buffers,\r\n        attributes,\r\n        vertexArrays }, textureSwitcher, { glToggle,\r\n        glDepthFunc,\r\n        glBlendFunc,\r\n        getExtension,\r\n        version, extras: {} });\r\n};\n\nexport { GltfAnimationTargetPath, GltfAnimationInterpolation, GltfMaterialAlphaMode, GltfNodeKind, GltfPrimitiveDrawKind, GltfIblExtensionName, GltfLightsExtensionName, GltfLights_MAX, GltfUnlitExtensionName, CameraKind, NodeKind, LightKind, WebGlConstants, createVec2, createVec4, createVec3, createMat4, createQuat, createFill, createIdentityTransform, createTransform, getTrsFromMatrix, getMatrixFromTrs, getModelMatrix, getNormalMatrix, getViewMatrices, updateTransform, rotateVectorByMatrix, getOrthographicProjection, getPerspectiveProjection, getCameraProjection, getCameraView, getCameraPosition, setCameraViewFromTransform, setCameraPositionFromTransform, setCameraProjectionFromSettings, filterNodeDeep, filterNodesDeep, forEachNodes, forEachNode, someNodes, someNode, countNodes, findNode, mapNode, mapNodeWithParent, mapNodesWithParent, mapNodes, updateNodeTransforms, updateNodeListTransforms, getLightDirectionFromMatrix, gltf_setAnimationTime, gltf_createAnimator, gltf_load, gltf_updateNodeTransforms, gltf_findNodeByOriginalId, gltf_setJointTransforms, gltf_updateScene, gltf_updateShaderConfigs, createAttributes, createWebGlBuffers, makeFramebufferPicker, createWebGlRenderer, activateShader, createShader, createTextureSwitcher, createTextureFromTarget, createCubeTextureFromTarget, textureSetterSimple, createSimpleTextureFromTarget, createUniforms, getVersionString, getMajorVersion, createVertexArrays };\n//# sourceMappingURL=lib.esm.js.map\n","import { create, env } from 'sanctuary';\nimport { Future } from 'fluture';\n\nvar checkTypes = false; //process.env.BUILD_TYPE !== 'build';\r\nvar S = create({ checkTypes: checkTypes, env: env });\n\nvar isNil = function (x) { return x == undefined || x == null; };\r\nvar getDomUrl = function (url) {\r\n    var ctor = window.URL || window.webkitURL || window;\r\n    return new ctor(url);\r\n};\r\nvar sameOrigin = function (url) {\r\n    return url.indexOf(\"http://\") !== -1 || url.indexOf(\"https://\") !== -1\r\n        ? (getDomUrl(url).origin === window.location.origin)\r\n        : true;\r\n};\n\nvar ImageLoader = function (_a) {\r\n    var url = _a.url, crossOrigin = _a.crossOrigin;\r\n    return Future(function (reject, resolve) {\r\n        var img = new Image();\r\n        img.addEventListener(\"load\", function () { return resolve(img); });\r\n        img.addEventListener(\"error\", reject);\r\n        S.map(function (x) { return img.crossOrigin = x; })(crossOrigin);\r\n        img.src = url;\r\n    });\r\n};\r\nvar fetchImage = function (url) { return ImageLoader({ url: url, crossOrigin: !sameOrigin(url) ? S.Just(\"anonymous\") : S.Nothing }); };\r\nvar loadImageFromUrl = fetchImage; //an alias\r\nvar loadImageFromArrayBuffer = function (_a) {\r\n    var data = _a.data, mimeType = _a.mimeType;\r\n    return Future(function (reject, resolve) {\r\n        var img = new Image();\r\n        img.addEventListener(\"load\", function () { return resolve(img); });\r\n        img.addEventListener(\"error\", reject);\r\n        var arrayBufferView = new Uint8Array(data);\r\n        var blob = new Blob([arrayBufferView], { type: mimeType });\r\n        var urlCreator = window.URL || window.webkitURL;\r\n        img.src = urlCreator.createObjectURL(blob);\r\n    });\r\n};\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nvar __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n};\n\nvar makeQuery = function (args) {\r\n    var query = '';\r\n    if (!isNil(args)) {\r\n        for (var key in args) {\r\n            if (args.hasOwnProperty(key) && !isNil(args[key])) {\r\n                if (query !== '') {\r\n                    query += '&';\r\n                }\r\n                query += key + \"=\" + encodeURIComponent(args[key]);\r\n            }\r\n        }\r\n    }\r\n    return query;\r\n};\r\nvar XhrLoader = function (endpoint) { return function (options) { return Future(function (reject, resolve) {\r\n    var opts = __assign({ method: \"GET\" }, options);\r\n    var xhr = opts.xhr !== undefined\r\n        ? opts.xhr\r\n        : new XMLHttpRequest();\r\n    xhr.onreadystatechange = function () {\r\n        if (xhr.readyState === xhr.DONE) {\r\n            if (!xhr.status) {\r\n                return; //was cancelled\r\n            }\r\n            if (xhr.status !== 200) {\r\n                reject(xhr);\r\n            }\r\n            else {\r\n                resolve(xhr);\r\n            }\r\n        }\r\n    };\r\n    var query = ((opts.requestType === \"form\" || opts.requestType === \"query\") && opts.data !== null)\r\n        ? makeQuery(opts.data)\r\n        : \"\";\r\n    var url = (opts.requestType === \"query\" && query !== \"\")\r\n        ? endpoint + \"?\" + query\r\n        : endpoint;\r\n    xhr.open(opts.method, url);\r\n    xhr.responseType = opts.responseType;\r\n    if (opts.withCredentials !== undefined) {\r\n        xhr.withCredentials = opts.withCredentials;\r\n    }\r\n    if (opts.headers !== undefined) {\r\n        opts.headers.forEach(function (_a) {\r\n            var key = _a[0], val = _a[1];\r\n            xhr.setRequestHeader(key, val);\r\n        });\r\n    }\r\n    if (opts.requestType === \"form\" && query !== \"\") {\r\n        xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n        //Not actually allowed by spec, so commenting out.. browser will calculate automatically\r\n        //xhr.setRequestHeader(\"Content-length\", requestData.length);\r\n        xhr.send(query);\r\n    }\r\n    else if (!isNil(opts.data)) {\r\n        xhr.send(opts.data);\r\n    }\r\n    else {\r\n        xhr.send();\r\n    }\r\n    return function () { return xhr.abort(); };\r\n}); }; };\r\n//generics for simplifying fetch style requests\r\n//The base function is \"fletch\" - but after that it's all \"fetch*\"\r\nvar fletch = function (endpoint) { return function (options) {\r\n    return XhrLoader(endpoint)(options).map(function (xhr) { return xhr.response; });\r\n}; };\r\nvar fetchUrl = function (endpoint) {\r\n    return fletch(endpoint)(null);\r\n};\r\n//internal helpers to keep things DRY\r\nvar _fetchOverride = function (responseType) { return function (endpoint) { return function (options) {\r\n    return fletch(endpoint)(__assign({}, options, { responseType: responseType }));\r\n}; }; };\r\nvar _fetchUrlOverride = function (responseType) { return function (endpoint) {\r\n    return fletch(endpoint)({ responseType: responseType });\r\n}; };\r\n//Fetches the specific data. Overrides the responseType, but otherwise all Xhr settings are allowed\r\nvar fetchArrayBuffer = _fetchOverride(\"arraybuffer\");\r\nvar fetchText = _fetchOverride(\"text\");\r\nvar fetchBlob = _fetchOverride(\"blob\");\r\nvar fetchXml = _fetchOverride(\"document\");\r\n//Json will use query as default here since it's the typical case here (and can still be overridden)\r\nvar fetchJson = function (endpoint) { return function (options) { return _fetchOverride(\"json\")(endpoint)(__assign({ requestType: \"query\" }, options)); }; };\r\n//wrapper over fletch for cases it's just the url\r\n//Same as fetch* but without any Xhr options (simple url get)\r\nvar fetchArrayBufferUrl = _fetchUrlOverride(\"arraybuffer\");\r\nvar fetchJsonUrl = _fetchUrlOverride(\"json\");\r\nvar fetchTextUrl = _fetchUrlOverride(\"text\");\r\nvar fetchBlobUrl = _fetchUrlOverride(\"blob\");\r\nvar fetchXmlUrl = _fetchUrlOverride(\"document\");\n\nvar BlobLoader = function (read) { return function (blob) { return Future(function (reject, resolve) {\r\n    var fileReader = new FileReader();\r\n    fileReader.onload = function () { return resolve(fileReader.result); };\r\n    fileReader.onerror = function (err) { return reject(err); };\r\n    read([fileReader, blob]);\r\n    return function () { return fileReader.abort(); };\r\n}); }; };\r\nvar loadBlobAsArrayBuffer = BlobLoader(function (_a) {\r\n    var fileReader = _a[0], blob = _a[1];\r\n    return fileReader.readAsArrayBuffer(blob);\r\n});\r\nvar loadBlobAsDataUrl = BlobLoader(function (_a) {\r\n    var fileReader = _a[0], blob = _a[1];\r\n    return fileReader.readAsDataURL(blob);\r\n});\r\nvar loadblobAsText = BlobLoader(function (_a) {\r\n    var fileReader = _a[0], blob = _a[1];\r\n    return fileReader.readAsText(blob);\r\n});\n\nvar loadAudioBuffer = function (ctx) { return function (data) { return Future(function (reject, resolve) {\r\n    ctx.decodeAudioData(data, resolve, reject);\r\n}); }; };\n\nvar VideoPlayer = function (_a) {\r\n    var url = _a.url, crossOrigin = _a.crossOrigin;\r\n    return Future(function (reject, resolve) {\r\n        var playing = false;\r\n        var timeupdate = false;\r\n        var video = document.createElement('video');\r\n        video.autoplay = true;\r\n        video.muted = true;\r\n        video.loop = true;\r\n        S.map(function (x) { return video.crossOrigin = x; })(crossOrigin);\r\n        var checkReady = function () {\r\n            if (playing && timeupdate) {\r\n                resolve(video);\r\n            }\r\n        };\r\n        video.addEventListener('playing', function () {\r\n            playing = true;\r\n            checkReady();\r\n        }, true);\r\n        video.addEventListener('timeupdate', function () {\r\n            timeupdate = true;\r\n            checkReady();\r\n        }, true);\r\n        video.src = url;\r\n        video.play();\r\n    });\r\n};\r\nvar playVideo = function (url) { return VideoPlayer({ url: url, crossOrigin: !sameOrigin(url) ? S.Just(\"anonymous\") : S.Nothing }); };\n\nexport { ImageLoader, fetchImage, loadImageFromUrl, loadImageFromArrayBuffer, XhrLoader, fletch, fetchUrl, fetchArrayBuffer, fetchText, fetchBlob, fetchXml, fetchJson, fetchArrayBufferUrl, fetchJsonUrl, fetchTextUrl, fetchBlobUrl, fetchXmlUrl, BlobLoader, loadBlobAsArrayBuffer, loadBlobAsDataUrl, loadblobAsText, loadAudioBuffer, VideoPlayer, playVideo };\n//# sourceMappingURL=lib.esm.js.map\n","/*    #######\n   ####     ####\n ####   ###   ####\n#####   ###########   sanctuary\n########   ########   noun\n###########   #####   1 [ mass noun ] refuge from unsafe JavaScript\n ####   ###   ####\n   ####     ####\n      #######    */\n\n//. # Sanctuary\n//.\n//. [![npm](https://img.shields.io/npm/v/sanctuary.svg)](https://www.npmjs.com/package/sanctuary)\n//. [![CircleCI](https://img.shields.io/circleci/project/github/sanctuary-js/sanctuary/master.svg)](https://circleci.com/gh/sanctuary-js/sanctuary/tree/master)\n//. [![Gitter](https://img.shields.io/gitter/room/badges/shields.svg)](https://gitter.im/sanctuary-js/sanctuary)\n//.\n//. Sanctuary is a JavaScript functional programming library inspired by\n//. [Haskell][] and [PureScript][]. It's stricter than [Ramda][], and\n//. provides a similar suite of functions.\n//.\n//. Sanctuary promotes programs composed of simple, pure functions. Such\n//. programs are easier to comprehend, test, and maintain &ndash; they are\n//. also a pleasure to write.\n//.\n//. Sanctuary provides two data types, [Maybe][] and [Either][], both of\n//. which are compatible with [Fantasy Land][]. Thanks to these data types\n//. even Sanctuary functions which may fail, such as [`head`](#head), are\n//. composable.\n//.\n//. Sanctuary makes it possible to write safe code without null checks.\n//. In JavaScript it's trivial to introduce a possible run-time type error:\n//.\n//.     words[0].toUpperCase()\n//.\n//. If `words` is `[]` we'll get a familiar error at run-time:\n//.\n//.     TypeError: Cannot read property 'toUpperCase' of undefined\n//.\n//. Sanctuary gives us a fighting chance of avoiding such errors. We might\n//. write:\n//.\n//.     S.map (S.toUpper) (S.head (words))\n//.\n//. Sanctuary is designed to work in Node.js and in ES5-compatible browsers.\n//.\n//. ## Ramda\n//.\n//. [Ramda][] provides several functions which return problematic values\n//. such as `undefined`, `Infinity`, or `NaN` when applied to unsuitable\n//. inputs. These are known as [partial functions][]. Partial functions\n//. necessitate the use of guards or null checks. In order to safely use\n//. `R.head`, for example, one must ensure that the array is non-empty:\n//.\n//.     if (R.isEmpty (xs)) {\n//.       // ...\n//.     } else {\n//.       return f (R.head (xs));\n//.     }\n//.\n//. Using the Maybe type renders such guards (and null checks) unnecessary.\n//. Changing functions such as `R.head` to return Maybe values was proposed\n//. in [ramda/ramda#683][], but was considered too much of a stretch for\n//. JavaScript programmers. Sanctuary was released the following month,\n//. in January 2015, as a companion library to Ramda.\n//.\n//. In addition to broadening in scope in the years since its release,\n//. Sanctuary's philosophy has diverged from Ramda's in several respects.\n//.\n//. ### Totality\n//.\n//. Every Sanctuary function is defined for every value which is a member of\n//. the function's input type. Such functions are known as [total functions][].\n//. Ramda, on the other hand, contains a number of [partial functions][].\n//.\n//. ### Information preservation\n//.\n//. Certain Sanctuary functions preserve more information than their Ramda\n//. counterparts. Examples:\n//.\n//.     |> R.tail ([])                      |> S.tail ([])\n//.     []                                  Nothing\n//.\n//.     |> R.tail (['foo'])                 |> S.tail (['foo'])\n//.     []                                  Just ([])\n//.\n//.     |> R.replace (/^x/) ('') ('abc')    |> S.stripPrefix ('x') ('abc')\n//.     'abc'                               Nothing\n//.\n//.     |> R.replace (/^x/) ('') ('xabc')   |> S.stripPrefix ('x') ('xabc')\n//.     'abc'                               Just ('abc')\n//.\n//. ### Invariants\n//.\n//. Sanctuary performs rigorous [type checking][] of inputs and outputs, and\n//. throws a descriptive error if a type error is encountered. This allows bugs\n//. to be caught and fixed early in the development cycle.\n//.\n//. Ramda operates on the [garbage in, garbage out][GIGO] principal. Functions\n//. are documented to take arguments of particular types, but these invariants\n//. are not enforced. The problem with this approach in a language as\n//. permissive as JavaScript is that there's no guarantee that garbage input\n//. will produce garbage output ([ramda/ramda#1413][]). Ramda performs ad hoc\n//. type checking in some such cases ([ramda/ramda#1419][]).\n//.\n//. Sanctuary can be configured to operate in garbage in, garbage out mode.\n//. Ramda cannot be configured to enforce its invariants.\n//.\n//. ### Currying\n//.\n//. Sanctuary functions are curried. There is, for example, exactly one way to\n//. apply `S.reduce` to `S.add`, `0`, and `xs`:\n//.\n//.   - `S.reduce (S.add) (0) (xs)`\n//.\n//. Ramda functions are also curried, but in a complex manner. There are four\n//. ways to apply `R.reduce` to `R.add`, `0`, and `xs`:\n//.\n//.   - `R.reduce (R.add) (0) (xs)`\n//.   - `R.reduce (R.add) (0, xs)`\n//.   - `R.reduce (R.add, 0) (xs)`\n//.   - `R.reduce (R.add, 0, xs)`\n//.\n//. Ramda supports all these forms because curried functions enable partial\n//. application, one of the library's tenets, but `f(x)(y)(z)` is considered\n//. too unfamiliar and too unattractive to appeal to JavaScript programmers.\n//.\n//. Sanctuary's developers prefer a simple, unfamiliar construct to a complex,\n//. familiar one. Familiarity can be acquired; complexity is intrinsic.\n//.\n//. The lack of breathing room in `f(x)(y)(z)` impairs readability. The simple\n//. solution to this problem, proposed in [#438][], is to include a space when\n//. applying a function: `f (x) (y) (z)`.\n//.\n//. Ramda also provides a special placeholder value, [`R.__`][], which removes\n//. the restriction that a function must be applied to its arguments in order.\n//. The following expressions are equivalent:\n//.\n//.   - `R.reduce (R.__, 0, xs) (R.add)`\n//.   - `R.reduce (R.add, R.__, xs) (0)`\n//.   - `R.reduce (R.__, 0) (R.add) (xs)`\n//.   - `R.reduce (R.__, 0) (R.add, xs)`\n//.   - `R.reduce (R.__, R.__, xs) (R.add) (0)`\n//.   - `R.reduce (R.__, R.__, xs) (R.add, 0)`\n//.\n//. ### Variadic functions\n//.\n//. Ramda provides several functions which take any number of arguments. These\n//. are known as [variadic functions][]. Additionally, Ramda provides several\n//. functions which take variadic functions as arguments. Although natural in\n//. a dynamically typed language, variadic functions are at odds with the type\n//. notation Ramda and Sanctuary both use, leading to some indecipherable type\n//. signatures such as this one:\n//.\n//.     R.lift :: (*... -> *...) -> ([*]... -> [*])\n//.\n//. Sanctuary has no variadic functions, nor any functions which take variadic\n//. functions as arguments. Sanctuary provides two \"lift\" functions, each with\n//. a helpful type signature:\n//.\n//.     S.lift2 :: Apply f => (a -> b -> c) -> f a -> f b -> f c\n//.     S.lift3 :: Apply f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d\n//.\n//. ### Implicit context\n//.\n//. Ramda provides [`R.bind`][] and [`R.invoker`][] for working with methods.\n//. Additionally, many Ramda functions use `Function#call` or `Function#apply`\n//. to preserve context. Sanctuary makes no allowances for `this`.\n//.\n//. ### Transducers\n//.\n//. Several Ramda functions act as transducers. Sanctuary provides no support\n//. for transducers.\n//.\n//. ### Modularity\n//.\n//. Whereas Ramda has no dependencies, Sanctuary has a modular design:\n//. [sanctuary-def][] provides type checking, [sanctuary-type-classes][]\n//. provides Fantasy Land functions and type classes, [sanctuary-show][]\n//. provides string representations, and algebraic data types are provided\n//. by [sanctuary-either][], [sanctuary-maybe][], and [sanctuary-pair][].\n//. Not only does this approach reduce the complexity of Sanctuary itself,\n//. but it allows these components to be reused in other contexts.\n//.\n//. ## Types\n//.\n//. Sanctuary uses Haskell-like type signatures to describe the types of\n//. values, including functions. `'foo'`, for example, is a member of `String`;\n//. `[1, 2, 3]` is a member of `Array Number`. The double colon (`::`) is used\n//. to mean \"is a member of\", so one could write:\n//.\n//.     'foo' :: String\n//.     [1, 2, 3] :: Array Number\n//.\n//. An identifier may appear to the left of the double colon:\n//.\n//.     Math.PI :: Number\n//.\n//. The arrow (`->`) is used to express a function's type:\n//.\n//.     Math.abs :: Number -> Number\n//.\n//. That states that `Math.abs` is a unary function which takes an argument\n//. of type `Number` and returns a value of type `Number`.\n//.\n//. Some functions are parametrically polymorphic: their types are not fixed.\n//. Type variables are used in the representations of such functions:\n//.\n//.     S.I :: a -> a\n//.\n//. `a` is a type variable. Type variables are not capitalized, so they\n//. are differentiable from type identifiers (which are always capitalized).\n//. By convention type variables have single-character names. The signature\n//. above states that `S.I` takes a value of any type and returns a value of\n//. the same type. Some signatures feature multiple type variables:\n//.\n//.     S.K :: a -> b -> a\n//.\n//. It must be possible to replace all occurrences of `a` with a concrete type.\n//. The same applies for each other type variable. For the function above, the\n//. types with which `a` and `b` are replaced may be different, but needn't be.\n//.\n//. Since all Sanctuary functions are curried (they accept their arguments\n//. one at a time), a binary function is represented as a unary function which\n//. returns a unary function: `* -> * -> *`. This aligns neatly with Haskell,\n//. which uses curried functions exclusively. In JavaScript, though, we may\n//. wish to represent the types of functions with arities less than or greater\n//. than one. The general form is `(<input-types>) -> <output-type>`, where\n//. `<input-types>` comprises zero or more comma–space (<code>, </code>)\n//. -separated type representations:\n//.\n//.   - `() -> String`\n//.   - `(a, b) -> a`\n//.   - `(a, b, c) -> d`\n//.\n//. `Number -> Number` can thus be seen as shorthand for `(Number) -> Number`.\n//.\n//. The question mark (`?`) is used to represent types which include `null`\n//. and `undefined` as members. `String?`, for example, represents the type\n//. comprising `null`, `undefined`, and all strings.\n//.\n//. Sanctuary embraces types. JavaScript doesn't support algebraic data types,\n//. but these can be simulated by providing a group of data constructors which\n//. return values with the same set of methods. A value of the Either type, for\n//. example, is created via the Left constructor or the Right constructor.\n//.\n//. It's necessary to extend Haskell's notation to describe implicit arguments\n//. to the *methods* provided by Sanctuary's types. In `x.map(y)`, for example,\n//. the `map` method takes an implicit argument `x` in addition to the explicit\n//. argument `y`. The type of the value upon which a method is invoked appears\n//. at the beginning of the signature, separated from the arguments and return\n//. value by a squiggly arrow (`~>`). The type of the `fantasy-land/map` method\n//. of the Maybe type is written `Maybe a ~> (a -> b) -> Maybe b`. One could\n//. read this as:\n//.\n//. _When the `fantasy-land/map` method is invoked on a value of type `Maybe a`\n//. (for any type `a`) with an argument of type `a -> b` (for any type `b`),\n//. it returns a value of type `Maybe b`._\n//.\n//. The squiggly arrow is also used when representing non-function properties.\n//. `Maybe a ~> Boolean`, for example, represents a Boolean property of a value\n//. of type `Maybe a`.\n//.\n//. Sanctuary supports type classes: constraints on type variables. Whereas\n//. `a -> a` implicitly supports every type, `Functor f => (a -> b) -> f a ->\n//. f b` requires that `f` be a type which satisfies the requirements of the\n//. Functor type class. Type-class constraints appear at the beginning of a\n//. type signature, separated from the rest of the signature by a fat arrow\n//. (`=>`).\n//.\n//. ## Type checking\n//.\n//. Sanctuary functions are defined via [sanctuary-def][] to provide run-time\n//. type checking. This is tremendously useful during development: type errors\n//. are reported immediately, avoiding circuitous stack traces (at best) and\n//. silent failures due to type coercion (at worst). For example:\n//.\n//. ```javascript\n//. S.add (2) (true);\n//. // ! TypeError: Invalid value\n//. //\n//. //   add :: FiniteNumber -> FiniteNumber -> FiniteNumber\n//. //                          ^^^^^^^^^^^^\n//. //                               1\n//. //\n//. //   1)  true :: Boolean\n//. //\n//. //   The value at position 1 is not a member of ‘FiniteNumber’.\n//. //\n//. //   See v:sanctuary-js/sanctuary-def#FiniteNumber for information about the sanctuary-def/FiniteNumber type.\n//. ```\n//.\n//. Compare this to the behaviour of Ramda's unchecked equivalent:\n//.\n//. ```javascript\n//. R.add (2) (true);\n//. // => 3\n//. ```\n//.\n//. There is a performance cost to run-time type checking. Type checking is\n//. disabled by default if `process.env.NODE_ENV` is `'production'`. If this\n//. rule is unsuitable for a given program, one may use [`create`](#create)\n//. to create a Sanctuary module based on a different rule. For example:\n//.\n//. ```javascript\n//. const S = sanctuary.create ({\n//.   checkTypes: localStorage.getItem ('SANCTUARY_CHECK_TYPES') === 'true',\n//.   env: sanctuary.env,\n//. });\n//. ```\n//.\n//. Occasionally one may wish to perform an operation which is not type safe,\n//. such as mapping over an object with heterogeneous values. This is possible\n//. via selective use of [`unchecked`](#unchecked) functions.\n//.\n//. ## Installation\n//.\n//. `npm install sanctuary` will install Sanctuary for use in Node.js.\n//.\n//. Running Sanctuary in the browser is more involved. One must include a\n//. `<script>` for each dependency in addition to one for Sanctuary itself:\n//.\n//. ```html\n//. <script src=\"vendor/sanctuary-show.js\"></script>\n//. <script src=\"vendor/sanctuary-type-identifiers.js\"></script>\n//. <script src=\"vendor/sanctuary-type-classes.js\"></script>\n//. <script src=\"vendor/sanctuary-either.js\"></script>\n//. <script src=\"vendor/sanctuary-maybe.js\"></script>\n//. <script src=\"vendor/sanctuary-pair.js\"></script>\n//. <script src=\"vendor/sanctuary-def.js\"></script>\n//. <script src=\"vendor/sanctuary.js\"></script>\n//. ```\n//.\n//. To ensure compatibility one should use the dependency versions specified\n//. in __package.json__.\n//.\n//. For convenience one could define aliases for various modules:\n//.\n//. ```javascript\n//. const S = window.sanctuary;\n//. const $ = window.sanctuaryDef;\n//. // ...\n//. ```\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f (require ('sanctuary-def'),\n                        require ('sanctuary-either'),\n                        require ('sanctuary-maybe'),\n                        require ('sanctuary-pair'),\n                        require ('sanctuary-show'),\n                        require ('sanctuary-type-classes'),\n                        require ('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define (['sanctuary-def',\n             'sanctuary-either',\n             'sanctuary-maybe',\n             'sanctuary-pair',\n             'sanctuary-show',\n             'sanctuary-type-classes',\n             'sanctuary-type-identifiers'],\n            f);\n  } else {\n    self.sanctuary = f (self.sanctuaryDef,\n                        self.sanctuaryEither,\n                        self.sanctuaryMaybe,\n                        self.sanctuaryPair,\n                        self.sanctuaryShow,\n                        self.sanctuaryTypeClasses,\n                        self.sanctuaryTypeIdentifiers);\n  }\n\n} (function($, Either, Maybe, Pair, show, Z, type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* eslint-disable no-unused-vars */\n    var Descending = __doctest.require ('sanctuary-descending');\n    var Nil = (__doctest.require ('./test/internal/List')).Nil;\n    var Cons = (__doctest.require ('./test/internal/List')).Cons;\n    var Sum = __doctest.require ('./test/internal/Sum');\n    var S = (function(S) {\n      //  DescendingType :: Type -> Type\n      var DescendingType = $.UnaryType\n        ('sanctuary/Descending')\n        ('')\n        (typeEq (Descending['@@type']))\n        (B (of (Array)) (Z.extract));\n\n      var S_ = S.create ({\n        checkTypes: true,\n        env: S.env.concat ([\n          DescendingType ($.Unknown),\n          (__doctest.require ('./test/internal/List')).Type ($.Unknown),\n          Sum.Type\n        ])\n      });\n      S_.env = S.env;  // see S.env doctest\n      return S_;\n    } (require ('.')));\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  Left :: a -> Either a b\n  var Left = Either.Left;\n\n  //  Right :: b -> Either a b\n  var Right = Either.Right;\n\n  //  Nothing :: Maybe a\n  var Nothing = Maybe.Nothing;\n\n  //  Just :: a -> Maybe a\n  var Just = Maybe.Just;\n\n  //  B :: (b -> c) -> (a -> b) -> a -> c\n  function B(f) {\n    return function(g) {\n      return function(x) {\n        return f (g (x));\n      };\n    };\n  }\n\n  //  C :: (a -> b -> c) -> b -> a -> c\n  function C(f) {\n    return function(y) {\n      return function(x) {\n        return f (x) (y);\n      };\n    };\n  }\n\n  //  Fn :: Type -> Type -> Type\n  function Fn(x) {\n    return function(y) {\n      return $.Function ([x, y]);\n    };\n  }\n\n  //  get_ :: String -> a -> Maybe b\n  function get_(key) {\n    return B (function(obj) { return key in obj ? Just (obj[key]) : Nothing; })\n             (toObject);\n  }\n\n  //  invoke0 :: String -> a -> b\n  function invoke0(name) {\n    return function(target) {\n      return target[name] ();\n    };\n  }\n\n  //  invoke1 :: String -> a -> b -> c\n  function invoke1(name) {\n    return function(x) {\n      return function(target) {\n        return target[name] (x);\n      };\n    };\n  }\n\n  //  toObject :: a -> Object\n  function toObject(x) {\n    return x == null ? Object.create (null) : Object (x);\n  }\n\n  //  typeEq :: String -> a -> Boolean\n  function typeEq(typeIdent) {\n    return function(x) {\n      return type (x) === typeIdent;\n    };\n  }\n\n  //  value :: { value :: a } -> a\n  function value(r) {\n    return r.value;\n  }\n\n  //  :: Type\n  var a = $.TypeVariable ('a');\n  var b = $.TypeVariable ('b');\n  var c = $.TypeVariable ('c');\n  var d = $.TypeVariable ('d');\n  var e = $.TypeVariable ('e');\n  var g = $.TypeVariable ('g');\n  var l = $.TypeVariable ('l');\n  var r = $.TypeVariable ('r');\n\n  //  :: Type -> Type\n  var f = $.UnaryTypeVariable ('f');\n  var m = $.UnaryTypeVariable ('m');\n  var t = $.UnaryTypeVariable ('t');\n  var w = $.UnaryTypeVariable ('w');\n\n  //  :: Type -> Type -> Type\n  var p = $.BinaryTypeVariable ('p');\n  var s = $.BinaryTypeVariable ('s');\n\n  //  $Either :: Type -> Type -> Type\n  var $Either = $.BinaryType\n    ('sanctuary/Either')\n    ('https://github.com/sanctuary-js/sanctuary-either')\n    (typeEq ('sanctuary-either/Either@1'))\n    (either (of (Array)) (K ([])))\n    (either (K ([])) (of (Array)));\n\n  //  $Maybe :: Type -> Type\n  var $Maybe = $.UnaryType\n    ('sanctuary/Maybe')\n    ('https://github.com/sanctuary-js/sanctuary-maybe')\n    (typeEq ('sanctuary-maybe/Maybe@1'))\n    (maybe ([]) (of (Array)));\n\n  //  $Pair :: Type -> Type -> Type\n  var $Pair = $.BinaryType\n    ('sanctuary/Pair')\n    ('https://github.com/sanctuary-js/sanctuary-pair')\n    (typeEq ('sanctuary-pair/Pair@1'))\n    (function(pair) { return [pair.fst]; })\n    (function(pair) { return [pair.snd]; });\n\n  //  TypeRep :: Type -> Type\n  var TypeRep = $.UnaryType\n    ('sanctuary/TypeRep')\n    ('https://github.com/fantasyland/fantasy-land#type-representatives')\n    (function(x) {\n       return $.AnyFunction._test (x) ||\n              x != null && $.String._test (x['@@type']);\n     })\n    (K ([]));\n\n  //  Options :: Type\n  var Options = $.RecordType ({checkTypes: $.Boolean, env: $.Array ($.Any)});\n\n  var _ = {};\n\n  //. ### Configure\n\n  //# create :: { checkTypes :: Boolean, env :: Array Type } -> Module\n  //.\n  //. Takes an options record and returns a Sanctuary module. `checkTypes`\n  //. specifies whether to enable type checking. The module's polymorphic\n  //. functions (such as [`I`](#I)) require each value associated with a\n  //. type variable to be a member of at least one type in the environment.\n  //.\n  //. A well-typed application of a Sanctuary function will produce the same\n  //. result regardless of whether type checking is enabled. If type checking\n  //. is enabled, a badly typed application will produce an exception with a\n  //. descriptive error message.\n  //.\n  //. The following snippet demonstrates defining a custom type and using\n  //. `create` to produce a Sanctuary module which is aware of that type:\n  //.\n  //. ```javascript\n  //. const {create, env} = require ('sanctuary');\n  //. const $ = require ('sanctuary-def');\n  //. const type = require ('sanctuary-type-identifiers');\n  //.\n  //. //    Identity :: a -> Identity a\n  //. const Identity = x => {\n  //.   const identity = Object.create (Identity$prototype);\n  //.   identity.value = x;\n  //.   return identity;\n  //. };\n  //.\n  //. Identity['@@type'] = 'my-package/Identity@1';\n  //.\n  //. const Identity$prototype = {\n  //.   'constructor': Identity,\n  //.   '@@show': function() { return `Identity (${S.show (this.value)})`; },\n  //.   'fantasy-land/map': function(f) { return Identity (f (this.value)); },\n  //. };\n  //.\n  //. //    IdentityType :: Type -> Type\n  //. const IdentityType = $.UnaryType\n  //.   (Identity['@@type'])\n  //.   ('http://example.com/my-package#Identity')\n  //.   (x => type (x) === Identity['@@type'])\n  //.   (identity => [identity.value]);\n  //.\n  //. const S = create ({\n  //.   checkTypes: process.env.NODE_ENV !== 'production',\n  //.   env: env.concat ([IdentityType ($.Unknown)]),\n  //. });\n  //.\n  //. S.map (S.sub (1)) (Identity (43));\n  //. // => Identity (42)\n  //. ```\n  //.\n  //. See also [`env`](#env).\n  function create(opts) {\n    var def = $.create (opts);\n    var S = {\n      env: opts.env,\n      is: def ('is') ({}) ([$.Type, $.Any, $.Boolean]) ($.test (opts.env)),\n      MaybeType: $Maybe,\n      Maybe: Maybe,\n      Nothing: Nothing,\n      EitherType: $Either,\n      Either: Either,\n      PairType: $Pair\n    };\n    (Object.keys (_)).forEach (function(name) {\n      S[name] = def (name) (_[name].consts) (_[name].types) (_[name].impl);\n    });\n    S.unchecked = opts.checkTypes ? create ({checkTypes: false, env: opts.env})\n                                  : S;\n    return S;\n  }\n  _.create = {\n    consts: {},\n    types: [Options, $.Object],\n    impl: create\n  };\n\n  //# env :: Array Type\n  //.\n  //. The Sanctuary module's environment (`(S.create ({checkTypes, env})).env`\n  //. is a reference to `env`). Useful in conjunction with [`create`](#create).\n  //.\n  //. ```javascript\n  //. > S.env\n  //. [ $.AnyFunction,\n  //. . $.Arguments,\n  //. . $.Array ($.Unknown),\n  //. . $.Boolean,\n  //. . $.Date,\n  //. . $.Error,\n  //. . $.HtmlElement,\n  //. . $.Null,\n  //. . $.Number,\n  //. . $.Object,\n  //. . $.RegExp,\n  //. . $.StrMap ($.Unknown),\n  //. . $.String,\n  //. . $.Symbol,\n  //. . $.Undefined,\n  //. . $.FiniteNumber,\n  //. . $.NonZeroFiniteNumber,\n  //. . S.EitherType ($.Unknown) ($.Unknown),\n  //. . $.Function ([$.Unknown, $.Unknown]),\n  //. . $.GlobalRegExp,\n  //. . $.NonGlobalRegExp,\n  //. . $.Integer,\n  //. . $.NonNegativeInteger,\n  //. . S.MaybeType ($.Unknown),\n  //. . $.Array2 ($.Unknown) ($.Unknown),\n  //. . S.PairType ($.Unknown) ($.Unknown),\n  //. . $.RegexFlags,\n  //. . $.Type,\n  //. . $.TypeClass,\n  //. . $.ValidDate,\n  //. . $.ValidNumber ]\n  //. ```\n\n  //# unchecked :: Module\n  //.\n  //. A complete Sanctuary module which performs no type checking. This is\n  //. useful as it permits operations which Sanctuary's type checking would\n  //. disallow, such as mapping over an object with heterogeneous values.\n  //.\n  //. See also [`create`](#create).\n  //.\n  //. ```javascript\n  //. > S.unchecked.map (S.show) ({x: 'foo', y: true, z: 42})\n  //. {x: '\"foo\"', y: 'true', z: '42'}\n  //. ```\n  //.\n  //. Opting out of type checking may cause type errors to go unnoticed.\n  //.\n  //. ```javascript\n  //. > S.unchecked.add (2) ('2')\n  //. '22'\n  //. ```\n\n  //. ### Classify\n\n  //# type :: Any -> { namespace :: Maybe String, name :: String, version :: NonNegativeInteger }\n  //.\n  //. Returns the result of parsing the [type identifier][] of the given value.\n  //.\n  //. ```javascript\n  //. > S.type (S.Just (42))\n  //. {namespace: Just ('sanctuary-maybe'), name: 'Maybe', version: 1}\n  //.\n  //. > S.type ([1, 2, 3])\n  //. {namespace: Nothing, name: 'Array', version: 0}\n  //. ```\n  function type_(x) {\n    var r = type.parse (type (x));\n    r.namespace = toMaybe (r.namespace);\n    return r;\n  }\n  _.type = {\n    consts: {},\n    types: [$.Any,\n            $.RecordType ({namespace: $Maybe ($.String),\n                           name: $.String,\n                           version: $.NonNegativeInteger})],\n    impl: type_\n  };\n\n  //# is :: Type -> Any -> Boolean\n  //.\n  //. Returns `true` [iff][] the given value is a member of the specified type.\n  //. See [`$.test`][] for details.\n  //.\n  //. ```javascript\n  //. > S.is ($.Array ($.Integer)) ([1, 2, 3])\n  //. true\n  //.\n  //. > S.is ($.Array ($.Integer)) ([1, 2, 3.14])\n  //. false\n  //. ```\n\n  //. ### Showable\n\n  //# show :: Any -> String\n  //.\n  //. Alias of [`show`][].\n  //.\n  //. ```javascript\n  //. > S.show (-0)\n  //. '-0'\n  //.\n  //. > S.show (['foo', 'bar', 'baz'])\n  //. '[\"foo\", \"bar\", \"baz\"]'\n  //.\n  //. > S.show ({x: 1, y: 2, z: 3})\n  //. '{\"x\": 1, \"y\": 2, \"z\": 3}'\n  //.\n  //. > S.show (S.Left (S.Right (S.Just (S.Nothing))))\n  //. 'Left (Right (Just (Nothing)))'\n  //. ```\n  _.show = {\n    consts: {},\n    types: [$.Any, $.String],\n    impl: show\n  };\n\n  //. ### Fantasy Land\n  //.\n  //. Sanctuary is compatible with the [Fantasy Land][] specification.\n\n  //# equals :: Setoid a => a -> a -> Boolean\n  //.\n  //. Curried version of [`Z.equals`][] which requires two arguments of the\n  //. same type.\n  //.\n  //. To compare values of different types first use [`create`](#create) to\n  //. create a Sanctuary module with type checking disabled, then use that\n  //. module's `equals` function.\n  //.\n  //. ```javascript\n  //. > S.equals (0) (-0)\n  //. true\n  //.\n  //. > S.equals (NaN) (NaN)\n  //. true\n  //.\n  //. > S.equals (S.Just ([1, 2, 3])) (S.Just ([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals (S.Just ([1, 2, 3])) (S.Just ([1, 2, 4]))\n  //. false\n  //. ```\n  _.equals = {\n    consts: {a: [Z.Setoid]},\n    types: [a, a, $.Boolean],\n    impl: curry2 (Z.equals)\n  };\n\n  //# lt :: Ord a => a -> a -> Boolean\n  //.\n  //. Returns `true` [iff][] the *second* argument is less than the first\n  //. according to [`Z.lt`][].\n  //.\n  //. ```javascript\n  //. > S.filter (S.lt (3)) ([1, 2, 3, 4, 5])\n  //. [1, 2]\n  //. ```\n  function lt(y) {\n    return function(x) {\n      return Z.lt (x, y);\n    };\n  }\n  _.lt = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, $.Boolean],\n    impl: lt\n  };\n\n  //# lte :: Ord a => a -> a -> Boolean\n  //.\n  //. Returns `true` [iff][] the *second* argument is less than or equal to\n  //. the first according to [`Z.lte`][].\n  //.\n  //. ```javascript\n  //. > S.filter (S.lte (3)) ([1, 2, 3, 4, 5])\n  //. [1, 2, 3]\n  //. ```\n  function lte(y) {\n    return function(x) {\n      return Z.lte (x, y);\n    };\n  }\n  _.lte = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, $.Boolean],\n    impl: lte\n  };\n\n  //# gt :: Ord a => a -> a -> Boolean\n  //.\n  //. Returns `true` [iff][] the *second* argument is greater than the first\n  //. according to [`Z.gt`][].\n  //.\n  //. ```javascript\n  //. > S.filter (S.gt (3)) ([1, 2, 3, 4, 5])\n  //. [4, 5]\n  //. ```\n  function gt(y) {\n    return function(x) {\n      return Z.gt (x, y);\n    };\n  }\n  _.gt = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, $.Boolean],\n    impl: gt\n  };\n\n  //# gte :: Ord a => a -> a -> Boolean\n  //.\n  //. Returns `true` [iff][] the *second* argument is greater than or equal\n  //. to the first according to [`Z.gte`][].\n  //.\n  //. ```javascript\n  //. > S.filter (S.gte (3)) ([1, 2, 3, 4, 5])\n  //. [3, 4, 5]\n  //. ```\n  function gte(y) {\n    return function(x) {\n      return Z.gte (x, y);\n    };\n  }\n  _.gte = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, $.Boolean],\n    impl: gte\n  };\n\n  //# min :: Ord a => a -> a -> a\n  //.\n  //. Returns the smaller of its two arguments (according to [`Z.lte`][]).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > S.min (10) (2)\n  //. 2\n  //.\n  //. > S.min (new Date ('1999-12-31')) (new Date ('2000-01-01'))\n  //. new Date ('1999-12-31')\n  //.\n  //. > S.min ('10') ('2')\n  //. '10'\n  //. ```\n  _.min = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, a],\n    impl: curry2 (Z.min)\n  };\n\n  //# max :: Ord a => a -> a -> a\n  //.\n  //. Returns the larger of its two arguments (according to [`Z.lte`][]).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > S.max (10) (2)\n  //. 10\n  //.\n  //. > S.max (new Date ('1999-12-31')) (new Date ('2000-01-01'))\n  //. new Date ('2000-01-01')\n  //.\n  //. > S.max ('10') ('2')\n  //. '2'\n  //. ```\n  _.max = {\n    consts: {a: [Z.Ord]},\n    types: [a, a, a],\n    impl: curry2 (Z.max)\n  };\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.id`][].\n  //.\n  //. ```javascript\n  //. > S.id (Function) (42)\n  //. 42\n  //. ```\n  _.id = {\n    consts: {c: [Z.Category]},\n    types: [TypeRep (c), c],\n    impl: Z.id\n  };\n\n  //# concat :: Semigroup a => a -> a -> a\n  //.\n  //. Curried version of [`Z.concat`][].\n  //.\n  //. ```javascript\n  //. > S.concat ('abc') ('def')\n  //. 'abcdef'\n  //.\n  //. > S.concat ([1, 2, 3]) ([4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > S.concat ({x: 1, y: 2}) ({y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > S.concat (S.Just ([1, 2, 3])) (S.Just ([4, 5, 6]))\n  //. Just ([1, 2, 3, 4, 5, 6])\n  //.\n  //. > S.concat (Sum (18)) (Sum (24))\n  //. Sum (42)\n  //. ```\n  _.concat = {\n    consts: {a: [Z.Semigroup]},\n    types: [a, a, a],\n    impl: curry2 (Z.concat)\n  };\n\n  //# empty :: Monoid a => TypeRep a -> a\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.empty`][].\n  //.\n  //. ```javascript\n  //. > S.empty (String)\n  //. ''\n  //.\n  //. > S.empty (Array)\n  //. []\n  //.\n  //. > S.empty (Object)\n  //. {}\n  //.\n  //. > S.empty (Sum)\n  //. Sum (0)\n  //. ```\n  _.empty = {\n    consts: {a: [Z.Monoid]},\n    types: [TypeRep (a), a],\n    impl: Z.empty\n  };\n\n  //# invert :: Group g => g -> g\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.invert`][].\n  //.\n  //. ```javascript\n  //. > S.invert (Sum (5))\n  //. Sum (-5)\n  //. ```\n  _.invert = {\n    consts: {g: [Z.Group]},\n    types: [g, g],\n    impl: Z.invert\n  };\n\n  //# filter :: Filterable f => (a -> Boolean) -> f a -> f a\n  //.\n  //. Curried version of [`Z.filter`][]. Discards every element which does not\n  //. satisfy the predicate.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > S.filter (S.odd) ([1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > S.filter (S.odd) ({x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > S.filter (S.odd) (S.Nothing)\n  //. Nothing\n  //.\n  //. > S.filter (S.odd) (S.Just (0))\n  //. Nothing\n  //.\n  //. > S.filter (S.odd) (S.Just (1))\n  //. Just (1)\n  //. ```\n  function filter(pred) {\n    return function(filterable) {\n      return Z.filter (pred, filterable);\n    };\n  }\n  _.filter = {\n    consts: {f: [Z.Filterable]},\n    types: [$.Predicate (a), f (a), f (a)],\n    impl: filter\n  };\n\n  //# reject :: Filterable f => (a -> Boolean) -> f a -> f a\n  //.\n  //. Curried version of [`Z.reject`][]. Discards every element which satisfies\n  //. the predicate.\n  //.\n  //. See also [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > S.reject (S.odd) ([1, 2, 3])\n  //. [2]\n  //.\n  //. > S.reject (S.odd) ({x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > S.reject (S.odd) (S.Nothing)\n  //. Nothing\n  //.\n  //. > S.reject (S.odd) (S.Just (0))\n  //. Just (0)\n  //.\n  //. > S.reject (S.odd) (S.Just (1))\n  //. Nothing\n  //. ```\n  _.reject = {\n    consts: {f: [Z.Filterable]},\n    types: [$.Predicate (a), f (a), f (a)],\n    impl: curry2 (Z.reject)\n  };\n\n  //# takeWhile :: Filterable f => (a -> Boolean) -> f a -> f a\n  //.\n  //. Curried version of [`Z.takeWhile`][]. Discards the first element which\n  //. does not satisfy the predicate, and all subsequent elements.\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > S.takeWhile (S.odd) ([3, 3, 3, 7, 6, 3, 5, 4])\n  //. [3, 3, 3, 7]\n  //.\n  //. > S.takeWhile (S.even) ([3, 3, 3, 7, 6, 3, 5, 4])\n  //. []\n  //. ```\n  _.takeWhile = {\n    consts: {f: [Z.Filterable]},\n    types: [$.Predicate (a), f (a), f (a)],\n    impl: curry2 (Z.takeWhile)\n  };\n\n  //# dropWhile :: Filterable f => (a -> Boolean) -> f a -> f a\n  //.\n  //. Curried version of [`Z.dropWhile`][]. Retains the first element which\n  //. does not satisfy the predicate, and all subsequent elements.\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > S.dropWhile (S.odd) ([3, 3, 3, 7, 6, 3, 5, 4])\n  //. [6, 3, 5, 4]\n  //.\n  //. > S.dropWhile (S.even) ([3, 3, 3, 7, 6, 3, 5, 4])\n  //. [3, 3, 3, 7, 6, 3, 5, 4]\n  //. ```\n  _.dropWhile = {\n    consts: {f: [Z.Filterable]},\n    types: [$.Predicate (a), f (a), f (a)],\n    impl: curry2 (Z.dropWhile)\n  };\n\n  //# map :: Functor f => (a -> b) -> f a -> f b\n  //.\n  //. Curried version of [`Z.map`][].\n  //.\n  //. ```javascript\n  //. > S.map (Math.sqrt) ([1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > S.map (Math.sqrt) ({x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > S.map (Math.sqrt) (S.Just (9))\n  //. Just (3)\n  //.\n  //. > S.map (Math.sqrt) (S.Right (9))\n  //. Right (3)\n  //.\n  //. > S.map (Math.sqrt) (S.Pair (99980001) (99980001))\n  //. Pair (99980001) (9999)\n  //. ```\n  //.\n  //. Replacing `Functor f => f` with `Function x` produces the B combinator\n  //. from combinatory logic (i.e. [`compose`](#compose)):\n  //.\n  //.     Functor f => (a -> b) -> f a -> f b\n  //.     (a -> b) -> Function x a -> Function x b\n  //.     (a -> c) -> Function x a -> Function x c\n  //.     (b -> c) -> Function x b -> Function x c\n  //.     (b -> c) -> Function a b -> Function a c\n  //.     (b -> c) -> (a -> b) -> (a -> c)\n  //.\n  //. ```javascript\n  //. > S.map (Math.sqrt) (S.add (1)) (99)\n  //. 10\n  //. ```\n  function map(f) {\n    return function(functor) {\n      return Z.map (f, functor);\n    };\n  }\n  _.map = {\n    consts: {f: [Z.Functor]},\n    types: [Fn (a) (b), f (a), f (b)],\n    impl: map\n  };\n\n  //# flip :: Functor f => f (a -> b) -> a -> f b\n  //.\n  //. Curried version of [`Z.flip`][]. Maps over the given functions, applying\n  //. each to the given value.\n  //.\n  //. Replacing `Functor f => f` with `Function x` produces the C combinator\n  //. from combinatory logic:\n  //.\n  //.     Functor f => f (a -> b) -> a -> f b\n  //.     Function x (a -> b) -> a -> Function x b\n  //.     Function x (a -> c) -> a -> Function x c\n  //.     Function x (b -> c) -> b -> Function x c\n  //.     Function a (b -> c) -> b -> Function a c\n  //.     (a -> b -> c) -> b -> a -> c\n  //.\n  //. ```javascript\n  //. > S.flip (S.concat) ('!') ('foo')\n  //. 'foo!'\n  //.\n  //. > S.flip ([Math.floor, Math.ceil]) (1.5)\n  //. [1, 2]\n  //.\n  //. > S.flip ({floor: Math.floor, ceil: Math.ceil}) (1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > S.flip (Cons (Math.floor) (Cons (Math.ceil) (Nil))) (1.5)\n  //. Cons (1) (Cons (2) (Nil))\n  //. ```\n  _.flip = {\n    consts: {f: [Z.Functor]},\n    types: [f (Fn (a) (b)), a, f (b)],\n    impl: curry2 (Z.flip)\n  };\n\n  //# bimap :: Bifunctor f => (a -> b) -> (c -> d) -> f a c -> f b d\n  //.\n  //. Curried version of [`Z.bimap`][].\n  //.\n  //. ```javascript\n  //. > S.bimap (S.toUpper) (Math.sqrt) (S.Pair ('foo') (64))\n  //. Pair ('FOO') (8)\n  //.\n  //. > S.bimap (S.toUpper) (Math.sqrt) (S.Left ('foo'))\n  //. Left ('FOO')\n  //.\n  //. > S.bimap (S.toUpper) (Math.sqrt) (S.Right (64))\n  //. Right (8)\n  //. ```\n  _.bimap = {\n    consts: {p: [Z.Bifunctor]},\n    types: [Fn (a) (b), Fn (c) (d), p (a) (c), p (b) (d)],\n    impl: curry3 (Z.bimap)\n  };\n\n  //# mapLeft :: Bifunctor f => (a -> b) -> f a c -> f b c\n  //.\n  //. Curried version of [`Z.mapLeft`][]. Maps the given function over the left\n  //. side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > S.mapLeft (S.toUpper) (S.Pair ('foo') (64))\n  //. Pair ('FOO') (64)\n  //.\n  //. > S.mapLeft (S.toUpper) (S.Left ('foo'))\n  //. Left ('FOO')\n  //.\n  //. > S.mapLeft (S.toUpper) (S.Right (64))\n  //. Right (64)\n  //. ```\n  _.mapLeft = {\n    consts: {p: [Z.Bifunctor]},\n    types: [Fn (a) (b), p (a) (c), p (b) (c)],\n    impl: curry2 (Z.mapLeft)\n  };\n\n  //# promap :: Profunctor p => (a -> b) -> (c -> d) -> p b c -> p a d\n  //.\n  //. Curried version of [`Z.promap`][].\n  //.\n  //. ```javascript\n  //. > S.promap (Math.abs) (S.add (1)) (Math.sqrt) (-100)\n  //. 11\n  //. ```\n  _.promap = {\n    consts: {p: [Z.Profunctor]},\n    types: [Fn (a) (b), Fn (c) (d), p (b) (c), p (a) (d)],\n    impl: curry3 (Z.promap)\n  };\n\n  //# alt :: Alt f => f a -> f a -> f a\n  //.\n  //. Curried version of [`Z.alt`][].\n  //.\n  //. ```javascript\n  //. > S.alt (S.Nothing) (S.Just (1))\n  //. Just (1)\n  //.\n  //. > S.alt (S.Just (2)) (S.Just (3))\n  //. Just (2)\n  //.\n  //. > S.alt (S.Left ('X')) (S.Right (1))\n  //. Right (1)\n  //.\n  //. > S.alt (S.Right (2)) (S.Right (3))\n  //. Right (2)\n  //. ```\n  _.alt = {\n    consts: {f: [Z.Alt]},\n    types: [f (a), f (a), f (a)],\n    impl: curry2 (Z.alt)\n  };\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.zero`][].\n  //.\n  //. ```javascript\n  //. > S.zero (Array)\n  //. []\n  //.\n  //. > S.zero (Object)\n  //. {}\n  //.\n  //. > S.zero (S.Maybe)\n  //. Nothing\n  //. ```\n  _.zero = {\n    consts: {f: [Z.Plus]},\n    types: [TypeRep ($.TypeVariable ('f')), f (a)],\n    impl: Z.zero\n  };\n\n  //# reduce :: Foldable f => (b -> a -> b) -> b -> f a -> b\n  //.\n  //. Takes a curried binary function, an initial value, and a [Foldable][],\n  //. and applies the function to the initial value and the Foldable's first\n  //. value, then applies the function to the result of the previous\n  //. application and the Foldable's second value. Repeats this process\n  //. until each of the Foldable's values has been used. Returns the initial\n  //. value if the Foldable is empty; the result of the final application\n  //. otherwise.\n  //.\n  //. ```javascript\n  //. > S.reduce (S.add) (0) ([1, 2, 3, 4, 5])\n  //. 15\n  //.\n  //. > S.reduce (xs => x => S.prepend (x) (xs)) ([]) ([1, 2, 3, 4, 5])\n  //. [5, 4, 3, 2, 1]\n  //. ```\n  function reduce(f) {\n    return function(initial) {\n      return function(foldable) {\n        return Z.reduce (function(y, x) { return f (y) (x); },\n                         initial,\n                         foldable);\n      };\n    };\n  }\n  _.reduce = {\n    consts: {f: [Z.Foldable]},\n    types: [Fn (a) (Fn (b) (a)), a, f (b), a],\n    impl: reduce\n  };\n\n  //# traverse :: (Applicative f, Traversable t) => TypeRep f -> (a -> f b) -> t a -> f (t b)\n  //.\n  //. Curried version of [`Z.traverse`][].\n  //.\n  //. ```javascript\n  //. > S.traverse (Array) (S.words) (S.Just ('foo bar baz'))\n  //. [Just ('foo'), Just ('bar'), Just ('baz')]\n  //.\n  //. > S.traverse (Array) (S.words) (S.Nothing)\n  //. [Nothing]\n  //.\n  //. > S.traverse (S.Maybe) (S.parseInt (16)) (['A', 'B', 'C'])\n  //. Just ([10, 11, 12])\n  //.\n  //. > S.traverse (S.Maybe) (S.parseInt (16)) (['A', 'B', 'C', 'X'])\n  //. Nothing\n  //.\n  //. > S.traverse (S.Maybe) (S.parseInt (16)) ({a: 'A', b: 'B', c: 'C'})\n  //. Just ({a: 10, b: 11, c: 12})\n  //.\n  //. > S.traverse (S.Maybe) (S.parseInt (16)) ({a: 'A', b: 'B', c: 'C', x: 'X'})\n  //. Nothing\n  //. ```\n  _.traverse = {\n    consts: {f: [Z.Applicative], t: [Z.Traversable]},\n    types: [TypeRep ($.TypeVariable ('f')), Fn (a) (f (b)), t (a), f (t (b))],\n    impl: curry3 (Z.traverse)\n  };\n\n  //# sequence :: (Applicative f, Traversable t) => TypeRep f -> t (f a) -> f (t a)\n  //.\n  //. Curried version of [`Z.sequence`][]. Inverts the given `t (f a)`\n  //. to produce an `f (t a)`.\n  //.\n  //. ```javascript\n  //. > S.sequence (Array) (S.Just ([1, 2, 3]))\n  //. [Just (1), Just (2), Just (3)]\n  //.\n  //. > S.sequence (S.Maybe) ([S.Just (1), S.Just (2), S.Just (3)])\n  //. Just ([1, 2, 3])\n  //.\n  //. > S.sequence (S.Maybe) ([S.Just (1), S.Just (2), S.Nothing])\n  //. Nothing\n  //.\n  //. > S.sequence (S.Maybe) ({a: S.Just (1), b: S.Just (2), c: S.Just (3)})\n  //. Just ({a: 1, b: 2, c: 3})\n  //.\n  //. > S.sequence (S.Maybe) ({a: S.Just (1), b: S.Just (2), c: S.Nothing})\n  //. Nothing\n  //. ```\n  _.sequence = {\n    consts: {f: [Z.Applicative], t: [Z.Traversable]},\n    types: [TypeRep ($.TypeVariable ('f')), t (f (a)), f (t (a))],\n    impl: curry2 (Z.sequence)\n  };\n\n  //# ap :: Apply f => f (a -> b) -> f a -> f b\n  //.\n  //. Curried version of [`Z.ap`][].\n  //.\n  //. ```javascript\n  //. > S.ap ([Math.sqrt, x => x * x]) ([1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > S.ap ({x: Math.sqrt, y: S.add (1), z: S.sub (1)}) ({w: 4, x: 4, y: 4})\n  //. {x: 2, y: 5}\n  //.\n  //. > S.ap (S.Just (Math.sqrt)) (S.Just (64))\n  //. Just (8)\n  //. ```\n  //.\n  //. Replacing `Apply f => f` with `Function x` produces the S combinator\n  //. from combinatory logic:\n  //.\n  //.     Apply f => f (a -> b) -> f a -> f b\n  //.     Function x (a -> b) -> Function x a -> Function x b\n  //.     Function x (a -> c) -> Function x a -> Function x c\n  //.     Function x (b -> c) -> Function x b -> Function x c\n  //.     Function a (b -> c) -> Function a b -> Function a c\n  //.     (a -> b -> c) -> (a -> b) -> (a -> c)\n  //.\n  //. ```javascript\n  //. > S.ap (s => n => s.slice (0, n)) (s => Math.ceil (s.length / 2)) ('Haskell')\n  //. 'Hask'\n  //. ```\n  _.ap = {\n    consts: {f: [Z.Apply]},\n    types: [f (Fn (a) (b)), f (a), f (b)],\n    impl: curry2 (Z.ap)\n  };\n\n  //# lift2 :: Apply f => (a -> b -> c) -> f a -> f b -> f c\n  //.\n  //. Promotes a curried binary function to a function which operates on two\n  //. [Apply][]s.\n  //.\n  //. ```javascript\n  //. > S.lift2 (S.add) (S.Just (2)) (S.Just (3))\n  //. Just (5)\n  //.\n  //. > S.lift2 (S.add) (S.Just (2)) (S.Nothing)\n  //. Nothing\n  //.\n  //. > S.lift2 (S.and) (S.Just (true)) (S.Just (true))\n  //. Just (true)\n  //.\n  //. > S.lift2 (S.and) (S.Just (true)) (S.Just (false))\n  //. Just (false)\n  //. ```\n  _.lift2 = {\n    consts: {f: [Z.Apply]},\n    types: [Fn (a) (Fn (b) (c)), f (a), f (b), f (c)],\n    impl: curry3 (Z.lift2)\n  };\n\n  //# lift3 :: Apply f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d\n  //.\n  //. Promotes a curried ternary function to a function which operates on three\n  //. [Apply][]s.\n  //.\n  //. ```javascript\n  //. > S.lift3 (S.reduce) (S.Just (S.add)) (S.Just (0)) (S.Just ([1, 2, 3]))\n  //. Just (6)\n  //.\n  //. > S.lift3 (S.reduce) (S.Just (S.add)) (S.Just (0)) (S.Nothing)\n  //. Nothing\n  //. ```\n  _.lift3 = {\n    consts: {f: [Z.Apply]},\n    types: [Fn (a) (Fn (b) (Fn (c) (d))), f (a), f (b), f (c), f (d)],\n    impl: curry4 (Z.lift3)\n  };\n\n  //# apFirst :: Apply f => f a -> f b -> f a\n  //.\n  //. Curried version of [`Z.apFirst`][]. Combines two effectful actions,\n  //. keeping only the result of the first. Equivalent to Haskell's `(<*)`\n  //. function.\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > S.apFirst ([1, 2]) ([3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > S.apFirst (S.Just (1)) (S.Just (2))\n  //. Just (1)\n  //. ```\n  _.apFirst = {\n    consts: {f: [Z.Apply]},\n    types: [f (a), f (b), f (a)],\n    impl: curry2 (Z.apFirst)\n  };\n\n  //# apSecond :: Apply f => f a -> f b -> f b\n  //.\n  //. Curried version of [`Z.apSecond`][]. Combines two effectful actions,\n  //. keeping only the result of the second. Equivalent to Haskell's `(*>)`\n  //. function.\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > S.apSecond ([1, 2]) ([3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > S.apSecond (S.Just (1)) (S.Just (2))\n  //. Just (2)\n  //. ```\n  _.apSecond = {\n    consts: {f: [Z.Apply]},\n    types: [f (a), f (b), f (b)],\n    impl: curry2 (Z.apSecond)\n  };\n\n  //# of :: Applicative f => TypeRep f -> a -> f a\n  //.\n  //. Curried version of [`Z.of`][].\n  //.\n  //. ```javascript\n  //. > S.of (Array) (42)\n  //. [42]\n  //.\n  //. > S.of (Function) (42) (null)\n  //. 42\n  //.\n  //. > S.of (S.Maybe) (42)\n  //. Just (42)\n  //.\n  //. > S.of (S.Either) (42)\n  //. Right (42)\n  //. ```\n  function of(typeRep) {\n    return function(x) {\n      return Z.of (typeRep, x);\n    };\n  }\n  _.of = {\n    consts: {f: [Z.Applicative]},\n    types: [TypeRep ($.TypeVariable ('f')), a, f (a)],\n    impl: of\n  };\n\n  //# chain :: Chain m => (a -> m b) -> m a -> m b\n  //.\n  //. Curried version of [`Z.chain`][].\n  //.\n  //. ```javascript\n  //. > S.chain (x => [x, x]) ([1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > S.chain (n => s => s.slice (0, n)) (s => Math.ceil (s.length / 2)) ('slice')\n  //. 'sli'\n  //.\n  //. > S.chain (S.parseInt (10)) (S.Just ('123'))\n  //. Just (123)\n  //.\n  //. > S.chain (S.parseInt (10)) (S.Just ('XXX'))\n  //. Nothing\n  //. ```\n  _.chain = {\n    consts: {m: [Z.Chain]},\n    types: [Fn (a) (m (b)), m (a), m (b)],\n    impl: curry2 (Z.chain)\n  };\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.join`][].\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. ```javascript\n  //. > S.join ([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > S.join ([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > S.join (S.Just (S.Just (1)))\n  //. Just (1)\n  //.\n  //. > S.join (S.Pair ('foo') (S.Pair ('bar') ('baz')))\n  //. Pair ('foobar') ('baz')\n  //. ```\n  //.\n  //. Replacing `Chain m => m` with `Function x` produces the W combinator\n  //. from combinatory logic:\n  //.\n  //.     Chain m => m (m a) -> m a\n  //.     Function x (Function x a) -> Function x a\n  //.     (x -> x -> a) -> (x -> a)\n  //.\n  //. ```javascript\n  //. > S.join (S.concat) ('abc')\n  //. 'abcabc'\n  //. ```\n  _.join = {\n    consts: {m: [Z.Chain]},\n    types: [m (m (a)), m (a)],\n    impl: Z.join\n  };\n\n  //# chainRec :: ChainRec m => TypeRep m -> (a -> m (Either a b)) -> a -> m b\n  //.\n  //. Performs a [`chain`](#chain)-like computation with constant stack usage.\n  //. Similar to [`Z.chainRec`][], but curried and more convenient due to the\n  //. use of the Either type to indicate completion (via a Right).\n  //.\n  //. ```javascript\n  //. > S.chainRec (Array)\n  //. .            (s => s.length === 2 ? S.map (S.Right) ([s + '!', s + '?'])\n  //. .                                 : S.map (S.Left) ([s + 'o', s + 'n']))\n  //. .            ('')\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep) {\n    return function(f) {\n      return function(x) {\n        return Z.chainRec (typeRep, step, x);\n      };\n      function step(next, done, x) {\n        return Z.map (either (next) (done), f (x));\n      }\n    };\n  }\n  _.chainRec = {\n    consts: {m: [Z.ChainRec]},\n    types: [TypeRep ($.TypeVariable ('m')),\n            Fn (a) (m ($Either (a) (b))),\n            a,\n            m (b)],\n    impl: chainRec\n  };\n\n  //# extend :: Extend w => (w a -> b) -> w a -> w b\n  //.\n  //. Curried version of [`Z.extend`][].\n  //.\n  //. ```javascript\n  //. > S.extend (S.joinWith ('')) (['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > S.extend (f => f ([3, 4])) (S.reverse) ([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  _.extend = {\n    consts: {w: [Z.Extend]},\n    types: [Fn (w (a)) (b), w (a), w (b)],\n    impl: curry2 (Z.extend)\n  };\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.duplicate`][].\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. ```javascript\n  //. > S.duplicate (S.Just (1))\n  //. Just (Just (1))\n  //.\n  //. > S.duplicate ([1])\n  //. [[1]]\n  //.\n  //. > S.duplicate ([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > S.duplicate (S.reverse) ([1, 2]) ([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  _.duplicate = {\n    consts: {w: [Z.Extend]},\n    types: [w (a), w (w (a))],\n    impl: Z.duplicate\n  };\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.extract`][].\n  //.\n  //. ```javascript\n  //. > S.extract (S.Pair ('foo') ('bar'))\n  //. 'bar'\n  //. ```\n  _.extract = {\n    consts: {w: [Z.Comonad]},\n    types: [w (a), a],\n    impl: Z.extract\n  };\n\n  //# contramap :: Contravariant f => (b -> a) -> f a -> f b\n  //.\n  //. [Type-safe][sanctuary-def] version of [`Z.contramap`][].\n  //.\n  //. ```javascript\n  //. > S.contramap (s => s.length) (Math.sqrt) ('Sanctuary')\n  //. 3\n  //. ```\n  _.contramap = {\n    consts: {f: [Z.Contravariant]},\n    types: [Fn (b) (a), f (a), f (b)],\n    impl: curry2 (Z.contramap)\n  };\n\n  //. ### Combinator\n\n  //# I :: a -> a\n  //.\n  //. The I combinator. Returns its argument. Equivalent to Haskell's `id`\n  //. function.\n  //.\n  //. ```javascript\n  //. > S.I ('foo')\n  //. 'foo'\n  //. ```\n  function I(x) {\n    return x;\n  }\n  _.I = {\n    consts: {},\n    types: [a, a],\n    impl: I\n  };\n\n  //# K :: a -> b -> a\n  //.\n  //. The K combinator. Takes two values and returns the first. Equivalent to\n  //. Haskell's `const` function.\n  //.\n  //. ```javascript\n  //. > S.K ('foo') ('bar')\n  //. 'foo'\n  //.\n  //. > S.map (S.K (42)) (S.range (0) (5))\n  //. [42, 42, 42, 42, 42]\n  //. ```\n  function K(x) {\n    return function(y) {\n      return x;\n    };\n  }\n  _.K = {\n    consts: {},\n    types: [a, b, a],\n    impl: K\n  };\n\n  //# T :: a -> (a -> b) -> b\n  //.\n  //. The T ([thrush][]) combinator. Takes a value and a function, and returns\n  //. the result of applying the function to the value. Equivalent to Haskell's\n  //. `(&)` function.\n  //.\n  //. ```javascript\n  //. > S.T (42) (S.add (1))\n  //. 43\n  //.\n  //. > S.map (S.T (100)) ([S.add (1), Math.sqrt])\n  //. [101, 10]\n  //. ```\n  function T(x) {\n    return function(f) {\n      return f (x);\n    };\n  }\n  _.T = {\n    consts: {},\n    types: [a, Fn (a) (b), b],\n    impl: T\n  };\n\n  //. ### Function\n\n  //# curry2 :: ((a, b) -> c) -> a -> b -> c\n  //.\n  //. Curries the given binary function.\n  //.\n  //. ```javascript\n  //. > S.map (S.curry2 (Math.pow) (10)) ([1, 2, 3])\n  //. [10, 100, 1000]\n  //. ```\n  function curry2(f) {\n    return function(x) {\n      return function(y) {\n        return f (x, y);\n      };\n    };\n  }\n  _.curry2 = {\n    consts: {},\n    types: [$.Function ([a, b, c]), a, b, c],\n    impl: curry2\n  };\n\n  //# curry3 :: ((a, b, c) -> d) -> a -> b -> c -> d\n  //.\n  //. Curries the given ternary function.\n  //.\n  //. ```javascript\n  //. > const replaceString = S.curry3 ((what, replacement, string) =>\n  //. .   string.replace (what, replacement)\n  //. . )\n  //.\n  //. > replaceString ('banana') ('orange') ('banana icecream')\n  //. 'orange icecream'\n  //. ```\n  function curry3(f) {\n    return function(x) {\n      return function(y) {\n        return function(z) {\n          return f (x, y, z);\n        };\n      };\n    };\n  }\n  _.curry3 = {\n    consts: {},\n    types: [$.Function ([a, b, c, d]), a, b, c, d],\n    impl: curry3\n  };\n\n  //# curry4 :: ((a, b, c, d) -> e) -> a -> b -> c -> d -> e\n  //.\n  //. Curries the given quaternary function.\n  //.\n  //. ```javascript\n  //. > const createRect = S.curry4 ((x, y, width, height) =>\n  //. .   ({x, y, width, height})\n  //. . )\n  //.\n  //. > createRect (0) (0) (10) (10)\n  //. {x: 0, y: 0, width: 10, height: 10}\n  //. ```\n  function curry4(f) {\n    return function(w) {\n      return function(x) {\n        return function(y) {\n          return function(z) {\n            return f (w, x, y, z);\n          };\n        };\n      };\n    };\n  }\n  _.curry4 = {\n    consts: {},\n    types: [$.Function ([a, b, c, d, e]), a, b, c, d, e],\n    impl: curry4\n  };\n\n  //# curry5 :: ((a, b, c, d, e) -> f) -> a -> b -> c -> d -> e -> f\n  //.\n  //. Curries the given quinary function.\n  //.\n  //. ```javascript\n  //. > const toUrl = S.curry5 ((protocol, creds, hostname, port, pathname) =>\n  //. .   protocol + '//' +\n  //. .   S.maybe ('') (S.flip (S.concat) ('@')) (creds) +\n  //. .   hostname +\n  //. .   S.maybe ('') (S.concat (':')) (port) +\n  //. .   pathname\n  //. . )\n  //.\n  //. > toUrl ('https:') (S.Nothing) ('example.com') (S.Just ('443')) ('/foo/bar')\n  //. 'https://example.com:443/foo/bar'\n  //. ```\n  function curry5(f) {\n    return function(v) {\n      return function(w) {\n        return function(x) {\n          return function(y) {\n            return function(z) {\n              return f (v, w, x, y, z);\n            };\n          };\n        };\n      };\n    };\n  }\n  _.curry5 = {\n    consts: {},\n    types: [$.Function ([a, b, c, d, e, r]), a, b, c, d, e, r],\n    impl: curry5\n  };\n\n  //. ### Composition\n\n  //# compose :: Semigroupoid s => s b c -> s a b -> s a c\n  //.\n  //. Curried version of [`Z.compose`][].\n  //.\n  //. When specialized to Function, `compose` composes two unary functions,\n  //. from right to left (this is the B combinator from combinatory logic).\n  //.\n  //. The generalized type signature indicates that `compose` is compatible\n  //. with any [Semigroupoid][].\n  //.\n  //. See also [`pipe`](#pipe).\n  //.\n  //. ```javascript\n  //. > S.compose (Math.sqrt) (S.add (1)) (99)\n  //. 10\n  //. ```\n  _.compose = {\n    consts: {s: [Z.Semigroupoid]},\n    types: [s (b) (c), s (a) (b), s (a) (c)],\n    impl: curry2 (Z.compose)\n  };\n\n  //# pipe :: Foldable f => f (Any -> Any) -> a -> b\n  //.\n  //. Takes a sequence of functions assumed to be unary and a value of any\n  //. type, and returns the result of applying the sequence of transformations\n  //. to the initial value.\n  //.\n  //. In general terms, `pipe` performs left-to-right composition of a sequence\n  //. of functions. `pipe ([f, g, h]) (x)` is equivalent to `h (g (f (x)))`.\n  //.\n  //. ```javascript\n  //. > S.pipe ([S.add (1), Math.sqrt, S.sub (1)]) (99)\n  //. 9\n  //. ```\n  function pipe(fs) {\n    return function(x) {\n      return reduce (T) (x) (fs);\n    };\n  }\n  _.pipe = {\n    consts: {f: [Z.Foldable]},\n    types: [f (Fn ($.Any) ($.Any)), a, b],\n    impl: pipe\n  };\n\n  //# pipeK :: (Foldable f, Chain m) => f (Any -> m Any) -> m a -> m b\n  //.\n  //. Takes a sequence of functions assumed to be unary which return values\n  //. with a [Chain][], and a value of that Chain, and returns the result\n  //. of applying the sequence of transformations to the initial value.\n  //.\n  //. In general terms, `pipeK` performs left-to-right [Kleisli][] composition\n  //. of an sequence of functions. `pipeK ([f, g, h]) (x)` is equivalent to\n  //. `chain (h) (chain (g) (chain (f) (x)))`.\n  //.\n  //. ```javascript\n  //. > S.pipeK ([S.tail, S.tail, S.head]) (S.Just ([1, 2, 3, 4]))\n  //. Just (3)\n  //. ```\n  function pipeK(fs) {\n    return function(x) {\n      return Z.reduce (function(x, f) { return Z.chain (f, x); }, x, fs);\n    };\n  }\n  _.pipeK = {\n    consts: {f: [Z.Foldable], m: [Z.Chain]},\n    types: [f (Fn ($.Any) (m ($.Any))), m (a), m (b)],\n    impl: pipeK\n  };\n\n  //# on :: (b -> b -> c) -> (a -> b) -> a -> a -> c\n  //.\n  //. Takes a binary function `f`, a unary function `g`, and two\n  //. values `x` and `y`. Returns `f (g (x)) (g (y))`.\n  //.\n  //. This is the P combinator from combinatory logic.\n  //.\n  //. ```javascript\n  //. > S.on (S.concat) (S.reverse) ([1, 2, 3]) ([4, 5, 6])\n  //. [3, 2, 1, 6, 5, 4]\n  //. ```\n  function on(f) {\n    return function(g) {\n      return function(x) {\n        return function(y) {\n          return f (g (x)) (g (y));\n        };\n      };\n    };\n  }\n  _.on = {\n    consts: {},\n    types: [Fn (b) (Fn (b) (c)), Fn (a) (b), a, a, c],\n    impl: on\n  };\n\n  //. ### Pair type\n  //.\n  //. Pair is the canonical product type: a value of type `Pair a b` always\n  //. contains exactly two values: one of type `a`; one of type `b`.\n  //.\n  //. The implementation is provided by [sanctuary-pair][].\n\n  //# PairType :: Type -> Type -> Type\n  //.\n  //. A [`BinaryType`][BinaryType] for use with [sanctuary-def][].\n\n  //# Pair :: a -> b -> Pair a b\n  //.\n  //. Pair's sole data constructor. Additionally, it serves as the\n  //. Pair [type representative][].\n  //.\n  //. ```javascript\n  //. > S.Pair ('foo') (42)\n  //. Pair ('foo') (42)\n  //. ```\n  _.Pair = {\n    consts: {},\n    types: [a, b, $Pair (a) (b)],\n    impl: Pair\n  };\n\n  //# fst :: Pair a b -> a\n  //.\n  //. `fst (Pair (x) (y))` is equivalent to `x`.\n  //.\n  //. ```javascript\n  //. > S.fst (S.Pair ('foo') (42))\n  //. 'foo'\n  //. ```\n  _.fst = {\n    consts: {},\n    types: [$Pair (a) (b), a],\n    impl: Pair.fst\n  };\n\n  //# snd :: Pair a b -> b\n  //.\n  //. `snd (Pair (x) (y))` is equivalent to `y`.\n  //.\n  //. ```javascript\n  //. > S.snd (S.Pair ('foo') (42))\n  //. 42\n  //. ```\n  _.snd = {\n    consts: {},\n    types: [$Pair (a) (b), b],\n    impl: Pair.snd\n  };\n\n  //# swap :: Pair a b -> Pair b a\n  //.\n  //. `swap (Pair (x) (y))` is equivalent to `Pair (y) (x)`.\n  //.\n  //. ```javascript\n  //. > S.swap (S.Pair ('foo') (42))\n  //. Pair (42) ('foo')\n  //. ```\n  _.swap = {\n    consts: {},\n    types: [$Pair (a) (b), $Pair (b) (a)],\n    impl: Pair.swap\n  };\n\n  //. ### Maybe type\n  //.\n  //. The Maybe type represents optional values: a value of type `Maybe a` is\n  //. either Nothing (the empty value) or a Just whose value is of type `a`.\n  //.\n  //. The implementation is provided by [sanctuary-maybe][].\n\n  //# MaybeType :: Type -> Type\n  //.\n  //. A [`UnaryType`][UnaryType] for use with [sanctuary-def][].\n\n  //# Maybe :: TypeRep Maybe\n  //.\n  //. Maybe [type representative][].\n\n  //# Nothing :: Maybe a\n  //.\n  //. The empty value of type `Maybe a`.\n  //.\n  //. ```javascript\n  //. > S.Nothing\n  //. Nothing\n  //. ```\n\n  //# Just :: a -> Maybe a\n  //.\n  //. Constructs a value of type `Maybe a` from a value of type `a`.\n  //.\n  //. ```javascript\n  //. > S.Just (42)\n  //. Just (42)\n  //. ```\n  _.Just = {\n    consts: {},\n    types: [a, $Maybe (a)],\n    impl: Just\n  };\n\n  //# isNothing :: Maybe a -> Boolean\n  //.\n  //. Returns `true` if the given Maybe is Nothing; `false` if it is a Just.\n  //.\n  //. ```javascript\n  //. > S.isNothing (S.Nothing)\n  //. true\n  //.\n  //. > S.isNothing (S.Just (42))\n  //. false\n  //. ```\n  function isNothing(maybe) {\n    return maybe.isNothing;\n  }\n  _.isNothing = {\n    consts: {},\n    types: [$Maybe (a), $.Boolean],\n    impl: isNothing\n  };\n\n  //# isJust :: Maybe a -> Boolean\n  //.\n  //. Returns `true` if the given Maybe is a Just; `false` if it is Nothing.\n  //.\n  //. ```javascript\n  //. > S.isJust (S.Just (42))\n  //. true\n  //.\n  //. > S.isJust (S.Nothing)\n  //. false\n  //. ```\n  function isJust(maybe) {\n    return maybe.isJust;\n  }\n  _.isJust = {\n    consts: {},\n    types: [$Maybe (a), $.Boolean],\n    impl: isJust\n  };\n\n  //# fromMaybe :: a -> Maybe a -> a\n  //.\n  //. Takes a default value and a Maybe, and returns the Maybe's value\n  //. if the Maybe is a Just; the default value otherwise.\n  //.\n  //. See also [`fromMaybe_`](#fromMaybe_) and\n  //. [`maybeToNullable`](#maybeToNullable).\n  //.\n  //. ```javascript\n  //. > S.fromMaybe (0) (S.Just (42))\n  //. 42\n  //.\n  //. > S.fromMaybe (0) (S.Nothing)\n  //. 0\n  //. ```\n  _.fromMaybe = {\n    consts: {},\n    types: [a, $Maybe (a), a],\n    impl: C (maybe) (I)\n  };\n\n  //# fromMaybe_ :: (() -> a) -> Maybe a -> a\n  //.\n  //. Variant of [`fromMaybe`](#fromMaybe) which takes a thunk so the default\n  //. value is only computed if required.\n  //.\n  //. ```javascript\n  //. > function fib(n) { return n <= 1 ? n : fib (n - 2) + fib (n - 1); }\n  //.\n  //. > S.fromMaybe_ (() => fib (30)) (S.Just (1000000))\n  //. 1000000\n  //.\n  //. > S.fromMaybe_ (() => fib (30)) (S.Nothing)\n  //. 832040\n  //. ```\n  _.fromMaybe_ = {\n    consts: {},\n    types: [$.Thunk (a), $Maybe (a), a],\n    impl: C (maybe_) (I)\n  };\n\n  //# maybeToNullable :: Maybe a -> Nullable a\n  //.\n  //. Returns the given Maybe's value if the Maybe is a Just; `null` otherwise.\n  //. [Nullable][] is defined in [sanctuary-def][].\n  //.\n  //. See also [`fromMaybe`](#fromMaybe).\n  //.\n  //. ```javascript\n  //. > S.maybeToNullable (S.Just (42))\n  //. 42\n  //.\n  //. > S.maybeToNullable (S.Nothing)\n  //. null\n  //. ```\n  function maybeToNullable(maybe) {\n    return maybe.isJust ? maybe.value : null;\n  }\n  _.maybeToNullable = {\n    consts: {},\n    types: [$Maybe (a), $.Nullable (a)],\n    impl: maybeToNullable\n  };\n\n  //# toMaybe :: a? -> Maybe a\n  //.\n  //. Takes a value and returns Nothing if the value is `null` or `undefined`;\n  //. Just the value otherwise.\n  //.\n  //. ```javascript\n  //. > S.toMaybe (null)\n  //. Nothing\n  //.\n  //. > S.toMaybe (42)\n  //. Just (42)\n  //. ```\n  function toMaybe(x) {\n    return x == null ? Nothing : Just (x);\n  }\n  _.toMaybe = {\n    consts: {},\n    types: [a, $Maybe (a)],\n    impl: toMaybe\n  };\n\n  //# maybe :: b -> (a -> b) -> Maybe a -> b\n  //.\n  //. Takes a value of any type, a function, and a Maybe. If the Maybe is\n  //. a Just, the return value is the result of applying the function to\n  //. the Just's value. Otherwise, the first argument is returned.\n  //.\n  //. See also [`maybe_`](#maybe_).\n  //.\n  //. ```javascript\n  //. > S.maybe (0) (S.prop ('length')) (S.Just ('refuge'))\n  //. 6\n  //.\n  //. > S.maybe (0) (S.prop ('length')) (S.Nothing)\n  //. 0\n  //. ```\n  function maybe(x) {\n    return function(f) {\n      return function(maybe) {\n        return maybe.isJust ? f (maybe.value) : x;\n      };\n    };\n  }\n  _.maybe = {\n    consts: {},\n    types: [b, Fn (a) (b), $Maybe (a), b],\n    impl: maybe\n  };\n\n  //# maybe_ :: (() -> b) -> (a -> b) -> Maybe a -> b\n  //.\n  //. Variant of [`maybe`](#maybe) which takes a thunk so the default value\n  //. is only computed if required.\n  //.\n  //. ```javascript\n  //. > function fib(n) { return n <= 1 ? n : fib (n - 2) + fib (n - 1); }\n  //.\n  //. > S.maybe_ (() => fib (30)) (Math.sqrt) (S.Just (1000000))\n  //. 1000\n  //.\n  //. > S.maybe_ (() => fib (30)) (Math.sqrt) (S.Nothing)\n  //. 832040\n  //. ```\n  function maybe_(thunk) {\n    return function(f) {\n      return function(maybe) {\n        return maybe.isJust ? f (maybe.value) : thunk ();\n      };\n    };\n  }\n  _.maybe_ = {\n    consts: {},\n    types: [$.Thunk (b), Fn (a) (b), $Maybe (a), b],\n    impl: maybe_\n  };\n\n  //# justs :: (Filterable f, Functor f) => f (Maybe a) -> f a\n  //.\n  //. Discards each element which is Nothing, and unwraps each element which is\n  //. a Just. Related to Haskell's `catMaybes` function.\n  //.\n  //. See also [`lefts`](#lefts) and [`rights`](#rights).\n  //.\n  //. ```javascript\n  //. > S.justs ([S.Just ('foo'), S.Nothing, S.Just ('baz')])\n  //. ['foo', 'baz']\n  //. ```\n  function justs(maybes) {\n    return map (value) (filter (isJust) (maybes));\n  }\n  _.justs = {\n    consts: {f: [Z.Filterable, Z.Functor]},\n    types: [f ($Maybe (a)), f (a)],\n    impl: justs\n  };\n\n  //# mapMaybe :: (Filterable f, Functor f) => (a -> Maybe b) -> f a -> f b\n  //.\n  //. Takes a function and a structure, applies the function to each element\n  //. of the structure, and returns the \"successful\" results. If the result of\n  //. applying the function to an element is Nothing, the result is discarded;\n  //. if the result is a Just, the Just's value is included.\n  //.\n  //. ```javascript\n  //. > S.mapMaybe (S.head) ([[], [1, 2, 3], [], [4, 5, 6], []])\n  //. [1, 4]\n  //.\n  //. > S.mapMaybe (S.head) ({x: [1, 2, 3], y: [], z: [4, 5, 6]})\n  //. {x: 1, z: 4}\n  //. ```\n  _.mapMaybe = {\n    consts: {f: [Z.Filterable, Z.Functor]},\n    types: [Fn (a) ($Maybe (b)), f (a), f (b)],\n    impl: B (B (justs)) (map)\n  };\n\n  //# encase :: (a -> b) -> a -> Maybe b\n  //.\n  //. Takes a unary function `f` which may throw and a value `x` of any type,\n  //. and applies `f` to `x` inside a `try` block. If an exception is caught,\n  //. the return value is Nothing; otherwise the return value is Just the\n  //. result of applying `f` to `x`.\n  //.\n  //. See also [`encaseEither`](#encaseEither).\n  //.\n  //. ```javascript\n  //. > S.encase (eval) ('1 + 1')\n  //. Just (2)\n  //.\n  //. > S.encase (eval) ('1 +')\n  //. Nothing\n  //. ```\n  function encase(f) {\n    return B (eitherToMaybe) (encaseEither (I) (f));\n  }\n  _.encase = {\n    consts: {},\n    types: [Fn (a) (b), a, $Maybe (b)],\n    impl: encase\n  };\n\n  //# encase2 :: (a -> b -> c) -> a -> b -> Maybe c\n  //.\n  //. Binary version of [`encase`](#encase).\n  _.encase2 = {\n    consts: {},\n    types: [Fn (a) (Fn (b) (c)), a, b, $Maybe (c)],\n    impl: B (B (B (eitherToMaybe))) (encaseEither2 (I))\n  };\n\n  //# encase3 :: (a -> b -> c -> d) -> a -> b -> c -> Maybe d\n  //.\n  //. Ternary version of [`encase`](#encase).\n  _.encase3 = {\n    consts: {},\n    types: [Fn (a) (Fn (b) (Fn (c) (d))), a, b, c, $Maybe (d)],\n    impl: B (B (B (B (eitherToMaybe)))) (encaseEither3 (I))\n  };\n\n  //# maybeToEither :: a -> Maybe b -> Either a b\n  //.\n  //. Converts a Maybe to an Either. Nothing becomes a Left (containing the\n  //. first argument); a Just becomes a Right.\n  //.\n  //. See also [`eitherToMaybe`](#eitherToMaybe).\n  //.\n  //. ```javascript\n  //. > S.maybeToEither ('Expecting an integer') (S.parseInt (10) ('xyz'))\n  //. Left ('Expecting an integer')\n  //.\n  //. > S.maybeToEither ('Expecting an integer') (S.parseInt (10) ('42'))\n  //. Right (42)\n  //. ```\n  function maybeToEither(x) {\n    return maybe (Left (x)) (Right);\n  }\n  _.maybeToEither = {\n    consts: {},\n    types: [a, $Maybe (b), $Either (a) (b)],\n    impl: maybeToEither\n  };\n\n  //. ### Either type\n  //.\n  //. The Either type represents values with two possibilities: a value of type\n  //. `Either a b` is either a Left whose value is of type `a` or a Right whose\n  //. value is of type `b`.\n  //.\n  //. The implementation is provided by [sanctuary-either][].\n\n  //# EitherType :: Type -> Type -> Type\n  //.\n  //. A [`BinaryType`][BinaryType] for use with [sanctuary-def][].\n\n  //# Either :: TypeRep Either\n  //.\n  //. Either [type representative][].\n\n  //# Left :: a -> Either a b\n  //.\n  //. Constructs a value of type `Either a b` from a value of type `a`.\n  //.\n  //. ```javascript\n  //. > S.Left ('Cannot divide by zero')\n  //. Left ('Cannot divide by zero')\n  //. ```\n  _.Left = {\n    consts: {},\n    types: [a, $Either (a) (b)],\n    impl: Left\n  };\n\n  //# Right :: b -> Either a b\n  //.\n  //. Constructs a value of type `Either a b` from a value of type `b`.\n  //.\n  //. ```javascript\n  //. > S.Right (42)\n  //. Right (42)\n  //. ```\n  _.Right = {\n    consts: {},\n    types: [b, $Either (a) (b)],\n    impl: Right\n  };\n\n  //# isLeft :: Either a b -> Boolean\n  //.\n  //. Returns `true` if the given Either is a Left; `false` if it is a Right.\n  //.\n  //. ```javascript\n  //. > S.isLeft (S.Left ('Cannot divide by zero'))\n  //. true\n  //.\n  //. > S.isLeft (S.Right (42))\n  //. false\n  //. ```\n  function isLeft(either) {\n    return either.isLeft;\n  }\n  _.isLeft = {\n    consts: {},\n    types: [$Either (a) (b), $.Boolean],\n    impl: isLeft\n  };\n\n  //# isRight :: Either a b -> Boolean\n  //.\n  //. Returns `true` if the given Either is a Right; `false` if it is a Left.\n  //.\n  //. ```javascript\n  //. > S.isRight (S.Right (42))\n  //. true\n  //.\n  //. > S.isRight (S.Left ('Cannot divide by zero'))\n  //. false\n  //. ```\n  function isRight(either) {\n    return either.isRight;\n  }\n  _.isRight = {\n    consts: {},\n    types: [$Either (a) (b), $.Boolean],\n    impl: isRight\n  };\n\n  //# fromEither :: b -> Either a b -> b\n  //.\n  //. Takes a default value and an Either, and returns the Right value\n  //. if the Either is a Right; the default value otherwise.\n  //.\n  //. ```javascript\n  //. > S.fromEither (0) (S.Right (42))\n  //. 42\n  //.\n  //. > S.fromEither (0) (S.Left (42))\n  //. 0\n  //. ```\n  function fromEither(x) {\n    return either (K (x)) (I);\n  }\n  _.fromEither = {\n    consts: {},\n    types: [b, $Either (a) (b), b],\n    impl: fromEither\n  };\n\n  //# toEither :: a -> b? -> Either a b\n  //.\n  //. Converts an arbitrary value to an Either: a Left if the value is `null`\n  //. or `undefined`; a Right otherwise. The first argument specifies the\n  //. value of the Left in the \"failure\" case.\n  //.\n  //. ```javascript\n  //. > S.toEither ('XYZ') (null)\n  //. Left ('XYZ')\n  //.\n  //. > S.toEither ('XYZ') ('ABC')\n  //. Right ('ABC')\n  //.\n  //. > S.map (S.prop ('0'))\n  //. .       (S.toEither ('Invalid protocol')\n  //. .                   ('ftp://example.com/'.match (/^https?:/)))\n  //. Left ('Invalid protocol')\n  //.\n  //. > S.map (S.prop ('0'))\n  //. .       (S.toEither ('Invalid protocol')\n  //. .                   ('https://example.com/'.match (/^https?:/)))\n  //. Right ('https:')\n  //. ```\n  function toEither(x) {\n    return function(y) {\n      return y == null ? Left (x) : Right (y);\n    };\n  }\n  _.toEither = {\n    consts: {},\n    types: [a, b, $Either (a) (b)],\n    impl: toEither\n  };\n\n  //# either :: (a -> c) -> (b -> c) -> Either a b -> c\n  //.\n  //. Takes two functions and an Either, and returns the result of\n  //. applying the first function to the Left's value, if the Either\n  //. is a Left, or the result of applying the second function to the\n  //. Right's value, if the Either is a Right.\n  //.\n  //. ```javascript\n  //. > S.either (S.toUpper) (S.show) (S.Left ('Cannot divide by zero'))\n  //. 'CANNOT DIVIDE BY ZERO'\n  //.\n  //. > S.either (S.toUpper) (S.show) (S.Right (42))\n  //. '42'\n  //. ```\n  function either(l) {\n    return function(r) {\n      return function(either) {\n        return (either.isLeft ? l : r) (either.value);\n      };\n    };\n  }\n  _.either = {\n    consts: {},\n    types: [Fn (a) (c), Fn (b) (c), $Either (a) (b), c],\n    impl: either\n  };\n\n  //# lefts :: (Filterable f, Functor f) => f (Either a b) -> f a\n  //.\n  //. Discards each element which is a Right, and unwraps each element which is\n  //. a Left.\n  //.\n  //. See also [`rights`](#rights).\n  //.\n  //. ```javascript\n  //. > S.lefts ([S.Right (20), S.Left ('foo'), S.Right (10), S.Left ('bar')])\n  //. ['foo', 'bar']\n  //. ```\n  _.lefts = {\n    consts: {f: [Z.Filterable, Z.Functor]},\n    types: [f ($Either (a) (b)), f (a)],\n    impl: B (map (value)) (filter (isLeft))\n  };\n\n  //# rights :: (Filterable f, Functor f) => f (Either a b) -> f b\n  //.\n  //. Discards each element which is a Left, and unwraps each element which is\n  //. a Right.\n  //.\n  //. See also [`lefts`](#lefts).\n  //.\n  //. ```javascript\n  //. > S.rights ([S.Right (20), S.Left ('foo'), S.Right (10), S.Left ('bar')])\n  //. [20, 10]\n  //. ```\n  _.rights = {\n    consts: {f: [Z.Filterable, Z.Functor]},\n    types: [f ($Either (a) (b)), f (b)],\n    impl: B (map (value)) (filter (isRight))\n  };\n\n  //# tagBy :: (a -> Boolean) -> a -> Either a a\n  //.\n  //. Takes a predicate and a value, and returns a Right of the value if it\n  //. satisfies the predicate; a Left of the value otherwise.\n  //.\n  //. ```javascript\n  //. > S.tagBy (S.odd) (0)\n  //. Left (0)\n  //\n  //. > S.tagBy (S.odd) (1)\n  //. Right (1)\n  //. ```\n  function tagBy(pred) {\n    return ifElse (pred) (Right) (Left);\n  }\n  _.tagBy = {\n    consts: {},\n    types: [$.Predicate (a), a, $Either (a) (a)],\n    impl: tagBy\n  };\n\n  //# encaseEither :: (Error -> l) -> (a -> r) -> a -> Either l r\n  //.\n  //. Takes two unary functions, `f` and `g`, the second of which may throw,\n  //. and a value `x` of any type. Applies `g` to `x` inside a `try` block.\n  //. If an exception is caught, the return value is a Left containing the\n  //. result of applying `f` to the caught Error object; otherwise the return\n  //. value is a Right containing the result of applying `g` to `x`.\n  //.\n  //. See also [`encase`](#encase).\n  //.\n  //. ```javascript\n  //. > S.encaseEither (S.I) (JSON.parse) ('[\"foo\",\"bar\",\"baz\"]')\n  //. Right (['foo', 'bar', 'baz'])\n  //.\n  //. > S.encaseEither (S.I) (JSON.parse) ('[')\n  //. Left (new SyntaxError ('Unexpected end of JSON input'))\n  //.\n  //. > S.encaseEither (S.prop ('message')) (JSON.parse) ('[')\n  //. Left ('Unexpected end of JSON input')\n  //. ```\n  function encaseEither(f) {\n    return function(g) {\n      return function(x) {\n        try {\n          return Right (g (x));\n        } catch (err) {\n          return Left (f (err));\n        }\n      };\n    };\n  }\n  _.encaseEither = {\n    consts: {},\n    types: [Fn ($.Error) (l), Fn (a) (r), a, $Either (l) (r)],\n    impl: encaseEither\n  };\n\n  //# encaseEither2 :: (Error -> l) -> (a -> b -> r) -> a -> b -> Either l r\n  //.\n  //. Binary version of [`encaseEither`](#encaseEither).\n  function encaseEither2(f) {\n    return function(g) {\n      return function(x) {\n        return function(y) {\n          try {\n            return Right (g (x) (y));\n          } catch (err) {\n            return Left (f (err));\n          }\n        };\n      };\n    };\n  }\n  _.encaseEither2 = {\n    consts: {},\n    types: [Fn ($.Error) (l), Fn (a) (Fn (b) (r)), a, b, $Either (l) (r)],\n    impl: encaseEither2\n  };\n\n  //# encaseEither3 :: (Error -> l) -> (a -> b -> c -> r) -> a -> b -> c -> Either l r\n  //.\n  //. Ternary version of [`encaseEither`](#encaseEither).\n  function encaseEither3(f) {\n    return function(g) {\n      return function(x) {\n        return function(y) {\n          return function(z) {\n            try {\n              return Right (g (x) (y) (z));\n            } catch (err) {\n              return Left (f (err));\n            }\n          };\n        };\n      };\n    };\n  }\n  _.encaseEither3 = {\n    consts: {},\n    types: [Fn ($.Error) (l),\n            Fn (a) (Fn (b) (Fn (c) (r))),\n            a,\n            b,\n            c,\n            $Either (l) (r)],\n    impl: encaseEither3\n  };\n\n  //# eitherToMaybe :: Either a b -> Maybe b\n  //.\n  //. Converts an Either to a Maybe. A Left becomes Nothing; a Right becomes\n  //. a Just.\n  //.\n  //. See also [`maybeToEither`](#maybeToEither).\n  //.\n  //. ```javascript\n  //. > S.eitherToMaybe (S.Left ('Cannot divide by zero'))\n  //. Nothing\n  //.\n  //. > S.eitherToMaybe (S.Right (42))\n  //. Just (42)\n  //. ```\n  function eitherToMaybe(either) {\n    return either.isLeft ? Nothing : Just (either.value);\n  }\n  _.eitherToMaybe = {\n    consts: {},\n    types: [$Either (a) (b), $Maybe (b)],\n    impl: eitherToMaybe\n  };\n\n  //. ### Logic\n\n  //# and :: Boolean -> Boolean -> Boolean\n  //.\n  //. Boolean \"and\".\n  //.\n  //. ```javascript\n  //. > S.and (false) (false)\n  //. false\n  //.\n  //. > S.and (false) (true)\n  //. false\n  //.\n  //. > S.and (true) (false)\n  //. false\n  //.\n  //. > S.and (true) (true)\n  //. true\n  //. ```\n  function and(x) {\n    return function(y) {\n      return x && y;\n    };\n  }\n  _.and = {\n    consts: {},\n    types: [$.Boolean, $.Boolean, $.Boolean],\n    impl: and\n  };\n\n  //# or :: Boolean -> Boolean -> Boolean\n  //.\n  //. Boolean \"or\".\n  //.\n  //. ```javascript\n  //. > S.or (false) (false)\n  //. false\n  //.\n  //. > S.or (false) (true)\n  //. true\n  //.\n  //. > S.or (true) (false)\n  //. true\n  //.\n  //. > S.or (true) (true)\n  //. true\n  //. ```\n  function or(x) {\n    return function(y) {\n      return x || y;\n    };\n  }\n  _.or = {\n    consts: {},\n    types: [$.Boolean, $.Boolean, $.Boolean],\n    impl: or\n  };\n\n  //# not :: Boolean -> Boolean\n  //.\n  //. Boolean \"not\".\n  //.\n  //. See also [`complement`](#complement).\n  //.\n  //. ```javascript\n  //. > S.not (false)\n  //. true\n  //.\n  //. > S.not (true)\n  //. false\n  //. ```\n  function not(x) {\n    return !x;\n  }\n  _.not = {\n    consts: {},\n    types: [$.Boolean, $.Boolean],\n    impl: not\n  };\n\n  //# complement :: (a -> Boolean) -> a -> Boolean\n  //.\n  //. Takes a unary predicate and a value of any type, and returns the logical\n  //. negation of applying the predicate to the value.\n  //.\n  //. See also [`not`](#not).\n  //.\n  //. ```javascript\n  //. > Number.isInteger (42)\n  //. true\n  //.\n  //. > S.complement (Number.isInteger) (42)\n  //. false\n  //. ```\n  _.complement = {\n    consts: {},\n    types: [$.Predicate (a), a, $.Boolean],\n    impl: B (not)\n  };\n\n  //# ifElse :: (a -> Boolean) -> (a -> b) -> (a -> b) -> a -> b\n  //.\n  //. Takes a unary predicate, a unary \"if\" function, a unary \"else\"\n  //. function, and a value of any type, and returns the result of\n  //. applying the \"if\" function to the value if the value satisfies\n  //. the predicate; the result of applying the \"else\" function to the\n  //. value otherwise.\n  //.\n  //. See also [`when`](#when) and [`unless`](#unless).\n  //.\n  //. ```javascript\n  //. > S.ifElse (x => x < 0) (Math.abs) (Math.sqrt) (-1)\n  //. 1\n  //.\n  //. > S.ifElse (x => x < 0) (Math.abs) (Math.sqrt) (16)\n  //. 4\n  //. ```\n  function ifElse(pred) {\n    return function(f) {\n      return function(g) {\n        return function(x) {\n          return (pred (x) ? f : g) (x);\n        };\n      };\n    };\n  }\n  _.ifElse = {\n    consts: {},\n    types: [$.Predicate (a), Fn (a) (b), Fn (a) (b), a, b],\n    impl: ifElse\n  };\n\n  //# when :: (a -> Boolean) -> (a -> a) -> a -> a\n  //.\n  //. Takes a unary predicate, a unary function, and a value of any type, and\n  //. returns the result of applying the function to the value if the value\n  //. satisfies the predicate; the value otherwise.\n  //.\n  //. See also [`unless`](#unless) and [`ifElse`](#ifElse).\n  //.\n  //. ```javascript\n  //. > S.when (x => x >= 0) (Math.sqrt) (16)\n  //. 4\n  //.\n  //. > S.when (x => x >= 0) (Math.sqrt) (-1)\n  //. -1\n  //. ```\n  function when(pred) {\n    return C (ifElse (pred)) (I);\n  }\n  _.when = {\n    consts: {},\n    types: [$.Predicate (a), Fn (a) (a), a, a],\n    impl: when\n  };\n\n  //# unless :: (a -> Boolean) -> (a -> a) -> a -> a\n  //.\n  //. Takes a unary predicate, a unary function, and a value of any type, and\n  //. returns the result of applying the function to the value if the value\n  //. does not satisfy the predicate; the value otherwise.\n  //.\n  //. See also [`when`](#when) and [`ifElse`](#ifElse).\n  //.\n  //. ```javascript\n  //. > S.unless (x => x < 0) (Math.sqrt) (16)\n  //. 4\n  //.\n  //. > S.unless (x => x < 0) (Math.sqrt) (-1)\n  //. -1\n  //. ```\n  function unless(pred) {\n    return ifElse (pred) (I);\n  }\n  _.unless = {\n    consts: {},\n    types: [$.Predicate (a), Fn (a) (a), a, a],\n    impl: unless\n  };\n\n  //# allPass :: Foldable f => f (a -> Boolean) -> a -> Boolean\n  //.\n  //. Takes a structure containing zero or more predicates, and a value\n  //. of any type. Returns `true` [iff][] the value satisfies all of the\n  //. predicates. None of the subsequent predicates will be applied after\n  //. the first predicate not satisfied.\n  //.\n  //. ```javascript\n  //. > S.allPass ([S.test (/q/), S.test (/u/), S.test (/i/)]) ('quiessence')\n  //. true\n  //.\n  //. > S.allPass ([S.test (/q/), S.test (/u/), S.test (/i/)]) ('fissiparous')\n  //. false\n  //. ```\n  function allPass(preds) {\n    return function(x) {\n      return Z.reduce (function(b, p) { return b && p (x); }, true, preds);\n    };\n  }\n  _.allPass = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($.Predicate (a)), a, $.Boolean],\n    impl: allPass\n  };\n\n  //# anyPass :: Foldable f => f (a -> Boolean) -> a -> Boolean\n  //.\n  //. Takes a structure containing zero or more predicates, and a value\n  //. of any type. Returns `true` [iff][] the value satisfies any of the\n  //. predicates. None of the subsequent predicates will be applied after\n  //. the first predicate satisfied.\n  //.\n  //. ```javascript\n  //. > S.anyPass ([S.test (/q/), S.test (/u/), S.test (/i/)]) ('incandescent')\n  //. true\n  //.\n  //. > S.anyPass ([S.test (/q/), S.test (/u/), S.test (/i/)]) ('empathy')\n  //. false\n  //. ```\n  function anyPass(preds) {\n    return function(x) {\n      return Z.reduce (function(b, p) { return b || p (x); }, false, preds);\n    };\n  }\n  _.anyPass = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($.Predicate (a)), a, $.Boolean],\n    impl: anyPass\n  };\n\n  //. ### Array\n\n  //# slice :: Integer -> Integer -> Array a -> Maybe (Array a)\n  //.\n  //. Takes a start index `i`, an end index `j`, and an array, and returns\n  //. Just the `[i,j)` slice of the array if possible; Nothing otherwise.\n  //. A negative index represents an offset from the length of the array.\n  //.\n  //. See also [`take`](#take), [`drop`](#drop), [`takeLast`](#takeLast),\n  //. and [`dropLast`](#dropLast).\n  //.\n  //. ```javascript\n  //. > S.slice (1) (3) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['b', 'c'])\n  //.\n  //. > S.slice (-3) (-1) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['c', 'd'])\n  //.\n  //. > S.slice (1) (6) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //. ```\n  function slice(start) {\n    return function(end) {\n      return function(xs) {\n        var fromIdx = start < 0 ? start + xs.length : start;\n        var toIdx = end < 0 ? end + xs.length : end;\n\n        return Math.abs (start) <= xs.length &&\n               Math.abs (end) <= xs.length &&\n               fromIdx <= toIdx ?\n                 Just (xs.slice (fromIdx, toIdx)) :\n                 Nothing;\n      };\n    };\n  }\n  _.slice = {\n    consts: {},\n    types: [$.Integer, $.Integer, $.Array (a), $Maybe ($.Array (a))],\n    impl: slice\n  };\n\n  //# at :: Integer -> Array a -> Maybe a\n  //.\n  //. Returns Just the element of the given array at the specified index if\n  //. the index is within the array's bounds; Nothing otherwise. A negative\n  //. index represents an offset from the length of the array.\n  //.\n  //. ```javascript\n  //. > S.at (2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just ('c')\n  //.\n  //. > S.at (5) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //.\n  //. > S.at (-2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just ('d')\n  //. ```\n  function at(n) {\n    return function(xs) {\n      var idx = n < 0 ? xs.length + n : n;\n      return idx < 0 || idx >= xs.length ? Nothing : Just (xs[idx]);\n    };\n  }\n  _.at = {\n    consts: {},\n    types: [$.Integer, $.Array (a), $Maybe (a)],\n    impl: at\n  };\n\n  //# head :: Array a -> Maybe a\n  //.\n  //. Returns Just the first element of the given array if the array contains\n  //. at least one element; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.head ([1, 2, 3])\n  //. Just (1)\n  //.\n  //. > S.head ([])\n  //. Nothing\n  //. ```\n  function head(xs) {\n    return xs.length > 0 ? Just (xs[0]) : Nothing;\n  }\n  _.head = {\n    consts: {},\n    types: [$.Array (a), $Maybe (a)],\n    impl: head\n  };\n\n  //# last :: Array a -> Maybe a\n  //.\n  //. Returns Just the last element of the given array if the array contains\n  //. at least one element; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.last ([1, 2, 3])\n  //. Just (3)\n  //.\n  //. > S.last ([])\n  //. Nothing\n  //. ```\n  function last(xs) {\n    return xs.length > 0 ? Just (xs[xs.length - 1]) : Nothing;\n  }\n  _.last = {\n    consts: {},\n    types: [$.Array (a), $Maybe (a)],\n    impl: last\n  };\n\n  //# tail :: Array a -> Maybe (Array a)\n  //.\n  //. Returns Just all but the first of the given array's elements if the\n  //. array contains at least one element; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.tail ([1, 2, 3])\n  //. Just ([2, 3])\n  //.\n  //. > S.tail ([])\n  //. Nothing\n  //. ```\n  function tail(xs) {\n    return xs.length > 0 ? Just (xs.slice (1)) : Nothing;\n  }\n  _.tail = {\n    consts: {},\n    types: [$.Array (a), $Maybe ($.Array (a))],\n    impl: tail\n  };\n\n  //# init :: Array a -> Maybe (Array a)\n  //.\n  //. Returns Just all but the last of the given array's elements if the\n  //. array contains at least one element; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.init ([1, 2, 3])\n  //. Just ([1, 2])\n  //.\n  //. > S.init ([])\n  //. Nothing\n  //. ```\n  function init(xs) {\n    return xs.length > 0 ? Just (xs.slice (0, -1)) : Nothing;\n  }\n  _.init = {\n    consts: {},\n    types: [$.Array (a), $Maybe ($.Array (a))],\n    impl: init\n  };\n\n  //# take :: Integer -> Array a -> Maybe (Array a)\n  //.\n  //. Returns Just the first N elements of the given array if N is greater\n  //. than or equal to zero and less than or equal to the length of the array;\n  //. Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.take (2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['a', 'b'])\n  //.\n  //. > S.take (5) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['a', 'b', 'c', 'd', 'e'])\n  //.\n  //. > S.take (6) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //. ```\n  function take(n) {\n    return function(xs) {\n      return n >= 0 && n <= xs.length ? Just (xs.slice (0, n)) : Nothing;\n    };\n  }\n  _.take = {\n    consts: {},\n    types: [$.Integer, $.Array (a), $Maybe ($.Array (a))],\n    impl: take\n  };\n\n  //# takeLast :: Integer -> Array a -> Maybe (Array a)\n  //.\n  //. Returns Just the last N elements of the given array if N is greater\n  //. than or equal to zero and less than or equal to the length of the array;\n  //. Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.takeLast (2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['d', 'e'])\n  //.\n  //. > S.takeLast (5) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['a', 'b', 'c', 'd', 'e'])\n  //.\n  //. > S.takeLast (6) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //. ```\n  function takeLast(n) {\n    return function(xs) {\n      return n >= 0 && n <= xs.length ? Just (xs.slice (xs.length - n))\n                                      : Nothing;\n    };\n  }\n  _.takeLast = {\n    consts: {},\n    types: [$.Integer, $.Array (a), $Maybe ($.Array (a))],\n    impl: takeLast\n  };\n\n  //# drop :: Integer -> Array a -> Maybe (Array a)\n  //.\n  //. Returns Just all but the first N elements of the given array if N is\n  //. greater than or equal to zero and less than or equal to the length of\n  //. the array; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.drop (2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['c', 'd', 'e'])\n  //.\n  //. > S.drop (5) (['a', 'b', 'c', 'd', 'e'])\n  //. Just ([])\n  //.\n  //. > S.drop (6) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //. ```\n  function drop(n) {\n    return function(xs) {\n      return n >= 0 && n <= xs.length ? Just (xs.slice (n)) : Nothing;\n    };\n  }\n  _.drop = {\n    consts: {},\n    types: [$.Integer, $.Array (a), $Maybe ($.Array (a))],\n    impl: drop\n  };\n\n  //# dropLast :: Integer -> Array a -> Maybe (Array a)\n  //.\n  //. Returns Just all but the last N elements of the given array if N is\n  //. greater than or equal to zero and less than or equal to the length of\n  //. the array; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.dropLast (2) (['a', 'b', 'c', 'd', 'e'])\n  //. Just (['a', 'b', 'c'])\n  //.\n  //. > S.dropLast (5) (['a', 'b', 'c', 'd', 'e'])\n  //. Just ([])\n  //.\n  //. > S.dropLast (6) (['a', 'b', 'c', 'd', 'e'])\n  //. Nothing\n  //. ```\n  function dropLast(n) {\n    return function(xs) {\n      return n >= 0 && n <= xs.length ? Just (xs.slice (0, xs.length - n))\n                                      : Nothing;\n    };\n  }\n  _.dropLast = {\n    consts: {},\n    types: [$.Integer, $.Array (a), $Maybe ($.Array (a))],\n    impl: dropLast\n  };\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. ```javascript\n  //. > S.size ([])\n  //. 0\n  //.\n  //. > S.size (['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > S.size (Nil)\n  //. 0\n  //.\n  //. > S.size (Cons ('foo') (Cons ('bar') (Cons ('baz') (Nil))))\n  //. 3\n  //.\n  //. > S.size (S.Nothing)\n  //. 0\n  //.\n  //. > S.size (S.Just ('quux'))\n  //. 1\n  //.\n  //. > S.size (S.Pair ('ignored!') ('counted!'))\n  //. 1\n  //. ```\n  _.size = {\n    consts: {f: [Z.Foldable]},\n    types: [f (a), $.Integer],\n    impl: Z.size\n  };\n\n  //# append :: (Applicative f, Semigroup (f a)) => a -> f a -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > S.append (3) ([1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > S.append (3) (Cons (1) (Cons (2) (Nil)))\n  //. Cons (1) (Cons (2) (Cons (3) (Nil)))\n  //.\n  //. > S.append ([1]) (S.Nothing)\n  //. Just ([1])\n  //.\n  //. > S.append ([3]) (S.Just ([1, 2]))\n  //. Just ([1, 2, 3])\n  //. ```\n  _.append = {\n    consts: {f: [Z.Applicative, Z.Semigroup]},\n    types: [a, f (a), f (a)],\n    impl: curry2 (Z.append)\n  };\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => a -> f a -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > S.prepend (1) ([2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > S.prepend (1) (Cons (2) (Cons (3) (Nil)))\n  //. Cons (1) (Cons (2) (Cons (3) (Nil)))\n  //.\n  //. > S.prepend ([1]) (S.Nothing)\n  //. Just ([1])\n  //.\n  //. > S.prepend ([1]) (S.Just ([2, 3]))\n  //. Just ([1, 2, 3])\n  //. ```\n  _.prepend = {\n    consts: {f: [Z.Applicative, Z.Semigroup]},\n    types: [a, f (a), f (a)],\n    impl: curry2 (Z.prepend)\n  };\n\n  //# joinWith :: String -> Array String -> String\n  //.\n  //. Joins the strings of the second argument separated by the first argument.\n  //.\n  //. Properties:\n  //.\n  //.   - `forall s :: String, t :: String.\n  //.      S.joinWith (s) (S.splitOn (s) (t)) = t`\n  //.\n  //. See also [`splitOn`](#splitOn).\n  //.\n  //. ```javascript\n  //. > S.joinWith (':') (['foo', 'bar', 'baz'])\n  //. 'foo:bar:baz'\n  //. ```\n  _.joinWith = {\n    consts: {},\n    types: [$.String, $.Array ($.String), $.String],\n    impl: invoke1 ('join')\n  };\n\n  //# elem :: (Setoid a, Foldable f) => a -> f a -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` [iff][] the value is an\n  //. element of the structure.\n  //.\n  //. See also [`find`](#find).\n  //.\n  //. ```javascript\n  //. > S.elem ('c') (['a', 'b', 'c'])\n  //. true\n  //.\n  //. > S.elem ('x') (['a', 'b', 'c'])\n  //. false\n  //.\n  //. > S.elem (3) ({x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > S.elem (8) ({x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > S.elem (0) (S.Just (0))\n  //. true\n  //.\n  //. > S.elem (0) (S.Just (1))\n  //. false\n  //.\n  //. > S.elem (0) (S.Nothing)\n  //. false\n  //. ```\n  _.elem = {\n    consts: {a: [Z.Setoid], f: [Z.Foldable]},\n    types: [a, f (a), $.Boolean],\n    impl: curry2 (Z.elem)\n  };\n\n  //# find :: Foldable f => (a -> Boolean) -> f a -> Maybe a\n  //.\n  //. Takes a predicate and a structure and returns Just the leftmost element\n  //. of the structure which satisfies the predicate; Nothing if there is no\n  //. such element.\n  //.\n  //. See also [`elem`](#elem).\n  //.\n  //. ```javascript\n  //. > S.find (S.lt (0)) ([1, -2, 3, -4, 5])\n  //. Just (-2)\n  //.\n  //. > S.find (S.lt (0)) ([1, 2, 3, 4, 5])\n  //. Nothing\n  //. ```\n  function find(pred) {\n    return function(xs) {\n      return Z.reduce (\n        function(m, x) {\n          return m.isJust ? m : pred (x) ? Just (x) : Nothing;\n        },\n        Nothing,\n        xs\n      );\n    };\n  }\n  _.find = {\n    consts: {f: [Z.Foldable]},\n    types: [$.Predicate (a), f (a), $Maybe (a)],\n    impl: find\n  };\n\n  //# foldMap :: (Monoid m, Foldable f) => TypeRep m -> (a -> m) -> f a -> m\n  //.\n  //. Curried version of [`Z.foldMap`][]. Deconstructs a foldable by mapping\n  //. every element to a monoid and concatenating the results.\n  //.\n  //. ```javascript\n  //. > S.foldMap (String) (f => f.name) ([Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  _.foldMap = {\n    consts: {b: [Z.Monoid], f: [Z.Foldable]},\n    types: [TypeRep (b), Fn (a) (b), f (a), b],\n    impl: curry3 (Z.foldMap)\n  };\n\n  //# unfoldr :: (b -> Maybe (Pair a b)) -> b -> Array a\n  //.\n  //. Takes a function and a seed value, and returns an array generated by\n  //. applying the function repeatedly. The array is initially empty. The\n  //. function is initially applied to the seed value. Each application\n  //. of the function should result in either:\n  //.\n  //.   - Nothing, in which case the array is returned; or\n  //.\n  //.   - Just a pair, in which case the first element is appended to\n  //.     the array and the function is applied to the second element.\n  //.\n  //. ```javascript\n  //. > S.unfoldr (n => n < 5 ? S.Just (S.Pair (n) (n + 1)) : S.Nothing) (1)\n  //. [1, 2, 3, 4]\n  //. ```\n  function unfoldr(f) {\n    return function(x) {\n      var result = [];\n      for (var m = f (x); m.isJust; m = f (m.value.snd)) {\n        result.push (m.value.fst);\n      }\n      return result;\n    };\n  }\n  _.unfoldr = {\n    consts: {},\n    types: [Fn (b) ($Maybe ($Pair (a) (b))), b, $.Array (a)],\n    impl: unfoldr\n  };\n\n  //# range :: Integer -> Integer -> Array Integer\n  //.\n  //. Returns an array of consecutive integers starting with the first argument\n  //. and ending with the second argument minus one. Returns `[]` if the second\n  //. argument is less than or equal to the first argument.\n  //.\n  //. ```javascript\n  //. > S.range (0) (10)\n  //. [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  //.\n  //. > S.range (-5) (0)\n  //. [-5, -4, -3, -2, -1]\n  //.\n  //. > S.range (0) (-5)\n  //. []\n  //. ```\n  function range(from) {\n    return function(to) {\n      var result = [];\n      for (var n = from; n < to; n += 1) result.push (n);\n      return result;\n    };\n  }\n  _.range = {\n    consts: {},\n    types: [$.Integer, $.Integer, $.Array ($.Integer)],\n    impl: range\n  };\n\n  //# groupBy :: (a -> a -> Boolean) -> Array a -> Array (Array a)\n  //.\n  //. Splits its array argument into an array of arrays of equal,\n  //. adjacent elements. Equality is determined by the function\n  //. provided as the first argument. Its behaviour can be surprising\n  //. for functions that aren't reflexive, transitive, and symmetric\n  //. (see [equivalence][] relation).\n  //.\n  //. Properties:\n  //.\n  //.   - `forall f :: a -> a -> Boolean, xs :: Array a.\n  //.      S.join (S.groupBy (f) (xs)) = xs`\n  //.\n  //. ```javascript\n  //. > S.groupBy (S.equals) ([1, 1, 2, 1, 1])\n  //. [[1, 1], [2], [1, 1]]\n  //.\n  //. > S.groupBy (x => y => x + y === 0) ([2, -3, 3, 3, 3, 4, -4, 4])\n  //. [[2], [-3, 3, 3, 3], [4, -4], [4]]\n  //. ```\n  function groupBy(f) {\n    return function(xs) {\n      if (xs.length === 0) return [];\n      var x0 = xs[0];         // :: a\n      var active = [x0];      // :: Array a\n      var result = [active];  // :: Array (Array a)\n      for (var idx = 1; idx < xs.length; idx += 1) {\n        var x = xs[idx];\n        if (f (x0) (x)) active.push (x); else result.push (active = [x0 = x]);\n      }\n      return result;\n    };\n  }\n  _.groupBy = {\n    consts: {},\n    types: [Fn (a) ($.Predicate (a)), $.Array (a), $.Array ($.Array (a))],\n    impl: groupBy\n  };\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. ```javascript\n  //. > S.reverse ([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > S.reverse (Cons (1) (Cons (2) (Cons (3) (Nil))))\n  //. Cons (3) (Cons (2) (Cons (1) (Nil)))\n  //.\n  //. > S.pipe ([S.splitOn (''), S.reverse, S.joinWith ('')]) ('abc')\n  //. 'cba'\n  //. ```\n  _.reverse = {\n    consts: {f: [Z.Applicative, Z.Foldable, Z.Monoid]},\n    types: [f (a), f (a)],\n    impl: Z.reverse\n  };\n\n  //# sort :: (Ord a, Applicative m, Foldable m, Monoid (m a)) => m a -> m a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure, using\n  //. [`Z.lte`][] for comparisons.\n  //.\n  //. Properties:\n  //.\n  //.   - `S.sort (S.sort (m)) = S.sort (m)` (idempotence)\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > S.sort (['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > S.sort ([S.Left (4), S.Right (3), S.Left (2), S.Right (1)])\n  //. [Left (2), Left (4), Right (1), Right (3)]\n  //. ```\n  _.sort = {\n    consts: {a: [Z.Ord], m: [Z.Applicative, Z.Foldable, Z.Monoid]},\n    types: [m (a), m (a)],\n    impl: Z.sort\n  };\n\n  //# sortBy :: (Ord b, Applicative m, Foldable m, Monoid (m a)) => (a -> b) -> m a -> m a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure, using\n  //. [`Z.lte`][] to compare the values produced by applying the given function\n  //. to each element of the structure.\n  //.\n  //. Properties:\n  //.\n  //.   - `S.sortBy (f) (S.sortBy (f) (m)) = S.sortBy (f) (m)` (idempotence)\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > S.sortBy (S.prop ('rank')) ([\n  //. .   {rank: 7, suit: 'spades'},\n  //. .   {rank: 5, suit: 'hearts'},\n  //. .   {rank: 2, suit: 'hearts'},\n  //. .   {rank: 5, suit: 'spades'},\n  //. . ])\n  //. [ {rank: 2, suit: 'hearts'},\n  //. . {rank: 5, suit: 'hearts'},\n  //. . {rank: 5, suit: 'spades'},\n  //. . {rank: 7, suit: 'spades'} ]\n  //.\n  //. > S.sortBy (S.prop ('suit')) ([\n  //. .   {rank: 7, suit: 'spades'},\n  //. .   {rank: 5, suit: 'hearts'},\n  //. .   {rank: 2, suit: 'hearts'},\n  //. .   {rank: 5, suit: 'spades'},\n  //. . ])\n  //. [ {rank: 5, suit: 'hearts'},\n  //. . {rank: 2, suit: 'hearts'},\n  //. . {rank: 7, suit: 'spades'},\n  //. . {rank: 5, suit: 'spades'} ]\n  //. ```\n  //.\n  //. If descending order is desired, one may use [`Descending`][]:\n  //.\n  //. ```javascript\n  //. > S.sortBy (Descending) ([83, 97, 110, 99, 116, 117, 97, 114, 121])\n  //. [121, 117, 116, 114, 110, 99, 97, 97, 83]\n  //. ```\n  _.sortBy = {\n    consts: {b: [Z.Ord], m: [Z.Applicative, Z.Foldable, Z.Monoid]},\n    types: [Fn (a) (b), m (a), m (a)],\n    impl: curry2 (Z.sortBy)\n  };\n\n  //# zip :: Array a -> Array b -> Array (Pair a b)\n  //.\n  //. Returns an array of pairs of corresponding elements from the given\n  //. arrays. The length of the resulting array is equal to the length of\n  //. the shorter input array.\n  //.\n  //. See also [`zipWith`](#zipWith).\n  //.\n  //. ```javascript\n  //. > S.zip (['a', 'b']) (['x', 'y', 'z'])\n  //. [Pair ('a') ('x'), Pair ('b') ('y')]\n  //.\n  //. > S.zip ([1, 3, 5]) ([2, 4])\n  //. [Pair (1) (2), Pair (3) (4)]\n  //. ```\n  _.zip = {\n    consts: {},\n    types: [$.Array (a), $.Array (b), $.Array ($Pair (a) (b))],\n    impl: zipWith (Pair)\n  };\n\n  //# zipWith :: (a -> b -> c) -> Array a -> Array b -> Array c\n  //.\n  //. Returns the result of combining, pairwise, the given arrays using the\n  //. given binary function. The length of the resulting array is equal to the\n  //. length of the shorter input array.\n  //.\n  //. See also [`zip`](#zip).\n  //.\n  //. ```javascript\n  //. > S.zipWith (a => b => a + b) (['a', 'b']) (['x', 'y', 'z'])\n  //. ['ax', 'by']\n  //.\n  //. > S.zipWith (a => b => [a, b]) ([1, 3, 5]) ([2, 4])\n  //. [[1, 2], [3, 4]]\n  //. ```\n  function zipWith(f) {\n    return function(xs) {\n      return function(ys) {\n        var result = [];\n        var len = Math.min (xs.length, ys.length);\n        for (var idx = 0; idx < len; idx += 1) {\n          result.push (f (xs[idx]) (ys[idx]));\n        }\n        return result;\n      };\n    };\n  }\n  _.zipWith = {\n    consts: {},\n    types: [Fn (a) (Fn (b) (c)), $.Array (a), $.Array (b), $.Array (c)],\n    impl: zipWith\n  };\n\n  //. ### Object\n\n  //# prop :: String -> a -> b\n  //.\n  //. Takes a property name and an object with known properties and returns\n  //. the value of the specified property. If for some reason the object\n  //. lacks the specified property, a type error is thrown.\n  //.\n  //. For accessing properties of uncertain objects, use [`get`](#get) instead.\n  //.\n  //. ```javascript\n  //. > S.prop ('a') ({a: 1, b: 2})\n  //. 1\n  //. ```\n  function prop(key) {\n    return function(x) {\n      var obj = toObject (x);\n      if (key in obj) return obj[key];\n      throw new TypeError ('‘prop’ expected object to have a property named ' +\n                           '‘' + key + '’; ' + show (x) + ' does not');\n    };\n  }\n  _.prop = {\n    consts: {},\n    types: [$.String, a, b],\n    impl: prop\n  };\n\n  //# props :: Array String -> a -> b\n  //.\n  //. Takes a property path (an array of property names) and an object with\n  //. known structure and returns the value at the given path. If for some\n  //. reason the path does not exist, a type error is thrown.\n  //.\n  //. For accessing property paths of uncertain objects, use [`gets`](#gets)\n  //. instead.\n  //.\n  //. ```javascript\n  //. > S.props (['a', 'b', 'c']) ({a: {b: {c: 1}}})\n  //. 1\n  //. ```\n  function props(path) {\n    return function(x) {\n      return path.reduce (function(x, key) {\n        var obj = toObject (x);\n        if (key in obj) return obj[key];\n        throw new TypeError ('‘props’ expected object to have a property at ' +\n                             show (path) + '; ' + show (x) + ' does not');\n      }, x);\n    };\n  }\n  _.props = {\n    consts: {},\n    types: [$.Array ($.String), a, b],\n    impl: props\n  };\n\n  //# get :: (Any -> Boolean) -> String -> a -> Maybe b\n  //.\n  //. Takes a predicate, a property name, and an object and returns Just the\n  //. value of the specified object property if it exists and the value\n  //. satisfies the given predicate; Nothing otherwise.\n  //.\n  //. See also [`gets`](#gets) and [`prop`](#prop).\n  //.\n  //. ```javascript\n  //. > S.get (S.is ($.Number)) ('x') ({x: 1, y: 2})\n  //. Just (1)\n  //.\n  //. > S.get (S.is ($.Number)) ('x') ({x: '1', y: '2'})\n  //. Nothing\n  //.\n  //. > S.get (S.is ($.Number)) ('x') ({})\n  //. Nothing\n  //.\n  //. > S.get (S.is ($.Array ($.Number))) ('x') ({x: [1, 2, 3]})\n  //. Just ([1, 2, 3])\n  //.\n  //. > S.get (S.is ($.Array ($.Number))) ('x') ({x: [1, 2, 3, null]})\n  //. Nothing\n  //. ```\n  function get(pred) {\n    return B (B (filter (pred))) (get_);\n  }\n  _.get = {\n    consts: {},\n    types: [$.Predicate ($.Any), $.String, a, $Maybe (b)],\n    impl: get\n  };\n\n  //# gets :: (Any -> Boolean) -> Array String -> a -> Maybe b\n  //.\n  //. Takes a predicate, a property path (an array of property names), and\n  //. an object and returns Just the value at the given path if such a path\n  //. exists and the value satisfies the given predicate; Nothing otherwise.\n  //.\n  //. See also [`get`](#get).\n  //.\n  //. ```javascript\n  //. > S.gets (S.is ($.Number)) (['a', 'b', 'c']) ({a: {b: {c: 42}}})\n  //. Just (42)\n  //.\n  //. > S.gets (S.is ($.Number)) (['a', 'b', 'c']) ({a: {b: {c: '42'}}})\n  //. Nothing\n  //.\n  //. > S.gets (S.is ($.Number)) (['a', 'b', 'c']) ({})\n  //. Nothing\n  //. ```\n  function gets(pred) {\n    return function(keys) {\n      return function(x) {\n        return Z.filter (pred, keys.reduce (function(maybe, key) {\n          return Z.chain (get_ (key), maybe);\n        }, Just (x)));\n      };\n    };\n  }\n  _.gets = {\n    consts: {},\n    types: [$.Predicate ($.Any), $.Array ($.String), a, $Maybe (b)],\n    impl: gets\n  };\n\n  //. ### StrMap\n  //.\n  //. StrMap is an abbreviation of _string map_. A string map is an object,\n  //. such as `{foo: 1, bar: 2, baz: 3}`, whose values are all members of\n  //. the same type. Formally, a value is a member of type `StrMap a` if its\n  //. [type identifier][] is `'Object'` and the values of its enumerable own\n  //. properties are all members of type `a`.\n\n  //# singleton :: String -> a -> StrMap a\n  //.\n  //. Takes a string and a value of any type, and returns a string map with\n  //. a single entry (mapping the key to the value).\n  //.\n  //. ```javascript\n  //. > S.singleton ('foo') (42)\n  //. {foo: 42}\n  //. ```\n  function singleton(key) {\n    return function(val) {\n      var strMap = {};\n      strMap[key] = val;\n      return strMap;\n    };\n  }\n  _.singleton = {\n    consts: {},\n    types: [$.String, a, $.StrMap (a)],\n    impl: singleton\n  };\n\n  //# insert :: String -> a -> StrMap a -> StrMap a\n  //.\n  //. Takes a string, a value of any type, and a string map, and returns a\n  //. string map comprising all the entries of the given string map plus the\n  //. entry specified by the first two arguments (which takes precedence).\n  //.\n  //. Equivalent to Haskell's `insert` function. Similar to Clojure's `assoc`\n  //. function.\n  //.\n  //. ```javascript\n  //. > S.insert ('c') (3) ({a: 1, b: 2})\n  //. {a: 1, b: 2, c: 3}\n  //.\n  //. > S.insert ('a') (4) ({a: 1, b: 2})\n  //. {a: 4, b: 2}\n  //. ```\n  function insert(key) {\n    return function(val) {\n      return function(strMap) {\n        return Z.concat (strMap, singleton (key) (val));\n      };\n    };\n  }\n  _.insert = {\n    consts: {},\n    types: [$.String, a, $.StrMap (a), $.StrMap (a)],\n    impl: insert\n  };\n\n  //# remove :: String -> StrMap a -> StrMap a\n  //.\n  //. Takes a string and a string map, and returns a string map comprising all\n  //. the entries of the given string map except the one whose key matches the\n  //. given string (if such a key exists).\n  //.\n  //. Equivalent to Haskell's `delete` function. Similar to Clojure's `dissoc`\n  //. function.\n  //.\n  //. ```javascript\n  //. > S.remove ('c') ({a: 1, b: 2, c: 3})\n  //. {a: 1, b: 2}\n  //.\n  //. > S.remove ('c') ({})\n  //. {}\n  //. ```\n  function remove(key) {\n    return function(strMap) {\n      var result = Z.concat (strMap, {});\n      delete result[key];\n      return result;\n    };\n  }\n  _.remove = {\n    consts: {},\n    types: [$.String, $.StrMap (a), $.StrMap (a)],\n    impl: remove\n  };\n\n  //# keys :: StrMap a -> Array String\n  //.\n  //. Returns the keys of the given string map, in arbitrary order.\n  //.\n  //. ```javascript\n  //. > S.sort (S.keys ({b: 2, c: 3, a: 1}))\n  //. ['a', 'b', 'c']\n  //. ```\n  _.keys = {\n    consts: {},\n    types: [$.StrMap (a), $.Array ($.String)],\n    impl: Object.keys\n  };\n\n  //# values :: StrMap a -> Array a\n  //.\n  //. Returns the values of the given string map, in arbitrary order.\n  //.\n  //. ```javascript\n  //. > S.sort (S.values ({a: 1, c: 3, b: 2}))\n  //. [1, 2, 3]\n  //. ```\n  function values(strMap) {\n    return Z.map (function(k) { return strMap[k]; }, Object.keys (strMap));\n  }\n  _.values = {\n    consts: {},\n    types: [$.StrMap (a), $.Array (a)],\n    impl: values\n  };\n\n  //# pairs :: StrMap a -> Array (Pair String a)\n  //.\n  //. Returns the key–value pairs of the given string map, in arbitrary order.\n  //.\n  //. ```javascript\n  //. > S.sort (S.pairs ({b: 2, a: 1, c: 3}))\n  //. [Pair ('a') (1), Pair ('b') (2), Pair ('c') (3)]\n  //. ```\n  function pairs(strMap) {\n    return Z.map (function(k) { return Pair (k) (strMap[k]); },\n                  Object.keys (strMap));\n  }\n  _.pairs = {\n    consts: {},\n    types: [$.StrMap (a), $.Array ($Pair ($.String) (a))],\n    impl: pairs\n  };\n\n  //# fromPairs :: Foldable f => f (Pair String a) -> StrMap a\n  //.\n  //. Returns a string map containing the key–value pairs specified by the\n  //. given [Foldable][]. If a key appears in multiple pairs, the rightmost\n  //. pair takes precedence.\n  //.\n  //. ```javascript\n  //. > S.fromPairs ([S.Pair ('a') (1), S.Pair ('b') (2), S.Pair ('c') (3)])\n  //. {a: 1, b: 2, c: 3}\n  //.\n  //. > S.fromPairs ([S.Pair ('x') (1), S.Pair ('x') (2)])\n  //. {x: 2}\n  //. ```\n  function fromPairs(pairs) {\n    return Z.reduce (function(strMap, pair) {\n      strMap[pair.fst] = pair.snd;\n      return strMap;\n    }, {}, pairs);\n  }\n  _.fromPairs = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($Pair ($.String) (a)), $.StrMap (a)],\n    impl: fromPairs\n  };\n\n  //. ### Number\n\n  //# negate :: ValidNumber -> ValidNumber\n  //.\n  //. Negates its argument.\n  //.\n  //. ```javascript\n  //. > S.negate (12.5)\n  //. -12.5\n  //.\n  //. > S.negate (-42)\n  //. 42\n  //. ```\n  function negate(n) {\n    return -n;\n  }\n  _.negate = {\n    consts: {},\n    types: [$.ValidNumber, $.ValidNumber],\n    impl: negate\n  };\n\n  //# add :: FiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Returns the sum of two (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.add (1) (1)\n  //. 2\n  //. ```\n  function add(x) {\n    return function(y) {\n      return x + y;\n    };\n  }\n  _.add = {\n    consts: {},\n    types: [$.FiniteNumber, $.FiniteNumber, $.FiniteNumber],\n    impl: add\n  };\n\n  //# sum :: Foldable f => f FiniteNumber -> FiniteNumber\n  //.\n  //. Returns the sum of the given array of (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.sum ([1, 2, 3, 4, 5])\n  //. 15\n  //.\n  //. > S.sum ([])\n  //. 0\n  //.\n  //. > S.sum (S.Just (42))\n  //. 42\n  //.\n  //. > S.sum (S.Nothing)\n  //. 0\n  //. ```\n  _.sum = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($.FiniteNumber), $.FiniteNumber],\n    impl: reduce (add) (0)\n  };\n\n  //# sub :: FiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Takes a finite number `n` and returns the _subtract `n`_ function.\n  //.\n  //. ```javascript\n  //. > S.map (S.sub (1)) ([1, 2, 3])\n  //. [0, 1, 2]\n  //. ```\n  function sub(y) {\n    return function(x) {\n      return x - y;\n    };\n  }\n  _.sub = {\n    consts: {},\n    types: [$.FiniteNumber, $.FiniteNumber, $.FiniteNumber],\n    impl: sub\n  };\n\n  //# mult :: FiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Returns the product of two (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.mult (4) (2)\n  //. 8\n  //. ```\n  function mult(x) {\n    return function(y) {\n      return x * y;\n    };\n  }\n  _.mult = {\n    consts: {},\n    types: [$.FiniteNumber, $.FiniteNumber, $.FiniteNumber],\n    impl: mult\n  };\n\n  //# product :: Foldable f => f FiniteNumber -> FiniteNumber\n  //.\n  //. Returns the product of the given array of (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.product ([1, 2, 3, 4, 5])\n  //. 120\n  //.\n  //. > S.product ([])\n  //. 1\n  //.\n  //. > S.product (S.Just (42))\n  //. 42\n  //.\n  //. > S.product (S.Nothing)\n  //. 1\n  //. ```\n  _.product = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($.FiniteNumber), $.FiniteNumber],\n    impl: reduce (mult) (1)\n  };\n\n  //# div :: NonZeroFiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Takes a non-zero finite number `n` and returns the _divide by `n`_\n  //. function.\n  //.\n  //. ```javascript\n  //. > S.map (S.div (2)) ([0, 1, 2, 3])\n  //. [0, 0.5, 1, 1.5]\n  //. ```\n  function div(y) {\n    return function(x) {\n      return x / y;\n    };\n  }\n  _.div = {\n    consts: {},\n    types: [$.NonZeroFiniteNumber, $.FiniteNumber, $.FiniteNumber],\n    impl: div\n  };\n\n  //# pow :: FiniteNumber -> FiniteNumber -> FiniteNumber\n  //.\n  //. Takes a finite number `n` and returns the _power of `n`_ function.\n  //.\n  //. ```javascript\n  //. > S.map (S.pow (2)) ([-3, -2, -1, 0, 1, 2, 3])\n  //. [9, 4, 1, 0, 1, 4, 9]\n  //.\n  //. > S.map (S.pow (0.5)) ([1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5]\n  //. ```\n  function pow(exp) {\n    return function(base) {\n      return Math.pow (base, exp);\n    };\n  }\n  _.pow = {\n    consts: {},\n    types: [$.FiniteNumber, $.FiniteNumber, $.FiniteNumber],\n    impl: pow\n  };\n\n  //# mean :: Foldable f => f FiniteNumber -> Maybe FiniteNumber\n  //.\n  //. Returns the mean of the given array of (finite) numbers.\n  //.\n  //. ```javascript\n  //. > S.mean ([1, 2, 3, 4, 5])\n  //. Just (3)\n  //.\n  //. > S.mean ([])\n  //. Nothing\n  //.\n  //. > S.mean (S.Just (42))\n  //. Just (42)\n  //.\n  //. > S.mean (S.Nothing)\n  //. Nothing\n  //. ```\n  function mean(foldable) {\n    var result = Z.reduce (\n      function(acc, n) {\n        acc.total += n;\n        acc.count += 1;\n        return acc;\n      },\n      {total: 0, count: 0},\n      foldable\n    );\n    return result.count > 0 ? Just (result.total / result.count) : Nothing;\n  }\n  _.mean = {\n    consts: {f: [Z.Foldable]},\n    types: [f ($.FiniteNumber), $Maybe ($.FiniteNumber)],\n    impl: mean\n  };\n\n  //. ### Integer\n\n  //# even :: Integer -> Boolean\n  //.\n  //. Returns `true` if the given integer is even; `false` if it is odd.\n  //.\n  //. ```javascript\n  //. > S.even (42)\n  //. true\n  //.\n  //. > S.even (99)\n  //. false\n  //. ```\n  function even(n) {\n    return n % 2 === 0;\n  }\n  _.even = {\n    consts: {},\n    types: [$.Integer, $.Boolean],\n    impl: even\n  };\n\n  //# odd :: Integer -> Boolean\n  //.\n  //. Returns `true` if the given integer is odd; `false` if it is even.\n  //.\n  //. ```javascript\n  //. > S.odd (99)\n  //. true\n  //.\n  //. > S.odd (42)\n  //. false\n  //. ```\n  function odd(n) {\n    return n % 2 !== 0;\n  }\n  _.odd = {\n    consts: {},\n    types: [$.Integer, $.Boolean],\n    impl: odd\n  };\n\n  //. ### Parse\n\n  //# parseDate :: String -> Maybe ValidDate\n  //.\n  //. Takes a string and returns Just the date represented by the string\n  //. if it does in fact represent a date; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.parseDate ('2011-01-19T17:40:00Z')\n  //. Just (new Date ('2011-01-19T17:40:00.000Z'))\n  //.\n  //. > S.parseDate ('today')\n  //. Nothing\n  //. ```\n  function parseDate(s) {\n    var date = new Date (s);\n    return isNaN (date.valueOf ()) ? Nothing : Just (date);\n  }\n  _.parseDate = {\n    consts: {},\n    types: [$.String, $Maybe ($.ValidDate)],\n    impl: parseDate\n  };\n\n  //  requiredNonCapturingGroup :: Array String -> String\n  function requiredNonCapturingGroup(xs) {\n    return '(?:' + xs.join ('|') + ')';\n  }\n\n  //  optionalNonCapturingGroup :: Array String -> String\n  function optionalNonCapturingGroup(xs) {\n    return requiredNonCapturingGroup (xs) + '?';\n  }\n\n  //  validFloatRepr :: RegExp\n  var validFloatRepr = new RegExp (\n    '^' +                     // start-of-string anchor\n    '\\\\s*' +                  // any number of leading whitespace characters\n    '[+-]?' +                 // optional sign\n    requiredNonCapturingGroup ([\n      'Infinity',             // \"Infinity\"\n      'NaN',                  // \"NaN\"\n      requiredNonCapturingGroup ([\n        '[0-9]+',             // number\n        '[0-9]+[.][0-9]+',    // number with interior decimal point\n        '[0-9]+[.]',          // number with trailing decimal point\n        '[.][0-9]+'           // number with leading decimal point\n      ]) +\n      optionalNonCapturingGroup ([\n        '[Ee]' +              // \"E\" or \"e\"\n        '[+-]?' +             // optional sign\n        '[0-9]+'              // exponent\n      ])\n    ]) +\n    '\\\\s*' +                  // any number of trailing whitespace characters\n    '$'                       // end-of-string anchor\n  );\n\n  //# parseFloat :: String -> Maybe Number\n  //.\n  //. Takes a string and returns Just the number represented by the string\n  //. if it does in fact represent a number; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.parseFloat ('-123.45')\n  //. Just (-123.45)\n  //.\n  //. > S.parseFloat ('foo.bar')\n  //. Nothing\n  //. ```\n  function parseFloat_(s) {\n    return validFloatRepr.test (s) ? Just (parseFloat (s)) : Nothing;\n  }\n  _.parseFloat = {\n    consts: {},\n    types: [$.String, $Maybe ($.Number)],\n    impl: parseFloat_\n  };\n\n  //  Radix :: Type\n  var Radix = $.NullaryType\n    ('sanctuary/Radix')\n    ('')\n    (function(x) { return $.Integer._test (x) && x >= 2 && x <= 36; });\n\n  //# parseInt :: Radix -> String -> Maybe Integer\n  //.\n  //. Takes a radix (an integer between 2 and 36 inclusive) and a string,\n  //. and returns Just the number represented by the string if it does in\n  //. fact represent a number in the base specified by the radix; Nothing\n  //. otherwise.\n  //.\n  //. This function is stricter than [`parseInt`][parseInt]: a string\n  //. is considered to represent an integer only if all its non-prefix\n  //. characters are members of the character set specified by the radix.\n  //.\n  //. ```javascript\n  //. > S.parseInt (10) ('-42')\n  //. Just (-42)\n  //.\n  //. > S.parseInt (16) ('0xFF')\n  //. Just (255)\n  //.\n  //. > S.parseInt (16) ('0xGG')\n  //. Nothing\n  //. ```\n  function parseInt_(radix) {\n    return function(s) {\n      var charset = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'.slice (0, radix);\n      var pattern = new RegExp ('^[' + charset + ']+$', 'i');\n\n      var t = s.replace (/^[+-]/, '');\n      if (pattern.test (radix === 16 ? t.replace (/^0x/i, '') : t)) {\n        var n = parseInt (s, radix);\n        if ($.Integer._test (n)) return Just (n);\n      }\n      return Nothing;\n    };\n  }\n  _.parseInt = {\n    consts: {},\n    types: [Radix, $.String, $Maybe ($.Integer)],\n    impl: parseInt_\n  };\n\n  //# parseJson :: (Any -> Boolean) -> String -> Maybe a\n  //.\n  //. Takes a predicate and a string which may or may not be valid JSON, and\n  //. returns Just the result of applying `JSON.parse` to the string *if* the\n  //. result satisfies the predicate; Nothing otherwise.\n  //.\n  //. ```javascript\n  //. > S.parseJson (S.is ($.Array ($.Integer))) ('[')\n  //. Nothing\n  //.\n  //. > S.parseJson (S.is ($.Array ($.Integer))) ('[\"1\",\"2\",\"3\"]')\n  //. Nothing\n  //.\n  //. > S.parseJson (S.is ($.Array ($.Integer))) ('[0,1.5,3,4.5]')\n  //. Nothing\n  //.\n  //. > S.parseJson (S.is ($.Array ($.Integer))) ('[1,2,3]')\n  //. Just ([1, 2, 3])\n  //. ```\n  function parseJson(pred) {\n    return B (filter (pred)) (encase (JSON.parse));\n  }\n  _.parseJson = {\n    consts: {},\n    types: [$.Predicate ($.Any), $.String, $Maybe (a)],\n    impl: parseJson\n  };\n\n  //. ### RegExp\n\n  //  Match :: Type\n  var Match = $.RecordType ({\n    match: $.String,\n    groups: $.Array ($Maybe ($.String))\n  });\n\n  //  toMatch :: Array String? -> Match\n  function toMatch(ss) {\n    return {match: ss[0], groups: Z.map (toMaybe, ss.slice (1))};\n  }\n\n  //  withRegex :: (RegExp, () -> a) -> a\n  function withRegex(pattern, thunk) {\n    var lastIndex = pattern.lastIndex;\n    var result = thunk ();\n    pattern.lastIndex = lastIndex;\n    return result;\n  }\n\n  //# regex :: RegexFlags -> String -> RegExp\n  //.\n  //. Takes a [RegexFlags][] and a pattern, and returns a RegExp.\n  //.\n  //. ```javascript\n  //. > S.regex ('g') (':\\\\d+:')\n  //. /:\\d+:/g\n  //. ```\n  function regex(flags) {\n    return function(source) {\n      return new RegExp (source, flags);\n    };\n  }\n  _.regex = {\n    consts: {},\n    types: [$.RegexFlags, $.String, $.RegExp],\n    impl: regex\n  };\n\n  //# regexEscape :: String -> String\n  //.\n  //. Takes a string which may contain regular expression metacharacters,\n  //. and returns a string with those metacharacters escaped.\n  //.\n  //. Properties:\n  //.\n  //.   - `forall s :: String.\n  //.      S.test (S.regex ('') (S.regexEscape (s))) (s) = true`\n  //.\n  //. ```javascript\n  //. > S.regexEscape ('-=*{XYZ}*=-')\n  //. '\\\\-=\\\\*\\\\{XYZ\\\\}\\\\*=\\\\-'\n  //. ```\n  function regexEscape(s) {\n    return s.replace (/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n  }\n  _.regexEscape = {\n    consts: {},\n    types: [$.String, $.String],\n    impl: regexEscape\n  };\n\n  //# test :: RegExp -> String -> Boolean\n  //.\n  //. Takes a pattern and a string, and returns `true` [iff][] the pattern\n  //. matches the string.\n  //.\n  //. ```javascript\n  //. > S.test (/^a/) ('abacus')\n  //. true\n  //.\n  //. > S.test (/^a/) ('banana')\n  //. false\n  //. ```\n  function test(pattern) {\n    return function(s) {\n      return withRegex (pattern, function() { return pattern.test (s); });\n    };\n  }\n  _.test = {\n    consts: {},\n    types: [$.RegExp, $.String, $.Boolean],\n    impl: test\n  };\n\n  //# match :: NonGlobalRegExp -> String -> Maybe { match :: String, groups :: Array (Maybe String) }\n  //.\n  //. Takes a pattern and a string, and returns Just a match record if the\n  //. pattern matches the string; Nothing otherwise.\n  //.\n  //. `groups :: Array (Maybe String)` acknowledges the existence of optional\n  //. capturing groups.\n  //.\n  //. Properties:\n  //.\n  //.   - `forall p :: Pattern, s :: String.\n  //.      S.head (S.matchAll (S.regex ('g') (p)) (s))\n  //.      = S.match (S.regex ('') (p)) (s)`\n  //.\n  //. See also [`matchAll`](#matchAll).\n  //.\n  //. ```javascript\n  //. > S.match (/(good)?bye/) ('goodbye')\n  //. Just ({match: 'goodbye', groups: [Just ('good')]})\n  //.\n  //. > S.match (/(good)?bye/) ('bye')\n  //. Just ({match: 'bye', groups: [Nothing]})\n  //. ```\n  function match(pattern) {\n    return function(s) {\n      return Z.map (toMatch, toMaybe (s.match (pattern)));\n    };\n  }\n  _.match = {\n    consts: {},\n    types: [$.NonGlobalRegExp, $.String, $Maybe (Match)],\n    impl: match\n  };\n\n  //# matchAll :: GlobalRegExp -> String -> Array { match :: String, groups :: Array (Maybe String) }\n  //.\n  //. Takes a pattern and a string, and returns an array of match records.\n  //.\n  //. `groups :: Array (Maybe String)` acknowledges the existence of optional\n  //. capturing groups.\n  //.\n  //. See also [`match`](#match).\n  //.\n  //. ```javascript\n  //. > S.matchAll (/@([a-z]+)/g) ('Hello, world!')\n  //. []\n  //.\n  //. > S.matchAll (/@([a-z]+)/g) ('Hello, @foo! Hello, @bar! Hello, @baz!')\n  //. [ {match: '@foo', groups: [Just ('foo')]},\n  //. . {match: '@bar', groups: [Just ('bar')]},\n  //. . {match: '@baz', groups: [Just ('baz')]} ]\n  //. ```\n  function matchAll(pattern) {\n    return function(s) {\n      return withRegex (pattern, function() {\n        return unfoldr (function(_) {\n          return Z.map (function(ss) {\n            return Pair (toMatch (ss)) (null);\n          }, toMaybe (pattern.exec (s)));\n        }) ([]);\n      });\n    };\n  }\n  _.matchAll = {\n    consts: {},\n    types: [$.GlobalRegExp, $.String, $.Array (Match)],\n    impl: matchAll\n  };\n\n  //. ### String\n\n  //# toUpper :: String -> String\n  //.\n  //. Returns the upper-case equivalent of its argument.\n  //.\n  //. See also [`toLower`](#toLower).\n  //.\n  //. ```javascript\n  //. > S.toUpper ('ABC def 123')\n  //. 'ABC DEF 123'\n  //. ```\n  _.toUpper = {\n    consts: {},\n    types: [$.String, $.String],\n    impl: invoke0 ('toUpperCase')\n  };\n\n  //# toLower :: String -> String\n  //.\n  //. Returns the lower-case equivalent of its argument.\n  //.\n  //. See also [`toUpper`](#toUpper).\n  //.\n  //. ```javascript\n  //. > S.toLower ('ABC def 123')\n  //. 'abc def 123'\n  //. ```\n  _.toLower = {\n    consts: {},\n    types: [$.String, $.String],\n    impl: invoke0 ('toLowerCase')\n  };\n\n  //# trim :: String -> String\n  //.\n  //. Strips leading and trailing whitespace characters.\n  //.\n  //. ```javascript\n  //. > S.trim ('\\t\\t foo bar \\n')\n  //. 'foo bar'\n  //. ```\n  _.trim = {\n    consts: {},\n    types: [$.String, $.String],\n    impl: invoke0 ('trim')\n  };\n\n  //# stripPrefix :: String -> String -> Maybe String\n  //.\n  //. Returns Just the portion of the given string (the second argument) left\n  //. after removing the given prefix (the first argument) if the string starts\n  //. with the prefix; Nothing otherwise.\n  //.\n  //. See also [`stripSuffix`](#stripSuffix).\n  //.\n  //. ```javascript\n  //. > S.stripPrefix ('https://') ('https://sanctuary.js.org')\n  //. Just ('sanctuary.js.org')\n  //.\n  //. > S.stripPrefix ('https://') ('http://sanctuary.js.org')\n  //. Nothing\n  //. ```\n  function stripPrefix(prefix) {\n    return function(s) {\n      var idx = prefix.length;\n      return s.slice (0, idx) === prefix ? Just (s.slice (idx)) : Nothing;\n    };\n  }\n  _.stripPrefix = {\n    consts: {},\n    types: [$.String, $.String, $Maybe ($.String)],\n    impl: stripPrefix\n  };\n\n  //# stripSuffix :: String -> String -> Maybe String\n  //.\n  //. Returns Just the portion of the given string (the second argument) left\n  //. after removing the given suffix (the first argument) if the string ends\n  //. with the suffix; Nothing otherwise.\n  //.\n  //. See also [`stripPrefix`](#stripPrefix).\n  //.\n  //. ```javascript\n  //. > S.stripSuffix ('.md') ('README.md')\n  //. Just ('README')\n  //.\n  //. > S.stripSuffix ('.md') ('README')\n  //. Nothing\n  //. ```\n  function stripSuffix(suffix) {\n    return function(s) {\n      var idx = s.length - suffix.length;  // value may be negative\n      return s.slice (idx) === suffix ? Just (s.slice (0, idx)) : Nothing;\n    };\n  }\n  _.stripSuffix = {\n    consts: {},\n    types: [$.String, $.String, $Maybe ($.String)],\n    impl: stripSuffix\n  };\n\n  //# words :: String -> Array String\n  //.\n  //. Takes a string and returns the array of words the string contains\n  //. (words are delimited by whitespace characters).\n  //.\n  //. See also [`unwords`](#unwords).\n  //.\n  //. ```javascript\n  //. > S.words (' foo bar baz ')\n  //. ['foo', 'bar', 'baz']\n  //. ```\n  function words(s) {\n    var words = s.split (/\\s+/);\n    var len = words.length;\n    return words.slice (words[0] === '' ? 1 : 0,\n                        words[len - 1] === '' ? len - 1 : len);\n  }\n  _.words = {\n    consts: {},\n    types: [$.String, $.Array ($.String)],\n    impl: words\n  };\n\n  //# unwords :: Array String -> String\n  //.\n  //. Takes an array of words and returns the result of joining the words\n  //. with separating spaces.\n  //.\n  //. See also [`words`](#words).\n  //.\n  //. ```javascript\n  //. > S.unwords (['foo', 'bar', 'baz'])\n  //. 'foo bar baz'\n  //. ```\n  _.unwords = {\n    consts: {},\n    types: [$.Array ($.String), $.String],\n    impl: invoke1 ('join') (' ')\n  };\n\n  //# lines :: String -> Array String\n  //.\n  //. Takes a string and returns the array of lines the string contains\n  //. (lines are delimited by newlines: `'\\n'` or `'\\r\\n'` or `'\\r'`).\n  //. The resulting strings do not contain newlines.\n  //.\n  //. See also [`unlines`](#unlines).\n  //.\n  //. ```javascript\n  //. > S.lines ('foo\\nbar\\nbaz\\n')\n  //. ['foo', 'bar', 'baz']\n  //. ```\n  function lines(s) {\n    return s === '' ? []\n                    : (s.replace (/\\r\\n?/g, '\\n')).match (/^(?=[\\s\\S]).*/gm);\n  }\n  _.lines = {\n    consts: {},\n    types: [$.String, $.Array ($.String)],\n    impl: lines\n  };\n\n  //# unlines :: Array String -> String\n  //.\n  //. Takes an array of lines and returns the result of joining the lines\n  //. after appending a terminating line feed (`'\\n'`) to each.\n  //.\n  //. See also [`lines`](#lines).\n  //.\n  //. ```javascript\n  //. > S.unlines (['foo', 'bar', 'baz'])\n  //. 'foo\\nbar\\nbaz\\n'\n  //. ```\n  function unlines(xs) {\n    return xs.reduce (function(s, x) { return s + x + '\\n'; }, '');\n  }\n  _.unlines = {\n    consts: {},\n    types: [$.Array ($.String), $.String],\n    impl: unlines\n  };\n\n  //# splitOn :: String -> String -> Array String\n  //.\n  //. Returns the substrings of its second argument separated by occurrences\n  //. of its first argument.\n  //.\n  //. See also [`joinWith`](#joinWith) and [`splitOnRegex`](#splitOnRegex).\n  //.\n  //. ```javascript\n  //. > S.splitOn ('::') ('foo::bar::baz')\n  //. ['foo', 'bar', 'baz']\n  //. ```\n  _.splitOn = {\n    consts: {},\n    types: [$.String, $.String, $.Array ($.String)],\n    impl: invoke1 ('split')\n  };\n\n  //# splitOnRegex :: GlobalRegExp -> String -> Array String\n  //.\n  //. Takes a pattern and a string, and returns the result of splitting the\n  //. string at every non-overlapping occurrence of the pattern.\n  //.\n  //. Properties:\n  //.\n  //.   - `forall s :: String, t :: String.\n  //.      S.joinWith (s)\n  //.                 (S.splitOnRegex (S.regex ('g') (S.regexEscape (s))) (t))\n  //.      = t`\n  //.\n  //. See also [`splitOn`](#splitOn).\n  //.\n  //. ```javascript\n  //. > S.splitOnRegex (/[,;][ ]*/g) ('foo, bar, baz')\n  //. ['foo', 'bar', 'baz']\n  //.\n  //. > S.splitOnRegex (/[,;][ ]*/g) ('foo;bar;baz')\n  //. ['foo', 'bar', 'baz']\n  //. ```\n  function splitOnRegex(pattern) {\n    return function(s) {\n      return withRegex (pattern, function() {\n        var result = [];\n        var lastIndex = 0;\n        var match;\n        while ((match = pattern.exec (s)) != null) {\n          if (pattern.lastIndex === lastIndex && match[0] === '') {\n            if (pattern.lastIndex === s.length) return result;\n            pattern.lastIndex += 1;\n          } else {\n            result.push (s.slice (lastIndex, match.index));\n            lastIndex = match.index + match[0].length;\n          }\n        }\n        result.push (s.slice (lastIndex));\n        return result;\n      });\n    };\n  }\n  _.splitOnRegex = {\n    consts: {},\n    types: [$.GlobalRegExp, $.String, $.Array ($.String)],\n    impl: splitOnRegex\n  };\n\n  return create ({\n    checkTypes: (\n      /* global process:false */\n      typeof process === 'undefined'\n      || process == null\n      || process.env == null\n      || process.env.NODE_ENV !== 'production'\n    ),\n    env: Z.concat ($.env, [\n      $.FiniteNumber,\n      $.NonZeroFiniteNumber,\n      $Either ($.Unknown) ($.Unknown),\n      Fn ($.Unknown) ($.Unknown),\n      $.GlobalRegExp,\n      $.NonGlobalRegExp,\n      $.Integer,\n      $.NonNegativeInteger,\n      $Maybe ($.Unknown),\n      $.Array2 ($.Unknown) ($.Unknown),\n      $Pair ($.Unknown) ($.Unknown),\n      $.RegexFlags,\n      $.Type,\n      $.TypeClass,\n      $.ValidDate,\n      $.ValidNumber\n    ])\n  });\n\n}));\n\n//. [#438]:                     https://github.com/sanctuary-js/sanctuary/issues/438\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [BinaryType]:               v:sanctuary-js/sanctuary-def#BinaryType\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [Either]:                   #either-type\n//. [Fantasy Land]:             v:fantasyland/fantasy-land\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [GIGO]:                     https://en.wikipedia.org/wiki/Garbage_in,_garbage_out\n//. [Haskell]:                  https://www.haskell.org/\n//. [Kleisli]:                  https://en.wikipedia.org/wiki/Kleisli_category\n//. [Maybe]:                    #maybe-type\n//. [Nullable]:                 v:sanctuary-js/sanctuary-def#Nullable\n//. [PureScript]:               http://www.purescript.org/\n//. [Ramda]:                    http://ramdajs.com/\n//. [RegexFlags]:               v:sanctuary-js/sanctuary-def#RegexFlags\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [UnaryType]:                v:sanctuary-js/sanctuary-def#UnaryType\n//. [`$.test`]:                 v:sanctuary-js/sanctuary-def#test\n//. [`Descending`]:             v:sanctuary-js/sanctuary-descending#Descending\n//. [`R.__`]:                   http://ramdajs.com/docs/#__\n//. [`R.bind`]:                 http://ramdajs.com/docs/#bind\n//. [`R.invoker`]:              http://ramdajs.com/docs/#invoker\n//. [`Z.alt`]:                  v:sanctuary-js/sanctuary-type-classes#alt\n//. [`Z.ap`]:                   v:sanctuary-js/sanctuary-type-classes#ap\n//. [`Z.apFirst`]:              v:sanctuary-js/sanctuary-type-classes#apFirst\n//. [`Z.apSecond`]:             v:sanctuary-js/sanctuary-type-classes#apSecond\n//. [`Z.bimap`]:                v:sanctuary-js/sanctuary-type-classes#bimap\n//. [`Z.chain`]:                v:sanctuary-js/sanctuary-type-classes#chain\n//. [`Z.chainRec`]:             v:sanctuary-js/sanctuary-type-classes#chainRec\n//. [`Z.compose`]:              v:sanctuary-js/sanctuary-type-classes#compose\n//. [`Z.concat`]:               v:sanctuary-js/sanctuary-type-classes#concat\n//. [`Z.contramap`]:            v:sanctuary-js/sanctuary-type-classes#contramap\n//. [`Z.dropWhile`]:            v:sanctuary-js/sanctuary-type-classes#dropWhile\n//. [`Z.duplicate`]:            v:sanctuary-js/sanctuary-type-classes#duplicate\n//. [`Z.empty`]:                v:sanctuary-js/sanctuary-type-classes#empty\n//. [`Z.equals`]:               v:sanctuary-js/sanctuary-type-classes#equals\n//. [`Z.extend`]:               v:sanctuary-js/sanctuary-type-classes#extend\n//. [`Z.extract`]:              v:sanctuary-js/sanctuary-type-classes#extract\n//. [`Z.filter`]:               v:sanctuary-js/sanctuary-type-classes#filter\n//. [`Z.flip`]:                 v:sanctuary-js/sanctuary-type-classes#flip\n//. [`Z.foldMap`]:              v:sanctuary-js/sanctuary-type-classes#foldMap\n//. [`Z.gt`]:                   v:sanctuary-js/sanctuary-type-classes#gt\n//. [`Z.gte`]:                  v:sanctuary-js/sanctuary-type-classes#gte\n//. [`Z.id`]:                   v:sanctuary-js/sanctuary-type-classes#id\n//. [`Z.invert`]:               v:sanctuary-js/sanctuary-type-classes#invert\n//. [`Z.join`]:                 v:sanctuary-js/sanctuary-type-classes#join\n//. [`Z.lt`]:                   v:sanctuary-js/sanctuary-type-classes#lt\n//. [`Z.lte`]:                  v:sanctuary-js/sanctuary-type-classes#lte\n//. [`Z.map`]:                  v:sanctuary-js/sanctuary-type-classes#map\n//. [`Z.mapLeft`]:              v:sanctuary-js/sanctuary-type-classes#mapLeft\n//. [`Z.of`]:                   v:sanctuary-js/sanctuary-type-classes#of\n//. [`Z.promap`]:               v:sanctuary-js/sanctuary-type-classes#promap\n//. [`Z.reject`]:               v:sanctuary-js/sanctuary-type-classes#reject\n//. [`Z.sequence`]:             v:sanctuary-js/sanctuary-type-classes#sequence\n//. [`Z.takeWhile`]:            v:sanctuary-js/sanctuary-type-classes#takeWhile\n//. [`Z.traverse`]:             v:sanctuary-js/sanctuary-type-classes#traverse\n//. [`Z.zero`]:                 v:sanctuary-js/sanctuary-type-classes#zero\n//. [`show`]:                   v:sanctuary-js/sanctuary-show#show\n//. [equivalence]:              https://en.wikipedia.org/wiki/Equivalence_relation\n//. [iff]:                      https://en.wikipedia.org/wiki/If_and_only_if\n//. [parseInt]:                 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n//. [partial functions]:        https://en.wikipedia.org/wiki/Partial_function\n//. [ramda/ramda#683]:          https://github.com/ramda/ramda/issues/683\n//. [ramda/ramda#1413]:         https://github.com/ramda/ramda/issues/1413\n//. [ramda/ramda#1419]:         https://github.com/ramda/ramda/pull/1419\n//. [sanctuary-def]:            v:sanctuary-js/sanctuary-def\n//. [sanctuary-either]:         v:sanctuary-js/sanctuary-either\n//. [sanctuary-maybe]:          v:sanctuary-js/sanctuary-maybe\n//. [sanctuary-pair]:           v:sanctuary-js/sanctuary-pair\n//. [sanctuary-show]:           v:sanctuary-js/sanctuary-show\n//. [sanctuary-type-classes]:   v:sanctuary-js/sanctuary-type-classes\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [thrush]:                   https://github.com/raganwald-deprecated/homoiconic/blob/master/2008-10-30/thrush.markdown\n//. [total functions]:          https://en.wikipedia.org/wiki/Partial_function#Total_function\n//. [type checking]:            #type-checking\n//. [type identifier]:          v:sanctuary-js/sanctuary-type-identifiers\n//. [type representative]:      v:fantasyland/fantasy-land#type-representatives\n//. [variadic functions]:       https://en.wikipedia.org/wiki/Variadic_function\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '9.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","/*              ___                 ______\n               /  /\\               /  ___/\\\n        ______/  / / _______    __/  /___\\/\n       /  ___   / / /  ___  \\  /_   __/\\\n      /  /\\_/  / / /  /__/  /\\ \\/  /\\_\\/\n     /  / //  / / /  ______/ / /  / /\n    /  /_//  / / /  /______\\/ /  / /\n    \\_______/ /  \\_______/\\  /__/ /\n     \\______\\/    \\______\\/  \\__*/\n\n//. # sanctuary-def\n//.\n//. sanctuary-def is a run-time type system for JavaScript. It facilitates\n//. the definition of curried JavaScript functions which are explicit about\n//. the number of arguments to which they may be applied and the types of\n//. those arguments.\n//.\n//. It is conventional to import the package as `$`:\n//.\n//. ```javascript\n//. const $ = require ('sanctuary-def');\n//. ```\n//.\n//. The next step is to define an environment. An environment is an array\n//. of [types][]. [`env`][] is an environment containing all the built-in\n//. JavaScript types. It may be used as the basis for environments which\n//. include custom types in addition to the built-in types:\n//.\n//. ```javascript\n//. //    Integer :: Type\n//. const Integer = '...';\n//.\n//. //    NonZeroInteger :: Type\n//. const NonZeroInteger = '...';\n//.\n//. //    env :: Array Type\n//. const env = $.env.concat ([Integer, NonZeroInteger]);\n//. ```\n//.\n//. Type constructors such as `List :: Type -> Type` cannot be included in\n//. an environment as they're not of the correct type. One could, though,\n//. use a type constructor to define a fixed number of concrete types:\n//.\n//. ```javascript\n//. //    env :: Array Type\n//. const env = $.env.concat ([\n//.   List ($.Number),                // :: Type\n//.   List ($.String),                // :: Type\n//.   List (List ($.Number)),         // :: Type\n//.   List (List ($.String)),         // :: Type\n//.   List (List (List ($.Number))),  // :: Type\n//.   List (List (List ($.String))),  // :: Type\n//. ]);\n//. ```\n//.\n//. Not only would this be tedious, but one could never enumerate all possible\n//. types as there are infinitely many. Instead, one should use [`Unknown`][]:\n//.\n//. ```javascript\n//. //    env :: Array Type\n//. const env = $.env.concat ([List ($.Unknown)]);\n//. ```\n//.\n//. The next step is to define a `def` function for the environment:\n//.\n//. ```javascript\n//. const def = $.create ({checkTypes: true, env});\n//. ```\n//.\n//. The `checkTypes` option determines whether type checking is enabled.\n//. This allows one to only pay the performance cost of run-time type checking\n//. during development. For example:\n//.\n//. ```javascript\n//. const def = $.create ({\n//.   checkTypes: process.env.NODE_ENV === 'development',\n//.   env,\n//. });\n//. ```\n//.\n//. `def` is a function for defining functions. For example:\n//.\n//. ```javascript\n//. //    add :: Number -> Number -> Number\n//. const add =\n//. def ('add')\n//.     ({})\n//.     ([$.Number, $.Number, $.Number])\n//.     (x => y => x + y);\n//. ```\n//.\n//. `[$.Number, $.Number, $.Number]` specifies that `add` takes two arguments\n//. of type `Number`, one at a time, and returns a value of type `Number`.\n//.\n//. Applying `add` to two arguments, one at a time, gives the expected result:\n//.\n//. ```javascript\n//. add (2) (2);\n//. // => 4\n//. ```\n//.\n//. Applying `add` to multiple arguments at once results in an exception being\n//. thrown:\n//.\n//. ```javascript\n//. add (2, 2, 2);\n//. // ! TypeError: ‘add’ applied to the wrong number of arguments\n//. //\n//. //   add :: Number -> Number -> Number\n//. //          ^^^^^^\n//. //            1\n//. //\n//. //   Expected one argument but received three arguments:\n//. //\n//. //     - 2\n//. //     - 2\n//. //     - 2\n//. ```\n//.\n//. Applying `add` to one argument produces a function awaiting the remaining\n//. argument. This is known as partial application. Partial application allows\n//. more specific functions to be defined in terms of more general ones:\n//.\n//. ```javascript\n//. //    inc :: Number -> Number\n//. const inc = add (1);\n//.\n//. inc (7);\n//. // => 8\n//. ```\n//.\n//. JavaScript's implicit type coercion often obfuscates the source of type\n//. errors. Consider the following function:\n//.\n//. ```javascript\n//. //    _add :: Number -> Number -> Number\n//. const _add = x => y => x + y;\n//. ```\n//.\n//. The type signature indicates that `_add` takes arguments of type `Number`,\n//. but this is not enforced. This allows type errors to be silently ignored:\n//.\n//. ```javascript\n//. _add ('2') ('2');\n//. // => '22'\n//. ```\n//.\n//. `add`, on the other hand, throws if applied to arguments of the wrong\n//. types:\n//.\n//. ```javascript\n//. add ('2') ('2');\n//. // ! TypeError: Invalid value\n//. //\n//. //   add :: Number -> Number -> Number\n//. //          ^^^^^^\n//. //            1\n//. //\n//. //   1)  \"2\" :: String\n//. //\n//. //   The value at position 1 is not a member of ‘Number’.\n//. ```\n//.\n//. Type checking is performed as arguments are provided (rather than once all\n//. arguments have been provided), so type errors are reported early:\n//.\n//. ```javascript\n//. add ('X');\n//. // ! TypeError: Invalid value\n//. //\n//. //   add :: Number -> Number -> Number\n//. //          ^^^^^^\n//. //            1\n//. //\n//. //   1)  \"X\" :: String\n//. //\n//. //   The value at position 1 is not a member of ‘Number’.\n//. ```\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f (require ('sanctuary-either'),\n                        require ('sanctuary-show'),\n                        require ('sanctuary-type-classes'),\n                        require ('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define (['sanctuary-either',\n             'sanctuary-show',\n             'sanctuary-type-classes',\n             'sanctuary-type-identifiers'],\n            f);\n  } else {\n    self.sanctuaryDef = f (self.sanctuaryEither,\n                           self.sanctuaryShow,\n                           self.sanctuaryTypeClasses,\n                           self.sanctuaryTypeIdentifiers);\n  }\n\n} (function(Either, show, Z, type) {\n\n  'use strict';\n\n  var MAX_SAFE_INTEGER = Math.pow (2, 53) - 1;\n  var MIN_SAFE_INTEGER = -MAX_SAFE_INTEGER;\n\n  var slice             = Array.prototype.slice;\n  var hasOwnProperty    = Object.prototype.hasOwnProperty;\n  var toString          = Object.prototype.toString;\n\n  var inspect = (function() {\n    /* istanbul ignore else */\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n      var util = require ('util');\n      /* istanbul ignore else */\n      if (typeof util.inspect.custom === 'symbol') return util.inspect.custom;\n    }\n    return 'inspect';\n  } ());\n\n  //  Left :: a -> Either a b\n  var Left = Either.Left;\n\n  //  Right :: b -> Either a b\n  var Right = Either.Right;\n\n  //  K :: a -> b -> a\n  function K(x) { return function(y) { return x; }; }\n\n  //  W :: (a -> a -> b) -> a -> b\n  function W(f) { return function(x) { return f (x) (x); }; }\n\n  //  always0 :: a -> () -> a\n  function always0(x) { return function() { return x; }; }\n\n  //  always2 :: a -> (b, c) -> a\n  function always2(x) { return function(y, z) { return x; }; }\n\n  //  compose :: (b -> c, a -> b) -> (a -> c)\n  function compose(f, g) {\n    return function(x) {\n      return f (g (x));\n    };\n  }\n\n  //  id :: a -> a\n  function id(x) { return x; }\n\n  //  init :: Array a -> Array a\n  function init(xs) { return xs.slice (0, -1); }\n\n  //  isEmpty :: Array a -> Boolean\n  function isEmpty(xs) { return xs.length === 0; }\n\n  //  isPrefix :: Array a -> Array a -> Boolean\n  function isPrefix(candidate) {\n    return function(xs) {\n      if (candidate.length > xs.length) return false;\n      for (var idx = 0; idx < candidate.length; idx += 1) {\n        if (candidate[idx] !== xs[idx]) return false;\n      }\n      return true;\n    };\n  }\n\n  //  joinWith :: (String, Array String) -> String\n  function joinWith(separator, ss) {\n    return ss.join (separator);\n  }\n\n  //  last :: Array a -> a\n  function last(xs) { return xs[xs.length - 1]; }\n\n  //  memberOf :: Array a -> a -> Boolean\n  function memberOf(xs) {\n    return function(y) {\n      return xs.some (function(x) { return Z.equals (x, y); });\n    };\n  }\n\n  //  or :: (Array a, Array a) -> Array a\n  function or(xs, ys) { return isEmpty (xs) ? ys : xs; }\n\n  //  strRepeat :: (String, Integer) -> String\n  function strRepeat(s, times) {\n    return joinWith (s, Array (times + 1));\n  }\n\n  //  r :: Char -> String -> String\n  function r(c) {\n    return function(s) {\n      return strRepeat (c, s.length);\n    };\n  }\n\n  //  _ :: String -> String\n  var _ = r (' ');\n\n  //  sortedKeys :: Object -> Array String\n  function sortedKeys(o) {\n    return (Object.keys (o)).sort ();\n  }\n\n  //  stripOutermostParens :: String -> String\n  function stripOutermostParens(s) {\n    return s.slice ('('.length, -')'.length);\n  }\n\n  //  toMarkdownList :: (String, String, a -> String, Array a) -> String\n  function toMarkdownList(empty, s, f, xs) {\n    return isEmpty (xs) ?\n      empty :\n      Z.reduce (function(s, x) { return s + '  - ' + f (x) + '\\n'; }, s, xs);\n  }\n\n  //  trimTrailingSpaces :: String -> String\n  function trimTrailingSpaces(s) {\n    return s.replace (/[ ]+$/gm, '');\n  }\n\n  //  unless :: (Boolean, (a -> a), a) -> a\n  function unless(bool, f, x) {\n    return bool ? x : f (x);\n  }\n\n  //  when :: (Boolean, (a -> a), a) -> a\n  function when(bool, f, x) {\n    return bool ? f (x) : x;\n  }\n\n  //  wrap :: String -> String -> String -> String\n  function wrap(prefix) {\n    return function(suffix) {\n      return function(s) {\n        return prefix + s + suffix;\n      };\n    };\n  }\n\n  //  parenthesize :: String -> String\n  var parenthesize = wrap ('(') (')');\n\n  //  q :: String -> String\n  var q = wrap ('\\u2018') ('\\u2019');\n\n  //  stripNamespace :: String -> String\n  function stripNamespace(s) { return s.slice (s.indexOf ('/') + 1); }\n\n  //  _Type :: ... -> Type\n  function _Type(\n    type,       // :: String\n    name,       // :: String\n    url,        // :: String\n    format,     // :: (String -> String, String -> String -> String) -> String\n    test,       // :: Any -> Boolean\n    keys,       // :: Array String\n    types       // :: StrMap { extractor :: a -> Array b, type :: Type }\n  ) {\n    this._test = test;\n    this.format = format;\n    this.keys = keys;\n    this.name = name;\n    this.type = type;\n    this.types = types;\n    this.url = url;\n  }\n\n  _Type['@@type'] = 'sanctuary-def/Type';\n\n  //  Type#fantasy-land/equals :: Type ~> Type -> Boolean\n  _Type.prototype['fantasy-land/equals'] = function(other) {\n    return (\n      Z.equals (this.type, other.type) &&\n      Z.equals (this.name, other.name) &&\n      Z.equals (this.url, other.url) &&\n      Z.equals (this.keys, other.keys) &&\n      this.keys.every (function(k) {\n        return Z.equals (this.types[k].type, other.types[k].type);\n      }, this)\n    );\n  };\n\n  _Type.prototype.validate = function(x) {\n    if (!(this._test (x))) return Left ({value: x, propPath: []});\n    for (var idx = 0; idx < this.keys.length; idx += 1) {\n      var k = this.keys[idx];\n      var t = this.types[k];\n      for (var idx2 = 0, ys = t.extractor (x); idx2 < ys.length; idx2 += 1) {\n        var result = t.type.validate (ys[idx2]);\n        if (result.isLeft) {\n          var value = result.value.value;\n          var propPath = Z.concat ([k], result.value.propPath);\n          return Left ({value: value, propPath: propPath});\n        }\n      }\n    }\n    return Right (x);\n  };\n\n  _Type.prototype['@@show'] = function() {\n    return this.format (id, K (id));\n  };\n\n  var BINARY        = 'BINARY';\n  var FUNCTION      = 'FUNCTION';\n  var INCONSISTENT  = 'INCONSISTENT';\n  var NO_ARGUMENTS  = 'NO_ARGUMENTS';\n  var NULLARY       = 'NULLARY';\n  var RECORD        = 'RECORD';\n  var UNARY         = 'UNARY';\n  var UNKNOWN       = 'UNKNOWN';\n  var VARIABLE      = 'VARIABLE';\n\n  //  Inconsistent :: Type\n  var Inconsistent =\n  new _Type (INCONSISTENT, '', '', always2 ('???'), K (false), [], {});\n\n  //  NoArguments :: Type\n  var NoArguments =\n  new _Type (NO_ARGUMENTS, '', '', always2 ('()'), K (true), [], {});\n\n  //  typeEq :: String -> a -> Boolean\n  function typeEq(name) {\n    return function(x) {\n      return type (x) === name;\n    };\n  }\n\n  //  typeofEq :: String -> a -> Boolean\n  function typeofEq(typeof_) {\n    return function(x) {\n      // eslint-disable-next-line valid-typeof\n      return typeof x === typeof_;\n    };\n  }\n\n  //  functionUrl :: String -> String\n  function functionUrl(name) {\n    var version = '0.18.1';  // updated programmatically\n    return 'https://github.com/sanctuary-js/sanctuary-def/tree/v' + version +\n           '#' + stripNamespace (name);\n  }\n\n  //  NullaryTypeWithUrl :: (String, Any -> Boolean) -> Type\n  function NullaryTypeWithUrl(name, test) {\n    return NullaryType (name) (functionUrl (name)) (test);\n  }\n\n  //  EnumTypeWithUrl :: (String, Array Any) -> Type\n  function EnumTypeWithUrl(name, members) {\n    return EnumType (name) (functionUrl (name)) (members);\n  }\n\n  //  UnaryTypeWithUrl ::\n  //    (String, Any -> Boolean, t a -> Array a) -> (Type -> Type)\n  function UnaryTypeWithUrl(name, test, _1) {\n    return UnaryType (name) (functionUrl (name)) (test) (_1);\n  }\n\n  //  BinaryTypeWithUrl ::\n  //    (String, Any -> Boolean, t a b -> Array a, t a b -> Array b) ->\n  //      ((Type, Type) -> Type)\n  function BinaryTypeWithUrl(name, test, _1, _2) {\n    return BinaryType (name) (functionUrl (name)) (test) (_1) (_2);\n  }\n\n  //. ### Types\n  //.\n  //. Conceptually, a type is a set of values. One can think of a value of\n  //. type `Type` as a function of type `Any -> Boolean` which tests values\n  //. for membership in the set (though this is an oversimplification).\n\n  //# Any :: Type\n  //.\n  //. Type comprising every JavaScript value.\n  var Any = NullaryTypeWithUrl ('sanctuary-def/Any', K (true));\n\n  //# AnyFunction :: Type\n  //.\n  //. Type comprising every Function value.\n  var AnyFunction = NullaryTypeWithUrl ('Function', typeofEq ('function'));\n\n  //# Arguments :: Type\n  //.\n  //. Type comprising every [`arguments`][arguments] object.\n  var Arguments = NullaryTypeWithUrl ('Arguments', typeEq ('Arguments'));\n\n  //# Array :: Type -> Type\n  //.\n  //. Constructor for homogeneous Array types.\n  var Array_ = UnaryTypeWithUrl ('Array', typeEq ('Array'), id);\n\n  //# Array0 :: Type\n  //.\n  //. Type whose sole member is `[]`.\n  var Array0 = NullaryTypeWithUrl (\n    'sanctuary-def/Array0',\n    function(x) { return typeEq ('Array') (x) && x.length === 0; }\n  );\n\n  //# Array1 :: Type -> Type\n  //.\n  //. Constructor for singleton Array types.\n  var Array1 = UnaryTypeWithUrl (\n    'sanctuary-def/Array1',\n    function(x) { return typeEq ('Array') (x) && x.length === 1; },\n    id\n  );\n\n  //# Array2 :: Type -> Type -> Type\n  //.\n  //. Constructor for heterogeneous Array types of length 2. `['foo', true]` is\n  //. a member of `Array2 String Boolean`.\n  var Array2 = BinaryTypeWithUrl (\n    'sanctuary-def/Array2',\n    function(x) { return typeEq ('Array') (x) && x.length === 2; },\n    function(array2) { return [array2[0]]; },\n    function(array2) { return [array2[1]]; }\n  );\n\n  //# Boolean :: Type\n  //.\n  //. Type comprising `true` and `false`.\n  var Boolean_ = NullaryTypeWithUrl ('Boolean', typeofEq ('boolean'));\n\n  //# Date :: Type\n  //.\n  //. Type comprising every Date value.\n  var Date_ = NullaryTypeWithUrl ('Date', typeEq ('Date'));\n\n  //# Error :: Type\n  //.\n  //. Type comprising every Error value, including values of more specific\n  //. constructors such as [`SyntaxError`][] and [`TypeError`][].\n  var Error_ = NullaryTypeWithUrl ('Error', typeEq ('Error'));\n\n  //# FiniteNumber :: Type\n  //.\n  //. Type comprising every [`ValidNumber`][] value except `Infinity` and\n  //. `-Infinity`.\n  var FiniteNumber = NullaryTypeWithUrl (\n    'sanctuary-def/FiniteNumber',\n    function(x) { return ValidNumber._test (x) && isFinite (x); }\n  );\n\n  //  augmentThunk :: NonEmpty (Array Type) -> NonEmpty (Array Type)\n  function augmentThunk(types) {\n    return types.length === 1 ? Z.concat ([NoArguments], types) : types;\n  }\n\n  //# Function :: NonEmpty (Array Type) -> Type\n  //.\n  //. Constructor for Function types.\n  //.\n  //. Examples:\n  //.\n  //.   - `$.Function ([$.Date, $.String])` represents the `Date -> String`\n  //.     type; and\n  //.   - `$.Function ([a, b, a])` represents the `(a, b) -> a` type.\n  function Function_(_types) {\n    var types = augmentThunk (_types);\n\n    function format(outer, inner) {\n      var xs = types.map (function(t, idx) {\n        return unless (t.type === RECORD || isEmpty (t.keys),\n                       stripOutermostParens,\n                       inner ('$' + show (idx + 1)) (show (t)));\n      });\n      var parenthesize = wrap (outer ('(')) (outer (')'));\n      return parenthesize (unless (types.length === 2,\n                                   parenthesize,\n                                   joinWith (outer (', '), init (xs))) +\n                           outer (' -> ') +\n                           last (xs));\n    }\n\n    var test = AnyFunction._test;\n\n    var $keys = [];\n    var $types = {};\n    types.forEach (function(t, idx) {\n      var k = '$' + show (idx + 1);\n      $keys.push (k);\n      $types[k] = {extractor: K ([]), type: t};\n    });\n\n    return new _Type (FUNCTION, '', '', format, test, $keys, $types);\n  }\n\n  //# GlobalRegExp :: Type\n  //.\n  //. Type comprising every [`RegExp`][] value whose `global` flag is `true`.\n  //.\n  //. See also [`NonGlobalRegExp`][].\n  var GlobalRegExp = NullaryTypeWithUrl (\n    'sanctuary-def/GlobalRegExp',\n    function(x) { return RegExp_._test (x) && x.global; }\n  );\n\n  //# HtmlElement :: Type\n  //.\n  //. Type comprising every [HTML element][].\n  var HtmlElement = NullaryTypeWithUrl (\n    'sanctuary-def/HtmlElement',\n    function(x) {\n      return /^\\[object HTML.+Element\\]$/.test (toString.call (x));\n    }\n  );\n\n  //# Integer :: Type\n  //.\n  //. Type comprising every integer in the range\n  //. [[`Number.MIN_SAFE_INTEGER`][min] .. [`Number.MAX_SAFE_INTEGER`][max]].\n  var Integer = NullaryTypeWithUrl (\n    'sanctuary-def/Integer',\n    function(x) {\n      return ValidNumber._test (x) &&\n             Math.floor (x) === x &&\n             x >= MIN_SAFE_INTEGER &&\n             x <= MAX_SAFE_INTEGER;\n    }\n  );\n\n  //# NegativeFiniteNumber :: Type\n  //.\n  //. Type comprising every [`FiniteNumber`][] value less than zero.\n  var NegativeFiniteNumber = NullaryTypeWithUrl (\n    'sanctuary-def/NegativeFiniteNumber',\n    function(x) { return FiniteNumber._test (x) && x < 0; }\n  );\n\n  //# NegativeInteger :: Type\n  //.\n  //. Type comprising every [`Integer`][] value less than zero.\n  var NegativeInteger = NullaryTypeWithUrl (\n    'sanctuary-def/NegativeInteger',\n    function(x) { return Integer._test (x) && x < 0; }\n  );\n\n  //# NegativeNumber :: Type\n  //.\n  //. Type comprising every [`Number`][] value less than zero.\n  var NegativeNumber = NullaryTypeWithUrl (\n    'sanctuary-def/NegativeNumber',\n    function(x) { return Number_._test (x) && x < 0; }\n  );\n\n  //# NonEmpty :: Type -> Type\n  //.\n  //. Constructor for non-empty types. `$.NonEmpty ($.String)`, for example, is\n  //. the type comprising every [`String`][] value except `''`.\n  //.\n  //. The given type must satisfy the [Monoid][] and [Setoid][] specifications.\n  var NonEmpty = UnaryTypeWithUrl (\n    'sanctuary-def/NonEmpty',\n    function(x) {\n      return Z.Monoid.test (x) &&\n             Z.Setoid.test (x) &&\n             !(Z.equals (x, Z.empty (x.constructor)));\n    },\n    function(monoid) { return [monoid]; }\n  );\n\n  //# NonGlobalRegExp :: Type\n  //.\n  //. Type comprising every [`RegExp`][] value whose `global` flag is `false`.\n  //.\n  //. See also [`GlobalRegExp`][].\n  var NonGlobalRegExp = NullaryTypeWithUrl (\n    'sanctuary-def/NonGlobalRegExp',\n    function(x) { return RegExp_._test (x) && !x.global; }\n  );\n\n  //# NonNegativeInteger :: Type\n  //.\n  //. Type comprising every non-negative [`Integer`][] value (including `-0`).\n  //. Also known as the set of natural numbers under ISO 80000-2:2009.\n  var NonNegativeInteger = NullaryTypeWithUrl (\n    'sanctuary-def/NonNegativeInteger',\n    function(x) { return Integer._test (x) && x >= 0; }\n  );\n\n  //# NonZeroFiniteNumber :: Type\n  //.\n  //. Type comprising every [`FiniteNumber`][] value except `0` and `-0`.\n  var NonZeroFiniteNumber = NullaryTypeWithUrl (\n    'sanctuary-def/NonZeroFiniteNumber',\n    function(x) { return FiniteNumber._test (x) && x !== 0; }\n  );\n\n  //# NonZeroInteger :: Type\n  //.\n  //. Type comprising every [`Integer`][] value except `0` and `-0`.\n  var NonZeroInteger = NullaryTypeWithUrl (\n    'sanctuary-def/NonZeroInteger',\n    function(x) { return Integer._test (x) && x !== 0; }\n  );\n\n  //# NonZeroValidNumber :: Type\n  //.\n  //. Type comprising every [`ValidNumber`][] value except `0` and `-0`.\n  var NonZeroValidNumber = NullaryTypeWithUrl (\n    'sanctuary-def/NonZeroValidNumber',\n    function(x) { return ValidNumber._test (x) && x !== 0; }\n  );\n\n  //# Null :: Type\n  //.\n  //. Type whose sole member is `null`.\n  var Null = NullaryTypeWithUrl ('Null', typeEq ('Null'));\n\n  //# Nullable :: Type -> Type\n  //.\n  //. Constructor for types which include `null` as a member.\n  var Nullable = UnaryTypeWithUrl (\n    'sanctuary-def/Nullable',\n    K (true),\n    function(nullable) {\n      // eslint-disable-next-line eqeqeq\n      return nullable === null ? [] : [nullable];\n    }\n  );\n\n  //# Number :: Type\n  //.\n  //. Type comprising every primitive Number value (including `NaN`).\n  var Number_ = NullaryTypeWithUrl ('Number', typeofEq ('number'));\n\n  //# Object :: Type\n  //.\n  //. Type comprising every \"plain\" Object value. Specifically, values\n  //. created via:\n  //.\n  //.   - object literal syntax;\n  //.   - [`Object.create`][]; or\n  //.   - the `new` operator in conjunction with `Object` or a custom\n  //.     constructor function.\n  var Object_ = NullaryTypeWithUrl ('Object', typeEq ('Object'));\n\n  //# PositiveFiniteNumber :: Type\n  //.\n  //. Type comprising every [`FiniteNumber`][] value greater than zero.\n  var PositiveFiniteNumber = NullaryTypeWithUrl (\n    'sanctuary-def/PositiveFiniteNumber',\n    function(x) { return FiniteNumber._test (x) && x > 0; }\n  );\n\n  //# PositiveInteger :: Type\n  //.\n  //. Type comprising every [`Integer`][] value greater than zero.\n  var PositiveInteger = NullaryTypeWithUrl (\n    'sanctuary-def/PositiveInteger',\n    function(x) { return Integer._test (x) && x > 0; }\n  );\n\n  //# PositiveNumber :: Type\n  //.\n  //. Type comprising every [`Number`][] value greater than zero.\n  var PositiveNumber = NullaryTypeWithUrl (\n    'sanctuary-def/PositiveNumber',\n    function(x) { return Number_._test (x) && x > 0; }\n  );\n\n  //# RegExp :: Type\n  //.\n  //. Type comprising every RegExp value.\n  var RegExp_ = NullaryTypeWithUrl ('RegExp', typeEq ('RegExp'));\n\n  //# RegexFlags :: Type\n  //.\n  //. Type comprising the canonical RegExp flags:\n  //.\n  //.   - `''`\n  //.   - `'g'`\n  //.   - `'i'`\n  //.   - `'m'`\n  //.   - `'gi'`\n  //.   - `'gm'`\n  //.   - `'im'`\n  //.   - `'gim'`\n  var RegexFlags = EnumTypeWithUrl (\n    'sanctuary-def/RegexFlags',\n    ['', 'g', 'i', 'm', 'gi', 'gm', 'im', 'gim']\n  );\n\n  //# StrMap :: Type -> Type\n  //.\n  //. Constructor for homogeneous Object types.\n  //.\n  //. `{foo: 1, bar: 2, baz: 3}`, for example, is a member of `StrMap Number`;\n  //. `{foo: 1, bar: 2, baz: 'XXX'}` is not.\n  var StrMap = UnaryTypeWithUrl (\n    'sanctuary-def/StrMap',\n    Object_._test,\n    function(strMap) {\n      return Z.reduce (function(xs, x) { xs.push (x); return xs; },\n                       [],\n                       strMap);\n    }\n  );\n\n  //# String :: Type\n  //.\n  //. Type comprising every primitive String value.\n  var String_ = NullaryTypeWithUrl ('String', typeofEq ('string'));\n\n  //# Symbol :: Type\n  //.\n  //. Type comprising every Symbol value.\n  var Symbol_ = NullaryTypeWithUrl ('Symbol', typeofEq ('symbol'));\n\n  //# Type :: Type\n  //.\n  //. Type comprising every `Type` value.\n  var Type = NullaryTypeWithUrl ('Type', typeEq ('sanctuary-def/Type'));\n\n  //# TypeClass :: Type\n  //.\n  //. Type comprising every [`TypeClass`][] value.\n  var TypeClass = NullaryTypeWithUrl (\n    'TypeClass',\n    typeEq ('sanctuary-type-classes/TypeClass')\n  );\n\n  //# Undefined :: Type\n  //.\n  //. Type whose sole member is `undefined`.\n  var Undefined = NullaryTypeWithUrl ('Undefined', typeEq ('Undefined'));\n\n  //# Unknown :: Type\n  //.\n  //. Type used to represent missing type information. The type of `[]`,\n  //. for example, is `Array ???`.\n  //.\n  //. May be used with type constructors when defining environments. Given a\n  //. type constructor `List :: Type -> Type`, one could use `List ($.Unknown)`\n  //. to include an infinite number of types in an environment:\n  //.\n  //.   - `List Number`\n  //.   - `List String`\n  //.   - `List (List Number)`\n  //.   - `List (List String)`\n  //.   - `List (List (List Number))`\n  //.   - `List (List (List String))`\n  //.   - `...`\n  var Unknown =\n  new _Type (UNKNOWN, '', '', always2 ('Unknown'), K (true), [], {});\n\n  //# ValidDate :: Type\n  //.\n  //. Type comprising every [`Date`][] value except `new Date (NaN)`.\n  var ValidDate = NullaryTypeWithUrl (\n    'sanctuary-def/ValidDate',\n    function(x) { return Date_._test (x) && !isNaN (x.valueOf ()); }\n  );\n\n  //# ValidNumber :: Type\n  //.\n  //. Type comprising every [`Number`][] value except `NaN`.\n  var ValidNumber = NullaryTypeWithUrl (\n    'sanctuary-def/ValidNumber',\n    function(x) { return Number_._test (x) && !isNaN (x); }\n  );\n\n  //# env :: Array Type\n  //.\n  //. An array of [types][]:\n  //.\n  //.   - <code>[AnyFunction](#AnyFunction)</code>\n  //.   - <code>[Arguments](#Arguments)</code>\n  //.   - <code>[Array](#Array) ([Unknown](#Unknown))</code>\n  //.   - <code>[Boolean](#Boolean)</code>\n  //.   - <code>[Date](#Date)</code>\n  //.   - <code>[Error](#Error)</code>\n  //.   - <code>[HtmlElement](#HtmlElement)</code>\n  //.   - <code>[Null](#Null)</code>\n  //.   - <code>[Number](#Number)</code>\n  //.   - <code>[Object](#Object)</code>\n  //.   - <code>[RegExp](#RegExp)</code>\n  //.   - <code>[StrMap](#StrMap) ([Unknown](#Unknown))</code>\n  //.   - <code>[String](#String)</code>\n  //.   - <code>[Symbol](#Symbol)</code>\n  //.   - <code>[Undefined](#Undefined)</code>\n  var env = [\n    AnyFunction,\n    Arguments,\n    Array_ (Unknown),\n    Boolean_,\n    Date_,\n    Error_,\n    HtmlElement,\n    Null,\n    Number_,\n    Object_,\n    RegExp_,\n    StrMap (Unknown),\n    String_,\n    Symbol_,\n    Undefined\n  ];\n\n  //  Unchecked :: String -> Type\n  function Unchecked(s) { return NullaryType (s) ('') (K (true)); }\n\n  //  production :: Boolean\n  var production =\n    typeof process !== 'undefined' &&\n    /* global process:false */\n    process != null &&\n    process.env != null &&\n    process.env.NODE_ENV === 'production';\n\n  var def = _create ({checkTypes: !production, env: env});\n\n  //  numbers :: Array String\n  var numbers = [\n    'zero',\n    'one',\n    'two',\n    'three',\n    'four',\n    'five',\n    'six',\n    'seven',\n    'eight',\n    'nine'\n  ];\n\n  //  numArgs :: Integer -> String\n  function numArgs(n) {\n    return (n < numbers.length ? numbers[n] : show (n)) + ' ' +\n           (n === 1 ? 'argument' : 'arguments');\n  }\n\n  //  expandUnknown :: ... -> Array Type\n  function expandUnknown(\n    env,            // :: Array Type\n    seen,           // :: Array Object\n    value,          // :: Any\n    r               // :: { extractor :: a -> Array b, type :: Type }\n  ) {\n    return r.type.type === UNKNOWN ?\n      _determineActualTypes (env, seen, r.extractor (value)) :\n      [r.type];\n  }\n\n  //  _determineActualTypes :: ... -> Array Type\n  function _determineActualTypes(\n    env,            // :: Array Type\n    seen,           // :: Array Object\n    values          // :: Array Any\n  ) {\n    function refine(types, value) {\n      var seen$;\n      if (typeof value === 'object' && value != null ||\n          typeof value === 'function') {\n        //  Abort if a circular reference is encountered; add the current\n        //  object to the array of seen objects otherwise.\n        if (seen.indexOf (value) >= 0) return [];\n        seen$ = Z.concat (seen, [value]);\n      } else {\n        seen$ = seen;\n      }\n      return Z.chain (function(t) {\n        return (\n          t.name === 'sanctuary-def/Nullable' || (t.validate (value)).isLeft ?\n            [] :\n          t.type === UNARY ?\n            Z.map (fromUnaryType (t),\n                   expandUnknown (env, seen$, value, t.types.$1)) :\n          t.type === BINARY ?\n            xprod (t,\n                   expandUnknown (env, seen$, value, t.types.$1),\n                   expandUnknown (env, seen$, value, t.types.$2)) :\n          // else\n            [t]\n        );\n      }, types);\n    }\n\n    return isEmpty (values) ?\n      [Unknown] :\n      or (Z.reduce (refine, env, values), [Inconsistent]);\n  }\n\n  //  isConsistent :: Type -> Boolean\n  function isConsistent(t) {\n    return t.type === UNARY   ? isConsistent (t.types.$1.type) :\n           t.type === BINARY  ? isConsistent (t.types.$1.type) &&\n                                isConsistent (t.types.$2.type) :\n           /* else */           t.type !== INCONSISTENT;\n  }\n\n  //  determineActualTypesStrict :: (Array Type, Array Any) -> Array Type\n  function determineActualTypesStrict(env, values) {\n    return Z.filter (isConsistent,\n                     _determineActualTypes (env, [], values));\n  }\n\n  //  determineActualTypesLoose :: (Array Type, Array Any) -> Array Type\n  function determineActualTypesLoose(env, values) {\n    return Z.reject (function(t) { return t.type === INCONSISTENT; },\n                     _determineActualTypes (env, [], values));\n  }\n\n  //  TypeInfo = { name :: String\n  //             , constraints :: StrMap (Array TypeClass)\n  //             , types :: NonEmpty (Array Type) }\n  //\n  //  TypeVarMap = StrMap { types :: Array Type\n  //                      , valuesByPath :: StrMap (Array Any) }\n  //\n  //  PropPath = Array (Number | String)\n\n  //  updateTypeVarMap :: ... -> TypeVarMap\n  function updateTypeVarMap(\n    env,            // :: Array Type\n    typeVarMap,     // :: TypeVarMap\n    typeVar,        // :: Type\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    values          // :: Array Any\n  ) {\n    var $typeVarMap = {};\n    for (var typeVarName in typeVarMap) {\n      var entry = typeVarMap[typeVarName];\n      var $entry = {types: entry.types.slice (), valuesByPath: {}};\n      for (var k in entry.valuesByPath) {\n        $entry.valuesByPath[k] = entry.valuesByPath[k].slice ();\n      }\n      $typeVarMap[typeVarName] = $entry;\n    }\n    if (!(hasOwnProperty.call ($typeVarMap, typeVar.name))) {\n      $typeVarMap[typeVar.name] = {types: env.slice (), valuesByPath: {}};\n    }\n\n    var key = JSON.stringify (Z.concat ([index], propPath));\n    if (!(hasOwnProperty.call ($typeVarMap[typeVar.name].valuesByPath, key))) {\n      $typeVarMap[typeVar.name].valuesByPath[key] = [];\n    }\n\n    var isNullaryTypeVar = isEmpty (typeVar.keys);\n    var isValid = test (env);\n\n    function expandUnknownStrict(value, r) {\n      return Z.filter (isConsistent, expandUnknown (env, [], value, r));\n    }\n\n    values.forEach (function(value) {\n      $typeVarMap[typeVar.name].valuesByPath[key].push (value);\n      $typeVarMap[typeVar.name].types = Z.chain (function(t) {\n        return (\n          t.keys.length < typeVar.keys.length || !isValid (t) (value) ?\n            [] :\n          isNullaryTypeVar && t.type === UNARY ?\n            Z.map (fromUnaryType (t),\n                   expandUnknownStrict (value, t.types.$1)) :\n          isNullaryTypeVar && t.type === BINARY ?\n            xprod (t,\n                   expandUnknownStrict (value, t.types.$1),\n                   expandUnknownStrict (value, t.types.$2)) :\n          // else\n            [t]\n        );\n      }, $typeVarMap[typeVar.name].types);\n    });\n\n    return $typeVarMap;\n  }\n\n  //  underlineTypeVars :: (TypeInfo, StrMap (Array Any)) -> String\n  function underlineTypeVars(typeInfo, valuesByPath) {\n    //  Note: Sorting these keys lexicographically is not \"correct\", but it\n    //  does the right thing for indexes less than 10.\n    var paths = Z.map (JSON.parse, sortedKeys (valuesByPath));\n    return underline (\n      typeInfo,\n      K (K (_)),\n      function(index) {\n        return function(f) {\n          return function(t) {\n            return function(propPath) {\n              var indexedPropPath = Z.concat ([index], propPath);\n              return function(s) {\n                if (paths.some (isPrefix (indexedPropPath))) {\n                  var key = JSON.stringify (indexedPropPath);\n                  if (!(hasOwnProperty.call (valuesByPath, key))) return s;\n                  if (!(isEmpty (valuesByPath[key]))) return f (s);\n                }\n                return _ (s);\n              };\n            };\n          };\n        };\n      }\n    );\n  }\n\n  //  satisfactoryTypes :: ... -> Either (() -> Error)\n  //                                     { typeVarMap :: TypeVarMap\n  //                                     , types :: Array Type }\n  function satisfactoryTypes(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    typeVarMap,     // :: TypeVarMap\n    expType,        // :: Type\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    values          // :: Array Any\n  ) {\n    var recur = satisfactoryTypes;\n\n    for (var idx = 0; idx < values.length; idx += 1) {\n      var result = expType.validate (values[idx]);\n      if (result.isLeft) {\n        return Left (function() {\n          return invalidValue (env,\n                               typeInfo,\n                               index,\n                               Z.concat (propPath, result.value.propPath),\n                               result.value.value);\n        });\n      }\n    }\n\n    switch (expType.type) {\n\n      case VARIABLE:\n        var typeVarName = expType.name;\n        var constraints = typeInfo.constraints;\n        if (hasOwnProperty.call (constraints, typeVarName)) {\n          var typeClasses = constraints[typeVarName];\n          for (idx = 0; idx < values.length; idx += 1) {\n            for (var idx2 = 0; idx2 < typeClasses.length; idx2 += 1) {\n              if (!typeClasses[idx2].test (values[idx])) {\n                return Left (function() {\n                  return typeClassConstraintViolation (\n                    env,\n                    typeInfo,\n                    typeClasses[idx2],\n                    index,\n                    propPath,\n                    values[idx],\n                    typeVarMap\n                  );\n                });\n              }\n            }\n          }\n        }\n\n        var typeVarMap$ = updateTypeVarMap (env,\n                                            typeVarMap,\n                                            expType,\n                                            index,\n                                            propPath,\n                                            values);\n\n        var okTypes = typeVarMap$[typeVarName].types;\n        return isEmpty (okTypes) ?\n          Left (function() {\n            return typeVarConstraintViolation (\n              env,\n              typeInfo,\n              index,\n              propPath,\n              typeVarMap$[typeVarName].valuesByPath\n            );\n          }) :\n          Z.reduce (function(e, t) {\n            return Z.chain (function(r) {\n              //  The `a` in `Functor f => f a` corresponds to the `a`\n              //  in `Maybe a` but to the `b` in `Either a b`. A type\n              //  variable's $1 will correspond to either $1 or $2 of\n              //  the actual type depending on the actual type's arity.\n              var offset = t.keys.length - expType.keys.length;\n              return expType.keys.reduce (function(e, k, idx) {\n                var extractor = t.types[t.keys[offset + idx]].extractor;\n                return Z.reduce (function(e, x) {\n                  return Z.chain (function(r) {\n                    return recur (env,\n                                  typeInfo,\n                                  r.typeVarMap,\n                                  expType.types[k].type,\n                                  index,\n                                  Z.concat (propPath, [k]),\n                                  [x]);\n                  }, e);\n                }, e, Z.chain (extractor, values));\n              }, Right (r));\n            }, e);\n          }, Right ({typeVarMap: typeVarMap$, types: okTypes}), okTypes);\n\n      case UNARY:\n        return Z.map (\n          function(result) {\n            return {\n              typeVarMap: result.typeVarMap,\n              types: Z.map (fromUnaryType (expType),\n                            or (result.types, [expType.types.$1.type]))\n            };\n          },\n          recur (env,\n                 typeInfo,\n                 typeVarMap,\n                 expType.types.$1.type,\n                 index,\n                 Z.concat (propPath, ['$1']),\n                 Z.chain (expType.types.$1.extractor, values))\n        );\n\n      case BINARY:\n        return Z.chain (\n          function(result) {\n            var $1s = result.types;\n            return Z.map (\n              function(result) {\n                var $2s = result.types;\n                return {\n                  typeVarMap: result.typeVarMap,\n                  types: xprod (expType,\n                                or ($1s, [expType.types.$1.type]),\n                                or ($2s, [expType.types.$2.type]))\n                };\n              },\n              recur (env,\n                     typeInfo,\n                     result.typeVarMap,\n                     expType.types.$2.type,\n                     index,\n                     Z.concat (propPath, ['$2']),\n                     Z.chain (expType.types.$2.extractor, values))\n            );\n          },\n          recur (env,\n                 typeInfo,\n                 typeVarMap,\n                 expType.types.$1.type,\n                 index,\n                 Z.concat (propPath, ['$1']),\n                 Z.chain (expType.types.$1.extractor, values))\n        );\n\n      case RECORD:\n        return Z.reduce (function(e, k) {\n          return Z.chain (function(r) {\n            return recur (env,\n                          typeInfo,\n                          r.typeVarMap,\n                          expType.types[k].type,\n                          index,\n                          Z.concat (propPath, [k]),\n                          Z.chain (expType.types[k].extractor, values));\n          }, e);\n        }, Right ({typeVarMap: typeVarMap, types: [expType]}), expType.keys);\n\n      default:\n        return Right ({typeVarMap: typeVarMap, types: [expType]});\n    }\n  }\n\n  //# test :: Array Type -> Type -> a -> Boolean\n  //.\n  //. Takes an environment, a type, and any value. Returns `true` if the value\n  //. is a member of the type; `false` otherwise.\n  //.\n  //. The environment is only significant if the type contains\n  //. [type variables][].\n  //.\n  //. One may define a more restrictive type in terms of a more general one:\n  //.\n  //. ```javascript\n  //. //    NonNegativeInteger :: Type\n  //. const NonNegativeInteger = $.NullaryType\n  //.   ('my-package/NonNegativeInteger')\n  //.   ('http://example.com/my-package#NonNegativeInteger')\n  //.   (x => $.test ([]) ($.Integer) (x) && x >= 0);\n  //. ```\n  //.\n  //. Using types as predicates is useful in other contexts too. One could,\n  //. for example, define a [record type][] for each endpoint of a REST API\n  //. and validate the bodies of incoming POST requests against these types.\n  function test(env) {\n    return function(t) {\n      return function(x) {\n        var typeInfo = {name: 'name', constraints: {}, types: [t]};\n        return (satisfactoryTypes (env, typeInfo, {}, t, 0, [], [x])).isRight;\n      };\n    };\n  }\n\n  //. ### Type constructors\n  //.\n  //. sanctuary-def provides several functions for defining types.\n\n  //# NullaryType :: String -> String -> (Any -> Boolean) -> Type\n  //.\n  //. Type constructor for types with no type variables (such as [`Number`][]).\n  //.\n  //. To define a nullary type `t` one must provide:\n  //.\n  //.   - the name of `t` (exposed as `t.name`);\n  //.\n  //.   - the documentation URL of `t` (exposed as `t.url`); and\n  //.\n  //.   - a predicate which accepts any JavaScript value and returns `true` if\n  //.     (and only if) the value is a member of `t`.\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. //    Integer :: Type\n  //. const Integer = $.NullaryType\n  //.   ('my-package/Integer')\n  //.   ('http://example.com/my-package#Integer')\n  //.   (x => typeof x === 'number' &&\n  //.         Math.floor (x) === x &&\n  //.         x >= Number.MIN_SAFE_INTEGER &&\n  //.         x <= Number.MAX_SAFE_INTEGER);\n  //.\n  //. //    NonZeroInteger :: Type\n  //. const NonZeroInteger = $.NullaryType\n  //.   ('my-package/NonZeroInteger')\n  //.   ('http://example.com/my-package#NonZeroInteger')\n  //.   (x => $.test ([]) (Integer) (x) && x !== 0);\n  //.\n  //. //    rem :: Integer -> NonZeroInteger -> Integer\n  //. const rem =\n  //. def ('rem')\n  //.     ({})\n  //.     ([Integer, NonZeroInteger, Integer])\n  //.     (x => y => x % y);\n  //.\n  //. rem (42) (5);\n  //. // => 2\n  //.\n  //. rem (0.5);\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   rem :: Integer -> NonZeroInteger -> Integer\n  //. //          ^^^^^^^\n  //. //             1\n  //. //\n  //. //   1)  0.5 :: Number\n  //. //\n  //. //   The value at position 1 is not a member of ‘Integer’.\n  //.\n  //. rem (42) (0);\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   rem :: Integer -> NonZeroInteger -> Integer\n  //. //                     ^^^^^^^^^^^^^^\n  //. //                           1\n  //. //\n  //. //   1)  0 :: Number\n  //. //\n  //. //   The value at position 1 is not a member of ‘NonZeroInteger’.\n  //. ```\n  function NullaryType(name) {\n    function format(outer, inner) {\n      return outer (stripNamespace (name));\n    }\n    return function(url) {\n      return function(test) {\n        return new _Type (NULLARY, name, url, format, test, [], {});\n      };\n    };\n  }\n\n  var CheckedNullaryType =\n  def ('NullaryType')\n      ({})\n      ([String_, String_, Function_ ([Any, Boolean_]), Type])\n      (NullaryType);\n\n  //# UnaryType :: String -> String -> (Any -> Boolean) -> (t a -> Array a) -> Type -> Type\n  //.\n  //. Type constructor for types with one type variable (such as [`Array`][]).\n  //.\n  //. To define a unary type `t a` one must provide:\n  //.\n  //.   - the name of `t` (exposed as `t.name`);\n  //.\n  //.   - the documentation URL of `t` (exposed as `t.url`);\n  //.\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if (and only if) the value is a member of `t x` for some type `x`;\n  //.\n  //.   - a function which takes any value of type `t a` and returns an array\n  //.     of the values of type `a` contained in the `t` (exposed as\n  //.     `t.types.$1.extractor`); and\n  //.\n  //.   - the type of `a` (exposed as `t.types.$1.type`).\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. const show = require ('sanctuary-show');\n  //. const type = require ('sanctuary-type-identifiers');\n  //.\n  //. //    maybeTypeIdent :: String\n  //. const maybeTypeIdent = 'my-package/Maybe';\n  //.\n  //. //    Maybe :: Type -> Type\n  //. const Maybe = $.UnaryType\n  //.   (maybeTypeIdent)\n  //.   ('http://example.com/my-package#Maybe')\n  //.   (x => type (x) === maybeTypeIdent)\n  //.   (maybe => maybe.isJust ? [maybe.value] : []);\n  //.\n  //. //    MaybeTypeRep :: TypeRep Maybe\n  //. const MaybeTypeRep = {'@@type': maybeTypeIdent};\n  //.\n  //. //    Nothing :: Maybe a\n  //. const Nothing = {\n  //.   'constructor': MaybeTypeRep,\n  //.   'isJust': false,\n  //.   'isNothing': true,\n  //.   '@@show': () => 'Nothing',\n  //. };\n  //.\n  //. //    Just :: a -> Maybe a\n  //. const Just = x => ({\n  //.   'constructor': MaybeTypeRep,\n  //.   'isJust': true,\n  //.   'isNothing': false,\n  //.   '@@show': () => `Just (${show (x)})`,\n  //.   'value': x,\n  //. });\n  //.\n  //. //    fromMaybe :: a -> Maybe a -> a\n  //. const fromMaybe =\n  //. def ('fromMaybe')\n  //.     ({})\n  //.     ([a, Maybe (a), a])\n  //.     (x => m => m.isJust ? m.value : x);\n  //.\n  //. fromMaybe (0) (Just (42));\n  //. // => 42\n  //.\n  //. fromMaybe (0) (Nothing);\n  //. // => 0\n  //.\n  //. fromMaybe (0) (Just ('XXX'));\n  //. // ! TypeError: Type-variable constraint violation\n  //. //\n  //. //   fromMaybe :: a -> Maybe a -> a\n  //. //                ^          ^\n  //. //                1          2\n  //. //\n  //. //   1)  0 :: Number\n  //. //\n  //. //   2)  \"XXX\" :: String\n  //. //\n  //. //   Since there is no type of which all the above values are members, the type-variable constraint has been violated.\n  //. ```\n  function UnaryType(name) {\n    return function(url) {\n      return function(test) {\n        return function(_1) {\n          return function($1) {\n            function format(outer, inner) {\n              return outer ('(' + stripNamespace (name) + ' ') +\n                     inner ('$1') (show ($1)) +\n                     outer (')');\n            }\n            var types = {$1: {extractor: _1, type: $1}};\n            return new _Type (UNARY, name, url, format, test, ['$1'], types);\n          };\n        };\n      };\n    };\n  }\n\n  var CheckedUnaryType =\n  def ('UnaryType')\n      ({})\n      ([String_,\n        String_,\n        Function_ ([Any, Boolean_]),\n        Function_ ([Unchecked ('t a'), Array_ (Unchecked ('a'))]),\n        AnyFunction])\n      (function(name) {\n         return function(url) {\n           return function(test) {\n             return compose (def (stripNamespace (name)) ({}) ([Type, Type]),\n                             UnaryType (name) (url) (test));\n           };\n         };\n       });\n\n  //  fromUnaryType :: Type -> (Type -> Type)\n  function fromUnaryType(t) {\n    return UnaryType (t.name) (t.url) (t._test) (t.types.$1.extractor);\n  }\n\n  //# BinaryType :: String -> String -> (Any -> Boolean) -> (t a b -> Array a) -> (t a b -> Array b) -> Type -> Type -> Type\n  //.\n  //. Type constructor for types with two type variables (such as\n  //. [`Array2`][]).\n  //.\n  //. To define a binary type `t a b` one must provide:\n  //.\n  //.   - the name of `t` (exposed as `t.name`);\n  //.\n  //.   - the documentation URL of `t` (exposed as `t.url`);\n  //.\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if (and only if) the value is a member of `t x y` for some types\n  //.     `x` and `y`;\n  //.\n  //.   - a function which takes any value of type `t a b` and returns an array\n  //.     of the values of type `a` contained in the `t` (exposed as\n  //.     `t.types.$1.extractor`);\n  //.\n  //.   - a function which takes any value of type `t a b` and returns an array\n  //.     of the values of type `b` contained in the `t` (exposed as\n  //.     `t.types.$2.extractor`);\n  //.\n  //.   - the type of `a` (exposed as `t.types.$1.type`); and\n  //.\n  //.   - the type of `b` (exposed as `t.types.$2.type`).\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. const type = require ('sanctuary-type-identifiers');\n  //.\n  //. //    pairTypeIdent :: String\n  //. const pairTypeIdent = 'my-package/Pair';\n  //.\n  //. //    $Pair :: Type -> Type -> Type\n  //. const $Pair = $.BinaryType\n  //.   (pairTypeIdent)\n  //.   ('http://example.com/my-package#Pair')\n  //.   (x => type (x) === pairTypeIdent)\n  //.   (({fst}) => [fst])\n  //.   (({snd}) => [snd]);\n  //.\n  //. //    PairTypeRep :: TypeRep Pair\n  //. const PairTypeRep = {'@@type': pairTypeIdent};\n  //.\n  //. //    Pair :: a -> b -> Pair a b\n  //. const Pair =\n  //. def ('Pair')\n  //.     ({})\n  //.     ([a, b, $Pair (a) (b)])\n  //.     (fst => snd => ({\n  //.        'constructor': PairTypeRep,\n  //.        'fst': fst,\n  //.        'snd': snd,\n  //.        '@@show': () => `Pair (${show (fst)}) (${show (snd)})`,\n  //.      }));\n  //.\n  //. //    Rank :: Type\n  //. const Rank = $.NullaryType\n  //.   ('my-package/Rank')\n  //.   ('http://example.com/my-package#Rank')\n  //.   (x => typeof x === 'string' &&\n  //.         /^(A|2|3|4|5|6|7|8|9|10|J|Q|K)$/.test (x));\n  //.\n  //. //    Suit :: Type\n  //. const Suit = $.NullaryType\n  //.   ('my-package/Suit')\n  //.   ('http://example.com/my-package#Suit')\n  //.   (x => typeof x === 'string' &&\n  //.         /^[\\u2660\\u2663\\u2665\\u2666]$/.test (x));\n  //.\n  //. //    Card :: Type\n  //. const Card = $Pair (Rank) (Suit);\n  //.\n  //. //    showCard :: Card -> String\n  //. const showCard =\n  //. def ('showCard')\n  //.     ({})\n  //.     ([Card, $.String])\n  //.     (card => card.fst + card.snd);\n  //.\n  //. showCard (Pair ('A') ('♠'));\n  //. // => 'A♠'\n  //.\n  //. showCard (Pair ('X') ('♠'));\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   showCard :: Pair Rank Suit -> String\n  //. //                    ^^^^\n  //. //                     1\n  //. //\n  //. //   1)  \"X\" :: String\n  //. //\n  //. //   The value at position 1 is not a member of ‘Rank’.\n  //. ```\n  function BinaryType(name) {\n    return function(url) {\n      return function(test) {\n        return function(_1) {\n          return function(_2) {\n            return function($1) {\n              return function($2) {\n                function format(outer, inner) {\n                  return outer ('(' + stripNamespace (name) + ' ') +\n                         inner ('$1') (show ($1)) +\n                         outer (' ') +\n                         inner ('$2') (show ($2)) +\n                         outer (')');\n                }\n                return new _Type (BINARY,\n                                  name,\n                                  url,\n                                  format,\n                                  test,\n                                  ['$1', '$2'],\n                                  {$1: {extractor: _1, type: $1},\n                                   $2: {extractor: _2, type: $2}});\n              };\n            };\n          };\n        };\n      };\n    };\n  }\n\n  var CheckedBinaryType =\n  def ('BinaryType')\n      ({})\n      ([String_,\n        String_,\n        Function_ ([Any, Boolean_]),\n        Function_ ([Unchecked ('t a b'), Array_ (Unchecked ('a'))]),\n        Function_ ([Unchecked ('t a b'), Array_ (Unchecked ('b'))]),\n        AnyFunction])\n      (function(name) {\n         return function(url) {\n           return function(test) {\n             return function(_1) {\n               return function(_2) {\n                 return def (stripNamespace (name))\n                            ({})\n                            ([Type, Type, Type])\n                            (BinaryType (name) (url) (test) (_1) (_2));\n               };\n             };\n           };\n         };\n       });\n\n  //  xprod :: (Type, Array Type, Array Type) -> Array Type\n  function xprod(t, $1s, $2s) {\n    return Z.chain (\n      function(specialize) { return Z.map (specialize, $2s); },\n      Z.map (BinaryType (t.name)\n                        (t.url)\n                        (t._test)\n                        (t.types.$1.extractor)\n                        (t.types.$2.extractor),\n             $1s)\n    );\n  }\n\n  //# EnumType :: String -> String -> Array Any -> Type\n  //.\n  //. Type constructor for [enumerated types][] (such as [`RegexFlags`][]).\n  //.\n  //. To define an enumerated type `t` one must provide:\n  //.\n  //.   - the name of `t` (exposed as `t.name`);\n  //.\n  //.   - the documentation URL of `t` (exposed as `t.url`); and\n  //.\n  //.   - an array of distinct values.\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. //    Denomination :: Type\n  //. const Denomination = $.EnumType\n  //.   ('my-package/Denomination')\n  //.   ('http://example.com/my-package#Denomination')\n  //.   ([10, 20, 50, 100, 200]);\n  //. ```\n  function EnumType(name) {\n    return function(url) {\n      return compose (NullaryType (name) (url), memberOf);\n    };\n  }\n\n  var CheckedEnumType =\n  def ('EnumType')\n      ({})\n      ([String_, String_, Array_ (Any), Type])\n      (EnumType);\n\n  //# RecordType :: StrMap Type -> Type\n  //.\n  //. `RecordType` is used to construct record types. The type definition\n  //. specifies the name and type of each required field. A field is an\n  //. enumerable property (either an own property or an inherited property).\n  //.\n  //. To define a record type one must provide:\n  //.\n  //.   - an object mapping field name to type.\n  //.\n  //. For example:\n  //.\n  //. ```javascript\n  //. //    Point :: Type\n  //. const Point = $.RecordType ({x: $.FiniteNumber, y: $.FiniteNumber});\n  //.\n  //. //    dist :: Point -> Point -> FiniteNumber\n  //. const dist =\n  //. def ('dist')\n  //.     ({})\n  //.     ([Point, Point, $.FiniteNumber])\n  //.     (p => q => Math.sqrt (Math.pow (p.x - q.x, 2) +\n  //.                           Math.pow (p.y - q.y, 2)));\n  //.\n  //. dist ({x: 0, y: 0}) ({x: 3, y: 4});\n  //. // => 5\n  //.\n  //. dist ({x: 0, y: 0}) ({x: 3, y: 4, color: 'red'});\n  //. // => 5\n  //.\n  //. dist ({x: 0, y: 0}) ({x: NaN, y: NaN});\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   dist :: { x :: FiniteNumber, y :: FiniteNumber } -> { x :: FiniteNumber, y :: FiniteNumber } -> FiniteNumber\n  //. //                                                              ^^^^^^^^^^^^\n  //. //                                                                   1\n  //. //\n  //. //   1)  NaN :: Number\n  //. //\n  //. //   The value at position 1 is not a member of ‘FiniteNumber’.\n  //.\n  //. dist (0);\n  //. // ! TypeError: Invalid value\n  //. //\n  //. //   dist :: { x :: FiniteNumber, y :: FiniteNumber } -> { x :: FiniteNumber, y :: FiniteNumber } -> FiniteNumber\n  //. //           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  //. //                              1\n  //. //\n  //. //   1)  0 :: Number\n  //. //\n  //. //   The value at position 1 is not a member of ‘{ x :: FiniteNumber, y :: FiniteNumber }’.\n  //. ```\n  function RecordType(fields) {\n    var keys = sortedKeys (fields);\n\n    function format(outer, inner) {\n      if (isEmpty (keys)) return outer ('{}');\n      var reprs = Z.map (function(k) {\n        var t = fields[k];\n        return outer (' ') +\n               outer (/^(?!\\d)[$\\w]+$/.test (k) ? k : show (k)) +\n               outer (' :: ') +\n               unless (t.type === RECORD || isEmpty (t.keys),\n                       stripOutermostParens,\n                       inner (k) (show (t)));\n      }, keys);\n      return wrap (outer ('{')) (outer (' }')) (joinWith (outer (','), reprs));\n    }\n\n    function test(x) {\n      var missing = {};\n      keys.forEach (function(k) { missing[k] = k; });\n      for (var k in x) delete missing[k];\n      return isEmpty (Object.keys (missing));\n    }\n\n    var $types = {};\n    keys.forEach (function(k) {\n      $types[k] = {extractor: function(x) { return [x[k]]; }, type: fields[k]};\n    });\n\n    return new _Type (RECORD, '', '', format, test, keys, $types);\n  }\n\n  var CheckedRecordType =\n  def ('RecordType') ({}) ([StrMap (Type), Type]) (RecordType);\n\n  //# TypeVariable :: String -> Type\n  //.\n  //. Polymorphism is powerful. Not being able to define a function for\n  //. all types would be very limiting indeed: one couldn't even define the\n  //. identity function!\n  //.\n  //. Before defining a polymorphic function one must define one or more type\n  //. variables:\n  //.\n  //. ```javascript\n  //. const a = $.TypeVariable ('a');\n  //. const b = $.TypeVariable ('b');\n  //.\n  //. //    id :: a -> a\n  //. const id = def ('id') ({}) ([a, a]) (x => x);\n  //.\n  //. id (42);\n  //. // => 42\n  //.\n  //. id (null);\n  //. // => null\n  //. ```\n  //.\n  //. The same type variable may be used in multiple positions, creating a\n  //. constraint:\n  //.\n  //. ```javascript\n  //. //    cmp :: a -> a -> Number\n  //. const cmp =\n  //. def ('cmp')\n  //.     ({})\n  //.     ([a, a, $.Number])\n  //.     (x => y => x < y ? -1 : x > y ? 1 : 0);\n  //.\n  //. cmp (42) (42);\n  //. // => 0\n  //.\n  //. cmp ('a') ('z');\n  //. // => -1\n  //.\n  //. cmp ('z') ('a');\n  //. // => 1\n  //.\n  //. cmp (0) ('1');\n  //. // ! TypeError: Type-variable constraint violation\n  //. //\n  //. //   cmp :: a -> a -> Number\n  //. //          ^    ^\n  //. //          1    2\n  //. //\n  //. //   1)  0 :: Number\n  //. //\n  //. //   2)  \"1\" :: String\n  //. //\n  //. //   Since there is no type of which all the above values are members, the type-variable constraint has been violated.\n  //. ```\n  function TypeVariable(name) {\n    return new _Type (VARIABLE, name, '', always2 (name), K (true), [], {});\n  }\n\n  var CheckedTypeVariable =\n  def ('TypeVariable') ({}) ([String_, Type]) (TypeVariable);\n\n  //# UnaryTypeVariable :: String -> Type -> Type\n  //.\n  //. Combines [`UnaryType`][] and [`TypeVariable`][].\n  //.\n  //. To define a unary type variable `t a` one must provide:\n  //.\n  //.   - a name (conventionally matching `^[a-z]$`); and\n  //.\n  //.   - the type of `a` (exposed as `t.types.$1.type`).\n  //.\n  //. Consider the type of a generalized `map`:\n  //.\n  //. ```haskell\n  //. map :: Functor f => (a -> b) -> f a -> f b\n  //. ```\n  //.\n  //. `f` is a unary type variable. With two (nullary) type variables, one\n  //. unary type variable, and one [type class][] it's possible to define a\n  //. fully polymorphic `map` function:\n  //.\n  //. ```javascript\n  //. const $ = require ('sanctuary-def');\n  //. const Z = require ('sanctuary-type-classes');\n  //.\n  //. const a = $.TypeVariable ('a');\n  //. const b = $.TypeVariable ('b');\n  //. const f = $.UnaryTypeVariable ('f');\n  //.\n  //. //    map :: Functor f => (a -> b) -> f a -> f b\n  //. const map =\n  //. def ('map')\n  //.     ({f: [Z.Functor]})\n  //.     ([$.Function ([a, b]), f (a), f (b)])\n  //.     (f => functor => Z.map (f, functor));\n  //. ```\n  //.\n  //. Whereas a regular type variable is fully resolved (`a` might become\n  //. `Array (Array String)`, for example), a unary type variable defers to\n  //. its type argument, which may itself be a type variable. The type argument\n  //. corresponds to the type argument of a unary type or the *second* type\n  //. argument of a binary type. The second type argument of `Map k v`, for\n  //. example, is `v`. One could replace `Functor => f` with `Map k` or with\n  //. `Map Integer`, but not with `Map`.\n  //.\n  //. This shallow inspection makes it possible to constrain a value's \"outer\"\n  //. and \"inner\" types independently.\n  function UnaryTypeVariable(name) {\n    return function($1) {\n      function format(outer, inner) {\n        return outer ('(' + name + ' ') +\n               inner ('$1') (show ($1)) +\n               outer (')');\n      }\n      var types = {$1: {extractor: K ([]), type: $1}};\n      return new _Type (VARIABLE, name, '', format, K (true), ['$1'], types);\n    };\n  }\n\n  var CheckedUnaryTypeVariable =\n  def ('UnaryTypeVariable')\n      ({})\n      ([String_, AnyFunction])\n      (function(name) {\n         return def (name) ({}) ([Type, Type]) (UnaryTypeVariable (name));\n       });\n\n  //# BinaryTypeVariable :: String -> Type -> Type -> Type\n  //.\n  //. Combines [`BinaryType`][] and [`TypeVariable`][].\n  //.\n  //. To define a binary type variable `t a b` one must provide:\n  //.\n  //.   - a name (conventionally matching `^[a-z]$`);\n  //.\n  //.   - the type of `a` (exposed as `t.types.$1.type`); and\n  //.\n  //.   - the type of `b` (exposed as `t.types.$2.type`).\n  //.\n  //. The more detailed explanation of [`UnaryTypeVariable`][] also applies to\n  //. `BinaryTypeVariable`.\n  function BinaryTypeVariable(name) {\n    return function($1) {\n      return function($2) {\n        function format(outer, inner) {\n          return outer ('(' + name + ' ') +\n                 inner ('$1') (show ($1)) +\n                 outer (' ') +\n                 inner ('$2') (show ($2)) +\n                 outer (')');\n        }\n        var keys = ['$1', '$2'];\n        var types = {$1: {extractor: K ([]), type: $1},\n                     $2: {extractor: K ([]), type: $2}};\n        return new _Type (VARIABLE, name, '', format, K (true), keys, types);\n      };\n    };\n  }\n\n  var CheckedBinaryTypeVariable =\n  def ('BinaryTypeVariable')\n      ({})\n      ([String_, AnyFunction])\n      (function(name) {\n         return def (name)\n                    ({})\n                    ([Type, Type, Type])\n                    (BinaryTypeVariable (name));\n       });\n\n  //# Thunk :: Type -> Type\n  //.\n  //. `$.Thunk (T)` is shorthand for `$.Function ([T])`, the type comprising\n  //. every nullary function (thunk) which returns a value of type `T`.\n  var Thunk =\n  def ('Thunk')\n      ({})\n      ([Type, Type])\n      (function(t) { return Function_ ([t]); });\n\n  //# Predicate :: Type -> Type\n  //.\n  //. `$.Predicate (T)` is shorthand for `$.Function ([T, $.Boolean])`, the\n  //. type comprising every predicate function which takes a value of type `T`.\n  var Predicate =\n  def ('Predicate')\n      ({})\n      ([Type, Type])\n      (function(t) { return Function_ ([t, Boolean_]); });\n\n  //. ### Type classes\n  //.\n  //. `concatS`, defined earlier, is a function which concatenates two strings.\n  //. This is overly restrictive, since other types support concatenation\n  //. (Array, for example).\n  //.\n  //. One could use a type variable to define a polymorphic \"concat\" function:\n  //.\n  //. ```javascript\n  //. //    _concat :: a -> a -> a\n  //. const _concat =\n  //. def ('_concat')\n  //.     ({})\n  //.     ([a, a, a])\n  //.     (x => y => x.concat (y));\n  //.\n  //. _concat ('fizz') ('buzz');\n  //. // => 'fizzbuzz'\n  //.\n  //. _concat ([1, 2]) ([3, 4]);\n  //. // => [1, 2, 3, 4]\n  //.\n  //. _concat ([1, 2]) ('buzz');\n  //. // ! TypeError: Type-variable constraint violation\n  //. //\n  //. //   _concat :: a -> a -> a\n  //. //              ^    ^\n  //. //              1    2\n  //. //\n  //. //   1)  [1, 2] :: Array Number\n  //. //\n  //. //   2)  \"buzz\" :: String\n  //. //\n  //. //   Since there is no type of which all the above values are members, the type-variable constraint has been violated.\n  //. ```\n  //.\n  //. The type of `_concat` is misleading: it suggests that it can operate on\n  //. any two values of *any* one type. In fact there's an implicit constraint,\n  //. since the type must support concatenation (in [mathematical][semigroup]\n  //. terms, the type must have a [semigroup][FL:Semigroup]). Violating this\n  //. implicit constraint results in a run-time error in the implementation:\n  //.\n  //. ```javascript\n  //. _concat (null) (null);\n  //. // ! TypeError: Cannot read property 'concat' of null\n  //. ```\n  //.\n  //. The solution is to constrain `a` by first defining a [`TypeClass`][]\n  //. value, then specifying the constraint in the definition of the \"concat\"\n  //. function:\n  //.\n  //. ```javascript\n  //. const Z = require ('sanctuary-type-classes');\n  //.\n  //. //    Semigroup :: TypeClass\n  //. const Semigroup = Z.TypeClass (\n  //.   'my-package/Semigroup',\n  //.   'http://example.com/my-package#Semigroup',\n  //.   [],\n  //.   x => x != null && typeof x.concat === 'function'\n  //. );\n  //.\n  //. //    concat :: Semigroup a => a -> a -> a\n  //. const concat =\n  //. def ('concat')\n  //.     ({a: [Semigroup]})\n  //.     ([a, a, a])\n  //.     (x => y => x.concat (y));\n  //.\n  //. concat ([1, 2]) ([3, 4]);\n  //. // => [1, 2, 3, 4]\n  //.\n  //. concat (null) (null);\n  //. // ! TypeError: Type-class constraint violation\n  //. //\n  //. //   concat :: Semigroup a => a -> a -> a\n  //. //             ^^^^^^^^^^^    ^\n  //. //                            1\n  //. //\n  //. //   1)  null :: Null\n  //. //\n  //. //   ‘concat’ requires ‘a’ to satisfy the Semigroup type-class constraint; the value at position 1 does not.\n  //. //\n  //. //   See http://example.com/my-package#Semigroup for information about the my-package/Semigroup type class.\n  //. ```\n  //.\n  //. Multiple constraints may be placed on a type variable by including\n  //. multiple `TypeClass` values in the array (e.g. `{a: [Foo, Bar, Baz]}`).\n\n  //  invalidArgumentsCount :: (TypeInfo, Integer, Integer, Array Any) -> Error\n  //\n  //  This function is used in `curry` when a function defined via `def`\n  //  is applied to too many arguments.\n  function invalidArgumentsCount(typeInfo, index, numArgsExpected, args) {\n    return new TypeError (trimTrailingSpaces (\n      q (typeInfo.name) + ' applied to the wrong number of arguments\\n\\n' +\n      underline (\n        typeInfo,\n        K (K (_)),\n        function(index_) {\n          return function(f) {\n            return K (K (index_ === index ? f : _));\n          };\n        }\n      ) + '\\n' +\n      'Expected ' + numArgs (numArgsExpected) +\n      ' but received ' + numArgs (args.length) +\n      toMarkdownList ('.\\n', ':\\n\\n', show, args)\n    ));\n  }\n\n  //  constraintsRepr :: ... -> String\n  function constraintsRepr(\n    constraints,    // :: StrMap (Array TypeClass)\n    outer,          // :: String -> String\n    inner           // :: String -> TypeClass -> String -> String\n  ) {\n    var $reprs = [];\n    (sortedKeys (constraints)).forEach (function(k) {\n      var f = inner (k);\n      constraints[k].forEach (function(typeClass) {\n        $reprs.push (\n          f (typeClass) (stripNamespace (typeClass.name) + ' ' + k)\n        );\n      });\n    });\n    return when ($reprs.length > 0,\n                 function(s) { return s + outer (' => '); },\n                 when ($reprs.length > 1,\n                       wrap (outer ('(')) (outer (')')),\n                       joinWith (outer (', '), $reprs)));\n  }\n\n  //  label :: String -> String -> String\n  function label(label) {\n    return function(s) {\n      var delta = s.length - label.length;\n      return strRepeat (' ', Math.floor (delta / 2)) + label +\n             strRepeat (' ', Math.ceil (delta / 2));\n    };\n  }\n\n  //  typeVarNames :: Type -> Array String\n  function typeVarNames(t) {\n    return Z.concat (\n      t.type === VARIABLE ? [t.name] : [],\n      Z.chain (function(k) { return typeVarNames (t.types[k].type); }, t.keys)\n    );\n  }\n\n  //  showTypeWith :: TypeInfo -> Type -> String\n  function showTypeWith(typeInfo) {\n    var names = Z.chain (typeVarNames, typeInfo.types);\n    return function(t) {\n      var code = 'a'.charCodeAt (0);\n      return unless (\n        t.type === FUNCTION || t.type === RECORD || isEmpty (t.keys),\n        stripOutermostParens,\n        (show (t)).replace (/\\bUnknown\\b/g, function() {\n          // eslint-disable-next-line no-plusplus\n          do var name = String.fromCharCode (code++);\n          while (names.indexOf (name) >= 0);\n          return name;\n        })\n      );\n    };\n  }\n\n  //  showTypeQuoted :: Type -> String\n  function showTypeQuoted(t) {\n    return q (unless (t.type === RECORD || isEmpty (t.keys),\n                      stripOutermostParens,\n                      show (t)));\n  }\n\n  //  showValuesAndTypes :: ... -> String\n  function showValuesAndTypes(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    values,         // :: Array Any\n    pos             // :: Integer\n  ) {\n    var showType = showTypeWith (typeInfo);\n    return show (pos) + ')  ' + joinWith ('\\n    ', Z.map (function(x) {\n      var types = determineActualTypesLoose (env, [x]);\n      return show (x) + ' :: ' + joinWith (', ', Z.map (showType, types));\n    }, values));\n  }\n\n  //  typeSignature :: TypeInfo -> String\n  function typeSignature(typeInfo) {\n    var reprs = Z.map (showTypeWith (typeInfo), typeInfo.types);\n    var arity = reprs.length - 1;\n    return typeInfo.name + ' :: ' +\n             constraintsRepr (typeInfo.constraints, id, K (K (id))) +\n             when (arity === 0,\n                   parenthesize,\n                   joinWith (' -> ', init (reprs))) +\n             ' -> ' + last (reprs);\n  }\n\n  //  _underline :: ... -> String\n  function _underline(\n    t,              // :: Type\n    propPath,       // :: PropPath\n    formatType3     // :: Type -> Array String -> String -> String\n  ) {\n    return unless (t.type === RECORD ||\n                     isEmpty (t.keys) ||\n                     t.type === FUNCTION && isEmpty (propPath) ||\n                     !isEmpty (propPath),\n                   stripOutermostParens,\n                   formatType3 (t) (propPath) (t.format (_, function(k) {\n                     return K (_underline (t.types[k].type,\n                                           Z.concat (propPath, [k]),\n                                           formatType3));\n                   })));\n  }\n\n  //  underline :: ... -> String\n  function underline(\n    typeInfo,               // :: TypeInfo\n    underlineConstraint,    // :: String -> TypeClass -> String -> String\n    formatType5\n    // :: Integer -> (String -> String) -> Type -> PropPath -> String -> String\n  ) {\n    var st = typeInfo.types.reduce (function(st, t, index) {\n      var formatType4 = formatType5 (index);\n      st.numbers.push (_underline (t, [], formatType4 (function(s) {\n        return label (show (st.counter += 1)) (s);\n      })));\n      st.carets.push (_underline (t, [], W (function(type) {\n        var repr = show (type);\n        var parenthesized = repr.slice (0, 1) + repr.slice (-1) === '()';\n        return formatType4 (function(s) {\n          return parenthesized && repr !== '()' && s.length === repr.length ?\n            _ ('(') + r ('^') (s.slice (1, -1)) + _ (')') :\n            r ('^') (s);\n        });\n      })));\n      return st;\n    }, {carets: [], numbers: [], counter: 0});\n\n    return typeSignature (typeInfo) + '\\n' +\n           _ (typeInfo.name + ' :: ') +\n              constraintsRepr (typeInfo.constraints, _, underlineConstraint) +\n              joinWith (_ (' -> '), st.carets) + '\\n' +\n           _ (typeInfo.name + ' :: ') +\n              constraintsRepr (typeInfo.constraints, _, K (K (_))) +\n              joinWith (_ (' -> '), st.numbers) + '\\n';\n  }\n\n  //  resolvePropPath :: (Type, Array String) -> Type\n  function resolvePropPath(t, propPath) {\n    return Z.reduce (function(t, prop) { return t.types[prop].type; },\n                     t,\n                     propPath);\n  }\n\n  //  formatType6 ::\n  //    PropPath -> Integer -> (String -> String) ->\n  //      Type -> PropPath -> String -> String\n  function formatType6(indexedPropPath) {\n    return function(index_) {\n      return function(f) {\n        return function(t) {\n          return function(propPath_) {\n            var indexedPropPath_ = Z.concat ([index_], propPath_);\n            var p = isPrefix (indexedPropPath_) (indexedPropPath);\n            var q = isPrefix (indexedPropPath) (indexedPropPath_);\n            return p && q ? f : p ? id : _;\n          };\n        };\n      };\n    };\n  }\n\n  //  see :: (String, { name :: String, url :: String? }) -> String\n  function see(label, record) {\n    return record.url == null || record.url === '' ?\n           '' :\n           '\\nSee ' + record.url +\n           ' for information about the ' + record.name + ' ' + label + '.\\n';\n  }\n\n  //  typeClassConstraintViolation :: ... -> Error\n  function typeClassConstraintViolation(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    typeClass,      // :: TypeClass\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    value,          // :: Any\n    typeVarMap      // :: TypeVarMap\n  ) {\n    var expType = resolvePropPath (typeInfo.types[index], propPath);\n    return new TypeError (trimTrailingSpaces (\n      'Type-class constraint violation\\n\\n' +\n      underline (typeInfo,\n                 function(tvn) {\n                   return function(tc) {\n                     return (\n                       tvn === expType.name && tc.name === typeClass.name ?\n                         r ('^') :\n                         _\n                     );\n                   };\n                 },\n                 formatType6 (Z.concat ([index], propPath))) +\n      '\\n' +\n      showValuesAndTypes (env, typeInfo, [value], 1) + '\\n\\n' +\n      q (typeInfo.name) + ' requires ' +\n      q (expType.name) + ' to satisfy the ' +\n      stripNamespace (typeClass.name) + ' type-class constraint; ' +\n      'the value at position 1 does not.\\n' +\n      see ('type class', typeClass)\n    ));\n  }\n\n  //  typeVarConstraintViolation :: ... -> Error\n  function typeVarConstraintViolation(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    valuesByPath    // :: StrMap (Array Any)\n  ) {\n    //  If we apply an ‘a -> a -> a -> a’ function to Left ('x'), Right (1),\n    //  and Right (null) we'd like to avoid underlining the first argument\n    //  position, since Left ('x') is compatible with the other ‘a’ values.\n    var key = JSON.stringify (Z.concat ([index], propPath));\n    var values = valuesByPath[key];\n\n    //  Note: Sorting these keys lexicographically is not \"correct\", but it\n    //  does the right thing for indexes less than 10.\n    var keys = Z.filter (function(k) {\n      var values_ = valuesByPath[k];\n      return (\n        //  Keep X, the position at which the violation was observed.\n        k === key ||\n        //  Keep positions whose values are incompatible with the values at X.\n        isEmpty (determineActualTypesStrict (env, Z.concat (values, values_)))\n      );\n    }, sortedKeys (valuesByPath));\n\n    var underlinedTypeVars =\n    underlineTypeVars (typeInfo,\n                       Z.reduce (function($valuesByPath, k) {\n                         $valuesByPath[k] = valuesByPath[k];\n                         return $valuesByPath;\n                       }, {}, keys));\n\n    return new TypeError (trimTrailingSpaces (\n      values.length === 1 &&\n      isEmpty (determineActualTypesLoose (env, values)) ?\n        'Unrecognized value\\n\\n' +\n        underlinedTypeVars + '\\n' +\n        '1)  ' + show (values[0]) + ' :: (no types)\\n\\n' +\n        toMarkdownList (\n          'The environment is empty! ' +\n          'Polymorphic functions require a non-empty environment.\\n',\n          'The value at position 1 is not a member of any type in ' +\n          'the environment.\\n\\n' +\n          'The environment contains the following types:\\n\\n',\n          showTypeWith (typeInfo),\n          env\n        ) :\n      // else\n        'Type-variable constraint violation\\n\\n' +\n        underlinedTypeVars + '\\n' +\n        (Z.reduce (function(st, k) {\n          var values = valuesByPath[k];\n          return isEmpty (values) ? st : {\n            idx: st.idx + 1,\n            s: st.s +\n               showValuesAndTypes (env, typeInfo, values, st.idx + 1) +\n               '\\n\\n'\n          };\n        }, {idx: 0, s: ''}, keys)).s +\n        'Since there is no type of which all the above values are ' +\n        'members, the type-variable constraint has been violated.\\n'\n    ));\n  }\n\n  //  invalidValue :: ... -> Error\n  function invalidValue(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    index,          // :: Integer\n    propPath,       // :: PropPath\n    value           // :: Any\n  ) {\n    var t = resolvePropPath (typeInfo.types[index], propPath);\n    return new TypeError (trimTrailingSpaces (\n      'Invalid value\\n\\n' +\n      underline (typeInfo,\n                 K (K (_)),\n                 formatType6 (Z.concat ([index], propPath))) +\n      '\\n' +\n      showValuesAndTypes (env, typeInfo, [value], 1) + '\\n\\n' +\n      'The value at position 1 is not a member of ' +\n      showTypeQuoted (t) + '.\\n' +\n      see ('type', t)\n    ));\n  }\n\n  //  invalidArgumentsLength :: ... -> Error\n  //\n  //  This function is used in `wrapFunctionCond` to ensure that higher-order\n  //  functions defined via `def` only ever apply a function argument to the\n  //  correct number of arguments.\n  function invalidArgumentsLength(\n    typeInfo,           // :: TypeInfo\n    index,              // :: Integer\n    numArgsExpected,    // :: Integer\n    args                // :: Array Any\n  ) {\n    return new TypeError (trimTrailingSpaces (\n      q (typeInfo.name) +\n      ' applied ' + showTypeQuoted (typeInfo.types[index]) +\n      ' to the wrong number of arguments\\n\\n' +\n      underline (\n        typeInfo,\n        K (K (_)),\n        function(index_) {\n          return function(f) {\n            return function(t) {\n              return function(propPath) {\n                return function(s) {\n                  return index_ === index ?\n                    t.format (_, function(k) { return k === '$1' ? f : _; }) :\n                    _ (s);\n                };\n              };\n            };\n          };\n        }\n      ) + '\\n' +\n      'Expected ' + numArgs (numArgsExpected) +\n      ' but received ' + numArgs (args.length) +\n      toMarkdownList ('.\\n', ':\\n\\n', show, args)\n    ));\n  }\n\n  //  assertRight :: Either (() -> Error) a -> a !\n  function assertRight(either) {\n    if (either.isLeft) throw either.value ();\n    return either.value;\n  }\n\n  //  withTypeChecking :: ... -> Function\n  function withTypeChecking(\n    env,            // :: Array Type\n    typeInfo,       // :: TypeInfo\n    impl            // :: Function\n  ) {\n    var n = typeInfo.types.length - 1;\n\n    //  wrapFunctionCond :: (TypeVarMap, Integer, a) -> a\n    function wrapFunctionCond(_typeVarMap, index, value) {\n      if (typeInfo.types[index].type !== FUNCTION) return value;\n\n      var expType = typeInfo.types[index];\n\n      //  checkValue :: (TypeVarMap, Integer, String, a) -> Either (() -> Error) TypeVarMap\n      function checkValue(typeVarMap, index, k, x) {\n        var propPath = [k];\n        var t = expType.types[k].type;\n        return (\n          t.type === VARIABLE ?\n            Z.chain (\n              function(typeVarMap) {\n                return isEmpty (typeVarMap[t.name].types) ?\n                  Left (function() {\n                    return typeVarConstraintViolation (\n                      env,\n                      typeInfo,\n                      index,\n                      propPath,\n                      typeVarMap[t.name].valuesByPath\n                    );\n                  }) :\n                  Right (typeVarMap);\n              },\n              Right (updateTypeVarMap (env,\n                                       typeVarMap,\n                                       t,\n                                       index,\n                                       propPath,\n                                       [x]))\n            ) :\n          // else\n            Z.map (\n              function(r) { return r.typeVarMap; },\n              satisfactoryTypes (env,\n                                 typeInfo,\n                                 typeVarMap,\n                                 t,\n                                 index,\n                                 propPath,\n                                 [x])\n            )\n        );\n      }\n\n      var isThunk = expType.types.$1.type.type === NO_ARGUMENTS;\n      var numArgsExpected = isThunk ? 0 : expType.keys.length - 1;\n      var typeVarMap = _typeVarMap;\n      return function(x) {\n        if (arguments.length !== numArgsExpected) {\n          throw invalidArgumentsLength (typeInfo,\n                                        index,\n                                        numArgsExpected,\n                                        slice.call (arguments));\n        }\n\n        var args = arguments;\n        typeVarMap = assertRight (\n          (init (expType.keys)).reduce (function(either, k, idx) {\n            var arg = args[idx];\n            return Z.chain (function(typeVarMap) {\n              return checkValue (typeVarMap, index, k, arg);\n            }, either);\n          }, Right (typeVarMap))\n        );\n\n        var output = value.apply (this, arguments);\n        var k = last (expType.keys);\n        typeVarMap = assertRight (checkValue (typeVarMap, index, k, output));\n        return output;\n      };\n    }\n\n    //  wrapNext :: (TypeVarMap, Array Any, Integer) -> (a -> b)\n    function wrapNext(_typeVarMap, _values, index) {\n      return function(x) {\n        var args = slice.call (arguments);\n        if (args.length !== 1) {\n          throw invalidArgumentsCount (typeInfo, index, 1, args);\n        }\n        var typeVarMap = (assertRight (\n          satisfactoryTypes (env,\n                             typeInfo,\n                             _typeVarMap,\n                             typeInfo.types[index],\n                             index,\n                             [],\n                             args)\n        )).typeVarMap;\n\n        var values = Z.concat (_values, args);\n        if (index + 1 === n) {\n          var value = values.reduce (function(f, x, idx) {\n            return f (wrapFunctionCond (typeVarMap, idx, x));\n          }, impl);\n          typeVarMap = (assertRight (\n            satisfactoryTypes (env,\n                               typeInfo,\n                               typeVarMap,\n                               typeInfo.types[n],\n                               n,\n                               [],\n                               [value])\n          )).typeVarMap;\n          return wrapFunctionCond (typeVarMap, n, value);\n        } else {\n          return wrapNext (typeVarMap, values, index + 1);\n        }\n      };\n    }\n\n    var wrapped = typeInfo.types[0].type === NO_ARGUMENTS ?\n      function() {\n        if (arguments.length !== 0) {\n          throw invalidArgumentsCount (typeInfo, 0, 0, slice.call (arguments));\n        }\n        var value = impl ();\n        var typeVarMap = assertRight (\n          satisfactoryTypes (env,\n                             typeInfo,\n                             {},\n                             typeInfo.types[n],\n                             n,\n                             [],\n                             [value])\n        ).typeVarMap;\n        return wrapFunctionCond (typeVarMap, n, value);\n      } :\n      wrapNext ({}, [], 0);\n\n    wrapped[inspect] = wrapped.toString = always0 (typeSignature (typeInfo));\n\n    return wrapped;\n  }\n\n  function _create(opts) {\n    function def(name) {\n      return function(constraints) {\n        return function(expTypes) {\n          return function(impl) {\n            return opts.checkTypes ?\n              withTypeChecking (opts.env,\n                                {name: name,\n                                 constraints: constraints,\n                                 types: augmentThunk (expTypes)},\n                                impl) :\n              impl;\n          };\n        };\n      };\n    }\n    return def (def.name)\n               ({})\n               ([String_,\n                 StrMap (Array_ (TypeClass)),\n                 NonEmpty (Array_ (Type)),\n                 AnyFunction,\n                 AnyFunction])\n               (def);\n  }\n\n  var create =\n  def ('create')\n      ({})\n      ([RecordType ({checkTypes: Boolean_, env: Array_ (Any)}), AnyFunction])\n      (_create);\n\n  //  fromUncheckedUnaryType :: (Type -> Type) -> Type -> Type\n  function fromUncheckedUnaryType(typeConstructor) {\n    var t = typeConstructor (Unknown);\n    var _1 = t.types.$1.extractor;\n    return CheckedUnaryType (t.name) (t.url) (t._test) (_1);\n  }\n\n  //  fromUncheckedBinaryType :: (Type -> Type -> Type) -> Type -> Type -> Type\n  function fromUncheckedBinaryType(typeConstructor) {\n    var t = typeConstructor (Unknown) (Unknown);\n    var _1 = t.types.$1.extractor;\n    var _2 = t.types.$2.extractor;\n    return CheckedBinaryType (t.name) (t.url) (t._test) (_1) (_2);\n  }\n\n  return {\n    Any: Any,\n    AnyFunction: AnyFunction,\n    Arguments: Arguments,\n    Array: fromUncheckedUnaryType (Array_),\n    Array0: Array0,\n    Array1: fromUncheckedUnaryType (Array1),\n    Array2: fromUncheckedBinaryType (Array2),\n    Boolean: Boolean_,\n    Date: Date_,\n    Error: Error_,\n    FiniteNumber: FiniteNumber,\n    Function: def ('Function') ({}) ([Array_ (Type), Type]) (Function_),\n    GlobalRegExp: GlobalRegExp,\n    HtmlElement: HtmlElement,\n    Integer: Integer,\n    NegativeFiniteNumber: NegativeFiniteNumber,\n    NegativeInteger: NegativeInteger,\n    NegativeNumber: NegativeNumber,\n    NonEmpty: NonEmpty,\n    NonGlobalRegExp: NonGlobalRegExp,\n    NonNegativeInteger: NonNegativeInteger,\n    NonZeroFiniteNumber: NonZeroFiniteNumber,\n    NonZeroInteger: NonZeroInteger,\n    NonZeroValidNumber: NonZeroValidNumber,\n    Null: Null,\n    Nullable: fromUncheckedUnaryType (Nullable),\n    Number: Number_,\n    Object: Object_,\n    PositiveFiniteNumber: PositiveFiniteNumber,\n    PositiveInteger: PositiveInteger,\n    PositiveNumber: PositiveNumber,\n    RegExp: RegExp_,\n    RegexFlags: RegexFlags,\n    StrMap: fromUncheckedUnaryType (StrMap),\n    String: String_,\n    Symbol: Symbol_,\n    Type: Type,\n    TypeClass: TypeClass,\n    Undefined: Undefined,\n    Unknown: Unknown,\n    ValidDate: ValidDate,\n    ValidNumber: ValidNumber,\n    env: env,\n    create: create,\n    test: def ('test') ({}) ([Array_ (Type), Type, Any, Boolean_]) (test),\n    NullaryType: CheckedNullaryType,\n    UnaryType: CheckedUnaryType,\n    BinaryType: CheckedBinaryType,\n    EnumType: CheckedEnumType,\n    RecordType: CheckedRecordType,\n    TypeVariable: CheckedTypeVariable,\n    UnaryTypeVariable: CheckedUnaryTypeVariable,\n    BinaryTypeVariable: CheckedBinaryTypeVariable,\n    Thunk: Thunk,\n    Predicate: Predicate\n  };\n\n}));\n\n//. [FL:Semigroup]:         https://github.com/fantasyland/fantasy-land#semigroup\n//. [HTML element]:         https://developer.mozilla.org/en-US/docs/Web/HTML/Element\n//. [Monoid]:               https://github.com/fantasyland/fantasy-land#monoid\n//. [Setoid]:               https://github.com/fantasyland/fantasy-land#setoid\n//. [`Array`]:              #Array\n//. [`Array2`]:             #Array2\n//. [`BinaryType`]:         #BinaryType\n//. [`Date`]:               #Date\n//. [`FiniteNumber`]:       #FiniteNumber\n//. [`GlobalRegExp`]:       #GlobalRegExp\n//. [`Integer`]:            #Integer\n//. [`NonGlobalRegExp`]:    #NonGlobalRegExp\n//. [`Number`]:             #Number\n//. [`Object.create`]:      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n//. [`RegExp`]:             #RegExp\n//. [`RegexFlags`]:         #RegexFlags\n//. [`String`]:             #String\n//. [`SyntaxError`]:        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\n//. [`TypeClass`]:          https://github.com/sanctuary-js/sanctuary-type-classes#TypeClass\n//. [`TypeError`]:          https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n//. [`TypeVariable`]:       #TypeVariable\n//. [`UnaryType`]:          #UnaryType\n//. [`UnaryTypeVariable`]:  #UnaryTypeVariable\n//. [`Unknown`]:            #Unknown\n//. [`ValidNumber`]:        #ValidNumber\n//. [`env`]:                #env\n//. [arguments]:            https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\n//. [enumerated types]:     https://en.wikipedia.org/wiki/Enumerated_type\n//. [max]:                  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n//. [min]:                  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\n//. [record type]:          #RecordType\n//. [semigroup]:            https://en.wikipedia.org/wiki/Semigroup\n//. [type class]:           #type-classes\n//. [type variables]:       #TypeVariable\n//. [types]:                #types\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '9.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '9.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","/*\n    ,______  ______,  ,________,,_____,,_____,,__________  ,__________,\n    |      \\/      |  |        ||     ||     ||          \\ |          |\n    |_,          ,_|  |_      _||_    ||    _||_,   __    ||_,   _____|\n      |   \\  /   |     /      \\   \\   \\/   /    |        /   |      |\n    ,_|    ||    |_,,_/   /\\   \\_, \\      /   ,_|   __   \\ ,_|   ___|_,\n    |      ||      ||     ||     |  |    |    |           ||          |\n    |______||______||_____||_____|  |____|    |__________/ |__________|\n                                                                         */\n\n//. <a href=\"https://github.com/fantasyland/fantasy-land\"><img alt=\"Fantasy Land\" src=\"https://raw.githubusercontent.com/fantasyland/fantasy-land/master/logo.png\" width=\"75\" height=\"75\" align=\"left\"></a>\n//.\n//. # sanctuary-maybe\n//.\n//. The Maybe type represents optional values: a value of type `Maybe a` is\n//. either Nothing (the empty value) or a Just whose value is of type `a`.\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f (require ('sanctuary-show'),\n                        require ('sanctuary-type-classes'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define (['sanctuary-show', 'sanctuary-type-classes'], f);\n  } else {\n    self.sanctuaryMaybe = f (self.sanctuaryShow, self.sanctuaryTypeClasses);\n  }\n\n} (function(show, Z) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    var $ = __doctest.require ('sanctuary-def');\n    var type = __doctest.require ('sanctuary-type-identifiers');\n    var S = (function() {\n      var S = __doctest.require ('sanctuary');\n      var MaybeType = $.UnaryType\n        ('sanctuary-maybe/Maybe')\n        ('')\n        (function(x) { return type (x) === Maybe['@@type']; })\n        (function(m) { return m.isJust ? [m.value] : []; });\n      var env = Z.concat (S.env, [$.TypeClass, MaybeType ($.Unknown)]);\n      return S.create ({checkTypes: true, env: env});\n    } ());\n  }\n\n  var Maybe = {};\n\n  var Nothing$prototype = {\n    /* eslint-disable key-spacing */\n    'constructor':            Maybe,\n    'isNothing':              true,\n    'isJust':                 false,\n    '@@show':                 Nothing$prototype$show,\n    'fantasy-land/equals':    Nothing$prototype$equals,\n    'fantasy-land/lte':       Nothing$prototype$lte,\n    'fantasy-land/concat':    Nothing$prototype$concat,\n    'fantasy-land/filter':    Nothing$prototype$filter,\n    'fantasy-land/map':       Nothing$prototype$map,\n    'fantasy-land/ap':        Nothing$prototype$ap,\n    'fantasy-land/chain':     Nothing$prototype$chain,\n    'fantasy-land/alt':       Nothing$prototype$alt,\n    'fantasy-land/reduce':    Nothing$prototype$reduce,\n    'fantasy-land/traverse':  Nothing$prototype$traverse,\n    'fantasy-land/extend':    Nothing$prototype$extend\n    /* eslint-enable key-spacing */\n  };\n\n  var Just$prototype = {\n    /* eslint-disable key-spacing */\n    'constructor':            Maybe,\n    'isNothing':              false,\n    'isJust':                 true,\n    '@@show':                 Just$prototype$show,\n    'fantasy-land/filter':    Just$prototype$filter,\n    'fantasy-land/map':       Just$prototype$map,\n    'fantasy-land/ap':        Just$prototype$ap,\n    'fantasy-land/chain':     Just$prototype$chain,\n    'fantasy-land/alt':       Just$prototype$alt,\n    'fantasy-land/reduce':    Just$prototype$reduce,\n    'fantasy-land/traverse':  Just$prototype$traverse,\n    'fantasy-land/extend':    Just$prototype$extend\n    /* eslint-enable key-spacing */\n  };\n\n  var util =\n    typeof module === 'object' && typeof module.exports === 'object' ?\n    require ('util') :\n    /* istanbul ignore next */ {};\n  var inspect =\n    util.inspect != null && typeof util.inspect.custom === 'symbol' ?\n    /* istanbul ignore next */ util.inspect.custom :\n    /* istanbul ignore next */ 'inspect';\n  Nothing$prototype[inspect] = Nothing$prototype$show;\n  Just$prototype[inspect] = Just$prototype$show;\n\n  //. `Maybe a` satisfies the following [Fantasy Land][] specifications:\n  //.\n  //. ```javascript\n  //. > const Useless = require ('sanctuary-useless')\n  //.\n  //. > S.map (k => k + ' '.repeat (16 - k.length) +\n  //. .             (Z[k].test (Just (Useless)) ? '\\u2705   ' :\n  //. .              Z[k].test (Nothing)        ? '\\u2705 * ' :\n  //. .              /* otherwise */              '\\u274C   '))\n  //. .       (S.keys (Z.filter ($.test ([]) ($.TypeClass), Z)))\n  //. [ 'Setoid          ✅ * ',  // if ‘a’ satisfies Setoid\n  //. . 'Ord             ✅ * ',  // if ‘a’ satisfies Ord\n  //. . 'Semigroupoid    ❌   ',\n  //. . 'Category        ❌   ',\n  //. . 'Semigroup       ✅ * ',  // if ‘a’ satisfies Semigroup\n  //. . 'Monoid          ✅ * ',  // if ‘a’ satisfies Semigroup\n  //. . 'Group           ❌   ',\n  //. . 'Filterable      ✅   ',\n  //. . 'Functor         ✅   ',\n  //. . 'Bifunctor       ❌   ',\n  //. . 'Profunctor      ❌   ',\n  //. . 'Apply           ✅   ',\n  //. . 'Applicative     ✅   ',\n  //. . 'Chain           ✅   ',\n  //. . 'ChainRec        ✅   ',\n  //. . 'Monad           ✅   ',\n  //. . 'Alt             ✅   ',\n  //. . 'Plus            ✅   ',\n  //. . 'Alternative     ✅   ',\n  //. . 'Foldable        ✅   ',\n  //. . 'Traversable     ✅   ',\n  //. . 'Extend          ✅   ',\n  //. . 'Comonad         ❌   ',\n  //. . 'Contravariant   ❌   ' ]\n  //. ```\n\n  //# Maybe :: TypeRep Maybe\n  //.\n  //. Maybe [type representative][].\n\n  //# Maybe.Nothing :: Maybe a\n  //.\n  //. The empty value of type `Maybe a`.\n  //.\n  //. ```javascript\n  //. > Nothing\n  //. Nothing\n  //. ```\n  var Nothing = Maybe.Nothing = Object.create (Nothing$prototype);\n\n  //# Maybe.Just :: a -> Maybe a\n  //.\n  //. Constructs a value of type `Maybe a` from a value of type `a`.\n  //.\n  //. ```javascript\n  //. > Just (42)\n  //. Just (42)\n  //. ```\n  var Just = Maybe.Just = function(value) {\n    var just = Object.create (Just$prototype);\n    if (Z.Setoid.test (value)) {\n      just['fantasy-land/equals'] = Just$prototype$equals;\n      if (Z.Ord.test (value)) {\n        just['fantasy-land/lte'] = Just$prototype$lte;\n      }\n    }\n    if (Z.Semigroup.test (value)) {\n      just['fantasy-land/concat'] = Just$prototype$concat;\n    }\n    just.value = value;\n    return just;\n  };\n\n  //# Maybe.@@type :: String\n  //.\n  //. Maybe [type identifier][].\n  //.\n  //. ```javascript\n  //. > type (Just (42))\n  //. 'sanctuary-maybe/Maybe@1'\n  //.\n  //. > type.parse (type (Just (42)))\n  //. {namespace: 'sanctuary-maybe', name: 'Maybe', version: 1}\n  //. ```\n  Maybe['@@type'] = 'sanctuary-maybe/Maybe@1';\n\n  //# Maybe.fantasy-land/empty :: () -> Maybe a\n  //.\n  //.   - `empty (Maybe)` is equivalent to `Nothing`\n  //.\n  //. ```javascript\n  //. > S.empty (Maybe)\n  //. Nothing\n  //. ```\n  Maybe['fantasy-land/empty'] = function() { return Nothing; };\n\n  //# Maybe.fantasy-land/of :: a -> Maybe a\n  //.\n  //.   - `of (Maybe) (x)` is equivalent to `Just (x)`\n  //.\n  //. ```javascript\n  //. > S.of (Maybe) (42)\n  //. Just (42)\n  //. ```\n  Maybe['fantasy-land/of'] = Just;\n\n  function next(x) { return {tag: next, value: x}; }\n  function done(x) { return {tag: done, value: x}; }\n\n  //# Maybe.fantasy-land/chainRec :: ((a -> c, b -> c, a) -> Maybe c, a) -> Maybe b\n  //.\n  //. ```javascript\n  //. > Z.chainRec (\n  //. .   Maybe,\n  //. .   (next, done, x) =>\n  //. .     x <= 1 ? Nothing : Just (x >= 1000 ? done (x) : next (x * x)),\n  //. .   1\n  //. . )\n  //. Nothing\n  //.\n  //. > Z.chainRec (\n  //. .   Maybe,\n  //. .   (next, done, x) =>\n  //. .     x <= 1 ? Nothing : Just (x >= 1000 ? done (x) : next (x * x)),\n  //. .   2\n  //. . )\n  //. Just (65536)\n  //. ```\n  Maybe['fantasy-land/chainRec'] = function(f, x) {\n    var r = next (x);\n    while (r.tag === next) {\n      var maybe = f (next, done, r.value);\n      if (maybe.isNothing) return maybe;\n      r = maybe.value;\n    }\n    return Just (r.value);\n  };\n\n  //# Maybe.fantasy-land/zero :: () -> Maybe a\n  //.\n  //.   - `zero (Maybe)` is equivalent to `Nothing`\n  //.\n  //. ```javascript\n  //. > S.zero (Maybe)\n  //. Nothing\n  //. ```\n  Maybe['fantasy-land/zero'] = function() { return Nothing; };\n\n  //# Maybe#@@show :: Showable a => Maybe a ~> () -> String\n  //.\n  //.   - `show (Nothing)` is equivalent to `'Nothing'`\n  //.   - `show (Just (x))` is equivalent to `'Just (' + show (x) + ')'`\n  //.\n  //. ```javascript\n  //. > show (Nothing)\n  //. 'Nothing'\n  //.\n  //. > show (Just (['foo', 'bar', 'baz']))\n  //. 'Just ([\"foo\", \"bar\", \"baz\"])'\n  //. ```\n  function Nothing$prototype$show() {\n    return 'Nothing';\n  }\n  function Just$prototype$show() {\n    return 'Just (' + show (this.value) + ')';\n  }\n\n  //# Maybe#fantasy-land/equals :: Setoid a => Maybe a ~> Maybe a -> Boolean\n  //.\n  //.   - `Nothing` is equal to `Nothing`\n  //.   - `Just (x)` is equal to `Just (y)` [iff][] `x` is equal to `y`\n  //.     according to [`Z.equals`][]\n  //.   - `Nothing` is never equal to `Just (x)`\n  //.\n  //. ```javascript\n  //. > S.equals (Nothing) (Nothing)\n  //. true\n  //.\n  //. > S.equals (Just ([1, 2, 3])) (Just ([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals (Just ([1, 2, 3])) (Just ([3, 2, 1]))\n  //. false\n  //.\n  //. > S.equals (Just ([1, 2, 3])) (Nothing)\n  //. false\n  //. ```\n  function Nothing$prototype$equals(other) {\n    return other.isNothing;\n  }\n  function Just$prototype$equals(other) {\n    return other.isJust && Z.equals (this.value, other.value);\n  }\n\n  //# Maybe#fantasy-land/lte :: Ord a => Maybe a ~> Maybe a -> Boolean\n  //.\n  //.   - `Nothing` is (less than or) equal to `Nothing`\n  //.   - `Just (x)` is less than or equal to `Just (y)` [iff][] `x` is less\n  //.     than or equal to `y` according to [`Z.lte`][]\n  //.   - `Nothing` is always less than `Just (x)`\n  //.\n  //. ```javascript\n  //. > S.filter (S.lte (Nothing)) ([Nothing, Just (0), Just (1), Just (2)])\n  //. [Nothing]\n  //.\n  //. > S.filter (S.lte (Just (1))) ([Nothing, Just (0), Just (1), Just (2)])\n  //. [Nothing, Just (0), Just (1)]\n  //. ```\n  function Nothing$prototype$lte(other) {\n    return true;\n  }\n  function Just$prototype$lte(other) {\n    return other.isJust && Z.lte (this.value, other.value);\n  }\n\n  //# Maybe#fantasy-land/concat :: Semigroup a => Maybe a ~> Maybe a -> Maybe a\n  //.\n  //.   - `concat (Nothing) (Nothing)` is equivalent to `Nothing`\n  //.   - `concat (Just (x)) (Just (y))` is equivalent to\n  //.     `Just (concat (x) (y))`\n  //.   - `concat (Nothing) (Just (x))` is equivalent to `Just (x)`\n  //.   - `concat (Just (x)) (Nothing)` is equivalent to `Just (x)`\n  //.\n  //. ```javascript\n  //. > S.concat (Nothing) (Nothing)\n  //. Nothing\n  //.\n  //. > S.concat (Just ([1, 2, 3])) (Just ([4, 5, 6]))\n  //. Just ([1, 2, 3, 4, 5, 6])\n  //.\n  //. > S.concat (Nothing) (Just ([1, 2, 3]))\n  //. Just ([1, 2, 3])\n  //.\n  //. > S.concat (Just ([1, 2, 3])) (Nothing)\n  //. Just ([1, 2, 3])\n  //. ```\n  function Nothing$prototype$concat(other) {\n    return other;\n  }\n  function Just$prototype$concat(other) {\n    return other.isJust ? Just (Z.concat (this.value, other.value)) : this;\n  }\n\n  //# Maybe#fantasy-land/filter :: Maybe a ~> (a -> Boolean) -> Maybe a\n  //.\n  //.   - `filterM (p) (Nothing)` is equivalent to `Nothing`\n  //.   - `filterM (p) (Just (x))` is equivalent to\n  //.     `p (x) ? Just (x) : Nothing`\n  //.\n  //. ```javascript\n  //. > S.filterM (isFinite) (Nothing)\n  //. Nothing\n  //.\n  //. > S.filterM (isFinite) (Just (Infinity))\n  //. Nothing\n  //.\n  //. > S.filterM (isFinite) (Just (Number.MAX_SAFE_INTEGER))\n  //. Just (9007199254740991)\n  //. ```\n  function Nothing$prototype$filter(pred) {\n    return this;\n  }\n  function Just$prototype$filter(pred) {\n    return pred (this.value) ? this : Nothing;\n  }\n\n  //# Maybe#fantasy-land/map :: Maybe a ~> (a -> b) -> Maybe b\n  //.\n  //.   - `map (f) (Nothing)` is equivalent to `Nothing`\n  //.   - `map (f) (Just (x))` is equivalent to `Just (f (x))`\n  //.\n  //. ```javascript\n  //. > S.map (Math.sqrt) (Nothing)\n  //. Nothing\n  //.\n  //. > S.map (Math.sqrt) (Just (9))\n  //. Just (3)\n  //. ```\n  function Nothing$prototype$map(f) {\n    return this;\n  }\n  function Just$prototype$map(f) {\n    return Just (f (this.value));\n  }\n\n  //# Maybe#fantasy-land/ap :: Maybe a ~> Maybe (a -> b) -> Maybe b\n  //.\n  //.   - `ap (Nothing) (Nothing)` is equivalent to `Nothing`\n  //.   - `ap (Nothing) (Just (x))` is equivalent to `Nothing`\n  //.   - `ap (Just (f)) (Nothing)` is equivalent to `Nothing`\n  //.   - `ap (Just (f)) (Just (x))` is equivalent to `Just (f (x))`\n  //.\n  //. ```javascript\n  //. > S.ap (Nothing) (Nothing)\n  //. Nothing\n  //.\n  //. > S.ap (Nothing) (Just (9))\n  //. Nothing\n  //.\n  //. > S.ap (Just (Math.sqrt)) (Nothing)\n  //. Nothing\n  //.\n  //. > S.ap (Just (Math.sqrt)) (Just (9))\n  //. Just (3)\n  //. ```\n  function Nothing$prototype$ap(other) {\n    return this;\n  }\n  function Just$prototype$ap(other) {\n    return other.isJust ? Just (other.value (this.value)) : other;\n  }\n\n  //# Maybe#fantasy-land/chain :: Maybe a ~> (a -> Maybe b) -> Maybe b\n  //.\n  //.   - `chain (f) (Nothing)` is equivalent to `Nothing`\n  //.   - `chain (f) (Just (x))` is equivalent to `f (x)`\n  //.\n  //. ```javascript\n  //. > const head = xs => xs.length === 0 ? Nothing : Just (xs[0])\n  //.\n  //. > S.chain (head) (Nothing)\n  //. Nothing\n  //.\n  //. > S.chain (head) (Just ([]))\n  //. Nothing\n  //.\n  //. > S.chain (head) (Just (['foo', 'bar', 'baz']))\n  //. Just ('foo')\n  //. ```\n  function Nothing$prototype$chain(f) {\n    return this;\n  }\n  function Just$prototype$chain(f) {\n    return f (this.value);\n  }\n\n  //# Maybe#fantasy-land/alt :: Maybe a ~> Maybe a -> Maybe a\n  //.\n  //.   - `alt (Nothing) (Nothing)` is equivalent to `Nothing`\n  //.   - `alt (Nothing) (Just (x))` is equivalent to `Just (x)`\n  //.   - `alt (Just (x)) (Nothing)` is equivalent to `Just (x)`\n  //.   - `alt (Just (x)) (Just (y))` is equivalent to `Just (x)`\n  //.\n  //. ```javascript\n  //. > S.alt (Nothing) (Nothing)\n  //. Nothing\n  //.\n  //. > S.alt (Nothing) (Just (1))\n  //. Just (1)\n  //.\n  //. > S.alt (Just (2)) (Nothing)\n  //. Just (2)\n  //.\n  //. > S.alt (Just (3)) (Just (4))\n  //. Just (3)\n  //. ```\n  function Nothing$prototype$alt(other) {\n    return other;\n  }\n  function Just$prototype$alt(other) {\n    return this;\n  }\n\n  //# Maybe#fantasy-land/reduce :: Maybe a ~> ((b, a) -> b, b) -> b\n  //.\n  //.   - `reduce (f) (x) (Nothing)` is equivalent to `x`\n  //.   - `reduce (f) (x) (Just (y))` is equivalent to `f (x) (y)`\n  //.\n  //. ```javascript\n  //. > S.reduce (S.concat) ('abc') (Nothing)\n  //. 'abc'\n  //.\n  //. > S.reduce (S.concat) ('abc') (Just ('xyz'))\n  //. 'abcxyz'\n  //. ```\n  function Nothing$prototype$reduce(f, x) {\n    return x;\n  }\n  function Just$prototype$reduce(f, x) {\n    return f (x, this.value);\n  }\n\n  //# Maybe#fantasy-land/traverse :: Applicative f => Maybe a ~> (TypeRep f, a -> f b) -> f (Maybe b)\n  //.\n  //.   - `traverse (A) (f) (Nothing)` is equivalent to `of (A) (Nothing)`\n  //.   - `traverse (A) (f) (Just (x))` is equivalent to `map (Just) (f (x))`\n  //.\n  //. ```javascript\n  //. > S.traverse (Array) (S.words) (Nothing)\n  //. [Nothing]\n  //.\n  //. > S.traverse (Array) (S.words) (Just ('foo bar baz'))\n  //. [Just ('foo'), Just ('bar'), Just ('baz')]\n  //. ```\n  function Nothing$prototype$traverse(typeRep, f) {\n    return Z.of (typeRep, this);\n  }\n  function Just$prototype$traverse(typeRep, f) {\n    return Z.map (Just, f (this.value));\n  }\n\n  //# Maybe#fantasy-land/extend :: Maybe a ~> (Maybe a -> b) -> Maybe b\n  //.\n  //.   - `extend (f) (Nothing)` is equivalent to `Nothing`\n  //.   - `extend (f) (Just (x))` is equivalent to `Just (f (Just (x)))`\n  //.\n  //. ```javascript\n  //. > S.extend (S.reduce (S.add) (1)) (Nothing)\n  //. Nothing\n  //.\n  //. > S.extend (S.reduce (S.add) (1)) (Just (99))\n  //. Just (100)\n  //. ```\n  function Nothing$prototype$extend(f) {\n    return this;\n  }\n  function Just$prototype$extend(f) {\n    return Just (f (this));\n  }\n\n  return Maybe;\n\n}));\n\n//. [Fantasy Land]:             v:fantasyland/fantasy-land\n//. [`Z.equals`]:               v:sanctuary-js/sanctuary-type-classes#equals\n//. [`Z.lte`]:                  v:sanctuary-js/sanctuary-type-classes#lte\n//. [iff]:                      https://en.wikipedia.org/wiki/If_and_only_if\n//. [type identifier]:          v:sanctuary-js/sanctuary-type-identifiers\n//. [type representative]:      v:fantasyland/fantasy-land#type-representatives\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '9.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","       /*                   *\\\n      //                     \\\\\n     //   @@  @@     @@  @@   \\\\\n    //      @@       @@  @@    \\\\\n    \\\\      @@       @@  @@    //\n     \\\\   @@  @@  @    @@ @   //\n      \\\\          /       @  //\n       \\*             @@@@  */\n\n//. <a href=\"https://github.com/fantasyland/fantasy-land\"><img alt=\"Fantasy Land\" src=\"https://raw.githubusercontent.com/fantasyland/fantasy-land/master/logo.png\" width=\"75\" height=\"75\" align=\"left\"></a>\n//.\n//. # sanctuary-pair\n//.\n//. Pair is the canonical product type: a value of type `Pair a b` always\n//. contains exactly two values: one of type `a`; one of type `b`.\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f (require ('sanctuary-show'),\n                        require ('sanctuary-type-classes'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define (['sanctuary-show', 'sanctuary-type-classes'], f);\n  } else {\n    self.sanctuaryPair = f (self.sanctuaryShow, self.sanctuaryTypeClasses);\n  }\n\n} (function(show, Z) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    var $ = __doctest.require ('sanctuary-def');\n    var type = __doctest.require ('sanctuary-type-identifiers');\n    var S = (function() {\n      var S = __doctest.require ('sanctuary');\n      var PairType = $.BinaryType\n        ('sanctuary-pair/Pair')\n        ('')\n        (function(x) { return type (x) === Pair['@@type']; })\n        (function(p) { return [p.fst]; })\n        (function(p) { return [p.snd]; });\n      var env = Z.concat (S.env,\n                          [$.TypeClass, PairType ($.Unknown) ($.Unknown)]);\n      return S.create ({checkTypes: true, env: env});\n    } ());\n  }\n\n  var prototype = {\n    /* eslint-disable key-spacing */\n    'constructor':            Pair,\n    '@@show':                 Pair$prototype$show,\n    'fantasy-land/compose':   Pair$prototype$compose,\n    'fantasy-land/map':       Pair$prototype$map,\n    'fantasy-land/bimap':     Pair$prototype$bimap,\n    'fantasy-land/reduce':    Pair$prototype$reduce,\n    'fantasy-land/traverse':  Pair$prototype$traverse,\n    'fantasy-land/extend':    Pair$prototype$extend,\n    'fantasy-land/extract':   Pair$prototype$extract\n    /* eslint-enable key-spacing */\n  };\n\n  var util =\n    typeof module === 'object' && typeof module.exports === 'object' ?\n    require ('util') :\n    /* istanbul ignore next */ {};\n  prototype[\n    util.inspect != null && typeof util.inspect.custom === 'symbol' ?\n    /* istanbul ignore next */ util.inspect.custom :\n    /* istanbul ignore next */ 'inspect'\n  ] = Pair$prototype$show;\n\n  /* istanbul ignore else */\n  if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {\n    prototype[Symbol.iterator] = function() {\n      return [this.fst, this.snd][Symbol.iterator] ();\n    };\n  }\n\n  //. `Pair a b` satisfies the following [Fantasy Land][] specifications:\n  //.\n  //. ```javascript\n  //. > const Useless = require ('sanctuary-useless')\n  //.\n  //. > S.map (k => k + ' '.repeat (16 - k.length) +\n  //. .             (Z[k].test (Pair (Useless) (Useless)) ? '\\u2705   ' :\n  //. .              Z[k].test (Pair (['foo']) (['bar'])) ? '\\u2705 * ' :\n  //. .              /* otherwise */                        '\\u274C   '))\n  //. .       (S.keys (Z.filter ($.test ([]) ($.TypeClass), Z)))\n  //. [ 'Setoid          ✅ * ',  // if ‘a’ and ‘b’ satisfy Setoid\n  //. . 'Ord             ✅ * ',  // if ‘a’ and ‘b’ satisfy Ord\n  //. . 'Semigroupoid    ✅   ',\n  //. . 'Category        ❌   ',\n  //. . 'Semigroup       ✅ * ',  // if ‘a’ and ‘b’ satisfy Semigroup\n  //. . 'Monoid          ❌   ',\n  //. . 'Group           ❌   ',\n  //. . 'Filterable      ❌   ',\n  //. . 'Functor         ✅   ',\n  //. . 'Bifunctor       ✅   ',\n  //. . 'Profunctor      ❌   ',\n  //. . 'Apply           ✅ * ',  // if ‘a’ satisfies Semigroup\n  //. . 'Applicative     ❌   ',\n  //. . 'Chain           ✅ * ',  // if ‘a’ satisfies Semigroup\n  //. . 'ChainRec        ❌   ',\n  //. . 'Monad           ❌   ',\n  //. . 'Alt             ❌   ',\n  //. . 'Plus            ❌   ',\n  //. . 'Alternative     ❌   ',\n  //. . 'Foldable        ✅   ',\n  //. . 'Traversable     ✅   ',\n  //. . 'Extend          ✅   ',\n  //. . 'Comonad         ✅   ',\n  //. . 'Contravariant   ❌   ' ]\n  //. ```\n\n  //# Pair :: a -> b -> Pair a b\n  //.\n  //. Pair's sole data constructor. Additionally, it serves as the\n  //. Pair [type representative][].\n  //.\n  //. ```javascript\n  //. > Pair (1) (2)\n  //. Pair (1) (2)\n  //. ```\n  function Pair(fst) {\n    return function(snd) {\n      var pair = Object.create (prototype);\n      if (Z.Setoid.test (fst) && Z.Setoid.test (snd)) {\n        pair['fantasy-land/equals'] = Pair$prototype$equals;\n        if (Z.Ord.test (fst) && Z.Ord.test (snd)) {\n          pair['fantasy-land/lte'] = Pair$prototype$lte;\n        }\n      }\n      if (Z.Semigroup.test (fst)) {\n        if (Z.Semigroup.test (snd)) {\n          pair['fantasy-land/concat'] = Pair$prototype$concat;\n        }\n        pair['fantasy-land/ap'] = Pair$prototype$ap;\n        pair['fantasy-land/chain'] = Pair$prototype$chain;\n      }\n      pair.fst = fst;\n      pair.snd = snd;\n      return pair;\n    };\n  }\n\n  //# Pair.fst :: Pair a b -> a\n  //.\n  //. `fst (Pair (x) (y))` is equivalent to `x`.\n  //.\n  //. ```javascript\n  //. > Pair.fst (Pair ('abc') ([1, 2, 3]))\n  //. 'abc'\n  //. ```\n  Pair.fst = function(p) { return p.fst; };\n\n  //# Pair.snd :: Pair a b -> b\n  //.\n  //. `snd (Pair (x) (y))` is equivalent to `y`.\n  //.\n  //. ```javascript\n  //. > Pair.snd (Pair ('abc') ([1, 2, 3]))\n  //. [1, 2, 3]\n  //. ```\n  Pair.snd = function(p) { return p.snd; };\n\n  //# Pair.swap :: Pair a b -> Pair b a\n  //.\n  //. `swap (Pair (x) (y))` is equivalent to `Pair (y) (x)`.\n  //.\n  //. ```javascript\n  //. > Pair.swap (Pair ('abc') ([1, 2, 3]))\n  //. Pair ([1, 2, 3]) ('abc')\n  //. ```\n  Pair.swap = function(p) { return Pair (p.snd) (p.fst); };\n\n  //# Pair.@@type :: String\n  //.\n  //. Pair [type identifier][].\n  //.\n  //. ```javascript\n  //. > type (Pair ('abc') ([1, 2, 3]))\n  //. 'sanctuary-pair/Pair@1'\n  //.\n  //. > type.parse (type (Pair ('abc') ([1, 2, 3])))\n  //. {namespace: 'sanctuary-pair', name: 'Pair', version: 1}\n  //. ```\n  Pair['@@type'] = 'sanctuary-pair/Pair@1';\n\n  //# Pair#@@show :: (Showable a, Showable b) => Pair a b ~> () -> String\n  //.\n  //. `show (Pair (x) (y))` is equivalent to\n  //. `'Pair (' + show (x) + ') (' + show (y) + ')'`.\n  //.\n  //. ```javascript\n  //. > show (Pair ('abc') ([1, 2, 3]))\n  //. 'Pair (\"abc\") ([1, 2, 3])'\n  //. ```\n  function Pair$prototype$show() {\n    return 'Pair (' + show (this.fst) + ') (' + show (this.snd) + ')';\n  }\n\n  //# Pair#fantasy-land/equals :: (Setoid a, Setoid b) => Pair a b ~> Pair a b -> Boolean\n  //.\n  //. `Pair (x) (y)` is equal to `Pair (v) (w)` [iff][] `x` is equal to `v`\n  //. and `y` is equal to `w` according to [`Z.equals`][].\n  //.\n  //. ```javascript\n  //. > S.equals (Pair ('abc') ([1, 2, 3])) (Pair ('abc') ([1, 2, 3]))\n  //. true\n  //.\n  //. > S.equals (Pair ('abc') ([1, 2, 3])) (Pair ('abc') ([3, 2, 1]))\n  //. false\n  //. ```\n  function Pair$prototype$equals(other) {\n    return Z.equals (this.fst, other.fst) && Z.equals (this.snd, other.snd);\n  }\n\n  //# Pair#fantasy-land/lte :: (Ord a, Ord b) => Pair a b ~> Pair a b -> Boolean\n  //.\n  //. `Pair (x) (y)` is less than or equal to `Pair (v) (w)` [iff][] `x` is\n  //. less than `v` or `x` is equal to `v` and `y` is less than or equal to\n  //. `w` according to [`Z.lte`][].\n  //.\n  //. ```javascript\n  //. > S.filter (S.lte (Pair ('b') (2)))\n  //. .          ([Pair ('a') (1), Pair ('a') (2), Pair ('a') (3),\n  //. .            Pair ('b') (1), Pair ('b') (2), Pair ('b') (3),\n  //. .            Pair ('c') (1), Pair ('c') (2), Pair ('c') (3)])\n  //. [ Pair ('a') (1),\n  //. . Pair ('a') (2),\n  //. . Pair ('a') (3),\n  //. . Pair ('b') (1),\n  //. . Pair ('b') (2) ]\n  //. ```\n  function Pair$prototype$lte(other) {\n    return Z.equals (this.fst, other.fst) ? Z.lte (this.snd, other.snd)\n                                          : Z.lte (this.fst, other.fst);\n  }\n\n  //# Pair#fantasy-land/compose :: Pair a b ~> Pair b c -> Pair a c\n  //.\n  //. `compose (Pair (x) (y)) (Pair (v) (w))` is equivalent to `Pair (v) (y)`.\n  //.\n  //. ```javascript\n  //. > S.compose (Pair ('a') (0)) (Pair ([1, 2, 3]) ('b'))\n  //. Pair ([1, 2, 3]) (0)\n  //. ```\n  function Pair$prototype$compose(other) {\n    return Pair (this.fst) (other.snd);\n  }\n\n  //# Pair#fantasy-land/concat :: (Semigroup a, Semigroup b) => Pair a b ~> Pair a b -> Pair a b\n  //.\n  //. `concat (Pair (x) (y)) (Pair (v) (w))` is equivalent to\n  //. `Pair (concat (x) (v)) (concat (y) (w))`.\n  //.\n  //. ```javascript\n  //. > S.concat (Pair ('abc') ([1, 2, 3])) (Pair ('xyz') ([4, 5, 6]))\n  //. Pair ('abcxyz') ([1, 2, 3, 4, 5, 6])\n  //. ```\n  function Pair$prototype$concat(other) {\n    return Pair (Z.concat (this.fst, other.fst))\n                (Z.concat (this.snd, other.snd));\n  }\n\n  //# Pair#fantasy-land/map :: Pair a b ~> (b -> c) -> Pair a c\n  //.\n  //. `map (f) (Pair (x) (y))` is equivalent to `Pair (x) (f (y))`.\n  //.\n  //. ```javascript\n  //. > S.map (Math.sqrt) (Pair ('abc') (256))\n  //. Pair ('abc') (16)\n  //. ```\n  function Pair$prototype$map(f) {\n    return Pair (this.fst) (f (this.snd));\n  }\n\n  //# Pair#fantasy-land/bimap :: Pair a c ~> (a -> b, c -> d) -> Pair b d\n  //.\n  //. `bimap (f) (g) (Pair (x) (y))` is equivalent to `Pair (f (x)) (g (y))`.\n  //.\n  //. ```javascript\n  //. > S.bimap (S.toUpper) (Math.sqrt) (Pair ('abc') (256))\n  //. Pair ('ABC') (16)\n  //. ```\n  function Pair$prototype$bimap(f, g) {\n    return Pair (f (this.fst)) (g (this.snd));\n  }\n\n  //# Pair#fantasy-land/ap :: Semigroup a => Pair a b ~> Pair a (b -> c) -> Pair a c\n  //.\n  //. `ap (Pair (v) (f)) (Pair (x) (y))` is equivalent to\n  //. `Pair (concat (v) (x)) (f (y))`.\n  //.\n  //. ```javascript\n  //. > S.ap (Pair ('abc') (Math.sqrt)) (Pair ('xyz') (256))\n  //. Pair ('abcxyz') (16)\n  //. ```\n  function Pair$prototype$ap(other) {\n    return Pair (Z.concat (other.fst, this.fst)) (other.snd (this.snd));\n  }\n\n  //# Pair#fantasy-land/chain :: Semigroup a => Pair a b ~> (b -> Pair a c) -> Pair a c\n  //.\n  //. `chain (f) (Pair (x) (y))` is equivalent to\n  //. `Pair (concat (x) (fst (f (y)))) (snd (f (y)))`.\n  //.\n  //. ```javascript\n  //. > S.chain (n => Pair (show (n)) (Math.sqrt (n))) (Pair ('abc') (256))\n  //. Pair ('abc256') (16)\n  //. ```\n  function Pair$prototype$chain(f) {\n    var other = f (this.snd);\n    return Pair (Z.concat (this.fst, other.fst)) (other.snd);\n  }\n\n  //# Pair#fantasy-land/reduce :: Pair a b ~> ((c, b) -> c, c) -> c\n  //.\n  //. `reduce (f) (x) (Pair (v) (w))` is equivalent to `f (x) (w)`.\n  //.\n  //. ```javascript\n  //. > S.reduce (S.concat) ([1, 2, 3]) (Pair ('abc') ([4, 5, 6]))\n  //. [1, 2, 3, 4, 5, 6]\n  //. ```\n  function Pair$prototype$reduce(f, x) {\n    return f (x, this.snd);\n  }\n\n  //# Pair#fantasy-land/traverse :: Applicative f => Pair a b ~> (TypeRep f, b -> f c) -> f (Pair a c)\n  //.\n  //. `traverse (_) (f) (Pair (x) (y))` is equivalent to\n  //. `map (Pair (x)) (f (y))`.\n  //.\n  //. ```javascript\n  //. > S.traverse (Array) (S.words) (Pair (123) ('foo bar baz'))\n  //. [Pair (123) ('foo'), Pair (123) ('bar'), Pair (123) ('baz')]\n  //. ```\n  function Pair$prototype$traverse(typeRep, f) {\n    return Z.map (Pair (this.fst), f (this.snd));\n  }\n\n  //# Pair#fantasy-land/extend :: Pair a b ~> (Pair a b -> c) -> Pair a c\n  //.\n  //. `extend (f) (Pair (x) (y))` is equivalent to\n  //. `Pair (x) (f (Pair (x) (y)))`.\n  //.\n  //. ```javascript\n  //. > S.extend (S.reduce (S.add) (1)) (Pair ('abc') (99))\n  //. Pair ('abc') (100)\n  //. ```\n  function Pair$prototype$extend(f) {\n    return Pair (this.fst) (f (this));\n  }\n\n  //# Pair#fantasy-land/extract :: Pair a b ~> () -> b\n  //.\n  //. `extract (Pair (x) (y))` is equivalent to `y`.\n  //.\n  //. ```javascript\n  //. > S.extract (Pair ('abc') ([1, 2, 3]))\n  //. [1, 2, 3]\n  //. ```\n  function Pair$prototype$extract() {\n    return this.snd;\n  }\n\n  return Pair;\n\n}));\n\n//. [Fantasy Land]:             v:fantasyland/fantasy-land\n//. [`Z.equals`]:               v:sanctuary-js/sanctuary-type-classes#equals\n//. [`Z.lte`]:                  v:sanctuary-js/sanctuary-type-classes#lte\n//. [iff]:                      https://en.wikipedia.org/wiki/If_and_only_if\n//. [type identifier]:          v:sanctuary-js/sanctuary-type-identifiers\n//. [type representative]:      v:fantasyland/fantasy-land#type-representatives\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '9.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '9.0.0';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","//Built-in constant from web api\r\nexport const MESSAGE = \"message\";\r\n\r\n/* \r\n * These are really just internal wrapped with the loader functions\r\n */\r\nexport enum WorkerLoaderCommand {\r\n    INIT, //Sent from IO when Worker JS is loaded\r\n    READY, //Sent from Worker when INIT is received (worker is ready)\r\n}\r\n\r\n/*\r\n * See where these are called in IO.ts and Worker.ts to make stuff happen\r\n */\r\n\r\nexport enum WorkerCommand {\r\n    SCENE_PING,//Sent from IO when first scene is ready\r\n    SCENE_PONG, //Sent from Worker when first scene is ready\r\n    TICK, //Sent from IO on frame tick - but only when not busy \r\n    RENDER, //Sent from Worker when work is finished processing \r\n}\r\n","import MyWorker = require('worker-loader!./Worker');\r\nimport {gltf_load, GltfBridge, GltfScene} from \"pure3d\";\r\nimport { getCompileFlags, loadWorker} from \"utils/Utils\";\r\nimport {WorkerCommand, MESSAGE} from \"types/Worker-Types\";\r\nimport {createRenderer} from \"./io/renderer/Renderer\";\r\nimport {prepScene} from \"./io/scene/Scene-Prep\";\r\nimport {parallel} from \"fluture\";\r\n\r\nconst {buildMode, buildVersion, isProduction} = getCompileFlags();\r\nconsole.log(`%c Purescript Hello World ${buildVersion} (productionMode: ${isProduction})`, 'color: #4286f4; font-size: large; font-family: \"Comic Sans MS\", cursive, sans-serif');\r\n\r\nconst renderer = createRenderer();\r\n\r\nparallel (Infinity) ([\r\n    loadWorker(new (MyWorker as any)()),\r\n    gltf_load({\r\n        renderer, \r\n        path: \"static/hello-world/HelloWorld.glb\"\r\n    })\r\n]).fork(\r\n        console.error,\r\n        ([worker, gltfBridge]:[Worker, GltfBridge]) => {\r\n            const onPong = (e:MessageEvent) => {\r\n                switch(e.data.cmd) {\r\n                    case WorkerCommand.SCENE_PONG:\r\n                        worker.removeEventListener(MESSAGE, onPong);\r\n                        startRenderCycle ([worker, gltfBridge]);\r\n                        break;\r\n                }\r\n            }\r\n\r\n            worker.addEventListener(MESSAGE, onPong);\r\n\r\n            worker.postMessage({\r\n                cmd: WorkerCommand.SCENE_PING,\r\n                scene: prepScene(gltfBridge),\r\n                animations: gltfBridge.getData().animations\r\n            });\r\n\r\n        }\r\n    );\r\n\r\nconst startRenderCycle = ([worker, gltfBridge]:[Worker, GltfBridge]) => {\r\n    let readyForUpdate = true;\r\n    \r\n    worker.addEventListener(MESSAGE, (e:MessageEvent) => {\r\n        switch(e.data.cmd) {\r\n            case WorkerCommand.RENDER: {\r\n                gltfBridge.renderScene (e.data.scene);\r\n                readyForUpdate = true;\r\n                break;\r\n            }\r\n        }\r\n    });\r\n\r\n    const tick = (frameTs:number) => {\r\n        if(readyForUpdate) {\r\n            readyForUpdate = false;\r\n            worker.postMessage({\r\n                cmd: WorkerCommand.TICK, \r\n                frameTs\r\n            });\r\n        }\r\n\r\n        requestAnimationFrame(tick);\r\n    }\r\n\r\n    requestAnimationFrame(tick);\r\n}\r\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"f44f3665effb2b8298e2.worker.js\");\n};","'use strict';\n\n/**\n * Custom implementation of a double ended queue.\n */\nfunction Denque(array) {\n  this._head = 0;\n  this._tail = 0;\n  this._capacityMask = 0x3;\n  this._list = new Array(4);\n  if (Array.isArray(array)) {\n    this._fromArray(array);\n  }\n}\n\n/**\n * -------------\n *  PUBLIC API\n * -------------\n */\n\n/**\n * Returns the item at the specified index from the list.\n * 0 is the first element, 1 is the second, and so on...\n * Elements at negative values are that many from the end: -1 is one before the end\n * (the last element), -2 is two before the end (one before last), etc.\n * @param index\n * @returns {*}\n */\nDenque.prototype.peekAt = function peekAt(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var len = this.size();\n  if (i >= len || i < -len) return undefined;\n  if (i < 0) i += len;\n  i = (this._head + i) & this._capacityMask;\n  return this._list[i];\n};\n\n/**\n * Alias for peakAt()\n * @param i\n * @returns {*}\n */\nDenque.prototype.get = function get(i) {\n  return this.peekAt(i);\n};\n\n/**\n * Returns the first item in the list without removing it.\n * @returns {*}\n */\nDenque.prototype.peek = function peek() {\n  if (this._head === this._tail) return undefined;\n  return this._list[this._head];\n};\n\n/**\n * Alias for peek()\n * @returns {*}\n */\nDenque.prototype.peekFront = function peekFront() {\n  return this.peek();\n};\n\n/**\n * Returns the item that is at the back of the queue without removing it.\n * Uses peekAt(-1)\n */\nDenque.prototype.peekBack = function peekBack() {\n  return this.peekAt(-1);\n};\n\n/**\n * Returns the current length of the queue\n * @return {Number}\n */\nObject.defineProperty(Denque.prototype, 'length', {\n  get: function length() {\n    return this.size();\n  }\n});\n\n/**\n * Return the number of items on the list, or 0 if empty.\n * @returns {number}\n */\nDenque.prototype.size = function size() {\n  if (this._head === this._tail) return 0;\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Add an item at the beginning of the list.\n * @param item\n */\nDenque.prototype.unshift = function unshift(item) {\n  if (item === undefined) return this.size();\n  var len = this._list.length;\n  this._head = (this._head - 1 + len) & this._capacityMask;\n  this._list[this._head] = item;\n  if (this._tail === this._head) this._growArray();\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the first item on the list,\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.shift = function shift() {\n  var head = this._head;\n  if (head === this._tail) return undefined;\n  var item = this._list[head];\n  this._list[head] = undefined;\n  this._head = (head + 1) & this._capacityMask;\n  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Add an item to the bottom of the list.\n * @param item\n */\nDenque.prototype.push = function push(item) {\n  if (item === undefined) return this.size();\n  var tail = this._tail;\n  this._list[tail] = item;\n  this._tail = (tail + 1) & this._capacityMask;\n  if (this._tail === this._head) {\n    this._growArray();\n  }\n\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the last item on the list.\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.pop = function pop() {\n  var tail = this._tail;\n  if (tail === this._head) return undefined;\n  var len = this._list.length;\n  this._tail = (tail - 1 + len) & this._capacityMask;\n  var item = this._list[this._tail];\n  this._list[this._tail] = undefined;\n  if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Remove and return the item at the specified index from the list.\n * Returns undefined if the list is empty.\n * @param index\n * @returns {*}\n */\nDenque.prototype.removeOne = function removeOne(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size) return void 0;\n  if (i < 0) i += size;\n  i = (this._head + i) & this._capacityMask;\n  var item = this._list[i];\n  var k;\n  if (index < size / 2) {\n    for (k = index; k > 0; k--) {\n      this._list[i] = this._list[i = (i - 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._head = (this._head + 1 + len) & this._capacityMask;\n  } else {\n    for (k = size - 1 - index; k > 0; k--) {\n      this._list[i] = this._list[i = ( i + 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._tail = (this._tail - 1 + len) & this._capacityMask;\n  }\n  return item;\n};\n\n/**\n * Remove number of items from the specified index from the list.\n * Returns array of removed items.\n * Returns undefined if the list is empty.\n * @param index\n * @param count\n * @returns {array}\n */\nDenque.prototype.remove = function remove(index, count) {\n  var i = index;\n  var removed;\n  var del_count = count;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size || count < 1) return void 0;\n  if (i < 0) i += size;\n  if (count === 1 || !count) {\n    removed = new Array(1);\n    removed[0] = this.removeOne(i);\n    return removed;\n  }\n  if (i === 0 && i + count >= size) {\n    removed = this.toArray();\n    this.clear();\n    return removed;\n  }\n  if (i + count > size) count = size - i;\n  var k;\n  removed = new Array(count);\n  for (k = 0; k < count; k++) {\n    removed[k] = this._list[(this._head + i + k) & this._capacityMask];\n  }\n  i = (this._head + i) & this._capacityMask;\n  if (index + count === size) {\n    this._tail = (this._tail - count + len) & this._capacityMask;\n    for (k = count; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index === 0) {\n    this._head = (this._head + count + len) & this._capacityMask;\n    for (k = count - 1; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index < size / 2) {\n    this._head = (this._head + index + count + len) & this._capacityMask;\n    for (k = index; k > 0; k--) {\n      this.unshift(this._list[i = (i - 1 + len) & this._capacityMask]);\n    }\n    i = (this._head - 1 + len) & this._capacityMask;\n    while (del_count > 0) {\n      this._list[i = (i - 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n  } else {\n    this._tail = i;\n    i = (i + count + len) & this._capacityMask;\n    for (k = size - (count + index); k > 0; k--) {\n      this.push(this._list[i++]);\n    }\n    i = this._tail;\n    while (del_count > 0) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n  }\n  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();\n  return removed;\n};\n\n/**\n * Native splice implementation.\n * Remove number of items from the specified index from the list and/or add new elements.\n * Returns array of removed items or empty array if count == 0.\n * Returns undefined if the list is empty.\n *\n * @param index\n * @param count\n * @param {...*} [elements]\n * @returns {array}\n */\nDenque.prototype.splice = function splice(index, count) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var size = this.size();\n  if (i < 0) i += size;\n  if (i > size) return void 0;\n  if (arguments.length > 2) {\n    var k;\n    var temp;\n    var removed;\n    var arg_len = arguments.length;\n    var len = this._list.length;\n    var arguments_index = 2;\n    if (!size || i < size / 2) {\n      temp = new Array(i);\n      for (k = 0; k < i; k++) {\n        temp[k] = this._list[(this._head + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i > 0) {\n          this._head = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._head = (this._head + i + len) & this._capacityMask;\n      }\n      while (arg_len > arguments_index) {\n        this.unshift(arguments[--arg_len]);\n      }\n      for (k = i; k > 0; k--) {\n        this.unshift(temp[k - 1]);\n      }\n    } else {\n      temp = new Array(size - (i + count));\n      var leng = temp.length;\n      for (k = 0; k < leng; k++) {\n        temp[k] = this._list[(this._head + i + count + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i != size) {\n          this._tail = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._tail = (this._tail - leng + len) & this._capacityMask;\n      }\n      while (arguments_index < arg_len) {\n        this.push(arguments[arguments_index++]);\n      }\n      for (k = 0; k < leng; k++) {\n        this.push(temp[k]);\n      }\n    }\n    return removed;\n  } else {\n    return this.remove(i, count);\n  }\n};\n\n/**\n * Soft clear - does not reset capacity.\n */\nDenque.prototype.clear = function clear() {\n  this._head = 0;\n  this._tail = 0;\n};\n\n/**\n * Returns true or false whether the list is empty.\n * @returns {boolean}\n */\nDenque.prototype.isEmpty = function isEmpty() {\n  return this._head === this._tail;\n};\n\n/**\n * Returns an array of all queue items.\n * @returns {Array}\n */\nDenque.prototype.toArray = function toArray() {\n  return this._copyArray(false);\n};\n\n/**\n * -------------\n *   INTERNALS\n * -------------\n */\n\n/**\n * Fills the queue with items from an array\n * For use in the constructor\n * @param array\n * @private\n */\nDenque.prototype._fromArray = function _fromArray(array) {\n  for (var i = 0; i < array.length; i++) this.push(array[i]);\n};\n\n/**\n *\n * @param fullCopy\n * @returns {Array}\n * @private\n */\nDenque.prototype._copyArray = function _copyArray(fullCopy) {\n  var newArray = [];\n  var list = this._list;\n  var len = list.length;\n  var i;\n  if (fullCopy || this._head > this._tail) {\n    for (i = this._head; i < len; i++) newArray.push(list[i]);\n    for (i = 0; i < this._tail; i++) newArray.push(list[i]);\n  } else {\n    for (i = this._head; i < this._tail; i++) newArray.push(list[i]);\n  }\n  return newArray;\n};\n\n/**\n * Grows the internal list array.\n * @private\n */\nDenque.prototype._growArray = function _growArray() {\n  if (this._head) {\n    // copy existing data, head to end, then beginning to tail.\n    this._list = this._copyArray(true);\n    this._head = 0;\n  }\n\n  // head is at 0 and array is now full, safe to extend\n  this._tail = this._list.length;\n\n  this._list.length *= 2;\n  this._capacityMask = (this._capacityMask << 1) | 1;\n};\n\n/**\n * Shrinks the internal list array.\n * @private\n */\nDenque.prototype._shrinkArray = function _shrinkArray() {\n  this._list.length >>>= 1;\n  this._capacityMask >>>= 1;\n};\n\n\nmodule.exports = Denque;\n","//. # Concurrify\n//.\n//. [![Chat](https://badges.gitter.im/fluture-js/concurrify.svg)](https://gitter.im/fluture-js/fluture)\n//. [![NPM Version](https://badge.fury.io/js/concurrify.svg)](https://www.npmjs.com/package/concurrify)\n//. [![Dependencies](https://david-dm.org/fluture-js/concurrify.svg)](https://david-dm.org/fluture-js/concurrify)\n//. [![Build Status](https://travis-ci.org/fluture-js/concurrify.svg?branch=master)](https://travis-ci.org/fluture-js/concurrify)\n//. [![Code Coverage](https://codecov.io/gh/fluture-js/concurrify/branch/master/graph/badge.svg)](https://codecov.io/gh/fluture-js/concurrify)\n//.\n//. Turn non-concurrent [FantasyLand 3][FL3] Applicatives concurrent.\n//.\n//. Most time-dependent applicatives are very useful as Monads, because it\n//. gives them the ability to run sequentially, where each step depends on the\n//. previous. However, they lose the ability to run concurrently. This library\n//. allows one to wrap a [`Monad`][FL:Monad] (with sequential `ap`) in an\n//. [`Alternative`][FL:Alternative] (with parallel `ap`).\n//.\n//. ## Usage\n//.\n//. ```js\n//. // The concurrify function takes four arguments, explained below.\n//. const concurrify = require ('concurrify');\n//.\n//. // The Type Representative of the Applicative we want to transform.\n//. const Future = require ('fluture');\n//.\n//. // A \"zero\" instance and an \"alt\" function for \"Alternative\".\n//. const zero = Future (() => {});\n//. const alt = Future.race;\n//.\n//. // An override \"ap\" function that runs the Applicatives concurrently.\n//. const ap = (mx, mf) => (Future.both (mx, mf)).map (([x, f]) => f (x));\n//.\n//. // A new Type Representative created by concurrify.\n//. const ConcurrentFuture = concurrify (Future, zero, alt, ap);\n//.\n//. // We can use our type as such:\n//. const par = ConcurrentFuture (Future.of (1));\n//. const seq = par.sequential;\n//. seq.fork (console.error, console.log);\n//. ```\n//.\n//. ## Interoperability\n//.\n//. * Implements [FantasyLand 3][FL3] `Alternative`\n//.   (`of`, `zero`, `map`, `ap`, `alt`).\n//. * Instances can be identified by, and are compared using,\n//.   [Sanctuary Type Identifiers][STI].\n//. * Instances can be converted to String representations according to\n//.   [Sanctuary Show][SS].\n//.\n//. ## API\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore next */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f (\n      require ('sanctuary-show'),\n      require ('sanctuary-type-classes'),\n      require ('sanctuary-type-identifiers')\n    );\n  } else {\n    self.concurrify = f (\n      self.sanctuaryShow,\n      self.sanctuaryTypeClasses,\n      self.sanctuaryTypeIdentifiers\n    );\n  }\n\n} (function(show, Z, type) {\n\n  'use strict';\n\n  var $alt = 'fantasy-land/alt';\n  var $ap = 'fantasy-land/ap';\n  var $map = 'fantasy-land/map';\n  var $of = 'fantasy-land/of';\n  var $zero = 'fantasy-land/zero';\n  var $$type = '@@type';\n  var $$show = '@@show';\n  var ordinal = ['first', 'second', 'third', 'fourth', 'fifth'];\n\n  //       isFunction :: Any -> Boolean\n  function isFunction(f) {\n    return typeof f === 'function';\n  }\n\n  //       isBinary :: Function -> Boolean\n  function isBinary(f) {\n    return f.length >= 2;\n  }\n\n  //       isApplicativeRepr :: TypeRepr -> Boolean\n  function isApplicativeRepr(Repr) {\n    try {\n      return Z.Applicative.test (Z.of (Repr));\n    } catch (_) {\n      return false;\n    }\n  }\n\n  //       invalidArgument :: (String, Number, String, String) -> !Undefined\n  function invalidArgument(it, at, expected, actual) {\n    throw new TypeError (\n      it\n      + ' expects its '\n      + ordinal[at]\n      + ' argument to '\n      + expected\n      + '\\n  Actual: '\n      + show (actual)\n    );\n  }\n\n  //       invalidContext :: (String, String, String) -> !Undefined\n  function invalidContext(it, actual, an) {\n    throw new TypeError (\n      it\n      + ' was invoked outside the context of a '\n      + an\n      + '. \\n  Called on: '\n      + show (actual)\n    );\n  }\n\n  //       getTypeIdentifier :: TypeRepresentative -> String\n  function getTypeIdentifier(Repr) {\n    return Repr[$$type] || Repr.name || 'Anonymous';\n  }\n\n  //       generateTypeIdentifier :: String -> String\n  function generateTypeIdentifier(identifier) {\n    var o = type.parse (identifier);\n    return (\n      (o.namespace || 'concurrify') + '/Concurrent' + o.name + '@' + o.version\n    );\n  }\n\n  //# concurrify :: (Applicative f, Alternative (m f)) => (TypeRep f, f a, (f a, f a) -> f a, (f a, f (a -> b)) -> f b) -> f c -> m f c\n  return function concurrify(Repr, zero, alt, ap) {\n\n    var INNERTYPE = getTypeIdentifier (Repr);\n    var OUTERTYPE = generateTypeIdentifier (INNERTYPE);\n    var INNERNAME = (type.parse (INNERTYPE)).name;\n    var OUTERNAME = (type.parse (OUTERTYPE)).name;\n\n    function Concurrently(sequential) {\n      this.sequential = sequential;\n    }\n\n    function isInner(x) {\n      return (\n        (x instanceof Repr) ||\n        (Boolean (x) && x.constructor === Repr) ||\n        (type (x) === Repr[$$type])\n      );\n    }\n\n    function isOuter(x) {\n      return (\n        (x instanceof Concurrently) ||\n        (Boolean (x) && x.constructor === Concurrently) ||\n        (type (x) === OUTERTYPE)\n      );\n    }\n\n    function construct(x) {\n      if (!isInner (x)) {\n        invalidArgument (OUTERNAME, 0, 'be of type \"' + INNERNAME + '\"', x);\n      }\n      return new Concurrently (x);\n    }\n\n    if (!isApplicativeRepr (Repr)) {\n      invalidArgument ('concurrify', 0, 'represent an Applicative', Repr);\n    }\n\n    if (!isInner (zero)) {\n      invalidArgument\n        ('concurrify', 1, 'be of type \"' + INNERNAME + '\"', zero);\n    }\n\n    if (!isFunction (alt)) {\n      invalidArgument ('concurrify', 2, 'be a function', alt);\n    }\n\n    if (!isBinary (alt)) {\n      invalidArgument ('concurrify', 2, 'be binary', alt);\n    }\n\n    if (!isFunction (ap)) {\n      invalidArgument ('concurrify', 3, 'be a function', ap);\n    }\n\n    if (!isBinary (ap)) {\n      invalidArgument ('concurrify', 3, 'be binary', ap);\n    }\n\n    var proto =\n    Concurrently.prototype =\n    construct.prototype = {constructor: construct};\n\n    construct[$$type] = OUTERTYPE;\n\n    var mzero = new Concurrently (zero);\n\n    construct[$zero] = function Concurrently$zero() {\n      return mzero;\n    };\n\n    construct[$of] = function Concurrently$of(value) {\n      return new Concurrently (Z.of (Repr, value));\n    };\n\n    proto[$map] = function Concurrently$map(mapper) {\n      if (!isOuter (this)) {\n        invalidContext (OUTERNAME + '#map', this, OUTERNAME);\n      }\n\n      if (!isFunction (mapper)) {\n        invalidArgument (OUTERNAME + '#map', 0, 'be a function', mapper);\n      }\n\n      return new Concurrently (Z.map (mapper, this.sequential));\n    };\n\n    proto[$ap] = function Concurrently$ap(m) {\n      if (!isOuter (this)) {\n        invalidContext (OUTERNAME + '#ap', this, OUTERNAME);\n      }\n\n      if (!isOuter (m)) {\n        invalidArgument (OUTERNAME + '#ap', 0, 'be a ' + OUTERNAME, m);\n      }\n\n      return new Concurrently (ap (this.sequential, m.sequential));\n    };\n\n    proto[$alt] = function Concurrently$alt(m) {\n      if (!isOuter (this)) {\n        invalidContext (OUTERNAME + '#alt', this, OUTERNAME);\n      }\n\n      if (!isOuter (m)) {\n        invalidArgument (OUTERNAME + '#alt', 0, 'be a ' + OUTERNAME, m);\n      }\n\n      return new Concurrently (alt (this.sequential, m.sequential));\n    };\n\n    proto[$$show] = function Concurrently$show() {\n      return OUTERNAME + '(' + show (this.sequential) + ')';\n    };\n\n    proto.toString = function Concurrently$toString() {\n      if (!isOuter (this)) {\n        invalidContext (OUTERNAME + '#toString', this, OUTERNAME);\n      }\n      return this[$$show] ();\n    };\n\n    return construct;\n\n  };\n\n}));\n\n//. [FL3]: https://github.com/fantasyland/fantasy-land/\n//. [FL:Monad]: https://github.com/fantasyland/fantasy-land/#monad\n//. [FL:Alternative]: https://github.com/fantasyland/fantasy-land/#alternative\n//. [STI]: https://github.com/sanctuary-js/sanctuary-type-identifiers\n//. [SS]: https://github.com/sanctuary-js/sanctuary-show\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","export * from \"./flags/Flags\";\r\nexport * from \"./worker/Worker-Loader\";\r\nexport * from \"./datatypes/Maybe\";\r\n","\r\nexport const getCompileFlags = () => {\r\n    const buildMode = process.env['NODE_ENV'];\r\n    const buildVersion =  process.env['BUILD_VERSION'];\r\n    const isProduction = buildMode === \"production\" ? true : false;\r\n\r\n    return {buildMode, buildVersion, isProduction}\r\n}\r\n","import {Future} from \"fluture\";\r\nimport {WorkerLoaderCommand, MESSAGE} from \"types/Worker-Types\";\r\n\r\n\r\n/*\r\n * these loaders resolve _after_ communication is established\r\n */\r\n//Loaded by main thread \r\nexport const loadWorker = (worker:any) => Future<any, Worker>((reject, resolve) => {\r\n    const onInitial = (e: MessageEvent) => {\r\n        if(e.data.cmd === WorkerLoaderCommand.READY) {\r\n            worker.removeEventListener(MESSAGE, onInitial);\r\n            resolve(worker);\r\n        }\r\n    }\r\n    worker.addEventListener(MESSAGE, onInitial);\r\n\r\n    worker.postMessage({ cmd: WorkerLoaderCommand.INIT});\r\n});\r\n\r\n//Loaded by worker thread\r\nexport const initWorker = () => Future<any, any>((reject, resolve) => {\r\n\r\n    const onInitial = (e: MessageEvent) => {\r\n\r\n        if(e.data.cmd === WorkerLoaderCommand.INIT) {\r\n            (self as any).removeEventListener(MESSAGE, onInitial);\r\n            (self as any).postMessage({cmd: WorkerLoaderCommand.READY});\r\n            resolve(self);\r\n        }\r\n    }\r\n    (self as any).addEventListener(MESSAGE, onInitial);\r\n});\r\n\r\n","export interface Maybe <A>{\r\n    value0?:A; \r\n}\r\n\r\n\r\nexport const maybe = <A>(nothingFn: () => any) => (justFn:(value:A) => any) => (m:Maybe<A>):any => \r\n    m.value0 === undefined\r\n        ?   nothingFn()\r\n        :   justFn(m.value0);\r\n\r\n\r\nexport const getMaybeValue = maybe (() => undefined) (value => value);\r\n","import {State, Tick} from \"types/State\";\r\nimport {maybe} from \"utils/Utils\";\r\nimport {\r\n    createWebGlRenderer,\r\n    PerspectiveCameraSettings,\r\n    CameraKind,\r\n    getCameraProjection,\r\n    createMat4\r\n} from \"pure3d\";\r\n\r\nexport const createRenderer = () => {\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.style.position = \"absolute\";\r\n    canvas.style.top = \"0px\";\r\n    canvas.style.left = \"0px\";\r\n    canvas.style.width = \"100%\";\r\n    canvas.style.height = \"100%\";\r\n    canvas.style.backgroundColor = \"#2a2a2a\";\r\n\r\n    document.getElementById(\"app\").appendChild(canvas);\r\n\r\n    const renderer = createWebGlRenderer({\r\n        canvas,\r\n        version: 1\r\n    });\r\n    renderer.gl.clearColor(0.2, 0.2, 0.2, 1.0);\r\n\r\n    renderer.resize({ width: window.innerWidth, height: window.innerHeight });\r\n\r\n    return renderer;\r\n}\r\n\r\n","import {GltfBridge, GltfLightNode, NodeKind, LightKind, createTransform} from \"pure3d\";\nimport {createCamera} from \"../camera/Camera\";\n\nexport const prepScene = (gltfBridge:GltfBridge) => {\n    let scene = gltfBridge.getOriginalScene(createCamera()) (0)\n    const light:GltfLightNode & {name: string} = {\n        name: \"MyLight\",\n        kind: NodeKind.LIGHT,\n        light: {\n            kind: LightKind.Point,\n            color: [1,1,1],\n            intensity: 100 \n        },\n        transform: createTransform (null) ({\n            translation: [-5,5,3]\n        }) \n    }\n\n    scene.nodes.push(light);\n\n    return scene;\n}\n","import {\r\n    Camera,\r\n    createWebGlRenderer,\r\n    PerspectiveCameraSettings,\r\n    CameraKind,\r\n    getCameraProjection,\r\n    createMat4\r\n} from \"pure3d\";\r\n\r\nimport {mat4} from \"gl-matrix\";\r\n\r\nexport const createCamera = ():Camera => {\r\n    const settings:PerspectiveCameraSettings = {\r\n        kind: CameraKind.PERSPECTIVE,\r\n        yfov: 45.0 * Math.PI / 180,\r\n        aspectRatio: window.innerWidth / window.innerHeight,\r\n        znear: .01,\r\n        zfar: 1000\r\n    }\r\n\r\n    const position = Float64Array.from([0,0,5]);\r\n    const cameraLook = Float64Array.from([0,0,0]);\r\n    const cameraUp = Float64Array.from([0,1,0]);\r\n   \r\n    const projection = getCameraProjection(settings); \r\n\r\n    const view = mat4.lookAt(createMat4() as any, position as any, cameraLook as any,cameraUp as any);\r\n\r\n    return {\r\n        settings,\r\n        position,\r\n        view,\r\n        projection\r\n    }\r\n}\r\n\r\n"],"sourceRoot":""}